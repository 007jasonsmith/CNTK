=== Running mpiexec -n 3 /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/../cntk.config currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data RunDir=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu DataDir=/home/alrezni/src/cntk/Tests/Speech/Data ConfigDir=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/.. DeviceId=0 numCPUThreads=4 stderr=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (2) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 2 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 1 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 0 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [mpihelper]: all 3 nodes responded
ping [mpihelper]: all 3 nodes responded
Redirecting stderr to file /tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr_speechTrain.logrank0
Redirecting stderr to file /tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr_speechTrain.logrank1
Redirecting stderr to file /tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr_speechTrain.logrank2
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: Build info: 
MPI Rank 0: 
MPI Rank 0: 		Built time: Dec 15 2015 16:32:52
MPI Rank 0: 		Last modified date: Tue Dec 15 16:31:42 2015
MPI Rank 0: 		Build type: release
MPI Rank 0: 		Math lib: acml
MPI Rank 0: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 0: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 		Build Branch: master
MPI Rank 0: 		Build SHA1: 5e0017ac9c55c23d53cb524c8acb7d6d9bfd0269
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: running on localhost at 2015/12/15 16:53:53
MPI Rank 0: command line: 
MPI Rank 0: /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/../cntk.config currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data RunDir=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu DataDir=/home/alrezni/src/cntk/Tests/Speech/Data ConfigDir=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/.. DeviceId=0 numCPUThreads=4 stderr=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr 
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu
MPI Rank 0: DataDir=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 0: ConfigDir=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/..
MPI Rank 0: DeviceId=0
MPI Rank 0: numCPUThreads=4
MPI Rank 0: stderr=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = 0
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/alrezni/src/cntk/Tests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu
MPI Rank 0: DataDir=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 0: ConfigDir=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/..
MPI Rank 0: DeviceId=0
MPI Rank 0: numCPUThreads=4
MPI Rank 0: stderr=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.config:command=speechTrain
MPI Rank 0: configparameters: cntk.config:ConfigDir=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/..
MPI Rank 0: configparameters: cntk.config:currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 0: configparameters: cntk.config:DataDir=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 0: configparameters: cntk.config:deviceId=0
MPI Rank 0: configparameters: cntk.config:numCPUThreads=4
MPI Rank 0: configparameters: cntk.config:parallelTrain=true
MPI Rank 0: configparameters: cntk.config:precision=float
MPI Rank 0: configparameters: cntk.config:RunDir=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu
MPI Rank 0: configparameters: cntk.config:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/alrezni/src/cntk/Tests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.config:stderr=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: command: speechTrain 
MPI Rank 0: precision = float
MPI Rank 0: Using 4 CPU threads
MPI Rank 0: CNTKModelPath: /tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/models/cntkSpeech.dnn
MPI Rank 0: CNTKCommandTrainInfo: speechTrain : 3
MPI Rank 0: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3
MPI Rank 0: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: SimpleNetworkBuilder Using GPU 0
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/alrezni/src/cntk/Tests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 7 roots:
MPI Rank 0: 	InvStdOfFeatures = InvStdDev
MPI Rank 0: 	MeanOfFeatures = Mean
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 	Prior = Mean
MPI Rank 0: 	ScaledLogLikelihood = Minus
MPI Rank 0: 	PosteriorProb = Softmax
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132, MBSize 0]
MPI Rank 0: 
MPI Rank 0: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132, MBSize 0]
MPI Rank 0: 
MPI Rank 0: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: SGD using GPU 0.
MPI Rank 0: 
MPI Rank 0: Training criterion node(s):
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: Evaluation criterion node(s):
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 	NodeName: InvStdOfFeatures
MPI Rank 0: 	NodeName: MeanOfFeatures
MPI Rank 0: 	NodeName: Prior
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 0: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[   1-  10, 3.12%]: SamplesSeen = 640; TrainLossPerSample =  4.57883196; EvalErr[0]PerSample = 0.91406250; TotalTime = 0.4030s; SamplesPerSecond = 1587.9
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.24617226; EvalErr[0]PerSample = 0.89687500; TotalTime = 0.3910s; SamplesPerSecond = 1636.9
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  4.05467218; EvalErr[0]PerSample = 0.89843750; TotalTime = 0.3890s; SamplesPerSecond = 1645.3
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.83653681; EvalErr[0]PerSample = 0.87031250; TotalTime = 0.3922s; SamplesPerSecond = 1631.8
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.62%]: SamplesSeen = 640; TrainLossPerSample =  3.71162339; EvalErr[0]PerSample = 0.87500000; TotalTime = 0.3907s; SamplesPerSecond = 1638.0
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.50715400; EvalErr[0]PerSample = 0.83906250; TotalTime = 0.3925s; SamplesPerSecond = 1630.4
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.60511287; EvalErr[0]PerSample = 0.82187500; TotalTime = 0.3930s; SamplesPerSecond = 1628.6
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.34198970; EvalErr[0]PerSample = 0.77500000; TotalTime = 0.3923s; SamplesPerSecond = 1631.4
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.12%]: SamplesSeen = 640; TrainLossPerSample =  3.50149673; EvalErr[0]PerSample = 0.82656250; TotalTime = 0.3925s; SamplesPerSecond = 1630.4
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.45998679; EvalErr[0]PerSample = 0.82343750; TotalTime = 0.3908s; SamplesPerSecond = 1637.5
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.39170556; EvalErr[0]PerSample = 0.82187500; TotalTime = 0.3907s; SamplesPerSecond = 1638.1
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.23712357; EvalErr[0]PerSample = 0.80937500; TotalTime = 0.3916s; SamplesPerSecond = 1634.4
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.62%]: SamplesSeen = 640; TrainLossPerSample =  3.21521190; EvalErr[0]PerSample = 0.80156250; TotalTime = 0.3925s; SamplesPerSecond = 1630.4
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.10167796; EvalErr[0]PerSample = 0.77187500; TotalTime = 0.3913s; SamplesPerSecond = 1635.7
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.02088236; EvalErr[0]PerSample = 0.72968750; TotalTime = 0.3926s; SamplesPerSecond = 1630.1
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  3.00323257; EvalErr[0]PerSample = 0.72343750; TotalTime = 0.3925s; SamplesPerSecond = 1630.5
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.12%]: SamplesSeen = 640; TrainLossPerSample =  2.85174128; EvalErr[0]PerSample = 0.69218750; TotalTime = 0.3913s; SamplesPerSecond = 1635.4
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.81376325; EvalErr[0]PerSample = 0.68750000; TotalTime = 0.3909s; SamplesPerSecond = 1637.3
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.79283932; EvalErr[0]PerSample = 0.70468750; TotalTime = 0.3914s; SamplesPerSecond = 1635.1
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.69383534; EvalErr[0]PerSample = 0.66718750; TotalTime = 0.3942s; SamplesPerSecond = 1623.4
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.62%]: SamplesSeen = 640; TrainLossPerSample =  2.68026306; EvalErr[0]PerSample = 0.66562500; TotalTime = 0.3930s; SamplesPerSecond = 1628.5
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.51866932; EvalErr[0]PerSample = 0.62812500; TotalTime = 0.3907s; SamplesPerSecond = 1638.3
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.46584811; EvalErr[0]PerSample = 0.67031250; TotalTime = 0.3910s; SamplesPerSecond = 1637.0
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.32813045; EvalErr[0]PerSample = 0.60781250; TotalTime = 0.3915s; SamplesPerSecond = 1634.8
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.12%]: SamplesSeen = 640; TrainLossPerSample =  2.31087733; EvalErr[0]PerSample = 0.61093750; TotalTime = 0.3922s; SamplesPerSecond = 1632.0
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.41295898; EvalErr[0]PerSample = 0.63750000; TotalTime = 0.3928s; SamplesPerSecond = 1629.2
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.54532745; EvalErr[0]PerSample = 0.66562500; TotalTime = 0.3914s; SamplesPerSecond = 1635.0
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.35638274; EvalErr[0]PerSample = 0.64218750; TotalTime = 0.3919s; SamplesPerSecond = 1633.2
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.62%]: SamplesSeen = 640; TrainLossPerSample =  2.19711338; EvalErr[0]PerSample = 0.56250000; TotalTime = 0.3918s; SamplesPerSecond = 1633.6
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.27370710; EvalErr[0]PerSample = 0.59687500; TotalTime = 0.3937s; SamplesPerSecond = 1625.5
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.21436989; EvalErr[0]PerSample = 0.61406250; TotalTime = 0.3932s; SamplesPerSecond = 1627.7
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.19766786; EvalErr[0]PerSample = 0.58437500; TotalTime = 0.3937s; SamplesPerSecond = 1625.5
MPI Rank 0: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 3.0145908; EvalErrPerSample = 0.73237305; AvgLearningRatePerSample = 0.015625; EpochTime=12.5827
MPI Rank 0: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[   1-  10, 12.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.06978107; EvalErr[0]PerSample = 0.57382813; TotalTime = 0.5393s; SamplesPerSecond = 4746.6
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.06690956; EvalErr[0]PerSample = 0.56445312; TotalTime = 0.5370s; SamplesPerSecond = 4767.2
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.00655531; EvalErr[0]PerSample = 0.54609375; TotalTime = 0.5407s; SamplesPerSecond = 4734.8
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.98024290; EvalErr[0]PerSample = 0.53242188; TotalTime = 0.5387s; SamplesPerSecond = 4752.1
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.94628715; EvalErr[0]PerSample = 0.53828125; TotalTime = 0.5351s; SamplesPerSecond = 4784.4
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.92740037; EvalErr[0]PerSample = 0.53945312; TotalTime = 0.5308s; SamplesPerSecond = 4823.3
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.91814803; EvalErr[0]PerSample = 0.53515625; TotalTime = 0.5349s; SamplesPerSecond = 4786.2
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.92855138; EvalErr[0]PerSample = 0.54140625; TotalTime = 0.5353s; SamplesPerSecond = 4781.9
MPI Rank 0: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 1.9804845; EvalErrPerSample = 0.54638672; AvgLearningRatePerSample = 0.001953125; EpochTime=4.32005
MPI Rank 0: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.91202359; EvalErr[0]PerSample = 0.52734375; TotalTime = 0.7098s; SamplesPerSecond = 14427.0
MPI Rank 0:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.91116636; EvalErr[0]PerSample = 0.52255859; TotalTime = 0.7000s; SamplesPerSecond = 14628.0
MPI Rank 0: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.911595; EvalErrPerSample = 0.52495117; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.43927
MPI Rank 0: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: COMPLETED
MPI Rank 0: ~MPIWrapper
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: Build info: 
MPI Rank 1: 
MPI Rank 1: 		Built time: Dec 15 2015 16:32:52
MPI Rank 1: 		Last modified date: Tue Dec 15 16:31:42 2015
MPI Rank 1: 		Build type: release
MPI Rank 1: 		Math lib: acml
MPI Rank 1: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 1: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 		Build Branch: master
MPI Rank 1: 		Build SHA1: 5e0017ac9c55c23d53cb524c8acb7d6d9bfd0269
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: running on localhost at 2015/12/15 16:53:53
MPI Rank 1: command line: 
MPI Rank 1: /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/../cntk.config currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data RunDir=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu DataDir=/home/alrezni/src/cntk/Tests/Speech/Data ConfigDir=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/.. DeviceId=0 numCPUThreads=4 stderr=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr 
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu
MPI Rank 1: DataDir=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 1: ConfigDir=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/..
MPI Rank 1: DeviceId=0
MPI Rank 1: numCPUThreads=4
MPI Rank 1: stderr=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = 0
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/alrezni/src/cntk/Tests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu
MPI Rank 1: DataDir=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 1: ConfigDir=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/..
MPI Rank 1: DeviceId=0
MPI Rank 1: numCPUThreads=4
MPI Rank 1: stderr=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.config:command=speechTrain
MPI Rank 1: configparameters: cntk.config:ConfigDir=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/..
MPI Rank 1: configparameters: cntk.config:currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 1: configparameters: cntk.config:DataDir=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 1: configparameters: cntk.config:deviceId=0
MPI Rank 1: configparameters: cntk.config:numCPUThreads=4
MPI Rank 1: configparameters: cntk.config:parallelTrain=true
MPI Rank 1: configparameters: cntk.config:precision=float
MPI Rank 1: configparameters: cntk.config:RunDir=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu
MPI Rank 1: configparameters: cntk.config:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/alrezni/src/cntk/Tests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.config:stderr=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: command: speechTrain 
MPI Rank 1: precision = float
MPI Rank 1: Using 4 CPU threads
MPI Rank 1: CNTKModelPath: /tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/models/cntkSpeech.dnn
MPI Rank 1: CNTKCommandTrainInfo: speechTrain : 3
MPI Rank 1: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3
MPI Rank 1: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: SimpleNetworkBuilder Using GPU 0
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/alrezni/src/cntk/Tests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 7 roots:
MPI Rank 1: 	MeanOfFeatures = Mean
MPI Rank 1: 	InvStdOfFeatures = InvStdDev
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 	Prior = Mean
MPI Rank 1: 	ScaledLogLikelihood = Minus
MPI Rank 1: 	PosteriorProb = Softmax
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node Prior, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132, MBSize 0]
MPI Rank 1: 
MPI Rank 1: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132, MBSize 0]
MPI Rank 1: 
MPI Rank 1: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: SGD using GPU 0.
MPI Rank 1: 
MPI Rank 1: Training criterion node(s):
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: Evaluation criterion node(s):
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 	NodeName: InvStdOfFeatures
MPI Rank 1: 	NodeName: MeanOfFeatures
MPI Rank 1: 	NodeName: Prior
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 1: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[   1-  10, 3.12%]: SamplesSeen = 640; TrainLossPerSample =  4.57883196; EvalErr[0]PerSample = 0.91406250; TotalTime = 0.4027s; SamplesPerSecond = 1589.2
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.24617226; EvalErr[0]PerSample = 0.89687500; TotalTime = 0.3910s; SamplesPerSecond = 1636.9
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  4.05467218; EvalErr[0]PerSample = 0.89843750; TotalTime = 0.3873s; SamplesPerSecond = 1652.4
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.83653681; EvalErr[0]PerSample = 0.87031250; TotalTime = 0.3938s; SamplesPerSecond = 1625.0
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.62%]: SamplesSeen = 640; TrainLossPerSample =  3.71162339; EvalErr[0]PerSample = 0.87500000; TotalTime = 0.3913s; SamplesPerSecond = 1635.7
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.50715400; EvalErr[0]PerSample = 0.83906250; TotalTime = 0.3920s; SamplesPerSecond = 1632.7
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.60511287; EvalErr[0]PerSample = 0.82187500; TotalTime = 0.3935s; SamplesPerSecond = 1626.3
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.34198970; EvalErr[0]PerSample = 0.77500000; TotalTime = 0.3923s; SamplesPerSecond = 1631.4
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.12%]: SamplesSeen = 640; TrainLossPerSample =  3.50149673; EvalErr[0]PerSample = 0.82656250; TotalTime = 0.3920s; SamplesPerSecond = 1632.7
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.45998679; EvalErr[0]PerSample = 0.82343750; TotalTime = 0.3892s; SamplesPerSecond = 1644.5
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.39170556; EvalErr[0]PerSample = 0.82187500; TotalTime = 0.3907s; SamplesPerSecond = 1638.2
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.23712357; EvalErr[0]PerSample = 0.80937500; TotalTime = 0.3932s; SamplesPerSecond = 1627.6
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.62%]: SamplesSeen = 640; TrainLossPerSample =  3.21521190; EvalErr[0]PerSample = 0.80156250; TotalTime = 0.3909s; SamplesPerSecond = 1637.3
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.10167796; EvalErr[0]PerSample = 0.77187500; TotalTime = 0.3935s; SamplesPerSecond = 1626.6
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.02088236; EvalErr[0]PerSample = 0.72968750; TotalTime = 0.3926s; SamplesPerSecond = 1630.1
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  3.00323257; EvalErr[0]PerSample = 0.72343750; TotalTime = 0.3920s; SamplesPerSecond = 1632.8
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.12%]: SamplesSeen = 640; TrainLossPerSample =  2.85174128; EvalErr[0]PerSample = 0.69218750; TotalTime = 0.3913s; SamplesPerSecond = 1635.4
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.81376325; EvalErr[0]PerSample = 0.68750000; TotalTime = 0.3914s; SamplesPerSecond = 1635.0
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.79283932; EvalErr[0]PerSample = 0.70468750; TotalTime = 0.3914s; SamplesPerSecond = 1635.1
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.69383534; EvalErr[0]PerSample = 0.66718750; TotalTime = 0.3942s; SamplesPerSecond = 1623.4
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.62%]: SamplesSeen = 640; TrainLossPerSample =  2.68026306; EvalErr[0]PerSample = 0.66562500; TotalTime = 0.3924s; SamplesPerSecond = 1631.0
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.51866932; EvalErr[0]PerSample = 0.62812500; TotalTime = 0.3907s; SamplesPerSecond = 1638.1
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.46584811; EvalErr[0]PerSample = 0.67031250; TotalTime = 0.3910s; SamplesPerSecond = 1637.0
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.32813045; EvalErr[0]PerSample = 0.60781250; TotalTime = 0.3915s; SamplesPerSecond = 1634.8
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.12%]: SamplesSeen = 640; TrainLossPerSample =  2.31087733; EvalErr[0]PerSample = 0.61093750; TotalTime = 0.3922s; SamplesPerSecond = 1632.0
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.41295898; EvalErr[0]PerSample = 0.63750000; TotalTime = 0.3928s; SamplesPerSecond = 1629.2
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.54532745; EvalErr[0]PerSample = 0.66562500; TotalTime = 0.3914s; SamplesPerSecond = 1635.0
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.35638274; EvalErr[0]PerSample = 0.64218750; TotalTime = 0.3924s; SamplesPerSecond = 1630.9
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.62%]: SamplesSeen = 640; TrainLossPerSample =  2.19711338; EvalErr[0]PerSample = 0.56250000; TotalTime = 0.3918s; SamplesPerSecond = 1633.6
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.27370710; EvalErr[0]PerSample = 0.59687500; TotalTime = 0.3937s; SamplesPerSecond = 1625.5
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.21436989; EvalErr[0]PerSample = 0.61406250; TotalTime = 0.3932s; SamplesPerSecond = 1627.7
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.19766786; EvalErr[0]PerSample = 0.58437500; TotalTime = 0.3937s; SamplesPerSecond = 1625.5
MPI Rank 1: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 3.0145908; EvalErrPerSample = 0.73237305; AvgLearningRatePerSample = 0.015625; EpochTime=12.583
MPI Rank 1: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[   1-  10, 12.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.06978107; EvalErr[0]PerSample = 0.57382813; TotalTime = 0.5370s; SamplesPerSecond = 4767.2
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.06690956; EvalErr[0]PerSample = 0.56445312; TotalTime = 0.5386s; SamplesPerSecond = 4752.8
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.00655531; EvalErr[0]PerSample = 0.54609375; TotalTime = 0.5390s; SamplesPerSecond = 4749.3
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.98024290; EvalErr[0]PerSample = 0.53242188; TotalTime = 0.5403s; SamplesPerSecond = 4737.9
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.94628715; EvalErr[0]PerSample = 0.53828125; TotalTime = 0.5351s; SamplesPerSecond = 4784.5
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.92740037; EvalErr[0]PerSample = 0.53945312; TotalTime = 0.5291s; SamplesPerSecond = 4838.3
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.91814803; EvalErr[0]PerSample = 0.53515625; TotalTime = 0.5365s; SamplesPerSecond = 4771.7
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.92855138; EvalErr[0]PerSample = 0.54140625; TotalTime = 0.5353s; SamplesPerSecond = 4782.0
MPI Rank 1: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 1.9804845; EvalErrPerSample = 0.54638672; AvgLearningRatePerSample = 0.001953125; EpochTime=4.31977
MPI Rank 1: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.91202359; EvalErr[0]PerSample = 0.52734375; TotalTime = 0.7105s; SamplesPerSecond = 14411.8
MPI Rank 1:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.91116636; EvalErr[0]PerSample = 0.52255859; TotalTime = 0.7000s; SamplesPerSecond = 14628.3
MPI Rank 1: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.911595; EvalErrPerSample = 0.52495117; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.43955
MPI Rank 1: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: COMPLETED
MPI Rank 1: ~MPIWrapper
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: Build info: 
MPI Rank 2: 
MPI Rank 2: 		Built time: Dec 15 2015 16:32:52
MPI Rank 2: 		Last modified date: Tue Dec 15 16:31:42 2015
MPI Rank 2: 		Build type: release
MPI Rank 2: 		Math lib: acml
MPI Rank 2: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 2: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 2: 		Build Branch: master
MPI Rank 2: 		Build SHA1: 5e0017ac9c55c23d53cb524c8acb7d6d9bfd0269
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: running on localhost at 2015/12/15 16:53:54
MPI Rank 2: command line: 
MPI Rank 2: /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/../cntk.config currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data RunDir=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu DataDir=/home/alrezni/src/cntk/Tests/Speech/Data ConfigDir=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/.. DeviceId=0 numCPUThreads=4 stderr=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr 
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = $DeviceId$
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = $DeviceId$
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu
MPI Rank 2: DataDir=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 2: ConfigDir=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/..
MPI Rank 2: DeviceId=0
MPI Rank 2: numCPUThreads=4
MPI Rank 2: stderr=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = 0
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = 0
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "/home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "/home/alrezni/src/cntk/Tests/Speech/Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu
MPI Rank 2: DataDir=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 2: ConfigDir=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/..
MPI Rank 2: DeviceId=0
MPI Rank 2: numCPUThreads=4
MPI Rank 2: stderr=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: configparameters: cntk.config:command=speechTrain
MPI Rank 2: configparameters: cntk.config:ConfigDir=/home/alrezni/src/cntk/Tests/Speech/DNN/ParallelNoQuantization/..
MPI Rank 2: configparameters: cntk.config:currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 2: configparameters: cntk.config:DataDir=/home/alrezni/src/cntk/Tests/Speech/Data
MPI Rank 2: configparameters: cntk.config:deviceId=0
MPI Rank 2: configparameters: cntk.config:numCPUThreads=4
MPI Rank 2: configparameters: cntk.config:parallelTrain=true
MPI Rank 2: configparameters: cntk.config:precision=float
MPI Rank 2: configparameters: cntk.config:RunDir=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu
MPI Rank 2: configparameters: cntk.config:speechTrain=[
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = 0
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "/home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "/home/alrezni/src/cntk/Tests/Speech/Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: 
MPI Rank 2: configparameters: cntk.config:stderr=/tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/stderr
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: command: speechTrain 
MPI Rank 2: precision = float
MPI Rank 2: Using 4 CPU threads
MPI Rank 2: CNTKModelPath: /tmp/cntk-test-20151215163714.581330/Speech/DNN_ParallelNoQuantization@release_gpu/models/cntkSpeech.dnn
MPI Rank 2: CNTKCommandTrainInfo: speechTrain : 3
MPI Rank 2: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3
MPI Rank 2: CNTKCommandTrainBegin: speechTrain
MPI Rank 2: SimpleNetworkBuilder Using GPU 0
MPI Rank 2: reading script file glob_0000.scp ... 948 entries
MPI Rank 2: total 132 state names in state list /home/alrezni/src/cntk/Tests/Speech/Data/state.list
MPI Rank 2: htkmlfreader: reading MLF file /home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 2: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 2: label set 0: 129 classes
MPI Rank 2: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 2: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
MPI Rank 2: 
MPI Rank 2: Post-processing network...
MPI Rank 2: 
MPI Rank 2: 7 roots:
MPI Rank 2: 	InvStdOfFeatures = InvStdDev
MPI Rank 2: 	MeanOfFeatures = Mean
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 	Prior = Mean
MPI Rank 2: 	ScaledLogLikelihood = Minus
MPI Rank 2: 	PosteriorProb = Softmax
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node Prior, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132, MBSize 0]
MPI Rank 2: 
MPI Rank 2: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132, MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132, MBSize 0]
MPI Rank 2: 
MPI Rank 2: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: Post-processing network complete.
MPI Rank 2: 
MPI Rank 2: SGD using GPU 0.
MPI Rank 2: 
MPI Rank 2: Training criterion node(s):
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 
MPI Rank 2: Evaluation criterion node(s):
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Allocating matrices for forward and/or backward propagation.
MPI Rank 2: 
MPI Rank 2: Precomputing --> 3 PreCompute nodes found.
MPI Rank 2: 
MPI Rank 2: 	NodeName: InvStdOfFeatures
MPI Rank 2: 	NodeName: MeanOfFeatures
MPI Rank 2: 	NodeName: Prior
MPI Rank 2: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 2: 
MPI Rank 2: Precomputing --> Completed.
MPI Rank 2: 
MPI Rank 2: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 2: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 2: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[   1-  10, 3.12%]: SamplesSeen = 640; TrainLossPerSample =  4.57883196; EvalErr[0]PerSample = 0.91406250; TotalTime = 0.4001s; SamplesPerSecond = 1599.5
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.24617226; EvalErr[0]PerSample = 0.89687500; TotalTime = 0.3919s; SamplesPerSecond = 1632.9
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  4.05467218; EvalErr[0]PerSample = 0.89843750; TotalTime = 0.3914s; SamplesPerSecond = 1635.0
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.83653681; EvalErr[0]PerSample = 0.87031250; TotalTime = 0.3897s; SamplesPerSecond = 1642.2
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.62%]: SamplesSeen = 640; TrainLossPerSample =  3.71162339; EvalErr[0]PerSample = 0.87500000; TotalTime = 0.3926s; SamplesPerSecond = 1630.1
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.50715400; EvalErr[0]PerSample = 0.83906250; TotalTime = 0.3906s; SamplesPerSecond = 1638.5
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.60511287; EvalErr[0]PerSample = 0.82187500; TotalTime = 0.3949s; SamplesPerSecond = 1620.7
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.34198970; EvalErr[0]PerSample = 0.77500000; TotalTime = 0.3923s; SamplesPerSecond = 1631.5
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.12%]: SamplesSeen = 640; TrainLossPerSample =  3.50149673; EvalErr[0]PerSample = 0.82656250; TotalTime = 0.3906s; SamplesPerSecond = 1638.5
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.45998679; EvalErr[0]PerSample = 0.82343750; TotalTime = 0.3933s; SamplesPerSecond = 1627.3
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.39170556; EvalErr[0]PerSample = 0.82187500; TotalTime = 0.3907s; SamplesPerSecond = 1638.1
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.23712357; EvalErr[0]PerSample = 0.80937500; TotalTime = 0.3891s; SamplesPerSecond = 1644.8
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.62%]: SamplesSeen = 640; TrainLossPerSample =  3.21521190; EvalErr[0]PerSample = 0.80156250; TotalTime = 0.3950s; SamplesPerSecond = 1620.2
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.10167796; EvalErr[0]PerSample = 0.77187500; TotalTime = 0.3907s; SamplesPerSecond = 1638.0
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.02088236; EvalErr[0]PerSample = 0.72968750; TotalTime = 0.3926s; SamplesPerSecond = 1630.2
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  3.00323257; EvalErr[0]PerSample = 0.72343750; TotalTime = 0.3906s; SamplesPerSecond = 1638.7
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.12%]: SamplesSeen = 640; TrainLossPerSample =  2.85174128; EvalErr[0]PerSample = 0.69218750; TotalTime = 0.3913s; SamplesPerSecond = 1635.5
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.81376325; EvalErr[0]PerSample = 0.68750000; TotalTime = 0.3928s; SamplesPerSecond = 1629.3
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.79283932; EvalErr[0]PerSample = 0.70468750; TotalTime = 0.3914s; SamplesPerSecond = 1635.2
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.69383534; EvalErr[0]PerSample = 0.66718750; TotalTime = 0.3942s; SamplesPerSecond = 1623.5
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.62%]: SamplesSeen = 640; TrainLossPerSample =  2.68026306; EvalErr[0]PerSample = 0.66562500; TotalTime = 0.3910s; SamplesPerSecond = 1636.8
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.51866932; EvalErr[0]PerSample = 0.62812500; TotalTime = 0.3907s; SamplesPerSecond = 1638.2
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.46584811; EvalErr[0]PerSample = 0.67031250; TotalTime = 0.3909s; SamplesPerSecond = 1637.1
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.32813045; EvalErr[0]PerSample = 0.60781250; TotalTime = 0.3915s; SamplesPerSecond = 1634.8
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.12%]: SamplesSeen = 640; TrainLossPerSample =  2.31087733; EvalErr[0]PerSample = 0.61093750; TotalTime = 0.3921s; SamplesPerSecond = 1632.1
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.41295898; EvalErr[0]PerSample = 0.63750000; TotalTime = 0.3928s; SamplesPerSecond = 1629.3
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.54532745; EvalErr[0]PerSample = 0.66562500; TotalTime = 0.3914s; SamplesPerSecond = 1635.1
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.35638274; EvalErr[0]PerSample = 0.64218750; TotalTime = 0.3938s; SamplesPerSecond = 1625.1
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.62%]: SamplesSeen = 640; TrainLossPerSample =  2.19711338; EvalErr[0]PerSample = 0.56250000; TotalTime = 0.3917s; SamplesPerSecond = 1633.8
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.27370710; EvalErr[0]PerSample = 0.59687500; TotalTime = 0.3937s; SamplesPerSecond = 1625.6
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.21436989; EvalErr[0]PerSample = 0.61406250; TotalTime = 0.3932s; SamplesPerSecond = 1627.8
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.19766786; EvalErr[0]PerSample = 0.58437500; TotalTime = 0.3937s; SamplesPerSecond = 1625.6
MPI Rank 2: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 3.0145908; EvalErrPerSample = 0.73237305; AvgLearningRatePerSample = 0.015625; EpochTime=12.5824
MPI Rank 2: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 2: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[   1-  10, 12.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.06978107; EvalErr[0]PerSample = 0.57382813; TotalTime = 0.5394s; SamplesPerSecond = 4746.4
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.06690956; EvalErr[0]PerSample = 0.56445312; TotalTime = 0.5345s; SamplesPerSecond = 4789.3
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.00655531; EvalErr[0]PerSample = 0.54609375; TotalTime = 0.5431s; SamplesPerSecond = 4713.3
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.98024290; EvalErr[0]PerSample = 0.53242188; TotalTime = 0.5362s; SamplesPerSecond = 4774.1
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.94628715; EvalErr[0]PerSample = 0.53828125; TotalTime = 0.5350s; SamplesPerSecond = 4784.6
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.92740037; EvalErr[0]PerSample = 0.53945312; TotalTime = 0.5329s; SamplesPerSecond = 4803.7
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.91814803; EvalErr[0]PerSample = 0.53515625; TotalTime = 0.5314s; SamplesPerSecond = 4817.2
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.92855138; EvalErr[0]PerSample = 0.54140625; TotalTime = 0.5363s; SamplesPerSecond = 4773.7
MPI Rank 2: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 1.9804845; EvalErrPerSample = 0.54638672; AvgLearningRatePerSample = 0.001953125; EpochTime=4.31784
MPI Rank 2: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 2: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.91202359; EvalErr[0]PerSample = 0.52734375; TotalTime = 0.7100s; SamplesPerSecond = 14421.9
MPI Rank 2:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.91116636; EvalErr[0]PerSample = 0.52255859; TotalTime = 0.7000s; SamplesPerSecond = 14628.3
MPI Rank 2: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.911595; EvalErrPerSample = 0.52495117; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.439
MPI Rank 2: CNTKCommandTrainEnd: speechTrain
MPI Rank 2: COMPLETED
MPI Rank 2: ~MPIWrapper