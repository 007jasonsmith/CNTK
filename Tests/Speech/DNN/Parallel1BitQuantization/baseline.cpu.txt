=== Running mpiexec -n 3 /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/Speech/DNN/Parallel1BitQuantization/../cntk.config RunDir=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data DeviceId=-1 stderr=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 1 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 0 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (2) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 2 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
Redirecting stderr to file /tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr_speechTrain.logrank0
CNTKModelPath: /tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
Redirecting stderr to file /tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr_speechTrain.logrank1
CNTKModelPath: /tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
Redirecting stderr to file /tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr_speechTrain.logrank2
CNTKModelPath: /tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
MPI Rank 0: running on localhost at 2015/10/02 14:15:22
MPI Rank 0: command line options: 
MPI Rank 0: configFile=/home/mluser/src/cplx_master/Tests/Speech/DNN/Parallel1BitQuantization/../cntk.config RunDir=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data DeviceId=-1 stderr=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] 
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision=float
MPI Rank 0: command=speechTrain
MPI Rank 0: deviceId=$DeviceId$
MPI Rank 0: parallelTrain=true
MPI Rank 0: speechTrain=[
MPI Rank 0:     action=train
MPI Rank 0:     modelPath=$RunDir$/models/cntkSpeech.dnn
MPI Rank 0:     deviceId=$DeviceId$
MPI Rank 0:     traceLevel=1
MPI Rank 0:     SimpleNetworkBuilder=[
MPI Rank 0:         layerSizes=363:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes=Sigmoid
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         applyMeanVarNorm=true
MPI Rank 0:         uniformInit=true
MPI Rank 0:         needPrior=true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 0:         layerSizes=363:512:512:132
MPI Rank 0:         trainingCriterion='CE'
MPI Rank 0:         evalCriterion='Err'
MPI Rank 0:         applyMeanVarNorm=true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD=[
MPI Rank 0:         epochSize=20480
MPI Rank 0:         minibatchSize=64:256:1024
MPI Rank 0:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult=10
MPI Rank 0:         momentumPerMB=0.9:0.656119
MPI Rank 0:         dropoutRate=0.0
MPI Rank 0:         maxEpochs=3
MPI Rank 0:         keepCheckPointFiles=true
MPI Rank 0:         ParallelTrain=[
MPI Rank 0:             parallelizationMethod=DataParallelSGD
MPI Rank 0:             distributedMBReading=true
MPI Rank 0:             DataParallelSGD=[
MPI Rank 0:               gradientBits=32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust=[
MPI Rank 0:             reduceLearnRateIfImproveLessThan=0
MPI Rank 0:             loadBestModel=true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 0:             learnRateDecreaseFactor=0.5
MPI Rank 0:             learnRateIncreaseFactor=1.382
MPI Rank 0:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 0:         ]
MPI Rank 0:         clippingThresholdPerSample=1#INF
MPI Rank 0:     ]
MPI Rank 0:     reader=[
MPI Rank 0:       readerType=HTKMLFReader
MPI Rank 0:       readMethod=blockRandomize
MPI Rank 0:       miniBatchMode=Partial
MPI Rank 0:       randomize=Auto
MPI Rank 0:       verbosity=0
MPI Rank 0:       features=[
MPI Rank 0:           dim=363
MPI Rank 0:           type=Real
MPI Rank 0:           scpFile=glob_0000.scp
MPI Rank 0:       ]
MPI Rank 0:       labels=[
MPI Rank 0:           mlfFile=$DataDir$/glob_0000.mlf
MPI Rank 0:           labelMappingFile=$DataDir$/state.list
MPI Rank 0:           labelDim=132
MPI Rank 0:           labelType=Category
MPI Rank 0:       ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: RunDir=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 0: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: DeviceId=-1
MPI Rank 0: stderr=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision=float
MPI Rank 0: command=speechTrain
MPI Rank 0: deviceId=-1
MPI Rank 0: parallelTrain=true
MPI Rank 0: speechTrain=[
MPI Rank 0:     action=train
MPI Rank 0:     modelPath=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
MPI Rank 0:     deviceId=-1
MPI Rank 0:     traceLevel=1
MPI Rank 0:     SimpleNetworkBuilder=[
MPI Rank 0:         layerSizes=363:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes=Sigmoid
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         applyMeanVarNorm=true
MPI Rank 0:         uniformInit=true
MPI Rank 0:         needPrior=true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 0:         layerSizes=363:512:512:132
MPI Rank 0:         trainingCriterion='CE'
MPI Rank 0:         evalCriterion='Err'
MPI Rank 0:         applyMeanVarNorm=true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD=[
MPI Rank 0:         epochSize=20480
MPI Rank 0:         minibatchSize=64:256:1024
MPI Rank 0:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult=10
MPI Rank 0:         momentumPerMB=0.9:0.656119
MPI Rank 0:         dropoutRate=0.0
MPI Rank 0:         maxEpochs=3
MPI Rank 0:         keepCheckPointFiles=true
MPI Rank 0:         ParallelTrain=[
MPI Rank 0:             parallelizationMethod=DataParallelSGD
MPI Rank 0:             distributedMBReading=true
MPI Rank 0:             DataParallelSGD=[
MPI Rank 0:               gradientBits=32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust=[
MPI Rank 0:             reduceLearnRateIfImproveLessThan=0
MPI Rank 0:             loadBestModel=true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 0:             learnRateDecreaseFactor=0.5
MPI Rank 0:             learnRateIncreaseFactor=1.382
MPI Rank 0:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 0:         ]
MPI Rank 0:         clippingThresholdPerSample=1#INF
MPI Rank 0:     ]
MPI Rank 0:     reader=[
MPI Rank 0:       readerType=HTKMLFReader
MPI Rank 0:       readMethod=blockRandomize
MPI Rank 0:       miniBatchMode=Partial
MPI Rank 0:       randomize=Auto
MPI Rank 0:       verbosity=0
MPI Rank 0:       features=[
MPI Rank 0:           dim=363
MPI Rank 0:           type=Real
MPI Rank 0:           scpFile=glob_0000.scp
MPI Rank 0:       ]
MPI Rank 0:       labels=[
MPI Rank 0:           mlfFile=/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf
MPI Rank 0:           labelMappingFile=/home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 0:           labelDim=132
MPI Rank 0:           labelType=Category
MPI Rank 0:       ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: RunDir=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 0: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: DeviceId=-1
MPI Rank 0: stderr=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.config:command=speechTrain
MPI Rank 0: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: configparameters: cntk.config:deviceId=-1
MPI Rank 0: configparameters: cntk.config:parallelTrain=true
MPI Rank 0: configparameters: cntk.config:precision=float
MPI Rank 0: configparameters: cntk.config:RunDir=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 0: configparameters: cntk.config:speechTrain=[
MPI Rank 0:     action=train
MPI Rank 0:     modelPath=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
MPI Rank 0:     deviceId=-1
MPI Rank 0:     traceLevel=1
MPI Rank 0:     SimpleNetworkBuilder=[
MPI Rank 0:         layerSizes=363:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes=Sigmoid
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         applyMeanVarNorm=true
MPI Rank 0:         uniformInit=true
MPI Rank 0:         needPrior=true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 0:         layerSizes=363:512:512:132
MPI Rank 0:         trainingCriterion='CE'
MPI Rank 0:         evalCriterion='Err'
MPI Rank 0:         applyMeanVarNorm=true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD=[
MPI Rank 0:         epochSize=20480
MPI Rank 0:         minibatchSize=64:256:1024
MPI Rank 0:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult=10
MPI Rank 0:         momentumPerMB=0.9:0.656119
MPI Rank 0:         dropoutRate=0.0
MPI Rank 0:         maxEpochs=3
MPI Rank 0:         keepCheckPointFiles=true
MPI Rank 0:         ParallelTrain=[
MPI Rank 0:             parallelizationMethod=DataParallelSGD
MPI Rank 0:             distributedMBReading=true
MPI Rank 0:             DataParallelSGD=[
MPI Rank 0:               gradientBits=32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust=[
MPI Rank 0:             reduceLearnRateIfImproveLessThan=0
MPI Rank 0:             loadBestModel=true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 0:             learnRateDecreaseFactor=0.5
MPI Rank 0:             learnRateIncreaseFactor=1.382
MPI Rank 0:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 0:         ]
MPI Rank 0:         clippingThresholdPerSample=1#INF
MPI Rank 0:     ]
MPI Rank 0:     reader=[
MPI Rank 0:       readerType=HTKMLFReader
MPI Rank 0:       readMethod=blockRandomize
MPI Rank 0:       miniBatchMode=Partial
MPI Rank 0:       randomize=Auto
MPI Rank 0:       verbosity=0
MPI Rank 0:       features=[
MPI Rank 0:           dim=363
MPI Rank 0:           type=Real
MPI Rank 0:           scpFile=glob_0000.scp
MPI Rank 0:       ]
MPI Rank 0:       labels=[
MPI Rank 0:           mlfFile=/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf
MPI Rank 0:           labelMappingFile=/home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 0:           labelDim=132
MPI Rank 0:           labelType=Category
MPI Rank 0:       ]
MPI Rank 0:     ]
MPI Rank 0: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.config:stderr=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: command: speechTrain 
MPI Rank 0: precision = float
MPI Rank 0: CNTKCommandTrainInfo: speechTrain : 3
MPI Rank 0: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3
MPI Rank 0: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: SimpleNetworkBuilder Using CPU
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: trainlayer: OOV-exclusion code enabled, but no unigram specified to derive the word set from, so you won't get OOV exclusion
MPI Rank 0: total 132 state names in state list /home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: GetTrainCriterionNodes  ...
MPI Rank 0: GetEvalCriterionNodes  ...
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating node CrossEntropyWithSoftmax 
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: Found 6 PreCompute nodes
MPI Rank 0: 	NodeName: InvStdOfFeatures
MPI Rank 0: 	NodeName: MeanOfFeatures
MPI Rank 0: 	NodeName: Prior
MPI Rank 0: 	NodeName: InvStdOfFeatures
MPI Rank 0: 	NodeName: MeanOfFeatures
MPI Rank 0: 	NodeName: Prior
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating node InvStdOfFeatures 
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 64]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating node MeanOfFeatures 
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 64]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating node Prior 
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 64]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 64]) -> [132, 1]
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 0: Starting Epoch 1: learning rate per sample = 0.015625  momentum = 0.900000 
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating node EvalErrorPrediction 
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 64]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 64]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 64]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 64], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 64]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 64]) -> [512, MBSize 64]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 64], B0[512, 1]) -> [512, MBSize 64]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 64], B1[512, 1]) -> [512, MBSize 64]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 64]) -> [132, MBSize 64]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 64], B2[132, 1]) -> [132, MBSize 64]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 64], HLast[132, MBSize 64]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[   1-  10 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.39182053; EvalErr[0]PerSample = 0.89843750; TotalTime = 1.96079s; TotalTimePerSample = 3.06373ms; SamplesPerSecond = 326
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  11-  20 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.16675262; EvalErr[0]PerSample = 0.87187500; TotalTime = 2.07536s; TotalTimePerSample = 3.24275ms; SamplesPerSecond = 308
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  21-  30 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.98683777; EvalErr[0]PerSample = 0.87812500; TotalTime = 2.03230s; TotalTimePerSample = 3.17547ms; SamplesPerSecond = 314
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  31-  40 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.86594620; EvalErr[0]PerSample = 0.87812500; TotalTime = 1.99229s; TotalTimePerSample = 3.11295ms; SamplesPerSecond = 321
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  41-  50 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.81006165; EvalErr[0]PerSample = 0.88593750; TotalTime = 2.08513s; TotalTimePerSample = 3.25802ms; SamplesPerSecond = 306
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  51-  60 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.73426819; EvalErr[0]PerSample = 0.87656250; TotalTime = 2.01124s; TotalTimePerSample = 3.14257ms; SamplesPerSecond = 318
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  61-  70 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.57473907; EvalErr[0]PerSample = 0.81875000; TotalTime = 2.03460s; TotalTimePerSample = 3.17907ms; SamplesPerSecond = 314
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  71-  80 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.43590698; EvalErr[0]PerSample = 0.80781250; TotalTime = 1.99553s; TotalTimePerSample = 3.11801ms; SamplesPerSecond = 320
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  81-  90 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.36040344; EvalErr[0]PerSample = 0.77343750; TotalTime = 1.94389s; TotalTimePerSample = 3.03733ms; SamplesPerSecond = 329
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  91- 100 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.39382324; EvalErr[0]PerSample = 0.85156250; TotalTime = 2.03700s; TotalTimePerSample = 3.18281ms; SamplesPerSecond = 314
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 101- 110 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.25076599; EvalErr[0]PerSample = 0.76406250; TotalTime = 2.00941s; TotalTimePerSample = 3.13971ms; SamplesPerSecond = 318
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 111- 120 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.35322266; EvalErr[0]PerSample = 0.79375000; TotalTime = 2.15404s; TotalTimePerSample = 3.36569ms; SamplesPerSecond = 297
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 121- 130 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.19603882; EvalErr[0]PerSample = 0.76875000; TotalTime = 2.04832s; TotalTimePerSample = 3.20050ms; SamplesPerSecond = 312
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 131- 140 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.06107178; EvalErr[0]PerSample = 0.73125000; TotalTime = 2.02430s; TotalTimePerSample = 3.16298ms; SamplesPerSecond = 316
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 141- 150 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.05115356; EvalErr[0]PerSample = 0.75625000; TotalTime = 2.03056s; TotalTimePerSample = 3.17274ms; SamplesPerSecond = 315
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 151- 160 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.02470093; EvalErr[0]PerSample = 0.74062500; TotalTime = 2.02172s; TotalTimePerSample = 3.15894ms; SamplesPerSecond = 316
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 161- 170 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.89898682; EvalErr[0]PerSample = 0.70781250; TotalTime = 2.07680s; TotalTimePerSample = 3.24500ms; SamplesPerSecond = 308
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 171- 180 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.75169067; EvalErr[0]PerSample = 0.68125000; TotalTime = 2.04456s; TotalTimePerSample = 3.19462ms; SamplesPerSecond = 313
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 181- 190 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.83965454; EvalErr[0]PerSample = 0.71875000; TotalTime = 2.05195s; TotalTimePerSample = 3.20617ms; SamplesPerSecond = 311
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 191- 200 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.62866821; EvalErr[0]PerSample = 0.65468750; TotalTime = 2.03060s; TotalTimePerSample = 3.17280ms; SamplesPerSecond = 315
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 201- 210 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.66651001; EvalErr[0]PerSample = 0.67187500; TotalTime = 2.00287s; TotalTimePerSample = 3.12949ms; SamplesPerSecond = 319
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 211- 220 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.61323853; EvalErr[0]PerSample = 0.65937500; TotalTime = 2.05727s; TotalTimePerSample = 3.21449ms; SamplesPerSecond = 311
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 221- 230 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.53096313; EvalErr[0]PerSample = 0.63750000; TotalTime = 2.07310s; TotalTimePerSample = 3.23922ms; SamplesPerSecond = 308
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 231- 240 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.43744507; EvalErr[0]PerSample = 0.64375000; TotalTime = 2.03364s; TotalTimePerSample = 3.17756ms; SamplesPerSecond = 314
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 241- 250 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.41102905; EvalErr[0]PerSample = 0.65312500; TotalTime = 1.88874s; TotalTimePerSample = 2.95116ms; SamplesPerSecond = 338
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 251- 260 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.48895264; EvalErr[0]PerSample = 0.63750000; TotalTime = 2.08028s; TotalTimePerSample = 3.25044ms; SamplesPerSecond = 307
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 261- 270 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.34961548; EvalErr[0]PerSample = 0.61093750; TotalTime = 2.02784s; TotalTimePerSample = 3.16850ms; SamplesPerSecond = 315
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 271- 280 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.23703613; EvalErr[0]PerSample = 0.57812500; TotalTime = 2.02597s; TotalTimePerSample = 3.16557ms; SamplesPerSecond = 315
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 281- 290 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.33130493; EvalErr[0]PerSample = 0.62031250; TotalTime = 2.01594s; TotalTimePerSample = 3.14991ms; SamplesPerSecond = 317
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 291- 300 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.21603394; EvalErr[0]PerSample = 0.62812500; TotalTime = 2.00156s; TotalTimePerSample = 3.12744ms; SamplesPerSecond = 319
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 301- 310 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.29106445; EvalErr[0]PerSample = 0.60625000; TotalTime = 2.05379s; TotalTimePerSample = 3.20905ms; SamplesPerSecond = 311
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 311- 320 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.20531006; EvalErr[0]PerSample = 0.57500000; TotalTime = 1.50019s; TotalTimePerSample = 2.34404ms; SamplesPerSecond = 426
MPI Rank 0: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 3.0173442; EvalErrPerSample = 0.73061526; Ave LearnRatePerSample = 0.015625; EpochTime=64.425213
MPI Rank 0: Starting Epoch 2: learning rate per sample = 0.001953  momentum = 0.656119 
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), Distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[   1-  10 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.08625576; EvalErr[0]PerSample = 0.56445312; TotalTime = 2.74893s; TotalTimePerSample = 1.07380ms; SamplesPerSecond = 931
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  11-  20 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.06731161; EvalErr[0]PerSample = 0.57265625; TotalTime = 2.72001s; TotalTimePerSample = 1.06250ms; SamplesPerSecond = 941
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  21-  30 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.04849757; EvalErr[0]PerSample = 0.56328125; TotalTime = 2.69761s; TotalTimePerSample = 1.05375ms; SamplesPerSecond = 948
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  31-  40 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.02695675; EvalErr[0]PerSample = 0.56953125; TotalTime = 2.68598s; TotalTimePerSample = 1.04921ms; SamplesPerSecond = 953
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  41-  50 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.00975057; EvalErr[0]PerSample = 0.56054688; TotalTime = 2.63012s; TotalTimePerSample = 1.02739ms; SamplesPerSecond = 973
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  51-  60 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.09342974; EvalErr[0]PerSample = 0.55859375; TotalTime = 2.77104s; TotalTimePerSample = 1.08244ms; SamplesPerSecond = 923
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  61-  70 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.05137550; EvalErr[0]PerSample = 0.56601563; TotalTime = 2.67028s; TotalTimePerSample = 1.04308ms; SamplesPerSecond = 958
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  71-  80 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.15056076; EvalErr[0]PerSample = 0.57968750; TotalTime = 2.63450s; TotalTimePerSample = 1.02910ms; SamplesPerSecond = 971
MPI Rank 0: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 2.0667673; EvalErrPerSample = 0.5668457; Ave LearnRatePerSample = 0.001953125; EpochTime=21.561102
MPI Rank 0: Starting Epoch 3: learning rate per sample = 0.000098  momentum = 0.656119 
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), Distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 3 of 3]-Minibatch[   1-  10 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.98470948; EvalErr[0]PerSample = 0.54238281; TotalTime = 3.51733s; TotalTimePerSample = 0.34349ms; SamplesPerSecond = 2911
MPI Rank 0:  Epoch[ 3 of 3]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.95456514; EvalErr[0]PerSample = 0.53603516; TotalTime = 3.55425s; TotalTimePerSample = 0.34709ms; SamplesPerSecond = 2881
MPI Rank 0: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.9696373; EvalErrPerSample = 0.53920898; Ave LearnRatePerSample = 9.765625146e-05; EpochTime=7.08347
MPI Rank 0: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: COMPLETED
MPI Rank 0: ~MPIWrapper
MPI Rank 1: running on localhost at 2015/10/02 14:15:22
MPI Rank 1: command line options: 
MPI Rank 1: configFile=/home/mluser/src/cplx_master/Tests/Speech/DNN/Parallel1BitQuantization/../cntk.config RunDir=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data DeviceId=-1 stderr=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] 
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision=float
MPI Rank 1: command=speechTrain
MPI Rank 1: deviceId=$DeviceId$
MPI Rank 1: parallelTrain=true
MPI Rank 1: speechTrain=[
MPI Rank 1:     action=train
MPI Rank 1:     modelPath=$RunDir$/models/cntkSpeech.dnn
MPI Rank 1:     deviceId=$DeviceId$
MPI Rank 1:     traceLevel=1
MPI Rank 1:     SimpleNetworkBuilder=[
MPI Rank 1:         layerSizes=363:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes=Sigmoid
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         applyMeanVarNorm=true
MPI Rank 1:         uniformInit=true
MPI Rank 1:         needPrior=true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 1:         layerSizes=363:512:512:132
MPI Rank 1:         trainingCriterion='CE'
MPI Rank 1:         evalCriterion='Err'
MPI Rank 1:         applyMeanVarNorm=true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD=[
MPI Rank 1:         epochSize=20480
MPI Rank 1:         minibatchSize=64:256:1024
MPI Rank 1:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult=10
MPI Rank 1:         momentumPerMB=0.9:0.656119
MPI Rank 1:         dropoutRate=0.0
MPI Rank 1:         maxEpochs=3
MPI Rank 1:         keepCheckPointFiles=true
MPI Rank 1:         ParallelTrain=[
MPI Rank 1:             parallelizationMethod=DataParallelSGD
MPI Rank 1:             distributedMBReading=true
MPI Rank 1:             DataParallelSGD=[
MPI Rank 1:               gradientBits=32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust=[
MPI Rank 1:             reduceLearnRateIfImproveLessThan=0
MPI Rank 1:             loadBestModel=true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 1:             learnRateDecreaseFactor=0.5
MPI Rank 1:             learnRateIncreaseFactor=1.382
MPI Rank 1:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 1:         ]
MPI Rank 1:         clippingThresholdPerSample=1#INF
MPI Rank 1:     ]
MPI Rank 1:     reader=[
MPI Rank 1:       readerType=HTKMLFReader
MPI Rank 1:       readMethod=blockRandomize
MPI Rank 1:       miniBatchMode=Partial
MPI Rank 1:       randomize=Auto
MPI Rank 1:       verbosity=0
MPI Rank 1:       features=[
MPI Rank 1:           dim=363
MPI Rank 1:           type=Real
MPI Rank 1:           scpFile=glob_0000.scp
MPI Rank 1:       ]
MPI Rank 1:       labels=[
MPI Rank 1:           mlfFile=$DataDir$/glob_0000.mlf
MPI Rank 1:           labelMappingFile=$DataDir$/state.list
MPI Rank 1:           labelDim=132
MPI Rank 1:           labelType=Category
MPI Rank 1:       ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: RunDir=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 1: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: DeviceId=-1
MPI Rank 1: stderr=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision=float
MPI Rank 1: command=speechTrain
MPI Rank 1: deviceId=-1
MPI Rank 1: parallelTrain=true
MPI Rank 1: speechTrain=[
MPI Rank 1:     action=train
MPI Rank 1:     modelPath=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
MPI Rank 1:     deviceId=-1
MPI Rank 1:     traceLevel=1
MPI Rank 1:     SimpleNetworkBuilder=[
MPI Rank 1:         layerSizes=363:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes=Sigmoid
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         applyMeanVarNorm=true
MPI Rank 1:         uniformInit=true
MPI Rank 1:         needPrior=true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 1:         layerSizes=363:512:512:132
MPI Rank 1:         trainingCriterion='CE'
MPI Rank 1:         evalCriterion='Err'
MPI Rank 1:         applyMeanVarNorm=true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD=[
MPI Rank 1:         epochSize=20480
MPI Rank 1:         minibatchSize=64:256:1024
MPI Rank 1:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult=10
MPI Rank 1:         momentumPerMB=0.9:0.656119
MPI Rank 1:         dropoutRate=0.0
MPI Rank 1:         maxEpochs=3
MPI Rank 1:         keepCheckPointFiles=true
MPI Rank 1:         ParallelTrain=[
MPI Rank 1:             parallelizationMethod=DataParallelSGD
MPI Rank 1:             distributedMBReading=true
MPI Rank 1:             DataParallelSGD=[
MPI Rank 1:               gradientBits=32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust=[
MPI Rank 1:             reduceLearnRateIfImproveLessThan=0
MPI Rank 1:             loadBestModel=true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 1:             learnRateDecreaseFactor=0.5
MPI Rank 1:             learnRateIncreaseFactor=1.382
MPI Rank 1:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 1:         ]
MPI Rank 1:         clippingThresholdPerSample=1#INF
MPI Rank 1:     ]
MPI Rank 1:     reader=[
MPI Rank 1:       readerType=HTKMLFReader
MPI Rank 1:       readMethod=blockRandomize
MPI Rank 1:       miniBatchMode=Partial
MPI Rank 1:       randomize=Auto
MPI Rank 1:       verbosity=0
MPI Rank 1:       features=[
MPI Rank 1:           dim=363
MPI Rank 1:           type=Real
MPI Rank 1:           scpFile=glob_0000.scp
MPI Rank 1:       ]
MPI Rank 1:       labels=[
MPI Rank 1:           mlfFile=/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf
MPI Rank 1:           labelMappingFile=/home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 1:           labelDim=132
MPI Rank 1:           labelType=Category
MPI Rank 1:       ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: RunDir=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 1: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: DeviceId=-1
MPI Rank 1: stderr=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.config:command=speechTrain
MPI Rank 1: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: configparameters: cntk.config:deviceId=-1
MPI Rank 1: configparameters: cntk.config:parallelTrain=true
MPI Rank 1: configparameters: cntk.config:precision=float
MPI Rank 1: configparameters: cntk.config:RunDir=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 1: configparameters: cntk.config:speechTrain=[
MPI Rank 1:     action=train
MPI Rank 1:     modelPath=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
MPI Rank 1:     deviceId=-1
MPI Rank 1:     traceLevel=1
MPI Rank 1:     SimpleNetworkBuilder=[
MPI Rank 1:         layerSizes=363:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes=Sigmoid
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         applyMeanVarNorm=true
MPI Rank 1:         uniformInit=true
MPI Rank 1:         needPrior=true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 1:         layerSizes=363:512:512:132
MPI Rank 1:         trainingCriterion='CE'
MPI Rank 1:         evalCriterion='Err'
MPI Rank 1:         applyMeanVarNorm=true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD=[
MPI Rank 1:         epochSize=20480
MPI Rank 1:         minibatchSize=64:256:1024
MPI Rank 1:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult=10
MPI Rank 1:         momentumPerMB=0.9:0.656119
MPI Rank 1:         dropoutRate=0.0
MPI Rank 1:         maxEpochs=3
MPI Rank 1:         keepCheckPointFiles=true
MPI Rank 1:         ParallelTrain=[
MPI Rank 1:             parallelizationMethod=DataParallelSGD
MPI Rank 1:             distributedMBReading=true
MPI Rank 1:             DataParallelSGD=[
MPI Rank 1:               gradientBits=32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust=[
MPI Rank 1:             reduceLearnRateIfImproveLessThan=0
MPI Rank 1:             loadBestModel=true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 1:             learnRateDecreaseFactor=0.5
MPI Rank 1:             learnRateIncreaseFactor=1.382
MPI Rank 1:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 1:         ]
MPI Rank 1:         clippingThresholdPerSample=1#INF
MPI Rank 1:     ]
MPI Rank 1:     reader=[
MPI Rank 1:       readerType=HTKMLFReader
MPI Rank 1:       readMethod=blockRandomize
MPI Rank 1:       miniBatchMode=Partial
MPI Rank 1:       randomize=Auto
MPI Rank 1:       verbosity=0
MPI Rank 1:       features=[
MPI Rank 1:           dim=363
MPI Rank 1:           type=Real
MPI Rank 1:           scpFile=glob_0000.scp
MPI Rank 1:       ]
MPI Rank 1:       labels=[
MPI Rank 1:           mlfFile=/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf
MPI Rank 1:           labelMappingFile=/home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 1:           labelDim=132
MPI Rank 1:           labelType=Category
MPI Rank 1:       ]
MPI Rank 1:     ]
MPI Rank 1: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.config:stderr=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: command: speechTrain 
MPI Rank 1: precision = float
MPI Rank 1: CNTKCommandTrainInfo: speechTrain : 3
MPI Rank 1: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3
MPI Rank 1: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: SimpleNetworkBuilder Using CPU
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: trainlayer: OOV-exclusion code enabled, but no unigram specified to derive the word set from, so you won't get OOV exclusion
MPI Rank 1: total 132 state names in state list /home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: GetTrainCriterionNodes  ...
MPI Rank 1: GetEvalCriterionNodes  ...
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating node CrossEntropyWithSoftmax 
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: Found 6 PreCompute nodes
MPI Rank 1: 	NodeName: InvStdOfFeatures
MPI Rank 1: 	NodeName: MeanOfFeatures
MPI Rank 1: 	NodeName: Prior
MPI Rank 1: 	NodeName: InvStdOfFeatures
MPI Rank 1: 	NodeName: MeanOfFeatures
MPI Rank 1: 	NodeName: Prior
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating node InvStdOfFeatures 
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 64]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating node MeanOfFeatures 
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 64]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating node Prior 
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 64]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 64]) -> [132, 1]
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 1: Starting Epoch 1: learning rate per sample = 0.015625  momentum = 0.900000 
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating node EvalErrorPrediction 
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 64]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 64]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 64]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 64], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 64]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 64]) -> [512, MBSize 64]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 64], B0[512, 1]) -> [512, MBSize 64]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 64], B1[512, 1]) -> [512, MBSize 64]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 64]) -> [132, MBSize 64]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 64], B2[132, 1]) -> [132, MBSize 64]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 64], HLast[132, MBSize 64]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[   1-  10 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.39182053; EvalErr[0]PerSample = 0.89843750; TotalTime = 1.99128s; TotalTimePerSample = 3.11138ms; SamplesPerSecond = 321
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  11-  20 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.16675262; EvalErr[0]PerSample = 0.87187500; TotalTime = 1.95666s; TotalTimePerSample = 3.05729ms; SamplesPerSecond = 327
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  21-  30 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.98683777; EvalErr[0]PerSample = 0.87812500; TotalTime = 1.96891s; TotalTimePerSample = 3.07642ms; SamplesPerSecond = 325
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  31-  40 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.86594620; EvalErr[0]PerSample = 0.87812500; TotalTime = 2.01381s; TotalTimePerSample = 3.14658ms; SamplesPerSecond = 317
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  41-  50 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.81006165; EvalErr[0]PerSample = 0.88593750; TotalTime = 1.97892s; TotalTimePerSample = 3.09207ms; SamplesPerSecond = 323
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  51-  60 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.73426819; EvalErr[0]PerSample = 0.87656250; TotalTime = 1.97720s; TotalTimePerSample = 3.08937ms; SamplesPerSecond = 323
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  61-  70 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.57473907; EvalErr[0]PerSample = 0.81875000; TotalTime = 1.96084s; TotalTimePerSample = 3.06382ms; SamplesPerSecond = 326
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  71-  80 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.43590698; EvalErr[0]PerSample = 0.80781250; TotalTime = 2.00897s; TotalTimePerSample = 3.13902ms; SamplesPerSecond = 318
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  81-  90 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.36040344; EvalErr[0]PerSample = 0.77343750; TotalTime = 2.02723s; TotalTimePerSample = 3.16755ms; SamplesPerSecond = 315
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  91- 100 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.39382324; EvalErr[0]PerSample = 0.85156250; TotalTime = 2.03432s; TotalTimePerSample = 3.17863ms; SamplesPerSecond = 314
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 101- 110 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.25076599; EvalErr[0]PerSample = 0.76406250; TotalTime = 2.08932s; TotalTimePerSample = 3.26456ms; SamplesPerSecond = 306
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 111- 120 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.35322266; EvalErr[0]PerSample = 0.79375000; TotalTime = 1.95727s; TotalTimePerSample = 3.05824ms; SamplesPerSecond = 326
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 121- 130 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.19603882; EvalErr[0]PerSample = 0.76875000; TotalTime = 1.93387s; TotalTimePerSample = 3.02167ms; SamplesPerSecond = 330
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 131- 140 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.06107178; EvalErr[0]PerSample = 0.73125000; TotalTime = 2.05521s; TotalTimePerSample = 3.21127ms; SamplesPerSecond = 311
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 141- 150 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.05115356; EvalErr[0]PerSample = 0.75625000; TotalTime = 2.02131s; TotalTimePerSample = 3.15830ms; SamplesPerSecond = 316
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 151- 160 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.02470093; EvalErr[0]PerSample = 0.74062500; TotalTime = 1.97075s; TotalTimePerSample = 3.07929ms; SamplesPerSecond = 324
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 161- 170 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.89898682; EvalErr[0]PerSample = 0.70781250; TotalTime = 2.01847s; TotalTimePerSample = 3.15385ms; SamplesPerSecond = 317
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 171- 180 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.75169067; EvalErr[0]PerSample = 0.68125000; TotalTime = 2.00828s; TotalTimePerSample = 3.13794ms; SamplesPerSecond = 318
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 181- 190 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.83965454; EvalErr[0]PerSample = 0.71875000; TotalTime = 1.98353s; TotalTimePerSample = 3.09927ms; SamplesPerSecond = 322
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 191- 200 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.62866821; EvalErr[0]PerSample = 0.65468750; TotalTime = 2.01026s; TotalTimePerSample = 3.14103ms; SamplesPerSecond = 318
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 201- 210 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.66651001; EvalErr[0]PerSample = 0.67187500; TotalTime = 2.06302s; TotalTimePerSample = 3.22347ms; SamplesPerSecond = 310
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 211- 220 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.61323853; EvalErr[0]PerSample = 0.65937500; TotalTime = 1.90775s; TotalTimePerSample = 2.98087ms; SamplesPerSecond = 335
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 221- 230 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.53096313; EvalErr[0]PerSample = 0.63750000; TotalTime = 2.01926s; TotalTimePerSample = 3.15510ms; SamplesPerSecond = 316
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 231- 240 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.43744507; EvalErr[0]PerSample = 0.64375000; TotalTime = 1.93996s; TotalTimePerSample = 3.03118ms; SamplesPerSecond = 329
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 241- 250 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.41102905; EvalErr[0]PerSample = 0.65312500; TotalTime = 1.99097s; TotalTimePerSample = 3.11089ms; SamplesPerSecond = 321
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 251- 260 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.48895264; EvalErr[0]PerSample = 0.63750000; TotalTime = 1.99276s; TotalTimePerSample = 3.11368ms; SamplesPerSecond = 321
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 261- 270 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.34961548; EvalErr[0]PerSample = 0.61093750; TotalTime = 2.06966s; TotalTimePerSample = 3.23384ms; SamplesPerSecond = 309
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 271- 280 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.23703613; EvalErr[0]PerSample = 0.57812500; TotalTime = 2.04857s; TotalTimePerSample = 3.20090ms; SamplesPerSecond = 312
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 281- 290 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.33130493; EvalErr[0]PerSample = 0.62031250; TotalTime = 2.06713s; TotalTimePerSample = 3.22989ms; SamplesPerSecond = 309
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 291- 300 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.21603394; EvalErr[0]PerSample = 0.62812500; TotalTime = 2.00191s; TotalTimePerSample = 3.12799ms; SamplesPerSecond = 319
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 301- 310 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.29106445; EvalErr[0]PerSample = 0.60625000; TotalTime = 1.96572s; TotalTimePerSample = 3.07143ms; SamplesPerSecond = 325
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 311- 320 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.20531006; EvalErr[0]PerSample = 0.57500000; TotalTime = 1.97200s; TotalTimePerSample = 3.08126ms; SamplesPerSecond = 324
MPI Rank 1: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 3.0173442; EvalErrPerSample = 0.73061526; Ave LearnRatePerSample = 0.015625; EpochTime=64.010475
MPI Rank 1: Starting Epoch 2: learning rate per sample = 0.001953  momentum = 0.656119 
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), Distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[   1-  10 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.08625576; EvalErr[0]PerSample = 0.56445312; TotalTime = 2.77285s; TotalTimePerSample = 1.08315ms; SamplesPerSecond = 923
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  11-  20 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.06731161; EvalErr[0]PerSample = 0.57265625; TotalTime = 2.69490s; TotalTimePerSample = 1.05269ms; SamplesPerSecond = 949
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  21-  30 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.04849757; EvalErr[0]PerSample = 0.56328125; TotalTime = 2.69690s; TotalTimePerSample = 1.05347ms; SamplesPerSecond = 949
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  31-  40 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.02695675; EvalErr[0]PerSample = 0.56953125; TotalTime = 2.68068s; TotalTimePerSample = 1.04714ms; SamplesPerSecond = 954
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  41-  50 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.00975057; EvalErr[0]PerSample = 0.56054688; TotalTime = 2.67074s; TotalTimePerSample = 1.04326ms; SamplesPerSecond = 958
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  51-  60 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.09342974; EvalErr[0]PerSample = 0.55859375; TotalTime = 2.72293s; TotalTimePerSample = 1.06365ms; SamplesPerSecond = 940
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  61-  70 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.05137550; EvalErr[0]PerSample = 0.56601563; TotalTime = 2.67642s; TotalTimePerSample = 1.04548ms; SamplesPerSecond = 956
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  71-  80 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.15056076; EvalErr[0]PerSample = 0.57968750; TotalTime = 2.64510s; TotalTimePerSample = 1.03324ms; SamplesPerSecond = 967
MPI Rank 1: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 2.0667673; EvalErrPerSample = 0.5668457; Ave LearnRatePerSample = 0.001953125; EpochTime=21.562765
MPI Rank 1: Starting Epoch 3: learning rate per sample = 0.000098  momentum = 0.656119 
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), Distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 3 of 3]-Minibatch[   1-  10 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.98470948; EvalErr[0]PerSample = 0.54238281; TotalTime = 3.52854s; TotalTimePerSample = 0.34458ms; SamplesPerSecond = 2902
MPI Rank 1:  Epoch[ 3 of 3]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.95456514; EvalErr[0]PerSample = 0.53603516; TotalTime = 3.53260s; TotalTimePerSample = 0.34498ms; SamplesPerSecond = 2898
MPI Rank 1: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.9696373; EvalErrPerSample = 0.53920898; Ave LearnRatePerSample = 9.765625146e-05; EpochTime=7.068208
MPI Rank 1: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: COMPLETED
MPI Rank 1: ~MPIWrapper
MPI Rank 2: running on localhost at 2015/10/02 14:15:23
MPI Rank 2: command line options: 
MPI Rank 2: configFile=/home/mluser/src/cplx_master/Tests/Speech/DNN/Parallel1BitQuantization/../cntk.config RunDir=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data DeviceId=-1 stderr=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] 
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision=float
MPI Rank 2: command=speechTrain
MPI Rank 2: deviceId=$DeviceId$
MPI Rank 2: parallelTrain=true
MPI Rank 2: speechTrain=[
MPI Rank 2:     action=train
MPI Rank 2:     modelPath=$RunDir$/models/cntkSpeech.dnn
MPI Rank 2:     deviceId=$DeviceId$
MPI Rank 2:     traceLevel=1
MPI Rank 2:     SimpleNetworkBuilder=[
MPI Rank 2:         layerSizes=363:512:512:132
MPI Rank 2:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 2:         evalCriterion=ErrorPrediction
MPI Rank 2:         layerTypes=Sigmoid
MPI Rank 2:         initValueScale=1.0
MPI Rank 2:         applyMeanVarNorm=true
MPI Rank 2:         uniformInit=true
MPI Rank 2:         needPrior=true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 2:         layerSizes=363:512:512:132
MPI Rank 2:         trainingCriterion='CE'
MPI Rank 2:         evalCriterion='Err'
MPI Rank 2:         applyMeanVarNorm=true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD=[
MPI Rank 2:         epochSize=20480
MPI Rank 2:         minibatchSize=64:256:1024
MPI Rank 2:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult=10
MPI Rank 2:         momentumPerMB=0.9:0.656119
MPI Rank 2:         dropoutRate=0.0
MPI Rank 2:         maxEpochs=3
MPI Rank 2:         keepCheckPointFiles=true
MPI Rank 2:         ParallelTrain=[
MPI Rank 2:             parallelizationMethod=DataParallelSGD
MPI Rank 2:             distributedMBReading=true
MPI Rank 2:             DataParallelSGD=[
MPI Rank 2:               gradientBits=32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust=[
MPI Rank 2:             reduceLearnRateIfImproveLessThan=0
MPI Rank 2:             loadBestModel=true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 2:             learnRateDecreaseFactor=0.5
MPI Rank 2:             learnRateIncreaseFactor=1.382
MPI Rank 2:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 2:         ]
MPI Rank 2:         clippingThresholdPerSample=1#INF
MPI Rank 2:     ]
MPI Rank 2:     reader=[
MPI Rank 2:       readerType=HTKMLFReader
MPI Rank 2:       readMethod=blockRandomize
MPI Rank 2:       miniBatchMode=Partial
MPI Rank 2:       randomize=Auto
MPI Rank 2:       verbosity=0
MPI Rank 2:       features=[
MPI Rank 2:           dim=363
MPI Rank 2:           type=Real
MPI Rank 2:           scpFile=glob_0000.scp
MPI Rank 2:       ]
MPI Rank 2:       labels=[
MPI Rank 2:           mlfFile=$DataDir$/glob_0000.mlf
MPI Rank 2:           labelMappingFile=$DataDir$/state.list
MPI Rank 2:           labelDim=132
MPI Rank 2:           labelType=Category
MPI Rank 2:       ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: RunDir=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 2: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: DeviceId=-1
MPI Rank 2: stderr=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision=float
MPI Rank 2: command=speechTrain
MPI Rank 2: deviceId=-1
MPI Rank 2: parallelTrain=true
MPI Rank 2: speechTrain=[
MPI Rank 2:     action=train
MPI Rank 2:     modelPath=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
MPI Rank 2:     deviceId=-1
MPI Rank 2:     traceLevel=1
MPI Rank 2:     SimpleNetworkBuilder=[
MPI Rank 2:         layerSizes=363:512:512:132
MPI Rank 2:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 2:         evalCriterion=ErrorPrediction
MPI Rank 2:         layerTypes=Sigmoid
MPI Rank 2:         initValueScale=1.0
MPI Rank 2:         applyMeanVarNorm=true
MPI Rank 2:         uniformInit=true
MPI Rank 2:         needPrior=true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 2:         layerSizes=363:512:512:132
MPI Rank 2:         trainingCriterion='CE'
MPI Rank 2:         evalCriterion='Err'
MPI Rank 2:         applyMeanVarNorm=true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD=[
MPI Rank 2:         epochSize=20480
MPI Rank 2:         minibatchSize=64:256:1024
MPI Rank 2:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult=10
MPI Rank 2:         momentumPerMB=0.9:0.656119
MPI Rank 2:         dropoutRate=0.0
MPI Rank 2:         maxEpochs=3
MPI Rank 2:         keepCheckPointFiles=true
MPI Rank 2:         ParallelTrain=[
MPI Rank 2:             parallelizationMethod=DataParallelSGD
MPI Rank 2:             distributedMBReading=true
MPI Rank 2:             DataParallelSGD=[
MPI Rank 2:               gradientBits=32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust=[
MPI Rank 2:             reduceLearnRateIfImproveLessThan=0
MPI Rank 2:             loadBestModel=true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 2:             learnRateDecreaseFactor=0.5
MPI Rank 2:             learnRateIncreaseFactor=1.382
MPI Rank 2:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 2:         ]
MPI Rank 2:         clippingThresholdPerSample=1#INF
MPI Rank 2:     ]
MPI Rank 2:     reader=[
MPI Rank 2:       readerType=HTKMLFReader
MPI Rank 2:       readMethod=blockRandomize
MPI Rank 2:       miniBatchMode=Partial
MPI Rank 2:       randomize=Auto
MPI Rank 2:       verbosity=0
MPI Rank 2:       features=[
MPI Rank 2:           dim=363
MPI Rank 2:           type=Real
MPI Rank 2:           scpFile=glob_0000.scp
MPI Rank 2:       ]
MPI Rank 2:       labels=[
MPI Rank 2:           mlfFile=/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf
MPI Rank 2:           labelMappingFile=/home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 2:           labelDim=132
MPI Rank 2:           labelType=Category
MPI Rank 2:       ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: RunDir=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 2: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: DeviceId=-1
MPI Rank 2: stderr=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: configparameters: cntk.config:command=speechTrain
MPI Rank 2: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: configparameters: cntk.config:deviceId=-1
MPI Rank 2: configparameters: cntk.config:parallelTrain=true
MPI Rank 2: configparameters: cntk.config:precision=float
MPI Rank 2: configparameters: cntk.config:RunDir=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 2: configparameters: cntk.config:speechTrain=[
MPI Rank 2:     action=train
MPI Rank 2:     modelPath=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
MPI Rank 2:     deviceId=-1
MPI Rank 2:     traceLevel=1
MPI Rank 2:     SimpleNetworkBuilder=[
MPI Rank 2:         layerSizes=363:512:512:132
MPI Rank 2:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 2:         evalCriterion=ErrorPrediction
MPI Rank 2:         layerTypes=Sigmoid
MPI Rank 2:         initValueScale=1.0
MPI Rank 2:         applyMeanVarNorm=true
MPI Rank 2:         uniformInit=true
MPI Rank 2:         needPrior=true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 2:         layerSizes=363:512:512:132
MPI Rank 2:         trainingCriterion='CE'
MPI Rank 2:         evalCriterion='Err'
MPI Rank 2:         applyMeanVarNorm=true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD=[
MPI Rank 2:         epochSize=20480
MPI Rank 2:         minibatchSize=64:256:1024
MPI Rank 2:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult=10
MPI Rank 2:         momentumPerMB=0.9:0.656119
MPI Rank 2:         dropoutRate=0.0
MPI Rank 2:         maxEpochs=3
MPI Rank 2:         keepCheckPointFiles=true
MPI Rank 2:         ParallelTrain=[
MPI Rank 2:             parallelizationMethod=DataParallelSGD
MPI Rank 2:             distributedMBReading=true
MPI Rank 2:             DataParallelSGD=[
MPI Rank 2:               gradientBits=32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust=[
MPI Rank 2:             reduceLearnRateIfImproveLessThan=0
MPI Rank 2:             loadBestModel=true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 2:             learnRateDecreaseFactor=0.5
MPI Rank 2:             learnRateIncreaseFactor=1.382
MPI Rank 2:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 2:         ]
MPI Rank 2:         clippingThresholdPerSample=1#INF
MPI Rank 2:     ]
MPI Rank 2:     reader=[
MPI Rank 2:       readerType=HTKMLFReader
MPI Rank 2:       readMethod=blockRandomize
MPI Rank 2:       miniBatchMode=Partial
MPI Rank 2:       randomize=Auto
MPI Rank 2:       verbosity=0
MPI Rank 2:       features=[
MPI Rank 2:           dim=363
MPI Rank 2:           type=Real
MPI Rank 2:           scpFile=glob_0000.scp
MPI Rank 2:       ]
MPI Rank 2:       labels=[
MPI Rank 2:           mlfFile=/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf
MPI Rank 2:           labelMappingFile=/home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 2:           labelDim=132
MPI Rank 2:           labelType=Category
MPI Rank 2:       ]
MPI Rank 2:     ]
MPI Rank 2: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: 
MPI Rank 2: configparameters: cntk.config:stderr=/tmp/cntk-test-20151002141521.364004/Speech/DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: command: speechTrain 
MPI Rank 2: precision = float
MPI Rank 2: CNTKCommandTrainInfo: speechTrain : 3
MPI Rank 2: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3
MPI Rank 2: CNTKCommandTrainBegin: speechTrain
MPI Rank 2: SimpleNetworkBuilder Using CPU
MPI Rank 2: reading script file glob_0000.scp ... 948 entries
MPI Rank 2: trainlayer: OOV-exclusion code enabled, but no unigram specified to derive the word set from, so you won't get OOV exclusion
MPI Rank 2: total 132 state names in state list /home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 2: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 2: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 2: label set 0: 129 classes
MPI Rank 2: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 2: GetTrainCriterionNodes  ...
MPI Rank 2: GetEvalCriterionNodes  ...
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating node CrossEntropyWithSoftmax 
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: Found 6 PreCompute nodes
MPI Rank 2: 	NodeName: InvStdOfFeatures
MPI Rank 2: 	NodeName: MeanOfFeatures
MPI Rank 2: 	NodeName: Prior
MPI Rank 2: 	NodeName: InvStdOfFeatures
MPI Rank 2: 	NodeName: MeanOfFeatures
MPI Rank 2: 	NodeName: Prior
MPI Rank 2: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating node InvStdOfFeatures 
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 64]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating node MeanOfFeatures 
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 64]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating node Prior 
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 64]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 64]) -> [132, 1]
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 2: Starting Epoch 1: learning rate per sample = 0.015625  momentum = 0.900000 
MPI Rank 2: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating node EvalErrorPrediction 
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 64]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 64]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 64]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 64], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 64]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 64]) -> [512, MBSize 64]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 64], B0[512, 1]) -> [512, MBSize 64]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 64], B1[512, 1]) -> [512, MBSize 64]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 64]) -> [132, MBSize 64]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 64], B2[132, 1]) -> [132, MBSize 64]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 64], HLast[132, MBSize 64]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[   1-  10 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.39182053; EvalErr[0]PerSample = 0.89843750; TotalTime = 2.02032s; TotalTimePerSample = 3.15675ms; SamplesPerSecond = 316
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  11-  20 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.16675262; EvalErr[0]PerSample = 0.87187500; TotalTime = 1.96722s; TotalTimePerSample = 3.07377ms; SamplesPerSecond = 325
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  21-  30 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.98683777; EvalErr[0]PerSample = 0.87812500; TotalTime = 2.01931s; TotalTimePerSample = 3.15517ms; SamplesPerSecond = 316
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  31-  40 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.86594620; EvalErr[0]PerSample = 0.87812500; TotalTime = 2.07466s; TotalTimePerSample = 3.24165ms; SamplesPerSecond = 308
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  41-  50 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.81006165; EvalErr[0]PerSample = 0.88593750; TotalTime = 1.92147s; TotalTimePerSample = 3.00229ms; SamplesPerSecond = 333
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  51-  60 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.73426819; EvalErr[0]PerSample = 0.87656250; TotalTime = 2.03600s; TotalTimePerSample = 3.18126ms; SamplesPerSecond = 314
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  61-  70 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.57473907; EvalErr[0]PerSample = 0.81875000; TotalTime = 1.97728s; TotalTimePerSample = 3.08950ms; SamplesPerSecond = 323
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  71-  80 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.43590698; EvalErr[0]PerSample = 0.80781250; TotalTime = 2.05407s; TotalTimePerSample = 3.20948ms; SamplesPerSecond = 311
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  81-  90 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.36040344; EvalErr[0]PerSample = 0.77343750; TotalTime = 1.98546s; TotalTimePerSample = 3.10229ms; SamplesPerSecond = 322
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  91- 100 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.39382324; EvalErr[0]PerSample = 0.85156250; TotalTime = 1.97866s; TotalTimePerSample = 3.09165ms; SamplesPerSecond = 323
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 101- 110 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.25076599; EvalErr[0]PerSample = 0.76406250; TotalTime = 2.03259s; TotalTimePerSample = 3.17592ms; SamplesPerSecond = 314
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 111- 120 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.35322266; EvalErr[0]PerSample = 0.79375000; TotalTime = 1.98669s; TotalTimePerSample = 3.10420ms; SamplesPerSecond = 322
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 121- 130 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.19603882; EvalErr[0]PerSample = 0.76875000; TotalTime = 2.04060s; TotalTimePerSample = 3.18843ms; SamplesPerSecond = 313
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 131- 140 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.06107178; EvalErr[0]PerSample = 0.73125000; TotalTime = 1.95229s; TotalTimePerSample = 3.05045ms; SamplesPerSecond = 327
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 141- 150 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.05115356; EvalErr[0]PerSample = 0.75625000; TotalTime = 2.02647s; TotalTimePerSample = 3.16636ms; SamplesPerSecond = 315
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 151- 160 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.02470093; EvalErr[0]PerSample = 0.74062500; TotalTime = 2.06698s; TotalTimePerSample = 3.22965ms; SamplesPerSecond = 309
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 161- 170 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.89898682; EvalErr[0]PerSample = 0.70781250; TotalTime = 1.82779s; TotalTimePerSample = 2.85592ms; SamplesPerSecond = 350
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 171- 180 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.75169067; EvalErr[0]PerSample = 0.68125000; TotalTime = 2.04524s; TotalTimePerSample = 3.19568ms; SamplesPerSecond = 312
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 181- 190 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.83965454; EvalErr[0]PerSample = 0.71875000; TotalTime = 2.00679s; TotalTimePerSample = 3.13561ms; SamplesPerSecond = 318
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 191- 200 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.62866821; EvalErr[0]PerSample = 0.65468750; TotalTime = 2.03446s; TotalTimePerSample = 3.17884ms; SamplesPerSecond = 314
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 201- 210 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.66651001; EvalErr[0]PerSample = 0.67187500; TotalTime = 2.04676s; TotalTimePerSample = 3.19807ms; SamplesPerSecond = 312
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 211- 220 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.61323853; EvalErr[0]PerSample = 0.65937500; TotalTime = 1.97607s; TotalTimePerSample = 3.08761ms; SamplesPerSecond = 323
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 221- 230 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.53096313; EvalErr[0]PerSample = 0.63750000; TotalTime = 1.93307s; TotalTimePerSample = 3.02042ms; SamplesPerSecond = 331
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 231- 240 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.43744507; EvalErr[0]PerSample = 0.64375000; TotalTime = 1.89993s; TotalTimePerSample = 2.96864ms; SamplesPerSecond = 336
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 241- 250 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.41102905; EvalErr[0]PerSample = 0.65312500; TotalTime = 2.02654s; TotalTimePerSample = 3.16647ms; SamplesPerSecond = 315
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 251- 260 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.48895264; EvalErr[0]PerSample = 0.63750000; TotalTime = 1.93442s; TotalTimePerSample = 3.02252ms; SamplesPerSecond = 330
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 261- 270 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.34961548; EvalErr[0]PerSample = 0.61093750; TotalTime = 1.94602s; TotalTimePerSample = 3.04065ms; SamplesPerSecond = 328
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 271- 280 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.23703613; EvalErr[0]PerSample = 0.57812500; TotalTime = 1.96132s; TotalTimePerSample = 3.06456ms; SamplesPerSecond = 326
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 281- 290 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.33130493; EvalErr[0]PerSample = 0.62031250; TotalTime = 2.03860s; TotalTimePerSample = 3.18531ms; SamplesPerSecond = 313
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 291- 300 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.21603394; EvalErr[0]PerSample = 0.62812500; TotalTime = 1.97204s; TotalTimePerSample = 3.08130ms; SamplesPerSecond = 324
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 301- 310 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.29106445; EvalErr[0]PerSample = 0.60625000; TotalTime = 2.02949s; TotalTimePerSample = 3.17108ms; SamplesPerSecond = 315
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 311- 320 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.20531006; EvalErr[0]PerSample = 0.57500000; TotalTime = 2.06652s; TotalTimePerSample = 3.22893ms; SamplesPerSecond = 309
MPI Rank 2: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 3.0173442; EvalErrPerSample = 0.73061526; Ave LearnRatePerSample = 0.015625; EpochTime=63.888715
MPI Rank 2: Starting Epoch 2: learning rate per sample = 0.001953  momentum = 0.656119 
MPI Rank 2: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), Distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[   1-  10 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.08625576; EvalErr[0]PerSample = 0.56445312; TotalTime = 2.75461s; TotalTimePerSample = 1.07602ms; SamplesPerSecond = 929
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  11-  20 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.06731161; EvalErr[0]PerSample = 0.57265625; TotalTime = 2.71151s; TotalTimePerSample = 1.05919ms; SamplesPerSecond = 944
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  21-  30 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.04849757; EvalErr[0]PerSample = 0.56328125; TotalTime = 2.69129s; TotalTimePerSample = 1.05128ms; SamplesPerSecond = 951
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  31-  40 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.02695675; EvalErr[0]PerSample = 0.56953125; TotalTime = 2.67095s; TotalTimePerSample = 1.04334ms; SamplesPerSecond = 958
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  41-  50 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.00975057; EvalErr[0]PerSample = 0.56054688; TotalTime = 2.67436s; TotalTimePerSample = 1.04467ms; SamplesPerSecond = 957
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  51-  60 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.09342974; EvalErr[0]PerSample = 0.55859375; TotalTime = 2.75647s; TotalTimePerSample = 1.07675ms; SamplesPerSecond = 928
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  61-  70 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.05137550; EvalErr[0]PerSample = 0.56601563; TotalTime = 2.66016s; TotalTimePerSample = 1.03912ms; SamplesPerSecond = 962
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  71-  80 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.15056076; EvalErr[0]PerSample = 0.57968750; TotalTime = 2.60574s; TotalTimePerSample = 1.01787ms; SamplesPerSecond = 982
MPI Rank 2: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 2.0667673; EvalErrPerSample = 0.5668457; Ave LearnRatePerSample = 0.001953125; EpochTime=21.527139
MPI Rank 2: Starting Epoch 3: learning rate per sample = 0.000098  momentum = 0.656119 
MPI Rank 2: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), Distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 3 of 3]-Minibatch[   1-  10 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.98470948; EvalErr[0]PerSample = 0.54238281; TotalTime = 3.51299s; TotalTimePerSample = 0.34306ms; SamplesPerSecond = 2914
MPI Rank 2:  Epoch[ 3 of 3]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.95456514; EvalErr[0]PerSample = 0.53603516; TotalTime = 3.54217s; TotalTimePerSample = 0.34591ms; SamplesPerSecond = 2890
MPI Rank 2: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.9696373; EvalErrPerSample = 0.53920898; Ave LearnRatePerSample = 9.765625146e-05; EpochTime=7.064599
MPI Rank 2: CNTKCommandTrainEnd: speechTrain
MPI Rank 2: COMPLETED
MPI Rank 2: ~MPIWrapper
