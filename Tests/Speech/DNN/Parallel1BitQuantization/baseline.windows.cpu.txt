=== Running C:\Program Files\Microsoft MPI\Bin\/mpiexec.exe -n 3 E:\NetScale\CNTK\git_repos\cplx_master\x64\debug\cntk.exe configFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\DNN\cntk.config RunDir=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu DataDir=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data DeviceId=-1 stderr=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (2) are in (participating)
ping [requestnodes (before change)]: all 3 nodes responded
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (1) are in (participating)
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 1 in a gearbox of 3
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 2 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
mpihelper: we are cog 0 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [mpihelper]: all 3 nodes responded
ping [mpihelper]: all 3 nodes responded
CNTKModelPath: C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
CNTKModelPath: C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
CNTKModelPath: C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
MPI Rank 0: Redirecting stderr to file C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr_speechTrain.logrank0
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: Build info: 
MPI Rank 0: 
MPI Rank 0: 		Built time: Oct  2 2015 13:14:34
MPI Rank 0: 		Last modified date: Fri Oct  2 13:09:06 2015
MPI Rank 0: 		Built by amitaga on Amitaga-Win-DT3           
MPI Rank 0: 		Build Path: E:\NetScale\CNTK\git_repos\cplx_master\MachineLearning\CNTK\
MPI Rank 0: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: running on Amitaga-Win-DT3 at 2015/10/02 22:06:28
MPI Rank 0: command line options: 
MPI Rank 0: configFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\DNN\cntk.config RunDir=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu DataDir=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data DeviceId=-1 stderr=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] 
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision=float
MPI Rank 0: command=speechTrain
MPI Rank 0: deviceId=$DeviceId$
MPI Rank 0: parallelTrain=true
MPI Rank 0: speechTrain=[
MPI Rank 0:     action=train
MPI Rank 0:     modelPath=$RunDir$/models/cntkSpeech.dnn
MPI Rank 0:     deviceId=$DeviceId$
MPI Rank 0:     traceLevel=1
MPI Rank 0:     SimpleNetworkBuilder=[
MPI Rank 0:         layerSizes=363:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes=Sigmoid
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         applyMeanVarNorm=true
MPI Rank 0:         uniformInit=true
MPI Rank 0:         needPrior=true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 0:         layerSizes=363:512:512:132
MPI Rank 0:         trainingCriterion='CE'
MPI Rank 0:         evalCriterion='Err'
MPI Rank 0:         applyMeanVarNorm=true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD=[
MPI Rank 0:         epochSize=20480
MPI Rank 0:         minibatchSize=64:256:1024
MPI Rank 0:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult=10
MPI Rank 0:         momentumPerMB=0.9:0.656119
MPI Rank 0:         dropoutRate=0.0
MPI Rank 0:         maxEpochs=3
MPI Rank 0:         keepCheckPointFiles=true
MPI Rank 0:         ParallelTrain=[
MPI Rank 0:             parallelizationMethod=DataParallelSGD
MPI Rank 0:             distributedMBReading=true
MPI Rank 0:             DataParallelSGD=[
MPI Rank 0:               gradientBits=32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust=[
MPI Rank 0:             reduceLearnRateIfImproveLessThan=0
MPI Rank 0:             loadBestModel=true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 0:             learnRateDecreaseFactor=0.5
MPI Rank 0:             learnRateIncreaseFactor=1.382
MPI Rank 0:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 0:         ]
MPI Rank 0:         clippingThresholdPerSample=1#INF
MPI Rank 0:     ]
MPI Rank 0:     reader=[
MPI Rank 0:       readerType=HTKMLFReader
MPI Rank 0:       readMethod=blockRandomize
MPI Rank 0:       miniBatchMode=Partial
MPI Rank 0:       randomize=Auto
MPI Rank 0:       verbosity=0
MPI Rank 0:       features=[
MPI Rank 0:           dim=363
MPI Rank 0:           type=Real
MPI Rank 0:           scpFile=glob_0000.scp
MPI Rank 0:       ]
MPI Rank 0:       labels=[
MPI Rank 0:           mlfFile=$DataDir$/glob_0000.mlf
MPI Rank 0:           labelMappingFile=$DataDir$/state.list
MPI Rank 0:           labelDim=132
MPI Rank 0:           labelType=Category
MPI Rank 0:       ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: RunDir=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 0: DataDir=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data
MPI Rank 0: DeviceId=-1
MPI Rank 0: stderr=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision=float
MPI Rank 0: command=speechTrain
MPI Rank 0: deviceId=-1
MPI Rank 0: parallelTrain=true
MPI Rank 0: speechTrain=[
MPI Rank 0:     action=train
MPI Rank 0:     modelPath=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
MPI Rank 0:     deviceId=-1
MPI Rank 0:     traceLevel=1
MPI Rank 0:     SimpleNetworkBuilder=[
MPI Rank 0:         layerSizes=363:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes=Sigmoid
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         applyMeanVarNorm=true
MPI Rank 0:         uniformInit=true
MPI Rank 0:         needPrior=true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 0:         layerSizes=363:512:512:132
MPI Rank 0:         trainingCriterion='CE'
MPI Rank 0:         evalCriterion='Err'
MPI Rank 0:         applyMeanVarNorm=true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD=[
MPI Rank 0:         epochSize=20480
MPI Rank 0:         minibatchSize=64:256:1024
MPI Rank 0:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult=10
MPI Rank 0:         momentumPerMB=0.9:0.656119
MPI Rank 0:         dropoutRate=0.0
MPI Rank 0:         maxEpochs=3
MPI Rank 0:         keepCheckPointFiles=true
MPI Rank 0:         ParallelTrain=[
MPI Rank 0:             parallelizationMethod=DataParallelSGD
MPI Rank 0:             distributedMBReading=true
MPI Rank 0:             DataParallelSGD=[
MPI Rank 0:               gradientBits=32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust=[
MPI Rank 0:             reduceLearnRateIfImproveLessThan=0
MPI Rank 0:             loadBestModel=true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 0:             learnRateDecreaseFactor=0.5
MPI Rank 0:             learnRateIncreaseFactor=1.382
MPI Rank 0:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 0:         ]
MPI Rank 0:         clippingThresholdPerSample=1#INF
MPI Rank 0:     ]
MPI Rank 0:     reader=[
MPI Rank 0:       readerType=HTKMLFReader
MPI Rank 0:       readMethod=blockRandomize
MPI Rank 0:       miniBatchMode=Partial
MPI Rank 0:       randomize=Auto
MPI Rank 0:       verbosity=0
MPI Rank 0:       features=[
MPI Rank 0:           dim=363
MPI Rank 0:           type=Real
MPI Rank 0:           scpFile=glob_0000.scp
MPI Rank 0:       ]
MPI Rank 0:       labels=[
MPI Rank 0:           mlfFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/glob_0000.mlf
MPI Rank 0:           labelMappingFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/state.list
MPI Rank 0:           labelDim=132
MPI Rank 0:           labelType=Category
MPI Rank 0:       ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: RunDir=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 0: DataDir=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data
MPI Rank 0: DeviceId=-1
MPI Rank 0: stderr=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.config:command=speechTrain
MPI Rank 0: configparameters: cntk.config:DataDir=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data
MPI Rank 0: configparameters: cntk.config:deviceId=-1
MPI Rank 0: configparameters: cntk.config:parallelTrain=true
MPI Rank 0: configparameters: cntk.config:precision=float
MPI Rank 0: configparameters: cntk.config:RunDir=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 0: configparameters: cntk.config:speechTrain=[
MPI Rank 0:     action=train
MPI Rank 0:     modelPath=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
MPI Rank 0:     deviceId=-1
MPI Rank 0:     traceLevel=1
MPI Rank 0:     SimpleNetworkBuilder=[
MPI Rank 0:         layerSizes=363:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes=Sigmoid
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         applyMeanVarNorm=true
MPI Rank 0:         uniformInit=true
MPI Rank 0:         needPrior=true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 0:         layerSizes=363:512:512:132
MPI Rank 0:         trainingCriterion='CE'
MPI Rank 0:         evalCriterion='Err'
MPI Rank 0:         applyMeanVarNorm=true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD=[
MPI Rank 0:         epochSize=20480
MPI Rank 0:         minibatchSize=64:256:1024
MPI Rank 0:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult=10
MPI Rank 0:         momentumPerMB=0.9:0.656119
MPI Rank 0:         dropoutRate=0.0
MPI Rank 0:         maxEpochs=3
MPI Rank 0:         keepCheckPointFiles=true
MPI Rank 0:         ParallelTrain=[
MPI Rank 0:             parallelizationMethod=DataParallelSGD
MPI Rank 0:             distributedMBReading=true
MPI Rank 0:             DataParallelSGD=[
MPI Rank 0:               gradientBits=32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust=[
MPI Rank 0:             reduceLearnRateIfImproveLessThan=0
MPI Rank 0:             loadBestModel=true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 0:             learnRateDecreaseFactor=0.5
MPI Rank 0:             learnRateIncreaseFactor=1.382
MPI Rank 0:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 0:         ]
MPI Rank 0:         clippingThresholdPerSample=1#INF
MPI Rank 0:     ]
MPI Rank 0:     reader=[
MPI Rank 0:       readerType=HTKMLFReader
MPI Rank 0:       readMethod=blockRandomize
MPI Rank 0:       miniBatchMode=Partial
MPI Rank 0:       randomize=Auto
MPI Rank 0:       verbosity=0
MPI Rank 0:       features=[
MPI Rank 0:           dim=363
MPI Rank 0:           type=Real
MPI Rank 0:           scpFile=glob_0000.scp
MPI Rank 0:       ]
MPI Rank 0:       labels=[
MPI Rank 0:           mlfFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/glob_0000.mlf
MPI Rank 0:           labelMappingFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/state.list
MPI Rank 0:           labelDim=132
MPI Rank 0:           labelType=Category
MPI Rank 0:       ]
MPI Rank 0:     ]
MPI Rank 0: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.config:stderr=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: command: speechTrain 
MPI Rank 0: precision = float
MPI Rank 0: CNTKCommandTrainInfo: speechTrain : 3
MPI Rank 0: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3
MPI Rank 0: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: SimpleNetworkBuilder Using CPU
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: trainlayer: OOV-exclusion code enabled, but no unigram specified to derive the word set from, so you won't get OOV exclusion
MPI Rank 0: total 132 state names in state list E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: GetTrainCriterionNodes  ...
MPI Rank 0: GetEvalCriterionNodes  ...
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating node CrossEntropyWithSoftmax 
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: Found 6 PreCompute nodes
MPI Rank 0: 	NodeName: InvStdOfFeatures
MPI Rank 0: 	NodeName: MeanOfFeatures
MPI Rank 0: 	NodeName: Prior
MPI Rank 0: 	NodeName: InvStdOfFeatures
MPI Rank 0: 	NodeName: MeanOfFeatures
MPI Rank 0: 	NodeName: Prior
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating node InvStdOfFeatures 
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 64]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating node MeanOfFeatures 
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 64]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating node Prior 
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 64]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 64]) -> [132, 1]
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 0: Starting Epoch 1: learning rate per sample = 0.015625  momentum = 0.900000 
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating node EvalErrorPrediction 
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 64]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 64]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 64]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 64], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 64]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 64]) -> [512, MBSize 64]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 64], B0[512, 1]) -> [512, MBSize 64]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 64], B1[512, 1]) -> [512, MBSize 64]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 64]) -> [132, MBSize 64]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 64], B2[132, 1]) -> [132, MBSize 64]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 64], HLast[132, MBSize 64]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[   1-  10 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.46945000; EvalErr[0]PerSample = 0.90781250; TotalTime = 0.70062s; TotalTimePerSample = 1.09471ms; SamplesPerSecond = 913
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  11-  20 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.22299919; EvalErr[0]PerSample = 0.90156250; TotalTime = 0.58409s; TotalTimePerSample = 0.91264ms; SamplesPerSecond = 1095
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  21-  30 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.93971024; EvalErr[0]PerSample = 0.84687500; TotalTime = 0.52634s; TotalTimePerSample = 0.82241ms; SamplesPerSecond = 1215
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  31-  40 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.92341156; EvalErr[0]PerSample = 0.90468750; TotalTime = 0.45609s; TotalTimePerSample = 0.71263ms; SamplesPerSecond = 1403
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  41-  50 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.84073486; EvalErr[0]PerSample = 0.91093750; TotalTime = 0.45448s; TotalTimePerSample = 0.71013ms; SamplesPerSecond = 1408
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  51-  60 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.71251221; EvalErr[0]PerSample = 0.88437500; TotalTime = 0.84910s; TotalTimePerSample = 1.32672ms; SamplesPerSecond = 753
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  61-  70 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.51561432; EvalErr[0]PerSample = 0.82500000; TotalTime = 0.35958s; TotalTimePerSample = 0.56185ms; SamplesPerSecond = 1779
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  71-  80 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.49347534; EvalErr[0]PerSample = 0.81093750; TotalTime = 0.36746s; TotalTimePerSample = 0.57416ms; SamplesPerSecond = 1741
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  81-  90 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.34738159; EvalErr[0]PerSample = 0.76562500; TotalTime = 0.34045s; TotalTimePerSample = 0.53196ms; SamplesPerSecond = 1879
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  91- 100 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.51958923; EvalErr[0]PerSample = 0.79843750; TotalTime = 0.34551s; TotalTimePerSample = 0.53985ms; SamplesPerSecond = 1852
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 101- 110 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.24653320; EvalErr[0]PerSample = 0.80312500; TotalTime = 0.30866s; TotalTimePerSample = 0.48227ms; SamplesPerSecond = 2073
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 111- 120 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.33394165; EvalErr[0]PerSample = 0.80000000; TotalTime = 0.32881s; TotalTimePerSample = 0.51377ms; SamplesPerSecond = 1946
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 121- 130 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.17777100; EvalErr[0]PerSample = 0.77031250; TotalTime = 0.30518s; TotalTimePerSample = 0.47685ms; SamplesPerSecond = 2097
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 131- 140 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.09841919; EvalErr[0]PerSample = 0.76875000; TotalTime = 0.31420s; TotalTimePerSample = 0.49094ms; SamplesPerSecond = 2036
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 141- 150 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.06454773; EvalErr[0]PerSample = 0.72968750; TotalTime = 0.31403s; TotalTimePerSample = 0.49067ms; SamplesPerSecond = 2038
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 151- 160 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.91630859; EvalErr[0]PerSample = 0.69531250; TotalTime = 0.35787s; TotalTimePerSample = 0.55918ms; SamplesPerSecond = 1788
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 161- 170 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.90603027; EvalErr[0]PerSample = 0.73281250; TotalTime = 0.29758s; TotalTimePerSample = 0.46498ms; SamplesPerSecond = 2150
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 171- 180 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.74090576; EvalErr[0]PerSample = 0.65937500; TotalTime = 0.38514s; TotalTimePerSample = 0.60178ms; SamplesPerSecond = 1661
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 181- 190 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.67082520; EvalErr[0]PerSample = 0.67343750; TotalTime = 0.31996s; TotalTimePerSample = 0.49994ms; SamplesPerSecond = 2000
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 191- 200 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.67603760; EvalErr[0]PerSample = 0.66406250; TotalTime = 0.32022s; TotalTimePerSample = 0.50035ms; SamplesPerSecond = 1998
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 201- 210 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.54728394; EvalErr[0]PerSample = 0.62968750; TotalTime = 0.32911s; TotalTimePerSample = 0.51423ms; SamplesPerSecond = 1944
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 211- 220 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.61919556; EvalErr[0]PerSample = 0.67343750; TotalTime = 0.29211s; TotalTimePerSample = 0.45642ms; SamplesPerSecond = 2190
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 221- 230 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.52385254; EvalErr[0]PerSample = 0.65781250; TotalTime = 0.32309s; TotalTimePerSample = 0.50483ms; SamplesPerSecond = 1980
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 231- 240 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.47539673; EvalErr[0]PerSample = 0.63437500; TotalTime = 0.30029s; TotalTimePerSample = 0.46921ms; SamplesPerSecond = 2131
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 241- 250 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.43261108; EvalErr[0]PerSample = 0.61406250; TotalTime = 0.29393s; TotalTimePerSample = 0.45927ms; SamplesPerSecond = 2177
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 251- 260 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.41724243; EvalErr[0]PerSample = 0.63125000; TotalTime = 0.30826s; TotalTimePerSample = 0.48165ms; SamplesPerSecond = 2076
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 261- 270 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.17669678; EvalErr[0]PerSample = 0.57812500; TotalTime = 0.29355s; TotalTimePerSample = 0.45867ms; SamplesPerSecond = 2180
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 271- 280 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.31016235; EvalErr[0]PerSample = 0.64062500; TotalTime = 0.31951s; TotalTimePerSample = 0.49924ms; SamplesPerSecond = 2003
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 281- 290 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.26395874; EvalErr[0]PerSample = 0.61093750; TotalTime = 0.30308s; TotalTimePerSample = 0.47357ms; SamplesPerSecond = 2111
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 291- 300 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.15880737; EvalErr[0]PerSample = 0.58281250; TotalTime = 0.30115s; TotalTimePerSample = 0.47055ms; SamplesPerSecond = 2125
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 301- 310 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.22708130; EvalErr[0]PerSample = 0.59218750; TotalTime = 0.30212s; TotalTimePerSample = 0.47207ms; SamplesPerSecond = 2118
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 311- 320 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.25599365; EvalErr[0]PerSample = 0.60625000; TotalTime = 0.32757s; TotalTimePerSample = 0.51183ms; SamplesPerSecond = 1953
MPI Rank 0: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 3.007015; EvalErrPerSample = 0.72827148; Ave LearnRatePerSample = 0.015625; EpochTime=11.971488
MPI Rank 0: Starting Epoch 2: learning rate per sample = 0.001953  momentum = 0.656119 
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), Distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[   1-  10 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.13364467; EvalErr[0]PerSample = 0.57500000; TotalTime = 3.63611s; TotalTimePerSample = 1.42035ms; SamplesPerSecond = 704
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  11-  20 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.03769118; EvalErr[0]PerSample = 0.55898437; TotalTime = 3.33350s; TotalTimePerSample = 1.30215ms; SamplesPerSecond = 767
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  21-  30 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.02934017; EvalErr[0]PerSample = 0.55117187; TotalTime = 3.48922s; TotalTimePerSample = 1.36298ms; SamplesPerSecond = 733
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  31-  40 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.93926969; EvalErr[0]PerSample = 0.53593750; TotalTime = 3.90914s; TotalTimePerSample = 1.52701ms; SamplesPerSecond = 654
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  41-  50 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.92425177; EvalErr[0]PerSample = 0.52578125; TotalTime = 3.46572s; TotalTimePerSample = 1.35380ms; SamplesPerSecond = 738
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  51-  60 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.94704752; EvalErr[0]PerSample = 0.54570312; TotalTime = 3.54258s; TotalTimePerSample = 1.38382ms; SamplesPerSecond = 722
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  61-  70 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.94665378; EvalErr[0]PerSample = 0.53828125; TotalTime = 3.73740s; TotalTimePerSample = 1.45992ms; SamplesPerSecond = 684
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  71-  80 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.91211665; EvalErr[0]PerSample = 0.53789062; TotalTime = 4.81705s; TotalTimePerSample = 1.88166ms; SamplesPerSecond = 531
MPI Rank 0: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 1.9837519; EvalErrPerSample = 0.54609375; Ave LearnRatePerSample = 0.001953125; EpochTime=29.945862
MPI Rank 0: Starting Epoch 3: learning rate per sample = 0.000098  momentum = 0.656119 
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), Distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 3 of 3]-Minibatch[   1-  10 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.92706355; EvalErr[0]PerSample = 0.54785156; TotalTime = 5.40735s; TotalTimePerSample = 0.52806ms; SamplesPerSecond = 1893
MPI Rank 0:  Epoch[ 3 of 3]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.90739065; EvalErr[0]PerSample = 0.52812500; TotalTime = 4.79297s; TotalTimePerSample = 0.46806ms; SamplesPerSecond = 2136
MPI Rank 0: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.9172271; EvalErrPerSample = 0.53798828; Ave LearnRatePerSample = 9.765625146e-005; EpochTime=10.241472
MPI Rank 0: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: COMPLETED
MPI Rank 0: ~MPIWrapper
MPI Rank 1: Redirecting stderr to file C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr_speechTrain.logrank1
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: Build info: 
MPI Rank 1: 
MPI Rank 1: 		Built time: Oct  2 2015 13:14:34
MPI Rank 1: 		Last modified date: Fri Oct  2 13:09:06 2015
MPI Rank 1: 		Built by amitaga on Amitaga-Win-DT3           
MPI Rank 1: 		Build Path: E:\NetScale\CNTK\git_repos\cplx_master\MachineLearning\CNTK\
MPI Rank 1: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: running on Amitaga-Win-DT3 at 2015/10/02 22:06:29
MPI Rank 1: command line options: 
MPI Rank 1: configFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\DNN\cntk.config RunDir=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu DataDir=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data DeviceId=-1 stderr=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] 
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision=float
MPI Rank 1: command=speechTrain
MPI Rank 1: deviceId=$DeviceId$
MPI Rank 1: parallelTrain=true
MPI Rank 1: speechTrain=[
MPI Rank 1:     action=train
MPI Rank 1:     modelPath=$RunDir$/models/cntkSpeech.dnn
MPI Rank 1:     deviceId=$DeviceId$
MPI Rank 1:     traceLevel=1
MPI Rank 1:     SimpleNetworkBuilder=[
MPI Rank 1:         layerSizes=363:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes=Sigmoid
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         applyMeanVarNorm=true
MPI Rank 1:         uniformInit=true
MPI Rank 1:         needPrior=true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 1:         layerSizes=363:512:512:132
MPI Rank 1:         trainingCriterion='CE'
MPI Rank 1:         evalCriterion='Err'
MPI Rank 1:         applyMeanVarNorm=true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD=[
MPI Rank 1:         epochSize=20480
MPI Rank 1:         minibatchSize=64:256:1024
MPI Rank 1:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult=10
MPI Rank 1:         momentumPerMB=0.9:0.656119
MPI Rank 1:         dropoutRate=0.0
MPI Rank 1:         maxEpochs=3
MPI Rank 1:         keepCheckPointFiles=true
MPI Rank 1:         ParallelTrain=[
MPI Rank 1:             parallelizationMethod=DataParallelSGD
MPI Rank 1:             distributedMBReading=true
MPI Rank 1:             DataParallelSGD=[
MPI Rank 1:               gradientBits=32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust=[
MPI Rank 1:             reduceLearnRateIfImproveLessThan=0
MPI Rank 1:             loadBestModel=true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 1:             learnRateDecreaseFactor=0.5
MPI Rank 1:             learnRateIncreaseFactor=1.382
MPI Rank 1:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 1:         ]
MPI Rank 1:         clippingThresholdPerSample=1#INF
MPI Rank 1:     ]
MPI Rank 1:     reader=[
MPI Rank 1:       readerType=HTKMLFReader
MPI Rank 1:       readMethod=blockRandomize
MPI Rank 1:       miniBatchMode=Partial
MPI Rank 1:       randomize=Auto
MPI Rank 1:       verbosity=0
MPI Rank 1:       features=[
MPI Rank 1:           dim=363
MPI Rank 1:           type=Real
MPI Rank 1:           scpFile=glob_0000.scp
MPI Rank 1:       ]
MPI Rank 1:       labels=[
MPI Rank 1:           mlfFile=$DataDir$/glob_0000.mlf
MPI Rank 1:           labelMappingFile=$DataDir$/state.list
MPI Rank 1:           labelDim=132
MPI Rank 1:           labelType=Category
MPI Rank 1:       ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: RunDir=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 1: DataDir=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data
MPI Rank 1: DeviceId=-1
MPI Rank 1: stderr=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision=float
MPI Rank 1: command=speechTrain
MPI Rank 1: deviceId=-1
MPI Rank 1: parallelTrain=true
MPI Rank 1: speechTrain=[
MPI Rank 1:     action=train
MPI Rank 1:     modelPath=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
MPI Rank 1:     deviceId=-1
MPI Rank 1:     traceLevel=1
MPI Rank 1:     SimpleNetworkBuilder=[
MPI Rank 1:         layerSizes=363:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes=Sigmoid
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         applyMeanVarNorm=true
MPI Rank 1:         uniformInit=true
MPI Rank 1:         needPrior=true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 1:         layerSizes=363:512:512:132
MPI Rank 1:         trainingCriterion='CE'
MPI Rank 1:         evalCriterion='Err'
MPI Rank 1:         applyMeanVarNorm=true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD=[
MPI Rank 1:         epochSize=20480
MPI Rank 1:         minibatchSize=64:256:1024
MPI Rank 1:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult=10
MPI Rank 1:         momentumPerMB=0.9:0.656119
MPI Rank 1:         dropoutRate=0.0
MPI Rank 1:         maxEpochs=3
MPI Rank 1:         keepCheckPointFiles=true
MPI Rank 1:         ParallelTrain=[
MPI Rank 1:             parallelizationMethod=DataParallelSGD
MPI Rank 1:             distributedMBReading=true
MPI Rank 1:             DataParallelSGD=[
MPI Rank 1:               gradientBits=32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust=[
MPI Rank 1:             reduceLearnRateIfImproveLessThan=0
MPI Rank 1:             loadBestModel=true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 1:             learnRateDecreaseFactor=0.5
MPI Rank 1:             learnRateIncreaseFactor=1.382
MPI Rank 1:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 1:         ]
MPI Rank 1:         clippingThresholdPerSample=1#INF
MPI Rank 1:     ]
MPI Rank 1:     reader=[
MPI Rank 1:       readerType=HTKMLFReader
MPI Rank 1:       readMethod=blockRandomize
MPI Rank 1:       miniBatchMode=Partial
MPI Rank 1:       randomize=Auto
MPI Rank 1:       verbosity=0
MPI Rank 1:       features=[
MPI Rank 1:           dim=363
MPI Rank 1:           type=Real
MPI Rank 1:           scpFile=glob_0000.scp
MPI Rank 1:       ]
MPI Rank 1:       labels=[
MPI Rank 1:           mlfFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/glob_0000.mlf
MPI Rank 1:           labelMappingFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/state.list
MPI Rank 1:           labelDim=132
MPI Rank 1:           labelType=Category
MPI Rank 1:       ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: RunDir=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 1: DataDir=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data
MPI Rank 1: DeviceId=-1
MPI Rank 1: stderr=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.config:command=speechTrain
MPI Rank 1: configparameters: cntk.config:DataDir=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data
MPI Rank 1: configparameters: cntk.config:deviceId=-1
MPI Rank 1: configparameters: cntk.config:parallelTrain=true
MPI Rank 1: configparameters: cntk.config:precision=float
MPI Rank 1: configparameters: cntk.config:RunDir=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 1: configparameters: cntk.config:speechTrain=[
MPI Rank 1:     action=train
MPI Rank 1:     modelPath=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
MPI Rank 1:     deviceId=-1
MPI Rank 1:     traceLevel=1
MPI Rank 1:     SimpleNetworkBuilder=[
MPI Rank 1:         layerSizes=363:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes=Sigmoid
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         applyMeanVarNorm=true
MPI Rank 1:         uniformInit=true
MPI Rank 1:         needPrior=true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 1:         layerSizes=363:512:512:132
MPI Rank 1:         trainingCriterion='CE'
MPI Rank 1:         evalCriterion='Err'
MPI Rank 1:         applyMeanVarNorm=true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD=[
MPI Rank 1:         epochSize=20480
MPI Rank 1:         minibatchSize=64:256:1024
MPI Rank 1:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult=10
MPI Rank 1:         momentumPerMB=0.9:0.656119
MPI Rank 1:         dropoutRate=0.0
MPI Rank 1:         maxEpochs=3
MPI Rank 1:         keepCheckPointFiles=true
MPI Rank 1:         ParallelTrain=[
MPI Rank 1:             parallelizationMethod=DataParallelSGD
MPI Rank 1:             distributedMBReading=true
MPI Rank 1:             DataParallelSGD=[
MPI Rank 1:               gradientBits=32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust=[
MPI Rank 1:             reduceLearnRateIfImproveLessThan=0
MPI Rank 1:             loadBestModel=true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 1:             learnRateDecreaseFactor=0.5
MPI Rank 1:             learnRateIncreaseFactor=1.382
MPI Rank 1:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 1:         ]
MPI Rank 1:         clippingThresholdPerSample=1#INF
MPI Rank 1:     ]
MPI Rank 1:     reader=[
MPI Rank 1:       readerType=HTKMLFReader
MPI Rank 1:       readMethod=blockRandomize
MPI Rank 1:       miniBatchMode=Partial
MPI Rank 1:       randomize=Auto
MPI Rank 1:       verbosity=0
MPI Rank 1:       features=[
MPI Rank 1:           dim=363
MPI Rank 1:           type=Real
MPI Rank 1:           scpFile=glob_0000.scp
MPI Rank 1:       ]
MPI Rank 1:       labels=[
MPI Rank 1:           mlfFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/glob_0000.mlf
MPI Rank 1:           labelMappingFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/state.list
MPI Rank 1:           labelDim=132
MPI Rank 1:           labelType=Category
MPI Rank 1:       ]
MPI Rank 1:     ]
MPI Rank 1: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.config:stderr=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: command: speechTrain 
MPI Rank 1: precision = float
MPI Rank 1: CNTKCommandTrainInfo: speechTrain : 3
MPI Rank 1: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3
MPI Rank 1: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: SimpleNetworkBuilder Using CPU
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: trainlayer: OOV-exclusion code enabled, but no unigram specified to derive the word set from, so you won't get OOV exclusion
MPI Rank 1: total 132 state names in state list E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: GetTrainCriterionNodes  ...
MPI Rank 1: GetEvalCriterionNodes  ...
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating node CrossEntropyWithSoftmax 
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: Found 6 PreCompute nodes
MPI Rank 1: 	NodeName: InvStdOfFeatures
MPI Rank 1: 	NodeName: MeanOfFeatures
MPI Rank 1: 	NodeName: Prior
MPI Rank 1: 	NodeName: InvStdOfFeatures
MPI Rank 1: 	NodeName: MeanOfFeatures
MPI Rank 1: 	NodeName: Prior
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating node InvStdOfFeatures 
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 64]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating node MeanOfFeatures 
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 64]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating node Prior 
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 64]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 64]) -> [132, 1]
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 1: Starting Epoch 1: learning rate per sample = 0.015625  momentum = 0.900000 
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating node EvalErrorPrediction 
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 64]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 64]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 64]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 64], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 64]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 64]) -> [512, MBSize 64]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 64], B0[512, 1]) -> [512, MBSize 64]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 64], B1[512, 1]) -> [512, MBSize 64]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 64]) -> [132, MBSize 64]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 64], B2[132, 1]) -> [132, MBSize 64]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 64], HLast[132, MBSize 64]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[   1-  10 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.46945000; EvalErr[0]PerSample = 0.90781250; TotalTime = 0.56648s; TotalTimePerSample = 0.88513ms; SamplesPerSecond = 1129
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  11-  20 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.22299919; EvalErr[0]PerSample = 0.90156250; TotalTime = 0.52802s; TotalTimePerSample = 0.82503ms; SamplesPerSecond = 1212
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  21-  30 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.93971024; EvalErr[0]PerSample = 0.84687500; TotalTime = 0.48087s; TotalTimePerSample = 0.75135ms; SamplesPerSecond = 1330
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  31-  40 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.92341156; EvalErr[0]PerSample = 0.90468750; TotalTime = 0.42957s; TotalTimePerSample = 0.67121ms; SamplesPerSecond = 1489
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  41-  50 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.84073486; EvalErr[0]PerSample = 0.91093750; TotalTime = 0.40887s; TotalTimePerSample = 0.63886ms; SamplesPerSecond = 1565
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  51-  60 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.71251221; EvalErr[0]PerSample = 0.88437500; TotalTime = 0.42759s; TotalTimePerSample = 0.66812ms; SamplesPerSecond = 1496
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  61-  70 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.51561432; EvalErr[0]PerSample = 0.82500000; TotalTime = 0.80463s; TotalTimePerSample = 1.25723ms; SamplesPerSecond = 795
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  71-  80 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.49347534; EvalErr[0]PerSample = 0.81093750; TotalTime = 0.40943s; TotalTimePerSample = 0.63974ms; SamplesPerSecond = 1563
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  81-  90 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.34738159; EvalErr[0]PerSample = 0.76562500; TotalTime = 0.35741s; TotalTimePerSample = 0.55845ms; SamplesPerSecond = 1790
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  91- 100 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.51958923; EvalErr[0]PerSample = 0.79843750; TotalTime = 0.34487s; TotalTimePerSample = 0.53886ms; SamplesPerSecond = 1855
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 101- 110 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.24653320; EvalErr[0]PerSample = 0.80312500; TotalTime = 0.36905s; TotalTimePerSample = 0.57664ms; SamplesPerSecond = 1734
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 111- 120 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.33394165; EvalErr[0]PerSample = 0.80000000; TotalTime = 0.34653s; TotalTimePerSample = 0.54146ms; SamplesPerSecond = 1846
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 121- 130 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.17777100; EvalErr[0]PerSample = 0.77031250; TotalTime = 0.34773s; TotalTimePerSample = 0.54332ms; SamplesPerSecond = 1840
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 131- 140 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.09841919; EvalErr[0]PerSample = 0.76875000; TotalTime = 0.32264s; TotalTimePerSample = 0.50412ms; SamplesPerSecond = 1983
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 141- 150 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.06454773; EvalErr[0]PerSample = 0.72968750; TotalTime = 0.32812s; TotalTimePerSample = 0.51269ms; SamplesPerSecond = 1950
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 151- 160 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.91630859; EvalErr[0]PerSample = 0.69531250; TotalTime = 0.36087s; TotalTimePerSample = 0.56386ms; SamplesPerSecond = 1773
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 161- 170 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.90603027; EvalErr[0]PerSample = 0.73281250; TotalTime = 0.32972s; TotalTimePerSample = 0.51518ms; SamplesPerSecond = 1941
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 171- 180 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.74090576; EvalErr[0]PerSample = 0.65937500; TotalTime = 0.38801s; TotalTimePerSample = 0.60627ms; SamplesPerSecond = 1649
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 181- 190 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.67082520; EvalErr[0]PerSample = 0.67343750; TotalTime = 0.31889s; TotalTimePerSample = 0.49827ms; SamplesPerSecond = 2006
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 191- 200 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.67603760; EvalErr[0]PerSample = 0.66406250; TotalTime = 0.34557s; TotalTimePerSample = 0.53996ms; SamplesPerSecond = 1851
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 201- 210 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.54728394; EvalErr[0]PerSample = 0.62968750; TotalTime = 0.33636s; TotalTimePerSample = 0.52556ms; SamplesPerSecond = 1902
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 211- 220 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.61919556; EvalErr[0]PerSample = 0.67343750; TotalTime = 0.32110s; TotalTimePerSample = 0.50172ms; SamplesPerSecond = 1993
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 221- 230 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.52385254; EvalErr[0]PerSample = 0.65781250; TotalTime = 0.32650s; TotalTimePerSample = 0.51015ms; SamplesPerSecond = 1960
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 231- 240 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.47539673; EvalErr[0]PerSample = 0.63437500; TotalTime = 0.32700s; TotalTimePerSample = 0.51093ms; SamplesPerSecond = 1957
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 241- 250 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.43261108; EvalErr[0]PerSample = 0.61406250; TotalTime = 0.31669s; TotalTimePerSample = 0.49483ms; SamplesPerSecond = 2020
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 251- 260 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.41724243; EvalErr[0]PerSample = 0.63125000; TotalTime = 0.29686s; TotalTimePerSample = 0.46385ms; SamplesPerSecond = 2155
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 261- 270 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.17669678; EvalErr[0]PerSample = 0.57812500; TotalTime = 0.31753s; TotalTimePerSample = 0.49614ms; SamplesPerSecond = 2015
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 271- 280 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.31016235; EvalErr[0]PerSample = 0.64062500; TotalTime = 0.32381s; TotalTimePerSample = 0.50596ms; SamplesPerSecond = 1976
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 281- 290 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.26395874; EvalErr[0]PerSample = 0.61093750; TotalTime = 0.34064s; TotalTimePerSample = 0.53225ms; SamplesPerSecond = 1878
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 291- 300 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.15880737; EvalErr[0]PerSample = 0.58281250; TotalTime = 0.33763s; TotalTimePerSample = 0.52755ms; SamplesPerSecond = 1895
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 301- 310 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.22708130; EvalErr[0]PerSample = 0.59218750; TotalTime = 0.32690s; TotalTimePerSample = 0.51078ms; SamplesPerSecond = 1957
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 311- 320 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.25599365; EvalErr[0]PerSample = 0.60625000; TotalTime = 0.28297s; TotalTimePerSample = 0.44214ms; SamplesPerSecond = 2261
MPI Rank 1: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 3.007015; EvalErrPerSample = 0.72827148; Ave LearnRatePerSample = 0.015625; EpochTime=12.110122
MPI Rank 1: Starting Epoch 2: learning rate per sample = 0.001953  momentum = 0.656119 
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), Distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[   1-  10 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.13364467; EvalErr[0]PerSample = 0.57500000; TotalTime = 3.62883s; TotalTimePerSample = 1.41751ms; SamplesPerSecond = 705
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  11-  20 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.03769118; EvalErr[0]PerSample = 0.55898437; TotalTime = 3.33373s; TotalTimePerSample = 1.30224ms; SamplesPerSecond = 767
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  21-  30 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.02934017; EvalErr[0]PerSample = 0.55117187; TotalTime = 3.48940s; TotalTimePerSample = 1.36305ms; SamplesPerSecond = 733
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  31-  40 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.93926969; EvalErr[0]PerSample = 0.53593750; TotalTime = 3.90943s; TotalTimePerSample = 1.52712ms; SamplesPerSecond = 654
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  41-  50 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.92425177; EvalErr[0]PerSample = 0.52578125; TotalTime = 3.46428s; TotalTimePerSample = 1.35323ms; SamplesPerSecond = 738
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  51-  60 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.94704752; EvalErr[0]PerSample = 0.54570312; TotalTime = 3.54271s; TotalTimePerSample = 1.38387ms; SamplesPerSecond = 722
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  61-  70 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.94665378; EvalErr[0]PerSample = 0.53828125; TotalTime = 3.73779s; TotalTimePerSample = 1.46008ms; SamplesPerSecond = 684
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  71-  80 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.91211665; EvalErr[0]PerSample = 0.53789062; TotalTime = 4.99729s; TotalTimePerSample = 1.95207ms; SamplesPerSecond = 512
MPI Rank 1: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 1.9837519; EvalErrPerSample = 0.54609375; Ave LearnRatePerSample = 0.001953125; EpochTime=30.129382
MPI Rank 1: Starting Epoch 3: learning rate per sample = 0.000098  momentum = 0.656119 
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), Distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 3 of 3]-Minibatch[   1-  10 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.92706355; EvalErr[0]PerSample = 0.54785156; TotalTime = 5.41326s; TotalTimePerSample = 0.52864ms; SamplesPerSecond = 1891
MPI Rank 1:  Epoch[ 3 of 3]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.90739065; EvalErr[0]PerSample = 0.52812500; TotalTime = 4.79450s; TotalTimePerSample = 0.46821ms; SamplesPerSecond = 2135
MPI Rank 1: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.9172271; EvalErrPerSample = 0.53798828; Ave LearnRatePerSample = 9.765625146e-005; EpochTime=10.246066
MPI Rank 1: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: COMPLETED
MPI Rank 1: ~MPIWrapper
MPI Rank 2: Redirecting stderr to file C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr_speechTrain.logrank2
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: Build info: 
MPI Rank 2: 
MPI Rank 2: 		Built time: Oct  2 2015 13:14:34
MPI Rank 2: 		Last modified date: Fri Oct  2 13:09:06 2015
MPI Rank 2: 		Built by amitaga on Amitaga-Win-DT3           
MPI Rank 2: 		Build Path: E:\NetScale\CNTK\git_repos\cplx_master\MachineLearning\CNTK\
MPI Rank 2: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: running on Amitaga-Win-DT3 at 2015/10/02 22:06:29
MPI Rank 2: command line options: 
MPI Rank 2: configFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\DNN\cntk.config RunDir=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu DataDir=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data DeviceId=-1 stderr=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] 
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision=float
MPI Rank 2: command=speechTrain
MPI Rank 2: deviceId=$DeviceId$
MPI Rank 2: parallelTrain=true
MPI Rank 2: speechTrain=[
MPI Rank 2:     action=train
MPI Rank 2:     modelPath=$RunDir$/models/cntkSpeech.dnn
MPI Rank 2:     deviceId=$DeviceId$
MPI Rank 2:     traceLevel=1
MPI Rank 2:     SimpleNetworkBuilder=[
MPI Rank 2:         layerSizes=363:512:512:132
MPI Rank 2:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 2:         evalCriterion=ErrorPrediction
MPI Rank 2:         layerTypes=Sigmoid
MPI Rank 2:         initValueScale=1.0
MPI Rank 2:         applyMeanVarNorm=true
MPI Rank 2:         uniformInit=true
MPI Rank 2:         needPrior=true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 2:         layerSizes=363:512:512:132
MPI Rank 2:         trainingCriterion='CE'
MPI Rank 2:         evalCriterion='Err'
MPI Rank 2:         applyMeanVarNorm=true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD=[
MPI Rank 2:         epochSize=20480
MPI Rank 2:         minibatchSize=64:256:1024
MPI Rank 2:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult=10
MPI Rank 2:         momentumPerMB=0.9:0.656119
MPI Rank 2:         dropoutRate=0.0
MPI Rank 2:         maxEpochs=3
MPI Rank 2:         keepCheckPointFiles=true
MPI Rank 2:         ParallelTrain=[
MPI Rank 2:             parallelizationMethod=DataParallelSGD
MPI Rank 2:             distributedMBReading=true
MPI Rank 2:             DataParallelSGD=[
MPI Rank 2:               gradientBits=32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust=[
MPI Rank 2:             reduceLearnRateIfImproveLessThan=0
MPI Rank 2:             loadBestModel=true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 2:             learnRateDecreaseFactor=0.5
MPI Rank 2:             learnRateIncreaseFactor=1.382
MPI Rank 2:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 2:         ]
MPI Rank 2:         clippingThresholdPerSample=1#INF
MPI Rank 2:     ]
MPI Rank 2:     reader=[
MPI Rank 2:       readerType=HTKMLFReader
MPI Rank 2:       readMethod=blockRandomize
MPI Rank 2:       miniBatchMode=Partial
MPI Rank 2:       randomize=Auto
MPI Rank 2:       verbosity=0
MPI Rank 2:       features=[
MPI Rank 2:           dim=363
MPI Rank 2:           type=Real
MPI Rank 2:           scpFile=glob_0000.scp
MPI Rank 2:       ]
MPI Rank 2:       labels=[
MPI Rank 2:           mlfFile=$DataDir$/glob_0000.mlf
MPI Rank 2:           labelMappingFile=$DataDir$/state.list
MPI Rank 2:           labelDim=132
MPI Rank 2:           labelType=Category
MPI Rank 2:       ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: RunDir=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 2: DataDir=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data
MPI Rank 2: DeviceId=-1
MPI Rank 2: stderr=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision=float
MPI Rank 2: command=speechTrain
MPI Rank 2: deviceId=-1
MPI Rank 2: parallelTrain=true
MPI Rank 2: speechTrain=[
MPI Rank 2:     action=train
MPI Rank 2:     modelPath=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
MPI Rank 2:     deviceId=-1
MPI Rank 2:     traceLevel=1
MPI Rank 2:     SimpleNetworkBuilder=[
MPI Rank 2:         layerSizes=363:512:512:132
MPI Rank 2:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 2:         evalCriterion=ErrorPrediction
MPI Rank 2:         layerTypes=Sigmoid
MPI Rank 2:         initValueScale=1.0
MPI Rank 2:         applyMeanVarNorm=true
MPI Rank 2:         uniformInit=true
MPI Rank 2:         needPrior=true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 2:         layerSizes=363:512:512:132
MPI Rank 2:         trainingCriterion='CE'
MPI Rank 2:         evalCriterion='Err'
MPI Rank 2:         applyMeanVarNorm=true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD=[
MPI Rank 2:         epochSize=20480
MPI Rank 2:         minibatchSize=64:256:1024
MPI Rank 2:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult=10
MPI Rank 2:         momentumPerMB=0.9:0.656119
MPI Rank 2:         dropoutRate=0.0
MPI Rank 2:         maxEpochs=3
MPI Rank 2:         keepCheckPointFiles=true
MPI Rank 2:         ParallelTrain=[
MPI Rank 2:             parallelizationMethod=DataParallelSGD
MPI Rank 2:             distributedMBReading=true
MPI Rank 2:             DataParallelSGD=[
MPI Rank 2:               gradientBits=32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust=[
MPI Rank 2:             reduceLearnRateIfImproveLessThan=0
MPI Rank 2:             loadBestModel=true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 2:             learnRateDecreaseFactor=0.5
MPI Rank 2:             learnRateIncreaseFactor=1.382
MPI Rank 2:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 2:         ]
MPI Rank 2:         clippingThresholdPerSample=1#INF
MPI Rank 2:     ]
MPI Rank 2:     reader=[
MPI Rank 2:       readerType=HTKMLFReader
MPI Rank 2:       readMethod=blockRandomize
MPI Rank 2:       miniBatchMode=Partial
MPI Rank 2:       randomize=Auto
MPI Rank 2:       verbosity=0
MPI Rank 2:       features=[
MPI Rank 2:           dim=363
MPI Rank 2:           type=Real
MPI Rank 2:           scpFile=glob_0000.scp
MPI Rank 2:       ]
MPI Rank 2:       labels=[
MPI Rank 2:           mlfFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/glob_0000.mlf
MPI Rank 2:           labelMappingFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/state.list
MPI Rank 2:           labelDim=132
MPI Rank 2:           labelType=Category
MPI Rank 2:       ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: RunDir=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 2: DataDir=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data
MPI Rank 2: DeviceId=-1
MPI Rank 2: stderr=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: configparameters: cntk.config:command=speechTrain
MPI Rank 2: configparameters: cntk.config:DataDir=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data
MPI Rank 2: configparameters: cntk.config:deviceId=-1
MPI Rank 2: configparameters: cntk.config:parallelTrain=true
MPI Rank 2: configparameters: cntk.config:precision=float
MPI Rank 2: configparameters: cntk.config:RunDir=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu
MPI Rank 2: configparameters: cntk.config:speechTrain=[
MPI Rank 2:     action=train
MPI Rank 2:     modelPath=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/models/cntkSpeech.dnn
MPI Rank 2:     deviceId=-1
MPI Rank 2:     traceLevel=1
MPI Rank 2:     SimpleNetworkBuilder=[
MPI Rank 2:         layerSizes=363:512:512:132
MPI Rank 2:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 2:         evalCriterion=ErrorPrediction
MPI Rank 2:         layerTypes=Sigmoid
MPI Rank 2:         initValueScale=1.0
MPI Rank 2:         applyMeanVarNorm=true
MPI Rank 2:         uniformInit=true
MPI Rank 2:         needPrior=true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder=[    // the same as above but with BS
MPI Rank 2:         layerSizes=363:512:512:132
MPI Rank 2:         trainingCriterion='CE'
MPI Rank 2:         evalCriterion='Err'
MPI Rank 2:         applyMeanVarNorm=true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD=[
MPI Rank 2:         epochSize=20480
MPI Rank 2:         minibatchSize=64:256:1024
MPI Rank 2:         learningRatesPerMB=1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult=10
MPI Rank 2:         momentumPerMB=0.9:0.656119
MPI Rank 2:         dropoutRate=0.0
MPI Rank 2:         maxEpochs=3
MPI Rank 2:         keepCheckPointFiles=true
MPI Rank 2:         ParallelTrain=[
MPI Rank 2:             parallelizationMethod=DataParallelSGD
MPI Rank 2:             distributedMBReading=true
MPI Rank 2:             DataParallelSGD=[
MPI Rank 2:               gradientBits=32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust=[
MPI Rank 2:             reduceLearnRateIfImproveLessThan=0
MPI Rank 2:             loadBestModel=true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan=1000000000
MPI Rank 2:             learnRateDecreaseFactor=0.5
MPI Rank 2:             learnRateIncreaseFactor=1.382
MPI Rank 2:             autoAdjustLR=AdjustAfterEpoch
MPI Rank 2:         ]
MPI Rank 2:         clippingThresholdPerSample=1#INF
MPI Rank 2:     ]
MPI Rank 2:     reader=[
MPI Rank 2:       readerType=HTKMLFReader
MPI Rank 2:       readMethod=blockRandomize
MPI Rank 2:       miniBatchMode=Partial
MPI Rank 2:       randomize=Auto
MPI Rank 2:       verbosity=0
MPI Rank 2:       features=[
MPI Rank 2:           dim=363
MPI Rank 2:           type=Real
MPI Rank 2:           scpFile=glob_0000.scp
MPI Rank 2:       ]
MPI Rank 2:       labels=[
MPI Rank 2:           mlfFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/glob_0000.mlf
MPI Rank 2:           labelMappingFile=E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/state.list
MPI Rank 2:           labelDim=132
MPI Rank 2:           labelType=Category
MPI Rank 2:       ]
MPI Rank 2:     ]
MPI Rank 2: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: 
MPI Rank 2: configparameters: cntk.config:stderr=C:\cygwin64\tmp\cntk-test-20151002140628.47693\Speech\DNN_Parallel1BitQuantization@debug_cpu/stderr
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: command: speechTrain 
MPI Rank 2: precision = float
MPI Rank 2: CNTKCommandTrainInfo: speechTrain : 3
MPI Rank 2: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3
MPI Rank 2: CNTKCommandTrainBegin: speechTrain
MPI Rank 2: SimpleNetworkBuilder Using CPU
MPI Rank 2: reading script file glob_0000.scp ... 948 entries
MPI Rank 2: trainlayer: OOV-exclusion code enabled, but no unigram specified to derive the word set from, so you won't get OOV exclusion
MPI Rank 2: total 132 state names in state list E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/state.list
MPI Rank 2: htkmlfreader: reading MLF file E:\NetScale\CNTK\git_repos\cplx_master\Tests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 2: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 2: label set 0: 129 classes
MPI Rank 2: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 2: GetTrainCriterionNodes  ...
MPI Rank 2: GetEvalCriterionNodes  ...
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating node CrossEntropyWithSoftmax 
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: Found 6 PreCompute nodes
MPI Rank 2: 	NodeName: InvStdOfFeatures
MPI Rank 2: 	NodeName: MeanOfFeatures
MPI Rank 2: 	NodeName: Prior
MPI Rank 2: 	NodeName: InvStdOfFeatures
MPI Rank 2: 	NodeName: MeanOfFeatures
MPI Rank 2: 	NodeName: Prior
MPI Rank 2: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating node InvStdOfFeatures 
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 64]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating node MeanOfFeatures 
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 64]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating node Prior 
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 64]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 64]) -> [132, 1]
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 2: Starting Epoch 1: learning rate per sample = 0.015625  momentum = 0.900000 
MPI Rank 2: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating node EvalErrorPrediction 
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 64]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 64]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 64]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 64]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 64], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 64]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 64]) -> [512, MBSize 64]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 64], B0[512, 1]) -> [512, MBSize 64]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 64], B1[512, 1]) -> [512, MBSize 64]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 64]) -> [512, MBSize 64]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 64]) -> [132, MBSize 64]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 64], B2[132, 1]) -> [132, MBSize 64]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 64], HLast[132, MBSize 64]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[   1-  10 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.46945000; EvalErr[0]PerSample = 0.90781250; TotalTime = 0.64686s; TotalTimePerSample = 1.01072ms; SamplesPerSecond = 989
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  11-  20 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.22299919; EvalErr[0]PerSample = 0.90156250; TotalTime = 0.50631s; TotalTimePerSample = 0.79110ms; SamplesPerSecond = 1264
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  21-  30 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.93971024; EvalErr[0]PerSample = 0.84687500; TotalTime = 0.44268s; TotalTimePerSample = 0.69169ms; SamplesPerSecond = 1445
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  31-  40 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.92341156; EvalErr[0]PerSample = 0.90468750; TotalTime = 0.41495s; TotalTimePerSample = 0.64836ms; SamplesPerSecond = 1542
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  41-  50 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.84073486; EvalErr[0]PerSample = 0.91093750; TotalTime = 0.38416s; TotalTimePerSample = 0.60025ms; SamplesPerSecond = 1665
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  51-  60 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.71251221; EvalErr[0]PerSample = 0.88437500; TotalTime = 0.38589s; TotalTimePerSample = 0.60296ms; SamplesPerSecond = 1658
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  61-  70 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.51561432; EvalErr[0]PerSample = 0.82500000; TotalTime = 0.83420s; TotalTimePerSample = 1.30344ms; SamplesPerSecond = 767
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  71-  80 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.49347534; EvalErr[0]PerSample = 0.81093750; TotalTime = 0.48253s; TotalTimePerSample = 0.75396ms; SamplesPerSecond = 1326
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  81-  90 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.34738159; EvalErr[0]PerSample = 0.76562500; TotalTime = 0.42309s; TotalTimePerSample = 0.66108ms; SamplesPerSecond = 1512
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[  91- 100 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.51958923; EvalErr[0]PerSample = 0.79843750; TotalTime = 0.45254s; TotalTimePerSample = 0.70709ms; SamplesPerSecond = 1414
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 101- 110 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.24653320; EvalErr[0]PerSample = 0.80312500; TotalTime = 0.38251s; TotalTimePerSample = 0.59767ms; SamplesPerSecond = 1673
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 111- 120 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.33394165; EvalErr[0]PerSample = 0.80000000; TotalTime = 0.38218s; TotalTimePerSample = 0.59716ms; SamplesPerSecond = 1674
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 121- 130 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.17777100; EvalErr[0]PerSample = 0.77031250; TotalTime = 0.39575s; TotalTimePerSample = 0.61835ms; SamplesPerSecond = 1617
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 131- 140 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.09841919; EvalErr[0]PerSample = 0.76875000; TotalTime = 0.39896s; TotalTimePerSample = 0.62338ms; SamplesPerSecond = 1604
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 141- 150 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.06454773; EvalErr[0]PerSample = 0.72968750; TotalTime = 0.44467s; TotalTimePerSample = 0.69480ms; SamplesPerSecond = 1439
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 151- 160 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.91630859; EvalErr[0]PerSample = 0.69531250; TotalTime = 0.46148s; TotalTimePerSample = 0.72106ms; SamplesPerSecond = 1386
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 161- 170 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.90603027; EvalErr[0]PerSample = 0.73281250; TotalTime = 0.41693s; TotalTimePerSample = 0.65146ms; SamplesPerSecond = 1535
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 171- 180 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.74090576; EvalErr[0]PerSample = 0.65937500; TotalTime = 0.41539s; TotalTimePerSample = 0.64905ms; SamplesPerSecond = 1540
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 181- 190 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.67082520; EvalErr[0]PerSample = 0.67343750; TotalTime = 0.39431s; TotalTimePerSample = 0.61611ms; SamplesPerSecond = 1623
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 191- 200 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.67603760; EvalErr[0]PerSample = 0.66406250; TotalTime = 0.39318s; TotalTimePerSample = 0.61435ms; SamplesPerSecond = 1627
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 201- 210 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.54728394; EvalErr[0]PerSample = 0.62968750; TotalTime = 0.38225s; TotalTimePerSample = 0.59727ms; SamplesPerSecond = 1674
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 211- 220 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.61919556; EvalErr[0]PerSample = 0.67343750; TotalTime = 0.37546s; TotalTimePerSample = 0.58666ms; SamplesPerSecond = 1704
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 221- 230 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.52385254; EvalErr[0]PerSample = 0.65781250; TotalTime = 0.36288s; TotalTimePerSample = 0.56699ms; SamplesPerSecond = 1763
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 231- 240 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.47539673; EvalErr[0]PerSample = 0.63437500; TotalTime = 0.38801s; TotalTimePerSample = 0.60627ms; SamplesPerSecond = 1649
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 241- 250 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.43261108; EvalErr[0]PerSample = 0.61406250; TotalTime = 0.38021s; TotalTimePerSample = 0.59408ms; SamplesPerSecond = 1683
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 251- 260 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.41724243; EvalErr[0]PerSample = 0.63125000; TotalTime = 0.40227s; TotalTimePerSample = 0.62854ms; SamplesPerSecond = 1590
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 261- 270 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.17669678; EvalErr[0]PerSample = 0.57812500; TotalTime = 0.37731s; TotalTimePerSample = 0.58954ms; SamplesPerSecond = 1696
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 271- 280 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.31016235; EvalErr[0]PerSample = 0.64062500; TotalTime = 0.33676s; TotalTimePerSample = 0.52619ms; SamplesPerSecond = 1900
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 281- 290 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.26395874; EvalErr[0]PerSample = 0.61093750; TotalTime = 0.15335s; TotalTimePerSample = 0.23960ms; SamplesPerSecond = 4173
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 291- 300 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.15880737; EvalErr[0]PerSample = 0.58281250; TotalTime = 0.15085s; TotalTimePerSample = 0.23571ms; SamplesPerSecond = 4242
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 301- 310 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.22708130; EvalErr[0]PerSample = 0.59218750; TotalTime = 0.13938s; TotalTimePerSample = 0.21778ms; SamplesPerSecond = 4591
MPI Rank 2:  Epoch[ 1 of 3]-Minibatch[ 311- 320 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.25599365; EvalErr[0]PerSample = 0.60625000; TotalTime = 0.13457s; TotalTimePerSample = 0.21026ms; SamplesPerSecond = 4756
MPI Rank 2: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 3.007015; EvalErrPerSample = 0.72827148; Ave LearnRatePerSample = 0.015625; EpochTime=12.685444
MPI Rank 2: Starting Epoch 2: learning rate per sample = 0.001953  momentum = 0.656119 
MPI Rank 2: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), Distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[   1-  10 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.13364467; EvalErr[0]PerSample = 0.57500000; TotalTime = 3.65223s; TotalTimePerSample = 1.42665ms; SamplesPerSecond = 700
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  11-  20 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.03769118; EvalErr[0]PerSample = 0.55898437; TotalTime = 3.33573s; TotalTimePerSample = 1.30302ms; SamplesPerSecond = 767
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  21-  30 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.02934017; EvalErr[0]PerSample = 0.55117187; TotalTime = 3.48882s; TotalTimePerSample = 1.36282ms; SamplesPerSecond = 733
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  31-  40 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.93926969; EvalErr[0]PerSample = 0.53593750; TotalTime = 3.90988s; TotalTimePerSample = 1.52730ms; SamplesPerSecond = 654
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  41-  50 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.92425177; EvalErr[0]PerSample = 0.52578125; TotalTime = 3.46399s; TotalTimePerSample = 1.35312ms; SamplesPerSecond = 739
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  51-  60 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.94704752; EvalErr[0]PerSample = 0.54570312; TotalTime = 3.54072s; TotalTimePerSample = 1.38309ms; SamplesPerSecond = 723
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  61-  70 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.94665378; EvalErr[0]PerSample = 0.53828125; TotalTime = 3.73864s; TotalTimePerSample = 1.46041ms; SamplesPerSecond = 684
MPI Rank 2:  Epoch[ 2 of 3]-Minibatch[  71-  80 of 80]: SamplesSeen = 2560; TrainLossPerSample =  1.91211665; EvalErr[0]PerSample = 0.53789062; TotalTime = 4.80848s; TotalTimePerSample = 1.87831ms; SamplesPerSecond = 532
MPI Rank 2: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 1.9837519; EvalErrPerSample = 0.54609375; Ave LearnRatePerSample = 0.001953125; EpochTime=29.953305
MPI Rank 2: Starting Epoch 3: learning rate per sample = 0.000098  momentum = 0.656119 
MPI Rank 2: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), Distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 3 of 3]-Minibatch[   1-  10 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.92706355; EvalErr[0]PerSample = 0.54785156; TotalTime = 5.38062s; TotalTimePerSample = 0.52545ms; SamplesPerSecond = 1903
MPI Rank 2:  Epoch[ 3 of 3]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.90739065; EvalErr[0]PerSample = 0.52812500; TotalTime = 4.76607s; TotalTimePerSample = 0.46544ms; SamplesPerSecond = 2148
MPI Rank 2: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.9172271; EvalErrPerSample = 0.53798828; Ave LearnRatePerSample = 9.765625146e-005; EpochTime=10.1781
MPI Rank 2: CNTKCommandTrainEnd: speechTrain
MPI Rank 2: COMPLETED
MPI Rank 2: ~MPIWrapper
