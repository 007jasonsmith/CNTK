=== Running /cygdrive/e/NetScale/CNTK/git_repos/cplx_master2/x64/debug/cntk.exe configFile=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\LSTM/cntk.config RunDir=C:\cygwin64\tmp\cntk-test-20151024135527.675673\Speech\LSTM_Truncated@debug_gpu DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\Data ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\LSTM DeviceId=0
-------------------------------------------------------------------
Build info: 

		Built time: Oct 24 2015 13:33:25
		Last modified date: Thu Oct 22 16:00:27 2015
		Built by amitaga on Amitaga-Win-DT3           
		Build Path: E:\NetScale\CNTK\git_repos\cplx_master2\MachineLearning\CNTK\
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
-------------------------------------------------------------------
running on Amitaga-Win-DT3 at 2015/10/24 21:55:28
command line: 
E:\NetScale\CNTK\git_repos\cplx_master2\x64\debug\cntk.exe configFile=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\LSTM/cntk.config RunDir=C:\cygwin64\tmp\cntk-test-20151024135527.675673\Speech\LSTM_Truncated@debug_gpu DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\Data ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\LSTM DeviceId=0 

>>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
precision=float
command=speechTrain
deviceId=$DeviceId$
parallelTrain=false
frameMode=false
Truncated=true
speechTrain=[
    action=train
    modelPath=$RunDir$/models/cntkSpeech.dnn
    deviceId=$DeviceId$
    traceLevel=1
    SGD=[
        epochSize=20480
        minibatchSize=20
        learningRatesPerMB=0.5
        numMBsToShowResult=10
        momentumPerMB=0:0.9
        maxEpochs=4
        keepCheckPointFiles=true       
    ]
    reader=[
      readerType=HTKMLFReader
      readMethod=blockRandomize
      miniBatchMode=Partial
      nbruttsineachrecurrentiter=32
      randomize=Auto
      verbosity=0
      features=[
          dim=363
          type=Real
          scpFile=$DataDir$/glob_0000.scp
      ]
      labels=[
          mlfFile=$DataDir$/glob_0000.mlf
          labelMappingFile=$DataDir$/state.list
          labelDim=132
          labelType=Category
      ]
    ]
    originalExperimentalNetworkBuilder=[
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
Wxo = Parameter(cellDim, inputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1); 
            Wxi = Parameter(cellDim, inputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wxf = Parameter(cellDim, inputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wxc = Parameter(cellDim, inputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
bo = Parameter(cellDim, 1, init='fixedValue', value=0.0); 
            bc = Parameter(cellDim, 1, init='fixedValue', value=0.0);
            bi = Parameter(cellDim, 1, init='fixedValue', value=0.0);
            bf = Parameter(cellDim, 1, init='fixedValue', value=0.0);
            Whi = Parameter(cellDim, outputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wci = Parameter(cellDim, 1, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Whf = Parameter(cellDim, outputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wcf = Parameter(cellDim, 1, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Who = Parameter(cellDim, outputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wco = Parameter(cellDim, 1, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Whc = Parameter(cellDim, outputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wmr = Parameter(outputDim, cellDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            sWxo = Parameter(1, 1, init='fixedValue', value=0.0);
            sWxi = Parameter(1, 1, init='fixedValue', value=0.0);
            sWxf = Parameter(1, 1, init='fixedValue', value=0.0);
            sWxc = Parameter(1, 1, init='fixedValue', value=0.0);
            sWhi = Parameter(1, 1, init='fixedValue', value=0.0);
            sWci = Parameter(1, 1, init='fixedValue', value=0.0);
            sWhf = Parameter(1, 1, init='fixedValue', value=0.0);
            sWcf = Parameter(1, 1, init='fixedValue', value=0.0);
            sWho = Parameter(1, 1, init='fixedValue', value=0.0);
            sWco = Parameter(1, 1, init='fixedValue', value=0.0);
            sWhc = Parameter(1, 1, init='fixedValue', value=0.0);
            sWmr = Parameter(1, 1, init='fixedValue', value=0.0);
            expsWxo = Exp(sWxo);
            expsWxi = Exp(sWxi);
            expsWxf = Exp(sWxf);
            expsWxc = Exp(sWxc);
            expsWhi = Exp(sWhi);
            expsWci = Exp(sWci);     
            expsWhf = Exp(sWhf);
            expsWcf = Exp(sWcf);
            expsWho = Exp(sWho);
            expsWco = Exp(sWco);
            expsWhc = Exp(sWhc);
            expsWmr = Exp(sWmr);
            dh = PastValue(outputDim, 1, output, timeStep=1);
            dc = PastValue(cellDim, 1, ct, timeStep=1);
            Wxix = Times(Wxi, Scale(expsWxi, inputx));
            Whidh = Times(Whi, Scale(expsWhi, dh));
            Wcidc = DiagTimes(Wci, Scale(expsWci, dc));
            it = Sigmoid (Plus ( Plus (Plus (Wxix, bi), Whidh), Wcidc));
            Wxcx = Times(Wxc, Scale(expsWxc, inputx));
            Whcdh = Times(Whc, Scale(expsWhc, dh));
            bit = ElementTimes(it, Tanh( Plus(Wxcx, Plus(Whcdh, bc))));
            Wxfx = Times(Wxf, Scale(expsWxf,inputx));
            Whfdh = Times(Whf, Scale(expsWhf, dh));
            Wcfdc = DiagTimes(Wcf, Scale(expsWcf, dc));
            ft = Sigmoid( Plus (Plus (Plus(Wxfx, bf), Whfdh), Wcfdc));
            bft = ElementTimes(ft, dc);
            ct = Plus(bft, bit);
            Wxox  = Times(Wxo, Scale(expsWxo, inputx));
            Whodh = Times(Who, Scale(expsWho, dh));
            Wcoct = DiagTimes(Wco, Scale(expsWco, ct));
            ot = Sigmoid( Plus( Plus( Plus(Wxox, bo), Whodh), Wcoct));
            mt = ElementTimes(ot, Tanh(ct));
            output = Times(Wmr, Scale(expsWmr, mt)); 
        ]
        baseFeatDim=33
        RowSliceStart=330 
        FeatDim=363
        labelDim=132
        cellDim=1024
        hiddenDim=256
features=Input(FeatDim, 1, tag='feature')     
        labels=Input(labelDim, 1, tag='label')
feashift=RowSlice(RowSliceStart, baseFeatDim, features);      
        featNorm = MeanVarNorm(feashift)
        LSTMoutput1 = LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm);
LSTMoutput2 = LSTMPComponentWithSelfStab(hiddenDim, hiddenDim, cellDim, LSTMoutput1.output);    
        LSTMoutput3 = LSTMPComponentWithSelfStab(hiddenDim, hiddenDim, cellDim, LSTMoutput2.output);
        W = Parameter(labelDim, hiddenDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
        b = Parameter(labelDim, 1, init='fixedValue', value=0);
        sW = Parameter(1, 1, init='fixedValue', value=0.0);
        expsW = Exp(sW);
        LSTMoutputW = Plus(Times(W, Scale(expsW, LSTMoutput3.output)), b);
cr = CrossEntropyWithSoftmax(labels, LSTMoutputW,tag='criteria');  
        Err = ErrorPrediction(labels,LSTMoutputW,tag='eval');
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood=Minus(LSTMoutputW,logPrior,tag='output')
    ]
    ExperimentalNetworkBuilder=[
        void = 0        // (BUGBUG: we do not allow zero-argument macros; will be fixed. For now, pass void)
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = Parameter(m, 1, init='fixedValue', value=0.0)
        ScalarParam(void) = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta(void) = Exp(ScalarParam(void))
        Stabilize(in) = Scale(NewBeta(void), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B(void) = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            dh = PastValue(outputDim, 1, output);                   // hidden state(t-1)
            dc = PastValue(cellDim, 1, ct);                         // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B(void) + H(dh) + C(dc))       // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B(void)))         // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B(void) + H(dh) + C(dc))       // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B(void) + H(dh) + C(ct))       // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim      // TODO: 363--is this the correct explanation?
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input(featDim, 1, tag='feature')
        labels = Input(labelDim, 1, tag='label')
feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, features);      
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
RunDir=C:\cygwin64\tmp\cntk-test-20151024135527.675673\Speech\LSTM_Truncated@debug_gpu
DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\Data
ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\LSTM
DeviceId=0

<<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
precision=float
command=speechTrain
deviceId=0
parallelTrain=false
frameMode=false
Truncated=true
speechTrain=[
    action=train
    modelPath=C:\cygwin64\tmp\cntk-test-20151024135527.675673\Speech\LSTM_Truncated@debug_gpu/models/cntkSpeech.dnn
    deviceId=0
    traceLevel=1
    SGD=[
        epochSize=20480
        minibatchSize=20
        learningRatesPerMB=0.5
        numMBsToShowResult=10
        momentumPerMB=0:0.9
        maxEpochs=4
        keepCheckPointFiles=true       
    ]
    reader=[
      readerType=HTKMLFReader
      readMethod=blockRandomize
      miniBatchMode=Partial
      nbruttsineachrecurrentiter=32
      randomize=Auto
      verbosity=0
      features=[
          dim=363
          type=Real
          scpFile=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\Data/glob_0000.scp
      ]
      labels=[
          mlfFile=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\Data/glob_0000.mlf
          labelMappingFile=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\Data/state.list
          labelDim=132
          labelType=Category
      ]
    ]
    originalExperimentalNetworkBuilder=[
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
Wxo = Parameter(cellDim, inputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1); 
            Wxi = Parameter(cellDim, inputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wxf = Parameter(cellDim, inputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wxc = Parameter(cellDim, inputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
bo = Parameter(cellDim, 1, init='fixedValue', value=0.0); 
            bc = Parameter(cellDim, 1, init='fixedValue', value=0.0);
            bi = Parameter(cellDim, 1, init='fixedValue', value=0.0);
            bf = Parameter(cellDim, 1, init='fixedValue', value=0.0);
            Whi = Parameter(cellDim, outputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wci = Parameter(cellDim, 1, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Whf = Parameter(cellDim, outputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wcf = Parameter(cellDim, 1, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Who = Parameter(cellDim, outputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wco = Parameter(cellDim, 1, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Whc = Parameter(cellDim, outputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wmr = Parameter(outputDim, cellDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            sWxo = Parameter(1, 1, init='fixedValue', value=0.0);
            sWxi = Parameter(1, 1, init='fixedValue', value=0.0);
            sWxf = Parameter(1, 1, init='fixedValue', value=0.0);
            sWxc = Parameter(1, 1, init='fixedValue', value=0.0);
            sWhi = Parameter(1, 1, init='fixedValue', value=0.0);
            sWci = Parameter(1, 1, init='fixedValue', value=0.0);
            sWhf = Parameter(1, 1, init='fixedValue', value=0.0);
            sWcf = Parameter(1, 1, init='fixedValue', value=0.0);
            sWho = Parameter(1, 1, init='fixedValue', value=0.0);
            sWco = Parameter(1, 1, init='fixedValue', value=0.0);
            sWhc = Parameter(1, 1, init='fixedValue', value=0.0);
            sWmr = Parameter(1, 1, init='fixedValue', value=0.0);
            expsWxo = Exp(sWxo);
            expsWxi = Exp(sWxi);
            expsWxf = Exp(sWxf);
            expsWxc = Exp(sWxc);
            expsWhi = Exp(sWhi);
            expsWci = Exp(sWci);     
            expsWhf = Exp(sWhf);
            expsWcf = Exp(sWcf);
            expsWho = Exp(sWho);
            expsWco = Exp(sWco);
            expsWhc = Exp(sWhc);
            expsWmr = Exp(sWmr);
            dh = PastValue(outputDim, 1, output, timeStep=1);
            dc = PastValue(cellDim, 1, ct, timeStep=1);
            Wxix = Times(Wxi, Scale(expsWxi, inputx));
            Whidh = Times(Whi, Scale(expsWhi, dh));
            Wcidc = DiagTimes(Wci, Scale(expsWci, dc));
            it = Sigmoid (Plus ( Plus (Plus (Wxix, bi), Whidh), Wcidc));
            Wxcx = Times(Wxc, Scale(expsWxc, inputx));
            Whcdh = Times(Whc, Scale(expsWhc, dh));
            bit = ElementTimes(it, Tanh( Plus(Wxcx, Plus(Whcdh, bc))));
            Wxfx = Times(Wxf, Scale(expsWxf,inputx));
            Whfdh = Times(Whf, Scale(expsWhf, dh));
            Wcfdc = DiagTimes(Wcf, Scale(expsWcf, dc));
            ft = Sigmoid( Plus (Plus (Plus(Wxfx, bf), Whfdh), Wcfdc));
            bft = ElementTimes(ft, dc);
            ct = Plus(bft, bit);
            Wxox  = Times(Wxo, Scale(expsWxo, inputx));
            Whodh = Times(Who, Scale(expsWho, dh));
            Wcoct = DiagTimes(Wco, Scale(expsWco, ct));
            ot = Sigmoid( Plus( Plus( Plus(Wxox, bo), Whodh), Wcoct));
            mt = ElementTimes(ot, Tanh(ct));
            output = Times(Wmr, Scale(expsWmr, mt)); 
        ]
        baseFeatDim=33
        RowSliceStart=330 
        FeatDim=363
        labelDim=132
        cellDim=1024
        hiddenDim=256
features=Input(FeatDim, 1, tag='feature')     
        labels=Input(labelDim, 1, tag='label')
feashift=RowSlice(RowSliceStart, baseFeatDim, features);      
        featNorm = MeanVarNorm(feashift)
        LSTMoutput1 = LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm);
LSTMoutput2 = LSTMPComponentWithSelfStab(hiddenDim, hiddenDim, cellDim, LSTMoutput1.output);    
        LSTMoutput3 = LSTMPComponentWithSelfStab(hiddenDim, hiddenDim, cellDim, LSTMoutput2.output);
        W = Parameter(labelDim, hiddenDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
        b = Parameter(labelDim, 1, init='fixedValue', value=0);
        sW = Parameter(1, 1, init='fixedValue', value=0.0);
        expsW = Exp(sW);
        LSTMoutputW = Plus(Times(W, Scale(expsW, LSTMoutput3.output)), b);
cr = CrossEntropyWithSoftmax(labels, LSTMoutputW,tag='criteria');  
        Err = ErrorPrediction(labels,LSTMoutputW,tag='eval');
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood=Minus(LSTMoutputW,logPrior,tag='output')
    ]
    ExperimentalNetworkBuilder=[
        void = 0        // (BUGBUG: we do not allow zero-argument macros; will be fixed. For now, pass void)
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = Parameter(m, 1, init='fixedValue', value=0.0)
        ScalarParam(void) = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta(void) = Exp(ScalarParam(void))
        Stabilize(in) = Scale(NewBeta(void), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B(void) = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            dh = PastValue(outputDim, 1, output);                   // hidden state(t-1)
            dc = PastValue(cellDim, 1, ct);                         // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B(void) + H(dh) + C(dc))       // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B(void)))         // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B(void) + H(dh) + C(dc))       // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B(void) + H(dh) + C(ct))       // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim      // TODO: 363--is this the correct explanation?
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input(featDim, 1, tag='feature')
        labels = Input(labelDim, 1, tag='label')
feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, features);      
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
RunDir=C:\cygwin64\tmp\cntk-test-20151024135527.675673\Speech\LSTM_Truncated@debug_gpu
DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\Data
ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\LSTM
DeviceId=0

<<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.config:command=speechTrain
configparameters: cntk.config:ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\LSTM
configparameters: cntk.config:DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\Data
configparameters: cntk.config:deviceId=0
configparameters: cntk.config:frameMode=false
configparameters: cntk.config:parallelTrain=false
configparameters: cntk.config:precision=float
configparameters: cntk.config:RunDir=C:\cygwin64\tmp\cntk-test-20151024135527.675673\Speech\LSTM_Truncated@debug_gpu
configparameters: cntk.config:speechTrain=[
    action=train
    modelPath=C:\cygwin64\tmp\cntk-test-20151024135527.675673\Speech\LSTM_Truncated@debug_gpu/models/cntkSpeech.dnn
    deviceId=0
    traceLevel=1
    SGD=[
        epochSize=20480
        minibatchSize=20
        learningRatesPerMB=0.5
        numMBsToShowResult=10
        momentumPerMB=0:0.9
        maxEpochs=4
        keepCheckPointFiles=true       
    ]
    reader=[
      readerType=HTKMLFReader
      readMethod=blockRandomize
      miniBatchMode=Partial
      nbruttsineachrecurrentiter=32
      randomize=Auto
      verbosity=0
      features=[
          dim=363
          type=Real
          scpFile=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\Data/glob_0000.scp
      ]
      labels=[
          mlfFile=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\Data/glob_0000.mlf
          labelMappingFile=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\Data/state.list
          labelDim=132
          labelType=Category
      ]
    ]
    originalExperimentalNetworkBuilder=[
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
Wxo = Parameter(cellDim, inputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1); 
            Wxi = Parameter(cellDim, inputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wxf = Parameter(cellDim, inputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wxc = Parameter(cellDim, inputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
bo = Parameter(cellDim, 1, init='fixedValue', value=0.0); 
            bc = Parameter(cellDim, 1, init='fixedValue', value=0.0);
            bi = Parameter(cellDim, 1, init='fixedValue', value=0.0);
            bf = Parameter(cellDim, 1, init='fixedValue', value=0.0);
            Whi = Parameter(cellDim, outputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wci = Parameter(cellDim, 1, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Whf = Parameter(cellDim, outputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wcf = Parameter(cellDim, 1, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Who = Parameter(cellDim, outputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wco = Parameter(cellDim, 1, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Whc = Parameter(cellDim, outputDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            Wmr = Parameter(outputDim, cellDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
            sWxo = Parameter(1, 1, init='fixedValue', value=0.0);
            sWxi = Parameter(1, 1, init='fixedValue', value=0.0);
            sWxf = Parameter(1, 1, init='fixedValue', value=0.0);
            sWxc = Parameter(1, 1, init='fixedValue', value=0.0);
            sWhi = Parameter(1, 1, init='fixedValue', value=0.0);
            sWci = Parameter(1, 1, init='fixedValue', value=0.0);
            sWhf = Parameter(1, 1, init='fixedValue', value=0.0);
            sWcf = Parameter(1, 1, init='fixedValue', value=0.0);
            sWho = Parameter(1, 1, init='fixedValue', value=0.0);
            sWco = Parameter(1, 1, init='fixedValue', value=0.0);
            sWhc = Parameter(1, 1, init='fixedValue', value=0.0);
            sWmr = Parameter(1, 1, init='fixedValue', value=0.0);
            expsWxo = Exp(sWxo);
            expsWxi = Exp(sWxi);
            expsWxf = Exp(sWxf);
            expsWxc = Exp(sWxc);
            expsWhi = Exp(sWhi);
            expsWci = Exp(sWci);     
            expsWhf = Exp(sWhf);
            expsWcf = Exp(sWcf);
            expsWho = Exp(sWho);
            expsWco = Exp(sWco);
            expsWhc = Exp(sWhc);
            expsWmr = Exp(sWmr);
            dh = PastValue(outputDim, 1, output, timeStep=1);
            dc = PastValue(cellDim, 1, ct, timeStep=1);
            Wxix = Times(Wxi, Scale(expsWxi, inputx));
            Whidh = Times(Whi, Scale(expsWhi, dh));
            Wcidc = DiagTimes(Wci, Scale(expsWci, dc));
            it = Sigmoid (Plus ( Plus (Plus (Wxix, bi), Whidh), Wcidc));
            Wxcx = Times(Wxc, Scale(expsWxc, inputx));
            Whcdh = Times(Whc, Scale(expsWhc, dh));
            bit = ElementTimes(it, Tanh( Plus(Wxcx, Plus(Whcdh, bc))));
            Wxfx = Times(Wxf, Scale(expsWxf,inputx));
            Whfdh = Times(Whf, Scale(expsWhf, dh));
            Wcfdc = DiagTimes(Wcf, Scale(expsWcf, dc));
            ft = Sigmoid( Plus (Plus (Plus(Wxfx, bf), Whfdh), Wcfdc));
            bft = ElementTimes(ft, dc);
            ct = Plus(bft, bit);
            Wxox  = Times(Wxo, Scale(expsWxo, inputx));
            Whodh = Times(Who, Scale(expsWho, dh));
            Wcoct = DiagTimes(Wco, Scale(expsWco, ct));
            ot = Sigmoid( Plus( Plus( Plus(Wxox, bo), Whodh), Wcoct));
            mt = ElementTimes(ot, Tanh(ct));
            output = Times(Wmr, Scale(expsWmr, mt)); 
        ]
        baseFeatDim=33
        RowSliceStart=330 
        FeatDim=363
        labelDim=132
        cellDim=1024
        hiddenDim=256
features=Input(FeatDim, 1, tag='feature')     
        labels=Input(labelDim, 1, tag='label')
feashift=RowSlice(RowSliceStart, baseFeatDim, features);      
        featNorm = MeanVarNorm(feashift)
        LSTMoutput1 = LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm);
LSTMoutput2 = LSTMPComponentWithSelfStab(hiddenDim, hiddenDim, cellDim, LSTMoutput1.output);    
        LSTMoutput3 = LSTMPComponentWithSelfStab(hiddenDim, hiddenDim, cellDim, LSTMoutput2.output);
        W = Parameter(labelDim, hiddenDim, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1);
        b = Parameter(labelDim, 1, init='fixedValue', value=0);
        sW = Parameter(1, 1, init='fixedValue', value=0.0);
        expsW = Exp(sW);
        LSTMoutputW = Plus(Times(W, Scale(expsW, LSTMoutput3.output)), b);
cr = CrossEntropyWithSoftmax(labels, LSTMoutputW,tag='criteria');  
        Err = ErrorPrediction(labels,LSTMoutputW,tag='eval');
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood=Minus(LSTMoutputW,logPrior,tag='output')
    ]
    ExperimentalNetworkBuilder=[
        void = 0        // (BUGBUG: we do not allow zero-argument macros; will be fixed. For now, pass void)
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = Parameter(m, 1, init='fixedValue', value=0.0)
        ScalarParam(void) = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta(void) = Exp(ScalarParam(void))
        Stabilize(in) = Scale(NewBeta(void), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B(void) = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            dh = PastValue(outputDim, 1, output);                   // hidden state(t-1)
            dc = PastValue(cellDim, 1, ct);                         // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B(void) + H(dh) + C(dc))       // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B(void)))         // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B(void) + H(dh) + C(dc))       // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B(void) + H(dh) + C(ct))       // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim      // TODO: 363--is this the correct explanation?
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input(featDim, 1, tag='feature')
        labels = Input(labelDim, 1, tag='label')
feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, features);      
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]

configparameters: cntk.config:Truncated=true
<<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
command: speechTrain 
precision = float
CNTKModelPath: C:\cygwin64\tmp\cntk-test-20151024135527.675673\Speech\LSTM_Truncated@debug_gpu/models/cntkSpeech.dnn
CNTKCommandTrainInfo: speechTrain : 4
CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
CNTKCommandTrainBegin: speechTrain
ExperimentalNetworkBuilder using GPU 0
reading script file E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\Data/glob_0000.scp ... 948 entries
trainlayer: OOV-exclusion code enabled, but no unigram specified to derive the word set from, so you won't get OOV exclusion
total 132 state names in state list E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\Data/state.list
htkmlfreader: reading MLF file E:\NetScale\CNTK\git_repos\cplx_master2\Tests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
Node --> B = LearnableParameter
Node --> labels = InputValue
Node --> LSTMoutputW./*+*/left./***/left = LearnableParameter
Node --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].Wmr = LearnableParameter
Node --> LSTMoutput[3].output./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].output./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].Wmr = LearnableParameter
Node --> LSTMoutput[2].output./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].output./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].Wmr = LearnableParameter
Node --> LSTMoutput[1].output./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].output./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp
Node --> features = InputValue
Node --> feashift = RowSlice
Node --> featNorm.meanVector = Mean
Node --> featNorm.invStdDevVector = InvStdDev
Node --> featNorm = PerDimMeanVarNormalization
Node --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale
Node --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left = Times
Node --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter
Node --> LSTMoutput[1].ot.z./*+*/left./*+*/left = Plus
Node --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left = LearnableParameter
Node --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].dh = PastValue
Node --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right = Scale
Node --> LSTMoutput[1].ot.z./*+*/left./*+*/right = Times
Node --> LSTMoutput[1].ot.z./*+*/left = Plus
Node --> LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale
Node --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left = Times
Node --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter
Node --> LSTMoutput[1].ft.z./*+*/left./*+*/left = Plus
Node --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left = LearnableParameter
Node --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right = Scale
Node --> LSTMoutput[1].ft.z./*+*/left./*+*/right = Times
Node --> LSTMoutput[1].ft.z./*+*/left = Plus
Node --> LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[1].dc = PastValue
Node --> LSTMoutput[1].ft.z./*+*/right.matrix = Scale
Node --> LSTMoutput[1].ft.z./*+*/right = DiagTimes
Node --> LSTMoutput[1].ft.z = Plus
Node --> LSTMoutput[1].ft = Sigmoid
Node --> LSTMoutput[1].bft = ElementTimes
Node --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale
Node --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left = Times
Node --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter
Node --> LSTMoutput[1].it.z./*+*/left./*+*/left = Plus
Node --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/left = LearnableParameter
Node --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right = Scale
Node --> LSTMoutput[1].it.z./*+*/left./*+*/right = Times
Node --> LSTMoutput[1].it.z./*+*/left = Plus
Node --> LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[1].it.z./*+*/right.matrix = Scale
Node --> LSTMoutput[1].it.z./*+*/right = DiagTimes
Node --> LSTMoutput[1].it.z = Plus
Node --> LSTMoutput[1].it = Sigmoid
Node --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right = Scale
Node --> LSTMoutput[1].bit./*.**/right.z./*+*/left = Times
Node --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale
Node --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left = Times
Node --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter
Node --> LSTMoutput[1].bit./*.**/right.z./*+*/right = Plus
Node --> LSTMoutput[1].bit./*.**/right.z = Plus
Node --> LSTMoutput[1].bit./*.**/right = Tanh
Node --> LSTMoutput[1].bit = ElementTimes
Node --> LSTMoutput[1].ct = Plus
Node --> LSTMoutput[1].ot.z./*+*/right.matrix = Scale
Node --> LSTMoutput[1].ot.z./*+*/right = DiagTimes
Node --> LSTMoutput[1].ot.z = Plus
Node --> LSTMoutput[1].ot = Sigmoid
Node --> LSTMoutput[1].mt./*.**/right = Tanh
Node --> LSTMoutput[1].mt = ElementTimes
Node --> LSTMoutput[1].output./***/right = Scale
Node --> LSTMoutput[1].output = Times
Node --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale
Node --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left = Times
Node --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter
Node --> LSTMoutput[2].ot.z./*+*/left./*+*/left = Plus
Node --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left = LearnableParameter
Node --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].dh = PastValue
Node --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right = Scale
Node --> LSTMoutput[2].ot.z./*+*/left./*+*/right = Times
Node --> LSTMoutput[2].ot.z./*+*/left = Plus
Node --> LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale
Node --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left = Times
Node --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter
Node --> LSTMoutput[2].ft.z./*+*/left./*+*/left = Plus
Node --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left = LearnableParameter
Node --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right = Scale
Node --> LSTMoutput[2].ft.z./*+*/left./*+*/right = Times
Node --> LSTMoutput[2].ft.z./*+*/left = Plus
Node --> LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[2].dc = PastValue
Node --> LSTMoutput[2].ft.z./*+*/right.matrix = Scale
Node --> LSTMoutput[2].ft.z./*+*/right = DiagTimes
Node --> LSTMoutput[2].ft.z = Plus
Node --> LSTMoutput[2].ft = Sigmoid
Node --> LSTMoutput[2].bft = ElementTimes
Node --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale
Node --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left = Times
Node --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter
Node --> LSTMoutput[2].it.z./*+*/left./*+*/left = Plus
Node --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/left = LearnableParameter
Node --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right = Scale
Node --> LSTMoutput[2].it.z./*+*/left./*+*/right = Times
Node --> LSTMoutput[2].it.z./*+*/left = Plus
Node --> LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[2].it.z./*+*/right.matrix = Scale
Node --> LSTMoutput[2].it.z./*+*/right = DiagTimes
Node --> LSTMoutput[2].it.z = Plus
Node --> LSTMoutput[2].it = Sigmoid
Node --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right = Scale
Node --> LSTMoutput[2].bit./*.**/right.z./*+*/left = Times
Node --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale
Node --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left = Times
Node --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter
Node --> LSTMoutput[2].bit./*.**/right.z./*+*/right = Plus
Node --> LSTMoutput[2].bit./*.**/right.z = Plus
Node --> LSTMoutput[2].bit./*.**/right = Tanh
Node --> LSTMoutput[2].bit = ElementTimes
Node --> LSTMoutput[2].ct = Plus
Node --> LSTMoutput[2].ot.z./*+*/right.matrix = Scale
Node --> LSTMoutput[2].ot.z./*+*/right = DiagTimes
Node --> LSTMoutput[2].ot.z = Plus
Node --> LSTMoutput[2].ot = Sigmoid
Node --> LSTMoutput[2].mt./*.**/right = Tanh
Node --> LSTMoutput[2].mt = ElementTimes
Node --> LSTMoutput[2].output./***/right = Scale
Node --> LSTMoutput[2].output = Times
Node --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale
Node --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left = Times
Node --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter
Node --> LSTMoutput[3].ot.z./*+*/left./*+*/left = Plus
Node --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left = LearnableParameter
Node --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].dh = PastValue
Node --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right = Scale
Node --> LSTMoutput[3].ot.z./*+*/left./*+*/right = Times
Node --> LSTMoutput[3].ot.z./*+*/left = Plus
Node --> LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale
Node --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left = Times
Node --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter
Node --> LSTMoutput[3].ft.z./*+*/left./*+*/left = Plus
Node --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left = LearnableParameter
Node --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right = Scale
Node --> LSTMoutput[3].ft.z./*+*/left./*+*/right = Times
Node --> LSTMoutput[3].ft.z./*+*/left = Plus
Node --> LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[3].dc = PastValue
Node --> LSTMoutput[3].ft.z./*+*/right.matrix = Scale
Node --> LSTMoutput[3].ft.z./*+*/right = DiagTimes
Node --> LSTMoutput[3].ft.z = Plus
Node --> LSTMoutput[3].ft = Sigmoid
Node --> LSTMoutput[3].bft = ElementTimes
Node --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale
Node --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left = Times
Node --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter
Node --> LSTMoutput[3].it.z./*+*/left./*+*/left = Plus
Node --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/left = LearnableParameter
Node --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right = Scale
Node --> LSTMoutput[3].it.z./*+*/left./*+*/right = Times
Node --> LSTMoutput[3].it.z./*+*/left = Plus
Node --> LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[3].it.z./*+*/right.matrix = Scale
Node --> LSTMoutput[3].it.z./*+*/right = DiagTimes
Node --> LSTMoutput[3].it.z = Plus
Node --> LSTMoutput[3].it = Sigmoid
Node --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right = Scale
Node --> LSTMoutput[3].bit./*.**/right.z./*+*/left = Times
Node --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter
Node --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale
Node --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left = Times
Node --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter
Node --> LSTMoutput[3].bit./*.**/right.z./*+*/right = Plus
Node --> LSTMoutput[3].bit./*.**/right.z = Plus
Node --> LSTMoutput[3].bit./*.**/right = Tanh
Node --> LSTMoutput[3].bit = ElementTimes
Node --> LSTMoutput[3].ct = Plus
Node --> LSTMoutput[3].ot.z./*+*/right.matrix = Scale
Node --> LSTMoutput[3].ot.z./*+*/right = DiagTimes
Node --> LSTMoutput[3].ot.z = Plus
Node --> LSTMoutput[3].ot = Sigmoid
Node --> LSTMoutput[3].mt./*.**/right = Tanh
Node --> LSTMoutput[3].mt = ElementTimes
Node --> LSTMoutput[3].output./***/right = Scale
Node --> LSTMoutput[3].output = Times
Node --> LSTMoutputW./*+*/left./***/right = Scale
Node --> LSTMoutputW./*+*/left = Times
Node --> LSTMoutputW = Plus
Node --> Err = ErrorPrediction
Node --> logPrior.x = Mean
Node --> logPrior = Log
Node --> ScaledLogLikelihood = Minus
Node --> cr = CrossEntropyWithSoftmax
class Microsoft::MSR::CNTK::ComputationNetwork [
  B : LearnableParameter 132 x 1 ()
  cr : CrossEntropyWithSoftmax 0 x 0 (
    labels
    LSTMoutputW
  )
  Err : ErrorPrediction 0 x 0 (
    labels
    LSTMoutputW
  )
  feashift : RowSlice 0 x 0 (
    features
  )
  featNorm : PerDimMeanVarNormalization 0 x 0 (
    feashift
    featNorm.meanVector
    featNorm.invStdDevVector
  )
  featNorm.invStdDevVector : InvStdDev 0 x 0 (
    feashift
  )
  featNorm.meanVector : Mean 0 x 0 (
    feashift
  )
  features : InputValue 363 x 1 ()
  labels : InputValue 132 x 1 ()
  logPrior : Log 0 x 0 (
    logPrior.x
  )
  logPrior.x : Mean 0 x 0 (
    labels
  )
  LSTMoutput[1].bft : ElementTimes 0 x 0 (
    LSTMoutput[1].ft
    LSTMoutput[1].dc
  )
  LSTMoutput[1].bit : ElementTimes 0 x 0 (
    LSTMoutput[1].it
    LSTMoutput[1].bit./*.**/right
  )
  LSTMoutput[1].bit./*.**/right : Tanh 0 x 0 (
    LSTMoutput[1].bit./*.**/right.z
  )
  LSTMoutput[1].bit./*.**/right.z : Plus 0 x 0 (
    LSTMoutput[1].bit./*.**/right.z./*+*/left
    LSTMoutput[1].bit./*.**/right.z./*+*/right
  )
  LSTMoutput[1].bit./*.**/right.z./*+*/left : Times 0 x 0 (
    LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left
    LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right
  )
  LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left : LearnableParameter 1024 x 33 ()
  LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor
    featNorm
  )
  LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].bit./*.**/right.z./*+*/right : Plus 0 x 0 (
    LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left
    LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right
  )
  LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left : Times 0 x 0 (
    LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left
    LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right
  )
  LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor
    LSTMoutput[1].dh
  )
  LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right : LearnableParameter 1024 x 1 ()
  LSTMoutput[1].ct : Plus 0 x 0 (
    LSTMoutput[1].bft
    LSTMoutput[1].bit
  )
  LSTMoutput[1].dc : PastValue 1024 x 1 (
    LSTMoutput[1].ct
  )
  LSTMoutput[1].dh : PastValue 256 x 1 (
    LSTMoutput[1].output
  )
  LSTMoutput[1].ft : Sigmoid 0 x 0 (
    LSTMoutput[1].ft.z
  )
  LSTMoutput[1].ft.z : Plus 0 x 0 (
    LSTMoutput[1].ft.z./*+*/left
    LSTMoutput[1].ft.z./*+*/right
  )
  LSTMoutput[1].ft.z./*+*/left : Plus 0 x 0 (
    LSTMoutput[1].ft.z./*+*/left./*+*/left
    LSTMoutput[1].ft.z./*+*/left./*+*/right
  )
  LSTMoutput[1].ft.z./*+*/left./*+*/left : Plus 0 x 0 (
    LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left
    LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right
  )
  LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left : Times 0 x 0 (
    LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left
    LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right
  )
  LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left : LearnableParameter 1024 x 33 ()
  LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor
    featNorm
  )
  LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right : LearnableParameter 1024 x 1 ()
  LSTMoutput[1].ft.z./*+*/left./*+*/right : Times 0 x 0 (
    LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left
    LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right
  )
  LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right : Scale 0 x 0 (
    LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor
    LSTMoutput[1].dh
  )
  LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x
  )
  LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].ft.z./*+*/right : DiagTimes 0 x 0 (
    LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector
    LSTMoutput[1].ft.z./*+*/right.matrix
  )
  LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[1].ft.z./*+*/right.matrix : Scale 0 x 0 (
    LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor
    LSTMoutput[1].dc
  )
  LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].it : Sigmoid 0 x 0 (
    LSTMoutput[1].it.z
  )
  LSTMoutput[1].it.z : Plus 0 x 0 (
    LSTMoutput[1].it.z./*+*/left
    LSTMoutput[1].it.z./*+*/right
  )
  LSTMoutput[1].it.z./*+*/left : Plus 0 x 0 (
    LSTMoutput[1].it.z./*+*/left./*+*/left
    LSTMoutput[1].it.z./*+*/left./*+*/right
  )
  LSTMoutput[1].it.z./*+*/left./*+*/left : Plus 0 x 0 (
    LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left
    LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right
  )
  LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left : Times 0 x 0 (
    LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left
    LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right
  )
  LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left : LearnableParameter 1024 x 33 ()
  LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor
    featNorm
  )
  LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right : LearnableParameter 1024 x 1 ()
  LSTMoutput[1].it.z./*+*/left./*+*/right : Times 0 x 0 (
    LSTMoutput[1].it.z./*+*/left./*+*/right./***/left
    LSTMoutput[1].it.z./*+*/left./*+*/right./***/right
  )
  LSTMoutput[1].it.z./*+*/left./*+*/right./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[1].it.z./*+*/left./*+*/right./***/right : Scale 0 x 0 (
    LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor
    LSTMoutput[1].dh
  )
  LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x
  )
  LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].it.z./*+*/right : DiagTimes 0 x 0 (
    LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector
    LSTMoutput[1].it.z./*+*/right.matrix
  )
  LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[1].it.z./*+*/right.matrix : Scale 0 x 0 (
    LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor
    LSTMoutput[1].dc
  )
  LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].mt : ElementTimes 0 x 0 (
    LSTMoutput[1].ot
    LSTMoutput[1].mt./*.**/right
  )
  LSTMoutput[1].mt./*.**/right : Tanh 0 x 0 (
    LSTMoutput[1].ct
  )
  LSTMoutput[1].ot : Sigmoid 0 x 0 (
    LSTMoutput[1].ot.z
  )
  LSTMoutput[1].ot.z : Plus 0 x 0 (
    LSTMoutput[1].ot.z./*+*/left
    LSTMoutput[1].ot.z./*+*/right
  )
  LSTMoutput[1].ot.z./*+*/left : Plus 0 x 0 (
    LSTMoutput[1].ot.z./*+*/left./*+*/left
    LSTMoutput[1].ot.z./*+*/left./*+*/right
  )
  LSTMoutput[1].ot.z./*+*/left./*+*/left : Plus 0 x 0 (
    LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left
    LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right
  )
  LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left : Times 0 x 0 (
    LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left
    LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right
  )
  LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left : LearnableParameter 1024 x 33 ()
  LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor
    featNorm
  )
  LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right : LearnableParameter 1024 x 1 ()
  LSTMoutput[1].ot.z./*+*/left./*+*/right : Times 0 x 0 (
    LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left
    LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right
  )
  LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right : Scale 0 x 0 (
    LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor
    LSTMoutput[1].dh
  )
  LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x
  )
  LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].ot.z./*+*/right : DiagTimes 0 x 0 (
    LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector
    LSTMoutput[1].ot.z./*+*/right.matrix
  )
  LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[1].ot.z./*+*/right.matrix : Scale 0 x 0 (
    LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor
    LSTMoutput[1].ct
  )
  LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].output : Times 0 x 0 (
    LSTMoutput[1].Wmr
    LSTMoutput[1].output./***/right
  )
  LSTMoutput[1].output./***/right : Scale 0 x 0 (
    LSTMoutput[1].output./***/right.scalarScalingFactor
    LSTMoutput[1].mt
  )
  LSTMoutput[1].output./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[1].output./***/right.scalarScalingFactor.x
  )
  LSTMoutput[1].output./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].Wmr : LearnableParameter 256 x 1024 ()
  LSTMoutput[2].bft : ElementTimes 0 x 0 (
    LSTMoutput[2].ft
    LSTMoutput[2].dc
  )
  LSTMoutput[2].bit : ElementTimes 0 x 0 (
    LSTMoutput[2].it
    LSTMoutput[2].bit./*.**/right
  )
  LSTMoutput[2].bit./*.**/right : Tanh 0 x 0 (
    LSTMoutput[2].bit./*.**/right.z
  )
  LSTMoutput[2].bit./*.**/right.z : Plus 0 x 0 (
    LSTMoutput[2].bit./*.**/right.z./*+*/left
    LSTMoutput[2].bit./*.**/right.z./*+*/right
  )
  LSTMoutput[2].bit./*.**/right.z./*+*/left : Times 0 x 0 (
    LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left
    LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right
  )
  LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor
    LSTMoutput[1].output
  )
  LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].bit./*.**/right.z./*+*/right : Plus 0 x 0 (
    LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left
    LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right
  )
  LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left : Times 0 x 0 (
    LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left
    LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right
  )
  LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor
    LSTMoutput[2].dh
  )
  LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right : LearnableParameter 1024 x 1 ()
  LSTMoutput[2].ct : Plus 0 x 0 (
    LSTMoutput[2].bft
    LSTMoutput[2].bit
  )
  LSTMoutput[2].dc : PastValue 1024 x 1 (
    LSTMoutput[2].ct
  )
  LSTMoutput[2].dh : PastValue 256 x 1 (
    LSTMoutput[2].output
  )
  LSTMoutput[2].ft : Sigmoid 0 x 0 (
    LSTMoutput[2].ft.z
  )
  LSTMoutput[2].ft.z : Plus 0 x 0 (
    LSTMoutput[2].ft.z./*+*/left
    LSTMoutput[2].ft.z./*+*/right
  )
  LSTMoutput[2].ft.z./*+*/left : Plus 0 x 0 (
    LSTMoutput[2].ft.z./*+*/left./*+*/left
    LSTMoutput[2].ft.z./*+*/left./*+*/right
  )
  LSTMoutput[2].ft.z./*+*/left./*+*/left : Plus 0 x 0 (
    LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left
    LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right
  )
  LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left : Times 0 x 0 (
    LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left
    LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right
  )
  LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor
    LSTMoutput[1].output
  )
  LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right : LearnableParameter 1024 x 1 ()
  LSTMoutput[2].ft.z./*+*/left./*+*/right : Times 0 x 0 (
    LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left
    LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right
  )
  LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right : Scale 0 x 0 (
    LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor
    LSTMoutput[2].dh
  )
  LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x
  )
  LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].ft.z./*+*/right : DiagTimes 0 x 0 (
    LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector
    LSTMoutput[2].ft.z./*+*/right.matrix
  )
  LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[2].ft.z./*+*/right.matrix : Scale 0 x 0 (
    LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor
    LSTMoutput[2].dc
  )
  LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].it : Sigmoid 0 x 0 (
    LSTMoutput[2].it.z
  )
  LSTMoutput[2].it.z : Plus 0 x 0 (
    LSTMoutput[2].it.z./*+*/left
    LSTMoutput[2].it.z./*+*/right
  )
  LSTMoutput[2].it.z./*+*/left : Plus 0 x 0 (
    LSTMoutput[2].it.z./*+*/left./*+*/left
    LSTMoutput[2].it.z./*+*/left./*+*/right
  )
  LSTMoutput[2].it.z./*+*/left./*+*/left : Plus 0 x 0 (
    LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left
    LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right
  )
  LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left : Times 0 x 0 (
    LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left
    LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right
  )
  LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor
    LSTMoutput[1].output
  )
  LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right : LearnableParameter 1024 x 1 ()
  LSTMoutput[2].it.z./*+*/left./*+*/right : Times 0 x 0 (
    LSTMoutput[2].it.z./*+*/left./*+*/right./***/left
    LSTMoutput[2].it.z./*+*/left./*+*/right./***/right
  )
  LSTMoutput[2].it.z./*+*/left./*+*/right./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].it.z./*+*/left./*+*/right./***/right : Scale 0 x 0 (
    LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor
    LSTMoutput[2].dh
  )
  LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x
  )
  LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].it.z./*+*/right : DiagTimes 0 x 0 (
    LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector
    LSTMoutput[2].it.z./*+*/right.matrix
  )
  LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[2].it.z./*+*/right.matrix : Scale 0 x 0 (
    LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor
    LSTMoutput[2].dc
  )
  LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].mt : ElementTimes 0 x 0 (
    LSTMoutput[2].ot
    LSTMoutput[2].mt./*.**/right
  )
  LSTMoutput[2].mt./*.**/right : Tanh 0 x 0 (
    LSTMoutput[2].ct
  )
  LSTMoutput[2].ot : Sigmoid 0 x 0 (
    LSTMoutput[2].ot.z
  )
  LSTMoutput[2].ot.z : Plus 0 x 0 (
    LSTMoutput[2].ot.z./*+*/left
    LSTMoutput[2].ot.z./*+*/right
  )
  LSTMoutput[2].ot.z./*+*/left : Plus 0 x 0 (
    LSTMoutput[2].ot.z./*+*/left./*+*/left
    LSTMoutput[2].ot.z./*+*/left./*+*/right
  )
  LSTMoutput[2].ot.z./*+*/left./*+*/left : Plus 0 x 0 (
    LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left
    LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right
  )
  LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left : Times 0 x 0 (
    LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left
    LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right
  )
  LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor
    LSTMoutput[1].output
  )
  LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right : LearnableParameter 1024 x 1 ()
  LSTMoutput[2].ot.z./*+*/left./*+*/right : Times 0 x 0 (
    LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left
    LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right
  )
  LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right : Scale 0 x 0 (
    LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor
    LSTMoutput[2].dh
  )
  LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x
  )
  LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].ot.z./*+*/right : DiagTimes 0 x 0 (
    LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector
    LSTMoutput[2].ot.z./*+*/right.matrix
  )
  LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[2].ot.z./*+*/right.matrix : Scale 0 x 0 (
    LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor
    LSTMoutput[2].ct
  )
  LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].output : Times 0 x 0 (
    LSTMoutput[2].Wmr
    LSTMoutput[2].output./***/right
  )
  LSTMoutput[2].output./***/right : Scale 0 x 0 (
    LSTMoutput[2].output./***/right.scalarScalingFactor
    LSTMoutput[2].mt
  )
  LSTMoutput[2].output./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[2].output./***/right.scalarScalingFactor.x
  )
  LSTMoutput[2].output./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].Wmr : LearnableParameter 256 x 1024 ()
  LSTMoutput[3].bft : ElementTimes 0 x 0 (
    LSTMoutput[3].ft
    LSTMoutput[3].dc
  )
  LSTMoutput[3].bit : ElementTimes 0 x 0 (
    LSTMoutput[3].it
    LSTMoutput[3].bit./*.**/right
  )
  LSTMoutput[3].bit./*.**/right : Tanh 0 x 0 (
    LSTMoutput[3].bit./*.**/right.z
  )
  LSTMoutput[3].bit./*.**/right.z : Plus 0 x 0 (
    LSTMoutput[3].bit./*.**/right.z./*+*/left
    LSTMoutput[3].bit./*.**/right.z./*+*/right
  )
  LSTMoutput[3].bit./*.**/right.z./*+*/left : Times 0 x 0 (
    LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left
    LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right
  )
  LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor
    LSTMoutput[2].output
  )
  LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].bit./*.**/right.z./*+*/right : Plus 0 x 0 (
    LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left
    LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right
  )
  LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left : Times 0 x 0 (
    LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left
    LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right
  )
  LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor
    LSTMoutput[3].dh
  )
  LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right : LearnableParameter 1024 x 1 ()
  LSTMoutput[3].ct : Plus 0 x 0 (
    LSTMoutput[3].bft
    LSTMoutput[3].bit
  )
  LSTMoutput[3].dc : PastValue 1024 x 1 (
    LSTMoutput[3].ct
  )
  LSTMoutput[3].dh : PastValue 256 x 1 (
    LSTMoutput[3].output
  )
  LSTMoutput[3].ft : Sigmoid 0 x 0 (
    LSTMoutput[3].ft.z
  )
  LSTMoutput[3].ft.z : Plus 0 x 0 (
    LSTMoutput[3].ft.z./*+*/left
    LSTMoutput[3].ft.z./*+*/right
  )
  LSTMoutput[3].ft.z./*+*/left : Plus 0 x 0 (
    LSTMoutput[3].ft.z./*+*/left./*+*/left
    LSTMoutput[3].ft.z./*+*/left./*+*/right
  )
  LSTMoutput[3].ft.z./*+*/left./*+*/left : Plus 0 x 0 (
    LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left
    LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right
  )
  LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left : Times 0 x 0 (
    LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left
    LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right
  )
  LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor
    LSTMoutput[2].output
  )
  LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right : LearnableParameter 1024 x 1 ()
  LSTMoutput[3].ft.z./*+*/left./*+*/right : Times 0 x 0 (
    LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left
    LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right
  )
  LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right : Scale 0 x 0 (
    LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor
    LSTMoutput[3].dh
  )
  LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x
  )
  LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].ft.z./*+*/right : DiagTimes 0 x 0 (
    LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector
    LSTMoutput[3].ft.z./*+*/right.matrix
  )
  LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[3].ft.z./*+*/right.matrix : Scale 0 x 0 (
    LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor
    LSTMoutput[3].dc
  )
  LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].it : Sigmoid 0 x 0 (
    LSTMoutput[3].it.z
  )
  LSTMoutput[3].it.z : Plus 0 x 0 (
    LSTMoutput[3].it.z./*+*/left
    LSTMoutput[3].it.z./*+*/right
  )
  LSTMoutput[3].it.z./*+*/left : Plus 0 x 0 (
    LSTMoutput[3].it.z./*+*/left./*+*/left
    LSTMoutput[3].it.z./*+*/left./*+*/right
  )
  LSTMoutput[3].it.z./*+*/left./*+*/left : Plus 0 x 0 (
    LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left
    LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right
  )
  LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left : Times 0 x 0 (
    LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left
    LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right
  )
  LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor
    LSTMoutput[2].output
  )
  LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right : LearnableParameter 1024 x 1 ()
  LSTMoutput[3].it.z./*+*/left./*+*/right : Times 0 x 0 (
    LSTMoutput[3].it.z./*+*/left./*+*/right./***/left
    LSTMoutput[3].it.z./*+*/left./*+*/right./***/right
  )
  LSTMoutput[3].it.z./*+*/left./*+*/right./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].it.z./*+*/left./*+*/right./***/right : Scale 0 x 0 (
    LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor
    LSTMoutput[3].dh
  )
  LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x
  )
  LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].it.z./*+*/right : DiagTimes 0 x 0 (
    LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector
    LSTMoutput[3].it.z./*+*/right.matrix
  )
  LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[3].it.z./*+*/right.matrix : Scale 0 x 0 (
    LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor
    LSTMoutput[3].dc
  )
  LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].mt : ElementTimes 0 x 0 (
    LSTMoutput[3].ot
    LSTMoutput[3].mt./*.**/right
  )
  LSTMoutput[3].mt./*.**/right : Tanh 0 x 0 (
    LSTMoutput[3].ct
  )
  LSTMoutput[3].ot : Sigmoid 0 x 0 (
    LSTMoutput[3].ot.z
  )
  LSTMoutput[3].ot.z : Plus 0 x 0 (
    LSTMoutput[3].ot.z./*+*/left
    LSTMoutput[3].ot.z./*+*/right
  )
  LSTMoutput[3].ot.z./*+*/left : Plus 0 x 0 (
    LSTMoutput[3].ot.z./*+*/left./*+*/left
    LSTMoutput[3].ot.z./*+*/left./*+*/right
  )
  LSTMoutput[3].ot.z./*+*/left./*+*/left : Plus 0 x 0 (
    LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left
    LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right
  )
  LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left : Times 0 x 0 (
    LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left
    LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right
  )
  LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor
    LSTMoutput[2].output
  )
  LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right : LearnableParameter 1024 x 1 ()
  LSTMoutput[3].ot.z./*+*/left./*+*/right : Times 0 x 0 (
    LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left
    LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right
  )
  LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right : Scale 0 x 0 (
    LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor
    LSTMoutput[3].dh
  )
  LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x
  )
  LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].ot.z./*+*/right : DiagTimes 0 x 0 (
    LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector
    LSTMoutput[3].ot.z./*+*/right.matrix
  )
  LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[3].ot.z./*+*/right.matrix : Scale 0 x 0 (
    LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor
    LSTMoutput[3].ct
  )
  LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].output : Times 0 x 0 (
    LSTMoutput[3].Wmr
    LSTMoutput[3].output./***/right
  )
  LSTMoutput[3].output./***/right : Scale 0 x 0 (
    LSTMoutput[3].output./***/right.scalarScalingFactor
    LSTMoutput[3].mt
  )
  LSTMoutput[3].output./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutput[3].output./***/right.scalarScalingFactor.x
  )
  LSTMoutput[3].output./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].Wmr : LearnableParameter 256 x 1024 ()
  LSTMoutputW : Plus 0 x 0 (
    LSTMoutputW./*+*/left
    B
  )
  LSTMoutputW./*+*/left : Times 0 x 0 (
    LSTMoutputW./*+*/left./***/left
    LSTMoutputW./*+*/left./***/right
  )
  LSTMoutputW./*+*/left./***/left : LearnableParameter 132 x 256 ()
  LSTMoutputW./*+*/left./***/right : Scale 0 x 0 (
    LSTMoutputW./*+*/left./***/right.scalarScalingFactor
    LSTMoutput[3].output
  )
  LSTMoutputW./*+*/left./***/right.scalarScalingFactor : Exp 0 x 0 (
    LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x
  )
  LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  ScaledLogLikelihood : Minus 0 x 0 (
    LSTMoutputW
    logPrior
  )
]
GetTrainCriterionNodes  ...
GetEvalCriterionNodes  ...
 nodes in the recurrent loops : 
LSTMoutput[1].mt./*.**/right	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[1].bit./*.**/right.z./*+*/right	LSTMoutput[1].bit./*.**/right.z	LSTMoutput[1].bit./*.**/right	LSTMoutput[1].it.z./*+*/right.matrix	LSTMoutput[1].it.z./*+*/right	LSTMoutput[1].it.z./*+*/left./*+*/right./***/right	LSTMoutput[1].it.z./*+*/left./*+*/right	LSTMoutput[1].it.z./*+*/left	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit	LSTMoutput[1].dc	LSTMoutput[1].ft.z./*+*/right.matrix	LSTMoutput[1].ft.z./*+*/right	LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ft.z./*+*/left./*+*/right	LSTMoutput[1].ft.z./*+*/left	LSTMoutput[1].ft.z	LSTMoutput[1].ft	LSTMoutput[1].bft	LSTMoutput[1].ct	LSTMoutput[1].ot.z./*+*/right.matrix	LSTMoutput[1].ot.z./*+*/right	LSTMoutput[1].dh	LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ot.z./*+*/left./*+*/right	LSTMoutput[1].ot.z./*+*/left	LSTMoutput[1].ot.z	LSTMoutput[1].ot	LSTMoutput[1].mt	LSTMoutput[1].output./***/right	LSTMoutput[1].output	 nodes in the recurrent loops : 
LSTMoutput[2].mt./*.**/right	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[2].bit./*.**/right.z./*+*/right	LSTMoutput[2].bit./*.**/right.z	LSTMoutput[2].bit./*.**/right	LSTMoutput[2].it.z./*+*/right.matrix	LSTMoutput[2].it.z./*+*/right	LSTMoutput[2].it.z./*+*/left./*+*/right./***/right	LSTMoutput[2].it.z./*+*/left./*+*/right	LSTMoutput[2].it.z./*+*/left	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit	LSTMoutput[2].dc	LSTMoutput[2].ft.z./*+*/right.matrix	LSTMoutput[2].ft.z./*+*/right	LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ft.z./*+*/left./*+*/right	LSTMoutput[2].ft.z./*+*/left	LSTMoutput[2].ft.z	LSTMoutput[2].ft	LSTMoutput[2].bft	LSTMoutput[2].ct	LSTMoutput[2].ot.z./*+*/right.matrix	LSTMoutput[2].ot.z./*+*/right	LSTMoutput[2].dh	LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ot.z./*+*/left./*+*/right	LSTMoutput[2].ot.z./*+*/left	LSTMoutput[2].ot.z	LSTMoutput[2].ot	LSTMoutput[2].mt	LSTMoutput[2].output./***/right	LSTMoutput[2].output	 nodes in the recurrent loops : 
LSTMoutput[3].mt./*.**/right	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[3].bit./*.**/right.z./*+*/right	LSTMoutput[3].bit./*.**/right.z	LSTMoutput[3].bit./*.**/right	LSTMoutput[3].it.z./*+*/right.matrix	LSTMoutput[3].it.z./*+*/right	LSTMoutput[3].it.z./*+*/left./*+*/right./***/right	LSTMoutput[3].it.z./*+*/left./*+*/right	LSTMoutput[3].it.z./*+*/left	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit	LSTMoutput[3].dc	LSTMoutput[3].ft.z./*+*/right.matrix	LSTMoutput[3].ft.z./*+*/right	LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ft.z./*+*/left./*+*/right	LSTMoutput[3].ft.z./*+*/left	LSTMoutput[3].ft.z	LSTMoutput[3].ft	LSTMoutput[3].bft	LSTMoutput[3].ct	LSTMoutput[3].ot.z./*+*/right.matrix	LSTMoutput[3].ot.z./*+*/right	LSTMoutput[3].dh	LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ot.z./*+*/left./*+*/right	LSTMoutput[3].ot.z./*+*/left	LSTMoutput[3].ot.z	LSTMoutput[3].ot	LSTMoutput[3].mt	LSTMoutput[3].output./***/right	LSTMoutput[3].output	 nodes in the recurrent loops : 
LSTMoutput[1].mt./*.**/right	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[1].bit./*.**/right.z./*+*/right	LSTMoutput[1].bit./*.**/right.z	LSTMoutput[1].bit./*.**/right	LSTMoutput[1].it.z./*+*/right.matrix	LSTMoutput[1].it.z./*+*/right	LSTMoutput[1].it.z./*+*/left./*+*/right./***/right	LSTMoutput[1].it.z./*+*/left./*+*/right	LSTMoutput[1].it.z./*+*/left	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit	LSTMoutput[1].dc	LSTMoutput[1].ft.z./*+*/right.matrix	LSTMoutput[1].ft.z./*+*/right	LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ft.z./*+*/left./*+*/right	LSTMoutput[1].ft.z./*+*/left	LSTMoutput[1].ft.z	LSTMoutput[1].ft	LSTMoutput[1].bft	LSTMoutput[1].ct	LSTMoutput[1].ot.z./*+*/right.matrix	LSTMoutput[1].ot.z./*+*/right	LSTMoutput[1].dh	LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ot.z./*+*/left./*+*/right	LSTMoutput[1].ot.z./*+*/left	LSTMoutput[1].ot.z	LSTMoutput[1].ot	LSTMoutput[1].mt	LSTMoutput[1].output./***/right	LSTMoutput[1].output	 nodes in the recurrent loops : 
LSTMoutput[2].mt./*.**/right	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[2].bit./*.**/right.z./*+*/right	LSTMoutput[2].bit./*.**/right.z	LSTMoutput[2].bit./*.**/right	LSTMoutput[2].it.z./*+*/right.matrix	LSTMoutput[2].it.z./*+*/right	LSTMoutput[2].it.z./*+*/left./*+*/right./***/right	LSTMoutput[2].it.z./*+*/left./*+*/right	LSTMoutput[2].it.z./*+*/left	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit	LSTMoutput[2].dc	LSTMoutput[2].ft.z./*+*/right.matrix	LSTMoutput[2].ft.z./*+*/right	LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ft.z./*+*/left./*+*/right	LSTMoutput[2].ft.z./*+*/left	LSTMoutput[2].ft.z	LSTMoutput[2].ft	LSTMoutput[2].bft	LSTMoutput[2].ct	LSTMoutput[2].ot.z./*+*/right.matrix	LSTMoutput[2].ot.z./*+*/right	LSTMoutput[2].dh	LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ot.z./*+*/left./*+*/right	LSTMoutput[2].ot.z./*+*/left	LSTMoutput[2].ot.z	LSTMoutput[2].ot	LSTMoutput[2].mt	LSTMoutput[2].output./***/right	LSTMoutput[2].output	 nodes in the recurrent loops : 
LSTMoutput[3].mt./*.**/right	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[3].bit./*.**/right.z./*+*/right	LSTMoutput[3].bit./*.**/right.z	LSTMoutput[3].bit./*.**/right	LSTMoutput[3].it.z./*+*/right.matrix	LSTMoutput[3].it.z./*+*/right	LSTMoutput[3].it.z./*+*/left./*+*/right./***/right	LSTMoutput[3].it.z./*+*/left./*+*/right	LSTMoutput[3].it.z./*+*/left	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit	LSTMoutput[3].dc	LSTMoutput[3].ft.z./*+*/right.matrix	LSTMoutput[3].ft.z./*+*/right	LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ft.z./*+*/left./*+*/right	LSTMoutput[3].ft.z./*+*/left	LSTMoutput[3].ft.z	LSTMoutput[3].ft	LSTMoutput[3].bft	LSTMoutput[3].ct	LSTMoutput[3].ot.z./*+*/right.matrix	LSTMoutput[3].ot.z./*+*/right	LSTMoutput[3].dh	LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ot.z./*+*/left./*+*/right	LSTMoutput[3].ot.z./*+*/left	LSTMoutput[3].ot.z	LSTMoutput[3].ot	LSTMoutput[3].mt	LSTMoutput[3].output./***/right	LSTMoutput[3].output	

Validating for node cr. 272 nodes to process in pass 1.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> LSTMoutputW./*+*/left./***/left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor = Exp(LSTMoutput[3].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor = Exp(LSTMoutput[2].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor = Exp(LSTMoutput[1].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left[1024, 33], LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right = Times(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ot.z./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right = Times(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ft.z./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix = Scale(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right = DiagTimes(LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z./*+*/right.matrix[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z./*+*/left[1024, MBSize 1], LSTMoutput[1].ft.z./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 1], LSTMoutput[1].dc[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right = Times(LSTMoutput[1].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].it.z./*+*/left./*+*/right./***/right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].it.z./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix = Scale(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/right = DiagTimes(LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z./*+*/right.matrix[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z./*+*/left[1024, MBSize 1], LSTMoutput[1].it.z./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left[1024, 1], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/left[1024, MBSize 1], LSTMoutput[1].bit./*.**/right.z./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right = Tanh(LSTMoutput[1].bit./*.**/right.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 1], LSTMoutput[1].bit./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 1], LSTMoutput[1].bit[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix = Scale(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/right = DiagTimes(LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z./*+*/left[1024, MBSize 1], LSTMoutput[1].ot.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].mt./*.**/right = Tanh(LSTMoutput[1].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 1], LSTMoutput[1].mt./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].output./***/right = Scale(LSTMoutput[1].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output./***/right[1024, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right = Times(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ot.z./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right = Times(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ft.z./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix = Scale(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right = DiagTimes(LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z./*+*/right.matrix[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z./*+*/left[1024, MBSize 1], LSTMoutput[2].ft.z./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 1], LSTMoutput[2].dc[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right = Times(LSTMoutput[2].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/right./***/right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].it.z./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix = Scale(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/right = DiagTimes(LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z./*+*/right.matrix[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z./*+*/left[1024, MBSize 1], LSTMoutput[2].it.z./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left[1024, 1], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/left[1024, MBSize 1], LSTMoutput[2].bit./*.**/right.z./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right = Tanh(LSTMoutput[2].bit./*.**/right.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 1], LSTMoutput[2].bit./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 1], LSTMoutput[2].bit[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix = Scale(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/right = DiagTimes(LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z./*+*/left[1024, MBSize 1], LSTMoutput[2].ot.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].mt./*.**/right = Tanh(LSTMoutput[2].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 1], LSTMoutput[2].mt./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].output./***/right = Scale(LSTMoutput[2].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output./***/right[1024, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right = Times(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ot.z./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right = Times(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ft.z./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix = Scale(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right = DiagTimes(LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z./*+*/right.matrix[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z./*+*/left[1024, MBSize 1], LSTMoutput[3].ft.z./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 1], LSTMoutput[3].dc[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right = Times(LSTMoutput[3].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/right./***/right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].it.z./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix = Scale(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/right = DiagTimes(LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z./*+*/right.matrix[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z./*+*/left[1024, MBSize 1], LSTMoutput[3].it.z./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left[1024, 1], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/left[1024, MBSize 1], LSTMoutput[3].bit./*.**/right.z./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right = Tanh(LSTMoutput[3].bit./*.**/right.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 1], LSTMoutput[3].bit./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 1], LSTMoutput[3].bit[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix = Scale(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/right = DiagTimes(LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z./*+*/left[1024, MBSize 1], LSTMoutput[3].ot.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].mt./*.**/right = Tanh(LSTMoutput[3].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 1], LSTMoutput[3].mt./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].output./***/right = Scale(LSTMoutput[3].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output./***/right[1024, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutputW./*+*/left./***/right = Scale(LSTMoutputW./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutputW./*+*/left = Times(LSTMoutputW./*+*/left./***/left[132, 256], LSTMoutputW./*+*/left./***/right[256, MBSize 1]) -> [132, MBSize 1]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW./*+*/left[132, MBSize 1], B[132, 1]) -> [132, MBSize 1]
Validating --> cr = CrossEntropyWithSoftmax(labels[132, MBSize 1], LSTMoutputW[132, MBSize 1]) -> [1, 1]

Validating for node cr. 183 nodes to process in pass 2.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> LSTMoutputW./*+*/left./***/left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor = Exp(LSTMoutput[3].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor = Exp(LSTMoutput[2].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor = Exp(LSTMoutput[1].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left[1024, 33], LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right = Times(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ot.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right = Times(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ft.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix = Scale(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/right = DiagTimes(LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z./*+*/left[1024, MBSize 1], LSTMoutput[1].ft.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 1], LSTMoutput[1].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right = Times(LSTMoutput[1].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].it.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].it.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix = Scale(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/right = DiagTimes(LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z./*+*/left[1024, MBSize 1], LSTMoutput[1].it.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 1], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/left[1024, MBSize 1], LSTMoutput[1].bit./*.**/right.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right = Tanh(LSTMoutput[1].bit./*.**/right.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 1], LSTMoutput[1].bit./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 1], LSTMoutput[1].bit[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix = Scale(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/right = DiagTimes(LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z./*+*/left[1024, MBSize 1], LSTMoutput[1].ot.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].mt./*.**/right = Tanh(LSTMoutput[1].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 1], LSTMoutput[1].mt./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].output./***/right = Scale(LSTMoutput[1].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output./***/right[1024, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right = Times(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ot.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right = Times(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ft.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix = Scale(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/right = DiagTimes(LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z./*+*/left[1024, MBSize 1], LSTMoutput[2].ft.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 1], LSTMoutput[2].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right = Times(LSTMoutput[2].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].it.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix = Scale(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/right = DiagTimes(LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z./*+*/left[1024, MBSize 1], LSTMoutput[2].it.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 1], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/left[1024, MBSize 1], LSTMoutput[2].bit./*.**/right.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right = Tanh(LSTMoutput[2].bit./*.**/right.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 1], LSTMoutput[2].bit./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 1], LSTMoutput[2].bit[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix = Scale(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/right = DiagTimes(LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z./*+*/left[1024, MBSize 1], LSTMoutput[2].ot.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].mt./*.**/right = Tanh(LSTMoutput[2].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 1], LSTMoutput[2].mt./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].output./***/right = Scale(LSTMoutput[2].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output./***/right[1024, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right = Times(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ot.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right = Times(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ft.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix = Scale(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/right = DiagTimes(LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z./*+*/left[1024, MBSize 1], LSTMoutput[3].ft.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 1], LSTMoutput[3].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right = Times(LSTMoutput[3].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].it.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix = Scale(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/right = DiagTimes(LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z./*+*/left[1024, MBSize 1], LSTMoutput[3].it.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 1], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/left[1024, MBSize 1], LSTMoutput[3].bit./*.**/right.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right = Tanh(LSTMoutput[3].bit./*.**/right.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 1], LSTMoutput[3].bit./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 1], LSTMoutput[3].bit[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix = Scale(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/right = DiagTimes(LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z./*+*/left[1024, MBSize 1], LSTMoutput[3].ot.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].mt./*.**/right = Tanh(LSTMoutput[3].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 1], LSTMoutput[3].mt./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].output./***/right = Scale(LSTMoutput[3].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output./***/right[1024, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutputW./*+*/left./***/right = Scale(LSTMoutputW./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutputW./*+*/left = Times(LSTMoutputW./*+*/left./***/left[132, 256], LSTMoutputW./*+*/left./***/right[256, MBSize 1]) -> [132, MBSize 1]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW./*+*/left[132, MBSize 1], B[132, 1]) -> [132, MBSize 1]
Validating --> cr = CrossEntropyWithSoftmax(labels[132, MBSize 1], LSTMoutputW[132, MBSize 1]) -> [1, 1]

Validating for node cr. 60 nodes to process in pass 3.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> LSTMoutputW./*+*/left./***/left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor = Exp(LSTMoutput[3].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor = Exp(LSTMoutput[2].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor = Exp(LSTMoutput[1].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left[1024, 33], LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right = Times(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ot.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right = Times(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ft.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix = Scale(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/right = DiagTimes(LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z./*+*/left[1024, MBSize 1], LSTMoutput[1].ft.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 1], LSTMoutput[1].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right = Times(LSTMoutput[1].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].it.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].it.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix = Scale(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/right = DiagTimes(LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z./*+*/left[1024, MBSize 1], LSTMoutput[1].it.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 1], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/left[1024, MBSize 1], LSTMoutput[1].bit./*.**/right.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right = Tanh(LSTMoutput[1].bit./*.**/right.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 1], LSTMoutput[1].bit./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 1], LSTMoutput[1].bit[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix = Scale(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/right = DiagTimes(LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z./*+*/left[1024, MBSize 1], LSTMoutput[1].ot.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].mt./*.**/right = Tanh(LSTMoutput[1].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 1], LSTMoutput[1].mt./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].output./***/right = Scale(LSTMoutput[1].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output./***/right[1024, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right = Times(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ot.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right = Times(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ft.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix = Scale(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/right = DiagTimes(LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z./*+*/left[1024, MBSize 1], LSTMoutput[2].ft.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 1], LSTMoutput[2].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right = Times(LSTMoutput[2].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].it.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix = Scale(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/right = DiagTimes(LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z./*+*/left[1024, MBSize 1], LSTMoutput[2].it.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 1], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/left[1024, MBSize 1], LSTMoutput[2].bit./*.**/right.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right = Tanh(LSTMoutput[2].bit./*.**/right.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 1], LSTMoutput[2].bit./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 1], LSTMoutput[2].bit[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix = Scale(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/right = DiagTimes(LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z./*+*/left[1024, MBSize 1], LSTMoutput[2].ot.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].mt./*.**/right = Tanh(LSTMoutput[2].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 1], LSTMoutput[2].mt./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].output./***/right = Scale(LSTMoutput[2].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output./***/right[1024, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right = Times(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ot.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right = Times(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ft.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix = Scale(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/right = DiagTimes(LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z./*+*/left[1024, MBSize 1], LSTMoutput[3].ft.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 1], LSTMoutput[3].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right = Times(LSTMoutput[3].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].it.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix = Scale(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/right = DiagTimes(LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z./*+*/left[1024, MBSize 1], LSTMoutput[3].it.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 1], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/left[1024, MBSize 1], LSTMoutput[3].bit./*.**/right.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right = Tanh(LSTMoutput[3].bit./*.**/right.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 1], LSTMoutput[3].bit./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 1], LSTMoutput[3].bit[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix = Scale(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/right = DiagTimes(LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z./*+*/left[1024, MBSize 1], LSTMoutput[3].ot.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].mt./*.**/right = Tanh(LSTMoutput[3].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 1], LSTMoutput[3].mt./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].output./***/right = Scale(LSTMoutput[3].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output./***/right[1024, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutputW./*+*/left./***/right = Scale(LSTMoutputW./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutputW./*+*/left = Times(LSTMoutputW./*+*/left./***/left[132, 256], LSTMoutputW./*+*/left./***/right[256, MBSize 1]) -> [132, MBSize 1]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW./*+*/left[132, MBSize 1], B[132, 1]) -> [132, MBSize 1]
Validating --> cr = CrossEntropyWithSoftmax(labels[132, MBSize 1], LSTMoutputW[132, MBSize 1]) -> [1, 1]

Validating for node cr, final verification.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> LSTMoutputW./*+*/left./***/left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor = Exp(LSTMoutput[3].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor = Exp(LSTMoutput[2].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor = Exp(LSTMoutput[1].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left[1024, 33], LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right = Times(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ot.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right = Times(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].ft.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix = Scale(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z./*+*/right = DiagTimes(LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z./*+*/left[1024, MBSize 1], LSTMoutput[1].ft.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 1], LSTMoutput[1].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right = Times(LSTMoutput[1].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].it.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[1].it.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix = Scale(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z./*+*/right = DiagTimes(LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z./*+*/left[1024, MBSize 1], LSTMoutput[1].it.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 1], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right.z = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/left[1024, MBSize 1], LSTMoutput[1].bit./*.**/right.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit./*.**/right = Tanh(LSTMoutput[1].bit./*.**/right.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 1], LSTMoutput[1].bit./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 1], LSTMoutput[1].bit[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix = Scale(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z./*+*/right = DiagTimes(LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z./*+*/left[1024, MBSize 1], LSTMoutput[1].ot.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].mt./*.**/right = Tanh(LSTMoutput[1].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 1], LSTMoutput[1].mt./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].output./***/right = Scale(LSTMoutput[1].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output./***/right[1024, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right = Times(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ot.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right = Times(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].ft.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix = Scale(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z./*+*/right = DiagTimes(LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z./*+*/left[1024, MBSize 1], LSTMoutput[2].ft.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 1], LSTMoutput[2].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right = Times(LSTMoutput[2].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[2].it.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix = Scale(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z./*+*/right = DiagTimes(LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z./*+*/left[1024, MBSize 1], LSTMoutput[2].it.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 1], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right.z = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/left[1024, MBSize 1], LSTMoutput[2].bit./*.**/right.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit./*.**/right = Tanh(LSTMoutput[2].bit./*.**/right.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 1], LSTMoutput[2].bit./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 1], LSTMoutput[2].bit[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix = Scale(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z./*+*/right = DiagTimes(LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z./*+*/left[1024, MBSize 1], LSTMoutput[2].ot.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].mt./*.**/right = Tanh(LSTMoutput[2].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 1], LSTMoutput[2].mt./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].output./***/right = Scale(LSTMoutput[2].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output./***/right[1024, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right = Times(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ot.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right = Times(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].ft.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix = Scale(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z./*+*/right = DiagTimes(LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z./*+*/left[1024, MBSize 1], LSTMoutput[3].ft.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 1], LSTMoutput[3].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right = Times(LSTMoutput[3].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/right./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left[1024, MBSize 1], LSTMoutput[3].it.z./*+*/left./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix = Scale(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z./*+*/right = DiagTimes(LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z./*+*/left[1024, MBSize 1], LSTMoutput[3].it.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 1], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right.z = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/left[1024, MBSize 1], LSTMoutput[3].bit./*.**/right.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit./*.**/right = Tanh(LSTMoutput[3].bit./*.**/right.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 1], LSTMoutput[3].bit./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 1], LSTMoutput[3].bit[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix = Scale(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z./*+*/right = DiagTimes(LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z./*+*/right.matrix[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z./*+*/left[1024, MBSize 1], LSTMoutput[3].ot.z./*+*/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].mt./*.**/right = Tanh(LSTMoutput[3].ct[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 1], LSTMoutput[3].mt./*.**/right[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].output./***/right = Scale(LSTMoutput[3].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output./***/right[1024, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutputW./*+*/left./***/right = Scale(LSTMoutputW./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 1]) -> [256, MBSize 1]
Validating --> LSTMoutputW./*+*/left = Times(LSTMoutputW./*+*/left./***/left[132, 256], LSTMoutputW./*+*/left./***/right[256, MBSize 1]) -> [132, MBSize 1]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW./*+*/left[132, MBSize 1], B[132, 1]) -> [132, MBSize 1]
Validating --> cr = CrossEntropyWithSoftmax(labels[132, MBSize 1], LSTMoutputW[132, MBSize 1]) -> [1, 1]

127 out of 272 nodes do not share the minibatch layout with the input data.


Precomputing --> 3 PreCompute nodes found.

	NodeName: featNorm.invStdDevVector
	NodeName: featNorm.meanVector
	NodeName: logPrior.x
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
 nodes in the recurrent loops : 
LSTMoutput[1].dh	LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ot.z./*+*/left./*+*/right	LSTMoutput[1].ot.z./*+*/left	LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ft.z./*+*/left./*+*/right	LSTMoutput[1].ft.z./*+*/left	LSTMoutput[1].dc	LSTMoutput[1].ft.z./*+*/right.matrix	LSTMoutput[1].ft.z./*+*/right	LSTMoutput[1].ft.z	LSTMoutput[1].ft	LSTMoutput[1].bft	LSTMoutput[1].it.z./*+*/left./*+*/right./***/right	LSTMoutput[1].it.z./*+*/left./*+*/right	LSTMoutput[1].it.z./*+*/left	LSTMoutput[1].it.z./*+*/right.matrix	LSTMoutput[1].it.z./*+*/right	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[1].bit./*.**/right.z./*+*/right	LSTMoutput[1].bit./*.**/right.z	LSTMoutput[1].bit./*.**/right	LSTMoutput[1].bit	LSTMoutput[1].ct	LSTMoutput[1].ot.z./*+*/right.matrix	LSTMoutput[1].ot.z./*+*/right	LSTMoutput[1].ot.z	LSTMoutput[1].ot	LSTMoutput[1].mt./*.**/right	LSTMoutput[1].mt	LSTMoutput[1].output./***/right	LSTMoutput[1].output	 nodes in the recurrent loops : 
LSTMoutput[2].dh	LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ot.z./*+*/left./*+*/right	LSTMoutput[2].ot.z./*+*/left	LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ft.z./*+*/left./*+*/right	LSTMoutput[2].ft.z./*+*/left	LSTMoutput[2].dc	LSTMoutput[2].ft.z./*+*/right.matrix	LSTMoutput[2].ft.z./*+*/right	LSTMoutput[2].ft.z	LSTMoutput[2].ft	LSTMoutput[2].bft	LSTMoutput[2].it.z./*+*/left./*+*/right./***/right	LSTMoutput[2].it.z./*+*/left./*+*/right	LSTMoutput[2].it.z./*+*/left	LSTMoutput[2].it.z./*+*/right.matrix	LSTMoutput[2].it.z./*+*/right	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[2].bit./*.**/right.z./*+*/right	LSTMoutput[2].bit./*.**/right.z	LSTMoutput[2].bit./*.**/right	LSTMoutput[2].bit	LSTMoutput[2].ct	LSTMoutput[2].ot.z./*+*/right.matrix	LSTMoutput[2].ot.z./*+*/right	LSTMoutput[2].ot.z	LSTMoutput[2].ot	LSTMoutput[2].mt./*.**/right	LSTMoutput[2].mt	LSTMoutput[2].output./***/right	LSTMoutput[2].output	 nodes in the recurrent loops : 
LSTMoutput[3].dh	LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ot.z./*+*/left./*+*/right	LSTMoutput[3].ot.z./*+*/left	LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ft.z./*+*/left./*+*/right	LSTMoutput[3].ft.z./*+*/left	LSTMoutput[3].dc	LSTMoutput[3].ft.z./*+*/right.matrix	LSTMoutput[3].ft.z./*+*/right	LSTMoutput[3].ft.z	LSTMoutput[3].ft	LSTMoutput[3].bft	LSTMoutput[3].it.z./*+*/left./*+*/right./***/right	LSTMoutput[3].it.z./*+*/left./*+*/right	LSTMoutput[3].it.z./*+*/left	LSTMoutput[3].it.z./*+*/right.matrix	LSTMoutput[3].it.z./*+*/right	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[3].bit./*.**/right.z./*+*/right	LSTMoutput[3].bit./*.**/right.z	LSTMoutput[3].bit./*.**/right	LSTMoutput[3].bit	LSTMoutput[3].ct	LSTMoutput[3].ot.z./*+*/right.matrix	LSTMoutput[3].ot.z./*+*/right	LSTMoutput[3].ot.z	LSTMoutput[3].ot	LSTMoutput[3].mt./*.**/right	LSTMoutput[3].mt	LSTMoutput[3].output./***/right	LSTMoutput[3].output	 nodes in the recurrent loops : 
LSTMoutput[1].dh	LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ot.z./*+*/left./*+*/right	LSTMoutput[1].ot.z./*+*/left	LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ft.z./*+*/left./*+*/right	LSTMoutput[1].ft.z./*+*/left	LSTMoutput[1].dc	LSTMoutput[1].ft.z./*+*/right.matrix	LSTMoutput[1].ft.z./*+*/right	LSTMoutput[1].ft.z	LSTMoutput[1].ft	LSTMoutput[1].bft	LSTMoutput[1].it.z./*+*/left./*+*/right./***/right	LSTMoutput[1].it.z./*+*/left./*+*/right	LSTMoutput[1].it.z./*+*/left	LSTMoutput[1].it.z./*+*/right.matrix	LSTMoutput[1].it.z./*+*/right	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[1].bit./*.**/right.z./*+*/right	LSTMoutput[1].bit./*.**/right.z	LSTMoutput[1].bit./*.**/right	LSTMoutput[1].bit	LSTMoutput[1].ct	LSTMoutput[1].ot.z./*+*/right.matrix	LSTMoutput[1].ot.z./*+*/right	LSTMoutput[1].ot.z	LSTMoutput[1].ot	LSTMoutput[1].mt./*.**/right	LSTMoutput[1].mt	LSTMoutput[1].output./***/right	LSTMoutput[1].output	 nodes in the recurrent loops : 
LSTMoutput[2].dh	LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ot.z./*+*/left./*+*/right	LSTMoutput[2].ot.z./*+*/left	LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ft.z./*+*/left./*+*/right	LSTMoutput[2].ft.z./*+*/left	LSTMoutput[2].dc	LSTMoutput[2].ft.z./*+*/right.matrix	LSTMoutput[2].ft.z./*+*/right	LSTMoutput[2].ft.z	LSTMoutput[2].ft	LSTMoutput[2].bft	LSTMoutput[2].it.z./*+*/left./*+*/right./***/right	LSTMoutput[2].it.z./*+*/left./*+*/right	LSTMoutput[2].it.z./*+*/left	LSTMoutput[2].it.z./*+*/right.matrix	LSTMoutput[2].it.z./*+*/right	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[2].bit./*.**/right.z./*+*/right	LSTMoutput[2].bit./*.**/right.z	LSTMoutput[2].bit./*.**/right	LSTMoutput[2].bit	LSTMoutput[2].ct	LSTMoutput[2].ot.z./*+*/right.matrix	LSTMoutput[2].ot.z./*+*/right	LSTMoutput[2].ot.z	LSTMoutput[2].ot	LSTMoutput[2].mt./*.**/right	LSTMoutput[2].mt	LSTMoutput[2].output./***/right	LSTMoutput[2].output	 nodes in the recurrent loops : 
LSTMoutput[3].dh	LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ot.z./*+*/left./*+*/right	LSTMoutput[3].ot.z./*+*/left	LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ft.z./*+*/left./*+*/right	LSTMoutput[3].ft.z./*+*/left	LSTMoutput[3].dc	LSTMoutput[3].ft.z./*+*/right.matrix	LSTMoutput[3].ft.z./*+*/right	LSTMoutput[3].ft.z	LSTMoutput[3].ft	LSTMoutput[3].bft	LSTMoutput[3].it.z./*+*/left./*+*/right./***/right	LSTMoutput[3].it.z./*+*/left./*+*/right	LSTMoutput[3].it.z./*+*/left	LSTMoutput[3].it.z./*+*/right.matrix	LSTMoutput[3].it.z./*+*/right	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[3].bit./*.**/right.z./*+*/right	LSTMoutput[3].bit./*.**/right.z	LSTMoutput[3].bit./*.**/right	LSTMoutput[3].bit	LSTMoutput[3].ct	LSTMoutput[3].ot.z./*+*/right.matrix	LSTMoutput[3].ot.z./*+*/right	LSTMoutput[3].ot.z	LSTMoutput[3].ot	LSTMoutput[3].mt./*.**/right	LSTMoutput[3].mt	LSTMoutput[3].output./***/right	LSTMoutput[3].output	

Validating for node featNorm.invStdDevVector. 3 nodes to process in pass 1.

Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]

Validating for node featNorm.invStdDevVector, final verification.

Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]

1 out of 3 nodes do not share the minibatch layout with the input data.

 nodes in the recurrent loops : 
LSTMoutput[1].dh	LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ot.z./*+*/left./*+*/right	LSTMoutput[1].ot.z./*+*/left	LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ft.z./*+*/left./*+*/right	LSTMoutput[1].ft.z./*+*/left	LSTMoutput[1].dc	LSTMoutput[1].ft.z./*+*/right.matrix	LSTMoutput[1].ft.z./*+*/right	LSTMoutput[1].ft.z	LSTMoutput[1].ft	LSTMoutput[1].bft	LSTMoutput[1].it.z./*+*/left./*+*/right./***/right	LSTMoutput[1].it.z./*+*/left./*+*/right	LSTMoutput[1].it.z./*+*/left	LSTMoutput[1].it.z./*+*/right.matrix	LSTMoutput[1].it.z./*+*/right	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[1].bit./*.**/right.z./*+*/right	LSTMoutput[1].bit./*.**/right.z	LSTMoutput[1].bit./*.**/right	LSTMoutput[1].bit	LSTMoutput[1].ct	LSTMoutput[1].ot.z./*+*/right.matrix	LSTMoutput[1].ot.z./*+*/right	LSTMoutput[1].ot.z	LSTMoutput[1].ot	LSTMoutput[1].mt./*.**/right	LSTMoutput[1].mt	LSTMoutput[1].output./***/right	LSTMoutput[1].output	 nodes in the recurrent loops : 
LSTMoutput[2].dh	LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ot.z./*+*/left./*+*/right	LSTMoutput[2].ot.z./*+*/left	LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ft.z./*+*/left./*+*/right	LSTMoutput[2].ft.z./*+*/left	LSTMoutput[2].dc	LSTMoutput[2].ft.z./*+*/right.matrix	LSTMoutput[2].ft.z./*+*/right	LSTMoutput[2].ft.z	LSTMoutput[2].ft	LSTMoutput[2].bft	LSTMoutput[2].it.z./*+*/left./*+*/right./***/right	LSTMoutput[2].it.z./*+*/left./*+*/right	LSTMoutput[2].it.z./*+*/left	LSTMoutput[2].it.z./*+*/right.matrix	LSTMoutput[2].it.z./*+*/right	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[2].bit./*.**/right.z./*+*/right	LSTMoutput[2].bit./*.**/right.z	LSTMoutput[2].bit./*.**/right	LSTMoutput[2].bit	LSTMoutput[2].ct	LSTMoutput[2].ot.z./*+*/right.matrix	LSTMoutput[2].ot.z./*+*/right	LSTMoutput[2].ot.z	LSTMoutput[2].ot	LSTMoutput[2].mt./*.**/right	LSTMoutput[2].mt	LSTMoutput[2].output./***/right	LSTMoutput[2].output	 nodes in the recurrent loops : 
LSTMoutput[3].dh	LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ot.z./*+*/left./*+*/right	LSTMoutput[3].ot.z./*+*/left	LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ft.z./*+*/left./*+*/right	LSTMoutput[3].ft.z./*+*/left	LSTMoutput[3].dc	LSTMoutput[3].ft.z./*+*/right.matrix	LSTMoutput[3].ft.z./*+*/right	LSTMoutput[3].ft.z	LSTMoutput[3].ft	LSTMoutput[3].bft	LSTMoutput[3].it.z./*+*/left./*+*/right./***/right	LSTMoutput[3].it.z./*+*/left./*+*/right	LSTMoutput[3].it.z./*+*/left	LSTMoutput[3].it.z./*+*/right.matrix	LSTMoutput[3].it.z./*+*/right	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[3].bit./*.**/right.z./*+*/right	LSTMoutput[3].bit./*.**/right.z	LSTMoutput[3].bit./*.**/right	LSTMoutput[3].bit	LSTMoutput[3].ct	LSTMoutput[3].ot.z./*+*/right.matrix	LSTMoutput[3].ot.z./*+*/right	LSTMoutput[3].ot.z	LSTMoutput[3].ot	LSTMoutput[3].mt./*.**/right	LSTMoutput[3].mt	LSTMoutput[3].output./***/right	LSTMoutput[3].output	 nodes in the recurrent loops : 
LSTMoutput[1].dh	LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ot.z./*+*/left./*+*/right	LSTMoutput[1].ot.z./*+*/left	LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ft.z./*+*/left./*+*/right	LSTMoutput[1].ft.z./*+*/left	LSTMoutput[1].dc	LSTMoutput[1].ft.z./*+*/right.matrix	LSTMoutput[1].ft.z./*+*/right	LSTMoutput[1].ft.z	LSTMoutput[1].ft	LSTMoutput[1].bft	LSTMoutput[1].it.z./*+*/left./*+*/right./***/right	LSTMoutput[1].it.z./*+*/left./*+*/right	LSTMoutput[1].it.z./*+*/left	LSTMoutput[1].it.z./*+*/right.matrix	LSTMoutput[1].it.z./*+*/right	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[1].bit./*.**/right.z./*+*/right	LSTMoutput[1].bit./*.**/right.z	LSTMoutput[1].bit./*.**/right	LSTMoutput[1].bit	LSTMoutput[1].ct	LSTMoutput[1].ot.z./*+*/right.matrix	LSTMoutput[1].ot.z./*+*/right	LSTMoutput[1].ot.z	LSTMoutput[1].ot	LSTMoutput[1].mt./*.**/right	LSTMoutput[1].mt	LSTMoutput[1].output./***/right	LSTMoutput[1].output	 nodes in the recurrent loops : 
LSTMoutput[2].dh	LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ot.z./*+*/left./*+*/right	LSTMoutput[2].ot.z./*+*/left	LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ft.z./*+*/left./*+*/right	LSTMoutput[2].ft.z./*+*/left	LSTMoutput[2].dc	LSTMoutput[2].ft.z./*+*/right.matrix	LSTMoutput[2].ft.z./*+*/right	LSTMoutput[2].ft.z	LSTMoutput[2].ft	LSTMoutput[2].bft	LSTMoutput[2].it.z./*+*/left./*+*/right./***/right	LSTMoutput[2].it.z./*+*/left./*+*/right	LSTMoutput[2].it.z./*+*/left	LSTMoutput[2].it.z./*+*/right.matrix	LSTMoutput[2].it.z./*+*/right	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[2].bit./*.**/right.z./*+*/right	LSTMoutput[2].bit./*.**/right.z	LSTMoutput[2].bit./*.**/right	LSTMoutput[2].bit	LSTMoutput[2].ct	LSTMoutput[2].ot.z./*+*/right.matrix	LSTMoutput[2].ot.z./*+*/right	LSTMoutput[2].ot.z	LSTMoutput[2].ot	LSTMoutput[2].mt./*.**/right	LSTMoutput[2].mt	LSTMoutput[2].output./***/right	LSTMoutput[2].output	 nodes in the recurrent loops : 
LSTMoutput[3].dh	LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ot.z./*+*/left./*+*/right	LSTMoutput[3].ot.z./*+*/left	LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ft.z./*+*/left./*+*/right	LSTMoutput[3].ft.z./*+*/left	LSTMoutput[3].dc	LSTMoutput[3].ft.z./*+*/right.matrix	LSTMoutput[3].ft.z./*+*/right	LSTMoutput[3].ft.z	LSTMoutput[3].ft	LSTMoutput[3].bft	LSTMoutput[3].it.z./*+*/left./*+*/right./***/right	LSTMoutput[3].it.z./*+*/left./*+*/right	LSTMoutput[3].it.z./*+*/left	LSTMoutput[3].it.z./*+*/right.matrix	LSTMoutput[3].it.z./*+*/right	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[3].bit./*.**/right.z./*+*/right	LSTMoutput[3].bit./*.**/right.z	LSTMoutput[3].bit./*.**/right	LSTMoutput[3].bit	LSTMoutput[3].ct	LSTMoutput[3].ot.z./*+*/right.matrix	LSTMoutput[3].ot.z./*+*/right	LSTMoutput[3].ot.z	LSTMoutput[3].ot	LSTMoutput[3].mt./*.**/right	LSTMoutput[3].mt	LSTMoutput[3].output./***/right	LSTMoutput[3].output	

Validating for node featNorm.meanVector. 3 nodes to process in pass 1.

Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]

Validating for node featNorm.meanVector, final verification.

Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]

1 out of 3 nodes do not share the minibatch layout with the input data.

 nodes in the recurrent loops : 
LSTMoutput[1].dh	LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ot.z./*+*/left./*+*/right	LSTMoutput[1].ot.z./*+*/left	LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ft.z./*+*/left./*+*/right	LSTMoutput[1].ft.z./*+*/left	LSTMoutput[1].dc	LSTMoutput[1].ft.z./*+*/right.matrix	LSTMoutput[1].ft.z./*+*/right	LSTMoutput[1].ft.z	LSTMoutput[1].ft	LSTMoutput[1].bft	LSTMoutput[1].it.z./*+*/left./*+*/right./***/right	LSTMoutput[1].it.z./*+*/left./*+*/right	LSTMoutput[1].it.z./*+*/left	LSTMoutput[1].it.z./*+*/right.matrix	LSTMoutput[1].it.z./*+*/right	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[1].bit./*.**/right.z./*+*/right	LSTMoutput[1].bit./*.**/right.z	LSTMoutput[1].bit./*.**/right	LSTMoutput[1].bit	LSTMoutput[1].ct	LSTMoutput[1].ot.z./*+*/right.matrix	LSTMoutput[1].ot.z./*+*/right	LSTMoutput[1].ot.z	LSTMoutput[1].ot	LSTMoutput[1].mt./*.**/right	LSTMoutput[1].mt	LSTMoutput[1].output./***/right	LSTMoutput[1].output	 nodes in the recurrent loops : 
LSTMoutput[2].dh	LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ot.z./*+*/left./*+*/right	LSTMoutput[2].ot.z./*+*/left	LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ft.z./*+*/left./*+*/right	LSTMoutput[2].ft.z./*+*/left	LSTMoutput[2].dc	LSTMoutput[2].ft.z./*+*/right.matrix	LSTMoutput[2].ft.z./*+*/right	LSTMoutput[2].ft.z	LSTMoutput[2].ft	LSTMoutput[2].bft	LSTMoutput[2].it.z./*+*/left./*+*/right./***/right	LSTMoutput[2].it.z./*+*/left./*+*/right	LSTMoutput[2].it.z./*+*/left	LSTMoutput[2].it.z./*+*/right.matrix	LSTMoutput[2].it.z./*+*/right	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[2].bit./*.**/right.z./*+*/right	LSTMoutput[2].bit./*.**/right.z	LSTMoutput[2].bit./*.**/right	LSTMoutput[2].bit	LSTMoutput[2].ct	LSTMoutput[2].ot.z./*+*/right.matrix	LSTMoutput[2].ot.z./*+*/right	LSTMoutput[2].ot.z	LSTMoutput[2].ot	LSTMoutput[2].mt./*.**/right	LSTMoutput[2].mt	LSTMoutput[2].output./***/right	LSTMoutput[2].output	 nodes in the recurrent loops : 
LSTMoutput[3].dh	LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ot.z./*+*/left./*+*/right	LSTMoutput[3].ot.z./*+*/left	LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ft.z./*+*/left./*+*/right	LSTMoutput[3].ft.z./*+*/left	LSTMoutput[3].dc	LSTMoutput[3].ft.z./*+*/right.matrix	LSTMoutput[3].ft.z./*+*/right	LSTMoutput[3].ft.z	LSTMoutput[3].ft	LSTMoutput[3].bft	LSTMoutput[3].it.z./*+*/left./*+*/right./***/right	LSTMoutput[3].it.z./*+*/left./*+*/right	LSTMoutput[3].it.z./*+*/left	LSTMoutput[3].it.z./*+*/right.matrix	LSTMoutput[3].it.z./*+*/right	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[3].bit./*.**/right.z./*+*/right	LSTMoutput[3].bit./*.**/right.z	LSTMoutput[3].bit./*.**/right	LSTMoutput[3].bit	LSTMoutput[3].ct	LSTMoutput[3].ot.z./*+*/right.matrix	LSTMoutput[3].ot.z./*+*/right	LSTMoutput[3].ot.z	LSTMoutput[3].ot	LSTMoutput[3].mt./*.**/right	LSTMoutput[3].mt	LSTMoutput[3].output./***/right	LSTMoutput[3].output	 nodes in the recurrent loops : 
LSTMoutput[1].dh	LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ot.z./*+*/left./*+*/right	LSTMoutput[1].ot.z./*+*/left	LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ft.z./*+*/left./*+*/right	LSTMoutput[1].ft.z./*+*/left	LSTMoutput[1].dc	LSTMoutput[1].ft.z./*+*/right.matrix	LSTMoutput[1].ft.z./*+*/right	LSTMoutput[1].ft.z	LSTMoutput[1].ft	LSTMoutput[1].bft	LSTMoutput[1].it.z./*+*/left./*+*/right./***/right	LSTMoutput[1].it.z./*+*/left./*+*/right	LSTMoutput[1].it.z./*+*/left	LSTMoutput[1].it.z./*+*/right.matrix	LSTMoutput[1].it.z./*+*/right	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[1].bit./*.**/right.z./*+*/right	LSTMoutput[1].bit./*.**/right.z	LSTMoutput[1].bit./*.**/right	LSTMoutput[1].bit	LSTMoutput[1].ct	LSTMoutput[1].ot.z./*+*/right.matrix	LSTMoutput[1].ot.z./*+*/right	LSTMoutput[1].ot.z	LSTMoutput[1].ot	LSTMoutput[1].mt./*.**/right	LSTMoutput[1].mt	LSTMoutput[1].output./***/right	LSTMoutput[1].output	 nodes in the recurrent loops : 
LSTMoutput[2].dh	LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ot.z./*+*/left./*+*/right	LSTMoutput[2].ot.z./*+*/left	LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ft.z./*+*/left./*+*/right	LSTMoutput[2].ft.z./*+*/left	LSTMoutput[2].dc	LSTMoutput[2].ft.z./*+*/right.matrix	LSTMoutput[2].ft.z./*+*/right	LSTMoutput[2].ft.z	LSTMoutput[2].ft	LSTMoutput[2].bft	LSTMoutput[2].it.z./*+*/left./*+*/right./***/right	LSTMoutput[2].it.z./*+*/left./*+*/right	LSTMoutput[2].it.z./*+*/left	LSTMoutput[2].it.z./*+*/right.matrix	LSTMoutput[2].it.z./*+*/right	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[2].bit./*.**/right.z./*+*/right	LSTMoutput[2].bit./*.**/right.z	LSTMoutput[2].bit./*.**/right	LSTMoutput[2].bit	LSTMoutput[2].ct	LSTMoutput[2].ot.z./*+*/right.matrix	LSTMoutput[2].ot.z./*+*/right	LSTMoutput[2].ot.z	LSTMoutput[2].ot	LSTMoutput[2].mt./*.**/right	LSTMoutput[2].mt	LSTMoutput[2].output./***/right	LSTMoutput[2].output	 nodes in the recurrent loops : 
LSTMoutput[3].dh	LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ot.z./*+*/left./*+*/right	LSTMoutput[3].ot.z./*+*/left	LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ft.z./*+*/left./*+*/right	LSTMoutput[3].ft.z./*+*/left	LSTMoutput[3].dc	LSTMoutput[3].ft.z./*+*/right.matrix	LSTMoutput[3].ft.z./*+*/right	LSTMoutput[3].ft.z	LSTMoutput[3].ft	LSTMoutput[3].bft	LSTMoutput[3].it.z./*+*/left./*+*/right./***/right	LSTMoutput[3].it.z./*+*/left./*+*/right	LSTMoutput[3].it.z./*+*/left	LSTMoutput[3].it.z./*+*/right.matrix	LSTMoutput[3].it.z./*+*/right	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[3].bit./*.**/right.z./*+*/right	LSTMoutput[3].bit./*.**/right.z	LSTMoutput[3].bit./*.**/right	LSTMoutput[3].bit	LSTMoutput[3].ct	LSTMoutput[3].ot.z./*+*/right.matrix	LSTMoutput[3].ot.z./*+*/right	LSTMoutput[3].ot.z	LSTMoutput[3].ot	LSTMoutput[3].mt./*.**/right	LSTMoutput[3].mt	LSTMoutput[3].output./***/right	LSTMoutput[3].output	

Validating for node logPrior.x. 2 nodes to process in pass 1.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> logPrior.x = Mean(labels[132, MBSize 1]) -> [132, 1]

Validating for node logPrior.x. 1 nodes to process in pass 2.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> logPrior.x = Mean(labels[132, MBSize 1]) -> [132, 1]

Validating for node logPrior.x, final verification.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> logPrior.x = Mean(labels[132, MBSize 1]) -> [132, 1]

1 out of 2 nodes do not share the minibatch layout with the input data.


Precomputing --> Completed.

Set Max Temp Mem Size For Convolution Nodes to 0 samples.
Starting Epoch 1: learning rate per sample = 0.000781  effective momentum = 0.000000 
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
 nodes in the recurrent loops : 
LSTMoutput[1].dh	LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ot.z./*+*/left./*+*/right	LSTMoutput[1].ot.z./*+*/left	LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ft.z./*+*/left./*+*/right	LSTMoutput[1].ft.z./*+*/left	LSTMoutput[1].dc	LSTMoutput[1].ft.z./*+*/right.matrix	LSTMoutput[1].ft.z./*+*/right	LSTMoutput[1].ft.z	LSTMoutput[1].ft	LSTMoutput[1].bft	LSTMoutput[1].it.z./*+*/left./*+*/right./***/right	LSTMoutput[1].it.z./*+*/left./*+*/right	LSTMoutput[1].it.z./*+*/left	LSTMoutput[1].it.z./*+*/right.matrix	LSTMoutput[1].it.z./*+*/right	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[1].bit./*.**/right.z./*+*/right	LSTMoutput[1].bit./*.**/right.z	LSTMoutput[1].bit./*.**/right	LSTMoutput[1].bit	LSTMoutput[1].ct	LSTMoutput[1].ot.z./*+*/right.matrix	LSTMoutput[1].ot.z./*+*/right	LSTMoutput[1].ot.z	LSTMoutput[1].ot	LSTMoutput[1].mt./*.**/right	LSTMoutput[1].mt	LSTMoutput[1].output./***/right	LSTMoutput[1].output	 nodes in the recurrent loops : 
LSTMoutput[2].dh	LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ot.z./*+*/left./*+*/right	LSTMoutput[2].ot.z./*+*/left	LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ft.z./*+*/left./*+*/right	LSTMoutput[2].ft.z./*+*/left	LSTMoutput[2].dc	LSTMoutput[2].ft.z./*+*/right.matrix	LSTMoutput[2].ft.z./*+*/right	LSTMoutput[2].ft.z	LSTMoutput[2].ft	LSTMoutput[2].bft	LSTMoutput[2].it.z./*+*/left./*+*/right./***/right	LSTMoutput[2].it.z./*+*/left./*+*/right	LSTMoutput[2].it.z./*+*/left	LSTMoutput[2].it.z./*+*/right.matrix	LSTMoutput[2].it.z./*+*/right	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[2].bit./*.**/right.z./*+*/right	LSTMoutput[2].bit./*.**/right.z	LSTMoutput[2].bit./*.**/right	LSTMoutput[2].bit	LSTMoutput[2].ct	LSTMoutput[2].ot.z./*+*/right.matrix	LSTMoutput[2].ot.z./*+*/right	LSTMoutput[2].ot.z	LSTMoutput[2].ot	LSTMoutput[2].mt./*.**/right	LSTMoutput[2].mt	LSTMoutput[2].output./***/right	LSTMoutput[2].output	 nodes in the recurrent loops : 
LSTMoutput[3].dh	LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ot.z./*+*/left./*+*/right	LSTMoutput[3].ot.z./*+*/left	LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ft.z./*+*/left./*+*/right	LSTMoutput[3].ft.z./*+*/left	LSTMoutput[3].dc	LSTMoutput[3].ft.z./*+*/right.matrix	LSTMoutput[3].ft.z./*+*/right	LSTMoutput[3].ft.z	LSTMoutput[3].ft	LSTMoutput[3].bft	LSTMoutput[3].it.z./*+*/left./*+*/right./***/right	LSTMoutput[3].it.z./*+*/left./*+*/right	LSTMoutput[3].it.z./*+*/left	LSTMoutput[3].it.z./*+*/right.matrix	LSTMoutput[3].it.z./*+*/right	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[3].bit./*.**/right.z./*+*/right	LSTMoutput[3].bit./*.**/right.z	LSTMoutput[3].bit./*.**/right	LSTMoutput[3].bit	LSTMoutput[3].ct	LSTMoutput[3].ot.z./*+*/right.matrix	LSTMoutput[3].ot.z./*+*/right	LSTMoutput[3].ot.z	LSTMoutput[3].ot	LSTMoutput[3].mt./*.**/right	LSTMoutput[3].mt	LSTMoutput[3].output./***/right	LSTMoutput[3].output	 nodes in the recurrent loops : 
LSTMoutput[1].dh	LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ot.z./*+*/left./*+*/right	LSTMoutput[1].ot.z./*+*/left	LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[1].ft.z./*+*/left./*+*/right	LSTMoutput[1].ft.z./*+*/left	LSTMoutput[1].dc	LSTMoutput[1].ft.z./*+*/right.matrix	LSTMoutput[1].ft.z./*+*/right	LSTMoutput[1].ft.z	LSTMoutput[1].ft	LSTMoutput[1].bft	LSTMoutput[1].it.z./*+*/left./*+*/right./***/right	LSTMoutput[1].it.z./*+*/left./*+*/right	LSTMoutput[1].it.z./*+*/left	LSTMoutput[1].it.z./*+*/right.matrix	LSTMoutput[1].it.z./*+*/right	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[1].bit./*.**/right.z./*+*/right	LSTMoutput[1].bit./*.**/right.z	LSTMoutput[1].bit./*.**/right	LSTMoutput[1].bit	LSTMoutput[1].ct	LSTMoutput[1].ot.z./*+*/right.matrix	LSTMoutput[1].ot.z./*+*/right	LSTMoutput[1].ot.z	LSTMoutput[1].ot	LSTMoutput[1].mt./*.**/right	LSTMoutput[1].mt	LSTMoutput[1].output./***/right	LSTMoutput[1].output	 nodes in the recurrent loops : 
LSTMoutput[2].dh	LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ot.z./*+*/left./*+*/right	LSTMoutput[2].ot.z./*+*/left	LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[2].ft.z./*+*/left./*+*/right	LSTMoutput[2].ft.z./*+*/left	LSTMoutput[2].dc	LSTMoutput[2].ft.z./*+*/right.matrix	LSTMoutput[2].ft.z./*+*/right	LSTMoutput[2].ft.z	LSTMoutput[2].ft	LSTMoutput[2].bft	LSTMoutput[2].it.z./*+*/left./*+*/right./***/right	LSTMoutput[2].it.z./*+*/left./*+*/right	LSTMoutput[2].it.z./*+*/left	LSTMoutput[2].it.z./*+*/right.matrix	LSTMoutput[2].it.z./*+*/right	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[2].bit./*.**/right.z./*+*/right	LSTMoutput[2].bit./*.**/right.z	LSTMoutput[2].bit./*.**/right	LSTMoutput[2].bit	LSTMoutput[2].ct	LSTMoutput[2].ot.z./*+*/right.matrix	LSTMoutput[2].ot.z./*+*/right	LSTMoutput[2].ot.z	LSTMoutput[2].ot	LSTMoutput[2].mt./*.**/right	LSTMoutput[2].mt	LSTMoutput[2].output./***/right	LSTMoutput[2].output	 nodes in the recurrent loops : 
LSTMoutput[3].dh	LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ot.z./*+*/left./*+*/right	LSTMoutput[3].ot.z./*+*/left	LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right	LSTMoutput[3].ft.z./*+*/left./*+*/right	LSTMoutput[3].ft.z./*+*/left	LSTMoutput[3].dc	LSTMoutput[3].ft.z./*+*/right.matrix	LSTMoutput[3].ft.z./*+*/right	LSTMoutput[3].ft.z	LSTMoutput[3].ft	LSTMoutput[3].bft	LSTMoutput[3].it.z./*+*/left./*+*/right./***/right	LSTMoutput[3].it.z./*+*/left./*+*/right	LSTMoutput[3].it.z./*+*/left	LSTMoutput[3].it.z./*+*/right.matrix	LSTMoutput[3].it.z./*+*/right	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right	LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left	LSTMoutput[3].bit./*.**/right.z./*+*/right	LSTMoutput[3].bit./*.**/right.z	LSTMoutput[3].bit./*.**/right	LSTMoutput[3].bit	LSTMoutput[3].ct	LSTMoutput[3].ot.z./*+*/right.matrix	LSTMoutput[3].ot.z./*+*/right	LSTMoutput[3].ot.z	LSTMoutput[3].ot	LSTMoutput[3].mt./*.**/right	LSTMoutput[3].mt	LSTMoutput[3].output./***/right	LSTMoutput[3].output	

Validating for node Err. 272 nodes to process in pass 1.

Validating --> labels = InputValue -> [132, MBSize 640]
Validating --> LSTMoutputW./*+*/left./***/left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor = Exp(LSTMoutput[3].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor = Exp(LSTMoutput[2].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor = Exp(LSTMoutput[1].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 640]
Validating --> feashift = RowSlice(features[363, MBSize 640]) -> [33, MBSize 640]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 640]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 640]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 640], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left[1024, 33], LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right = Times(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ot.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right = Times(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ft.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix = Scale(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/right = DiagTimes(LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z./*+*/left[1024, MBSize 640], LSTMoutput[1].ft.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 640], LSTMoutput[1].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right = Times(LSTMoutput[1].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].it.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].it.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix = Scale(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/right = DiagTimes(LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z./*+*/left[1024, MBSize 640], LSTMoutput[1].it.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 640], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/left[1024, MBSize 640], LSTMoutput[1].bit./*.**/right.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right = Tanh(LSTMoutput[1].bit./*.**/right.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 640], LSTMoutput[1].bit./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 640], LSTMoutput[1].bit[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix = Scale(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/right = DiagTimes(LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z./*+*/left[1024, MBSize 640], LSTMoutput[1].ot.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].mt./*.**/right = Tanh(LSTMoutput[1].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 640], LSTMoutput[1].mt./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].output./***/right = Scale(LSTMoutput[1].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output./***/right[1024, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right = Times(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ot.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right = Times(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ft.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix = Scale(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/right = DiagTimes(LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z./*+*/left[1024, MBSize 640], LSTMoutput[2].ft.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 640], LSTMoutput[2].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right = Times(LSTMoutput[2].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].it.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix = Scale(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/right = DiagTimes(LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z./*+*/left[1024, MBSize 640], LSTMoutput[2].it.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 640], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/left[1024, MBSize 640], LSTMoutput[2].bit./*.**/right.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right = Tanh(LSTMoutput[2].bit./*.**/right.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 640], LSTMoutput[2].bit./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 640], LSTMoutput[2].bit[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix = Scale(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/right = DiagTimes(LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z./*+*/left[1024, MBSize 640], LSTMoutput[2].ot.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].mt./*.**/right = Tanh(LSTMoutput[2].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 640], LSTMoutput[2].mt./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].output./***/right = Scale(LSTMoutput[2].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output./***/right[1024, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right = Times(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ot.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right = Times(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ft.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix = Scale(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/right = DiagTimes(LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z./*+*/left[1024, MBSize 640], LSTMoutput[3].ft.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 640], LSTMoutput[3].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right = Times(LSTMoutput[3].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].it.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix = Scale(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/right = DiagTimes(LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z./*+*/left[1024, MBSize 640], LSTMoutput[3].it.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 640], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/left[1024, MBSize 640], LSTMoutput[3].bit./*.**/right.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right = Tanh(LSTMoutput[3].bit./*.**/right.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 640], LSTMoutput[3].bit./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 640], LSTMoutput[3].bit[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix = Scale(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/right = DiagTimes(LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z./*+*/left[1024, MBSize 640], LSTMoutput[3].ot.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].mt./*.**/right = Tanh(LSTMoutput[3].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 640], LSTMoutput[3].mt./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].output./***/right = Scale(LSTMoutput[3].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output./***/right[1024, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutputW./*+*/left./***/right = Scale(LSTMoutputW./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutputW./*+*/left = Times(LSTMoutputW./*+*/left./***/left[132, 256], LSTMoutputW./*+*/left./***/right[256, MBSize 640]) -> [132, MBSize 640]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW./*+*/left[132, MBSize 640], B[132, 1]) -> [132, MBSize 640]
Validating --> Err = ErrorPrediction(labels[132, MBSize 640], LSTMoutputW[132, MBSize 640]) -> [1, 1]

Validating for node Err. 180 nodes to process in pass 2.

Validating --> labels = InputValue -> [132, MBSize 640]
Validating --> LSTMoutputW./*+*/left./***/left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor = Exp(LSTMoutput[3].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor = Exp(LSTMoutput[2].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor = Exp(LSTMoutput[1].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 640]
Validating --> feashift = RowSlice(features[363, MBSize 640]) -> [33, MBSize 640]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 640]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 640]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 640], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left[1024, 33], LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right = Times(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ot.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right = Times(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ft.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix = Scale(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/right = DiagTimes(LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z./*+*/left[1024, MBSize 640], LSTMoutput[1].ft.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 640], LSTMoutput[1].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right = Times(LSTMoutput[1].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].it.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].it.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix = Scale(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/right = DiagTimes(LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z./*+*/left[1024, MBSize 640], LSTMoutput[1].it.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 640], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/left[1024, MBSize 640], LSTMoutput[1].bit./*.**/right.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right = Tanh(LSTMoutput[1].bit./*.**/right.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 640], LSTMoutput[1].bit./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 640], LSTMoutput[1].bit[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix = Scale(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/right = DiagTimes(LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z./*+*/left[1024, MBSize 640], LSTMoutput[1].ot.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].mt./*.**/right = Tanh(LSTMoutput[1].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 640], LSTMoutput[1].mt./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].output./***/right = Scale(LSTMoutput[1].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output./***/right[1024, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right = Times(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ot.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right = Times(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ft.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix = Scale(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/right = DiagTimes(LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z./*+*/left[1024, MBSize 640], LSTMoutput[2].ft.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 640], LSTMoutput[2].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right = Times(LSTMoutput[2].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].it.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix = Scale(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/right = DiagTimes(LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z./*+*/left[1024, MBSize 640], LSTMoutput[2].it.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 640], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/left[1024, MBSize 640], LSTMoutput[2].bit./*.**/right.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right = Tanh(LSTMoutput[2].bit./*.**/right.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 640], LSTMoutput[2].bit./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 640], LSTMoutput[2].bit[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix = Scale(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/right = DiagTimes(LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z./*+*/left[1024, MBSize 640], LSTMoutput[2].ot.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].mt./*.**/right = Tanh(LSTMoutput[2].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 640], LSTMoutput[2].mt./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].output./***/right = Scale(LSTMoutput[2].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output./***/right[1024, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right = Times(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ot.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right = Times(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ft.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix = Scale(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/right = DiagTimes(LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z./*+*/left[1024, MBSize 640], LSTMoutput[3].ft.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 640], LSTMoutput[3].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right = Times(LSTMoutput[3].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].it.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix = Scale(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/right = DiagTimes(LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z./*+*/left[1024, MBSize 640], LSTMoutput[3].it.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 640], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/left[1024, MBSize 640], LSTMoutput[3].bit./*.**/right.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right = Tanh(LSTMoutput[3].bit./*.**/right.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 640], LSTMoutput[3].bit./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 640], LSTMoutput[3].bit[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix = Scale(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/right = DiagTimes(LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z./*+*/left[1024, MBSize 640], LSTMoutput[3].ot.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].mt./*.**/right = Tanh(LSTMoutput[3].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 640], LSTMoutput[3].mt./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].output./***/right = Scale(LSTMoutput[3].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output./***/right[1024, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutputW./*+*/left./***/right = Scale(LSTMoutputW./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutputW./*+*/left = Times(LSTMoutputW./*+*/left./***/left[132, 256], LSTMoutputW./*+*/left./***/right[256, MBSize 640]) -> [132, MBSize 640]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW./*+*/left[132, MBSize 640], B[132, 1]) -> [132, MBSize 640]
Validating --> Err = ErrorPrediction(labels[132, MBSize 640], LSTMoutputW[132, MBSize 640]) -> [1, 1]

Validating for node Err. 6 nodes to process in pass 3.

Validating --> labels = InputValue -> [132, MBSize 640]
Validating --> LSTMoutputW./*+*/left./***/left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor = Exp(LSTMoutput[3].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor = Exp(LSTMoutput[2].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor = Exp(LSTMoutput[1].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 640]
Validating --> feashift = RowSlice(features[363, MBSize 640]) -> [33, MBSize 640]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 640]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 640]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 640], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left[1024, 33], LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right = Times(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ot.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right = Times(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ft.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix = Scale(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/right = DiagTimes(LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z./*+*/left[1024, MBSize 640], LSTMoutput[1].ft.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 640], LSTMoutput[1].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right = Times(LSTMoutput[1].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].it.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].it.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix = Scale(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/right = DiagTimes(LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z./*+*/left[1024, MBSize 640], LSTMoutput[1].it.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 640], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/left[1024, MBSize 640], LSTMoutput[1].bit./*.**/right.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right = Tanh(LSTMoutput[1].bit./*.**/right.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 640], LSTMoutput[1].bit./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 640], LSTMoutput[1].bit[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix = Scale(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/right = DiagTimes(LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z./*+*/left[1024, MBSize 640], LSTMoutput[1].ot.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].mt./*.**/right = Tanh(LSTMoutput[1].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 640], LSTMoutput[1].mt./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].output./***/right = Scale(LSTMoutput[1].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output./***/right[1024, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right = Times(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ot.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right = Times(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ft.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix = Scale(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/right = DiagTimes(LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z./*+*/left[1024, MBSize 640], LSTMoutput[2].ft.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 640], LSTMoutput[2].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right = Times(LSTMoutput[2].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].it.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix = Scale(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/right = DiagTimes(LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z./*+*/left[1024, MBSize 640], LSTMoutput[2].it.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 640], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/left[1024, MBSize 640], LSTMoutput[2].bit./*.**/right.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right = Tanh(LSTMoutput[2].bit./*.**/right.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 640], LSTMoutput[2].bit./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 640], LSTMoutput[2].bit[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix = Scale(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/right = DiagTimes(LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z./*+*/left[1024, MBSize 640], LSTMoutput[2].ot.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].mt./*.**/right = Tanh(LSTMoutput[2].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 640], LSTMoutput[2].mt./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].output./***/right = Scale(LSTMoutput[2].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output./***/right[1024, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right = Times(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ot.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right = Times(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ft.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix = Scale(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/right = DiagTimes(LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z./*+*/left[1024, MBSize 640], LSTMoutput[3].ft.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 640], LSTMoutput[3].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right = Times(LSTMoutput[3].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].it.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix = Scale(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/right = DiagTimes(LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z./*+*/left[1024, MBSize 640], LSTMoutput[3].it.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 640], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/left[1024, MBSize 640], LSTMoutput[3].bit./*.**/right.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right = Tanh(LSTMoutput[3].bit./*.**/right.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 640], LSTMoutput[3].bit./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 640], LSTMoutput[3].bit[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix = Scale(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/right = DiagTimes(LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z./*+*/left[1024, MBSize 640], LSTMoutput[3].ot.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].mt./*.**/right = Tanh(LSTMoutput[3].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 640], LSTMoutput[3].mt./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].output./***/right = Scale(LSTMoutput[3].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output./***/right[1024, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutputW./*+*/left./***/right = Scale(LSTMoutputW./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutputW./*+*/left = Times(LSTMoutputW./*+*/left./***/left[132, 256], LSTMoutputW./*+*/left./***/right[256, MBSize 640]) -> [132, MBSize 640]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW./*+*/left[132, MBSize 640], B[132, 1]) -> [132, MBSize 640]
Validating --> Err = ErrorPrediction(labels[132, MBSize 640], LSTMoutputW[132, MBSize 640]) -> [1, 1]

Validating for node Err, final verification.

Validating --> labels = InputValue -> [132, MBSize 640]
Validating --> LSTMoutputW./*+*/left./***/left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutputW./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output./***/right.scalarScalingFactor = Exp(LSTMoutput[3].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output./***/right.scalarScalingFactor = Exp(LSTMoutput[2].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output./***/right.scalarScalingFactor = Exp(LSTMoutput[1].output./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 640]
Validating --> feashift = RowSlice(features[363, MBSize 640]) -> [33, MBSize 640]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 640]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 640]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 640], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 33], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], featNorm[33, MBSize 640]) -> [33, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/left./***/left[1024, 33], LSTMoutput[1].bit./*.**/right.z./*+*/left./***/right[33, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left./*+*/right = Times(LSTMoutput[1].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ot.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/left = Plus(LSTMoutput[1].ot.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ot.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left./*+*/right = Times(LSTMoutput[1].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].ft.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/left = Plus(LSTMoutput[1].ft.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].ft.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/right.matrix = Scale(LSTMoutput[1].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z./*+*/right = DiagTimes(LSTMoutput[1].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z./*+*/left[1024, MBSize 640], LSTMoutput[1].ft.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 640], LSTMoutput[1].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[1].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left./*+*/right = Times(LSTMoutput[1].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[1].it.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/left = Plus(LSTMoutput[1].it.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[1].it.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/right.matrix = Scale(LSTMoutput[1].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z./*+*/right = DiagTimes(LSTMoutput[1].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z./*+*/left[1024, MBSize 640], LSTMoutput[1].it.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 640], LSTMoutput[1].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right.z = Plus(LSTMoutput[1].bit./*.**/right.z./*+*/left[1024, MBSize 640], LSTMoutput[1].bit./*.**/right.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit./*.**/right = Tanh(LSTMoutput[1].bit./*.**/right.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 640], LSTMoutput[1].bit./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 640], LSTMoutput[1].bit[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/right.matrix = Scale(LSTMoutput[1].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z./*+*/right = DiagTimes(LSTMoutput[1].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z./*+*/left[1024, MBSize 640], LSTMoutput[1].ot.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].mt./*.**/right = Tanh(LSTMoutput[1].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 640], LSTMoutput[1].mt./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].output./***/right = Scale(LSTMoutput[1].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output./***/right[1024, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left./*+*/right = Times(LSTMoutput[2].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ot.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/left = Plus(LSTMoutput[2].ot.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ot.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left./*+*/right = Times(LSTMoutput[2].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].ft.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/left = Plus(LSTMoutput[2].ft.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].ft.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/right.matrix = Scale(LSTMoutput[2].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z./*+*/right = DiagTimes(LSTMoutput[2].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z./*+*/left[1024, MBSize 640], LSTMoutput[2].ft.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 640], LSTMoutput[2].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[2].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left./*+*/right = Times(LSTMoutput[2].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[2].it.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/left = Plus(LSTMoutput[2].it.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[2].it.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/right.matrix = Scale(LSTMoutput[2].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z./*+*/right = DiagTimes(LSTMoutput[2].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z./*+*/left[1024, MBSize 640], LSTMoutput[2].it.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 640], LSTMoutput[2].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right.z = Plus(LSTMoutput[2].bit./*.**/right.z./*+*/left[1024, MBSize 640], LSTMoutput[2].bit./*.**/right.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit./*.**/right = Tanh(LSTMoutput[2].bit./*.**/right.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 640], LSTMoutput[2].bit./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 640], LSTMoutput[2].bit[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/right.matrix = Scale(LSTMoutput[2].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z./*+*/right = DiagTimes(LSTMoutput[2].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z./*+*/left[1024, MBSize 640], LSTMoutput[2].ot.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].mt./*.**/right = Tanh(LSTMoutput[2].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 640], LSTMoutput[2].mt./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].output./***/right = Scale(LSTMoutput[2].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output./***/right[1024, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ot.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ft.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left = Times(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].it.z./*+*/left./*+*/left./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor = Exp(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left./*+*/right = Times(LSTMoutput[3].ot.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ot.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/left = Plus(LSTMoutput[3].ot.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ot.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left./*+*/right = Times(LSTMoutput[3].ft.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].ft.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/left = Plus(LSTMoutput[3].ft.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].ft.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/right.matrix = Scale(LSTMoutput[3].ft.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z./*+*/right = DiagTimes(LSTMoutput[3].ft.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z./*+*/left[1024, MBSize 640], LSTMoutput[3].ft.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 640], LSTMoutput[3].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right./***/right = Scale(LSTMoutput[3].it.z./*+*/left./*+*/right./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left./*+*/right = Times(LSTMoutput[3].it.z./*+*/left./*+*/right./***/left[1024, 256], LSTMoutput[3].it.z./*+*/left./*+*/right./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/left = Plus(LSTMoutput[3].it.z./*+*/left./*+*/left[1024, MBSize 640], LSTMoutput[3].it.z./*+*/left./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/right.matrix = Scale(LSTMoutput[3].it.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z./*+*/right = DiagTimes(LSTMoutput[3].it.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z./*+*/left[1024, MBSize 640], LSTMoutput[3].it.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right = Scale(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left = Times(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/left[1024, 256], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left./***/right[256, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z./*+*/right = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/left[1024, MBSize 640], LSTMoutput[3].bit./*.**/right.z./*+*/right./*+*/right[1024, 1]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right.z = Plus(LSTMoutput[3].bit./*.**/right.z./*+*/left[1024, MBSize 640], LSTMoutput[3].bit./*.**/right.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit./*.**/right = Tanh(LSTMoutput[3].bit./*.**/right.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 640], LSTMoutput[3].bit./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 640], LSTMoutput[3].bit[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/right.matrix = Scale(LSTMoutput[3].ot.z./*+*/right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z./*+*/right = DiagTimes(LSTMoutput[3].ot.z./*+*/right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z./*+*/right.matrix[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z./*+*/left[1024, MBSize 640], LSTMoutput[3].ot.z./*+*/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].mt./*.**/right = Tanh(LSTMoutput[3].ct[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 640], LSTMoutput[3].mt./*.**/right[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].output./***/right = Scale(LSTMoutput[3].output./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 640]) -> [1024, MBSize 640]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output./***/right[1024, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutputW./*+*/left./***/right = Scale(LSTMoutputW./*+*/left./***/right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 640]) -> [256, MBSize 640]
Validating --> LSTMoutputW./*+*/left = Times(LSTMoutputW./*+*/left./***/left[132, 256], LSTMoutputW./*+*/left./***/right[256, MBSize 640]) -> [132, MBSize 640]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW./*+*/left[132, MBSize 640], B[132, 1]) -> [132, MBSize 640]
Validating --> Err = ErrorPrediction(labels[132, MBSize 640], LSTMoutputW[132, MBSize 640]) -> [1, 1]

127 out of 272 nodes do not share the minibatch layout with the input data.


Starting minibatch loop.
 Epoch[ 1 of 4]-Minibatch[   1-  10 of 1024]: SamplesSeen = 6400; TrainLossPerSample =  4.78817383; EvalErr[0]PerSample = 0.89125000; TotalTime = 20.56791s; TotalTimePerSample = 3.21374ms; SamplesPerSecond = 311
 Epoch[ 1 of 4]-Minibatch[  11-  20 of 1024]: SamplesSeen = 6400; TrainLossPerSample =  4.59419434; EvalErr[0]PerSample = 0.86328125; TotalTime = 20.21589s; TotalTimePerSample = 3.15873ms; SamplesPerSecond = 316
 Epoch[ 1 of 4]-Minibatch[  21-  30 of 1024]: SamplesSeen = 6400; TrainLossPerSample =  4.52217773; EvalErr[0]PerSample = 0.81859375; TotalTime = 22.25449s; TotalTimePerSample = 3.47726ms; SamplesPerSecond = 287
Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 4.5853896; EvalErrPerSample = 0.84082031; Ave LearnRatePerSample = 0.0007812500116; EpochTime=68.996574
Starting Epoch 2: learning rate per sample = 0.000781  effective momentum = 0.900000 
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20632), data subset 0 of 1, with 1 datapasses

Starting minibatch loop.
 Epoch[ 2 of 4]-Minibatch[   1-  10 of 1024]: SamplesSeen = 6400; TrainLossPerSample =  4.29597595; EvalErr[0]PerSample = 0.82859375; TotalTime = 20.96682s; TotalTimePerSample = 3.27607ms; SamplesPerSecond = 305
 Epoch[ 2 of 4]-Minibatch[  11-  20 of 1024]: SamplesSeen = 6400; TrainLossPerSample =  4.27295776; EvalErr[0]PerSample = 0.87312500; TotalTime = 20.34551s; TotalTimePerSample = 3.17899ms; SamplesPerSecond = 314
 Epoch[ 2 of 4]-Minibatch[  21-  30 of 1024]: SamplesSeen = 6400; TrainLossPerSample =  3.95423523; EvalErr[0]PerSample = 0.82500000; TotalTime = 20.81350s; TotalTimePerSample = 3.25211ms; SamplesPerSecond = 307
Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 4.1132798; EvalErrPerSample = 0.83588868; Ave LearnRatePerSample = 0.0007812500116; EpochTime=66.807404
Starting Epoch 3: learning rate per sample = 0.000781  effective momentum = 0.900000 
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40962), data subset 0 of 1, with 1 datapasses

Starting minibatch loop.
 Epoch[ 3 of 4]-Minibatch[   1-  10 of 1024]: SamplesSeen = 6400; TrainLossPerSample =  4.17982239; EvalErr[0]PerSample = 0.85281250; TotalTime = 18.89055s; TotalTimePerSample = 2.95165ms; SamplesPerSecond = 338
 Epoch[ 3 of 4]-Minibatch[  11-  20 of 1024]: SamplesSeen = 6400; TrainLossPerSample =  4.16644226; EvalErr[0]PerSample = 0.86703125; TotalTime = 20.64840s; TotalTimePerSample = 3.22631ms; SamplesPerSecond = 309
 Epoch[ 3 of 4]-Minibatch[  21-  30 of 1024]: SamplesSeen = 6400; TrainLossPerSample =  3.95540649; EvalErr[0]PerSample = 0.83859375; TotalTime = 20.57245s; TotalTimePerSample = 3.21444ms; SamplesPerSecond = 311
Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 4.0661392; EvalErrPerSample = 0.84653324; Ave LearnRatePerSample = 0.0007812500116; EpochTime=64.052172
Starting Epoch 4: learning rate per sample = 0.000781  effective momentum = 0.900000 
minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61554), data subset 0 of 1, with 1 datapasses

Starting minibatch loop.
 Epoch[ 4 of 4]-Minibatch[   1-  10 of 1024]: SamplesSeen = 6400; TrainLossPerSample =  4.06800842; EvalErr[0]PerSample = 0.82734375; TotalTime = 18.79745s; TotalTimePerSample = 2.93710ms; SamplesPerSecond = 340
 Epoch[ 4 of 4]-Minibatch[  11-  20 of 1024]: SamplesSeen = 6400; TrainLossPerSample =  4.10716370; EvalErr[0]PerSample = 0.88250000; TotalTime = 18.98044s; TotalTimePerSample = 2.96569ms; SamplesPerSecond = 337
 Epoch[ 4 of 4]-Minibatch[  21-  30 of 1024]: SamplesSeen = 6400; TrainLossPerSample =  3.91763550; EvalErr[0]PerSample = 0.82390625; TotalTime = 18.64471s; TotalTimePerSample = 2.91324ms; SamplesPerSecond = 343
Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 3.9796886; EvalErrPerSample = 0.82807618; Ave LearnRatePerSample = 0.0007812500116; EpochTime=60.617335
CNTKCommandTrainEnd: speechTrain
COMPLETED
