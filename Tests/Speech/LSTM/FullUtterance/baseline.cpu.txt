=== Running /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/Speech/LSTM/FullUtterance/../cntk.config currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data RunDir=/tmp/cntk-test-20151215163714.581330/Speech/LSTM_FullUtterance@release_cpu DataDir=/home/alrezni/src/cntk/Tests/Speech/Data ConfigDir=/home/alrezni/src/cntk/Tests/Speech/LSTM/FullUtterance/.. DeviceId=-1 Truncated=false speechTrain=[reader=[nbruttsineachrecurrentiter=2]] speechTrain=[SGD=[epochSize=2560]] speechTrain=[SGD=[maxEpochs=2]] speechTrain=[SGD=[numMBsToShowResult=1]] shareNodeValueMatrices=true
-------------------------------------------------------------------
Build info: 

		Built time: Dec 15 2015 16:32:52
		Last modified date: Tue Dec 15 16:31:42 2015
		Build type: release
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.0
		CUB_PATH: /usr/local/cub-1.4.1
		Build Branch: master
		Build SHA1: 5e0017ac9c55c23d53cb524c8acb7d6d9bfd0269
-------------------------------------------------------------------
running on localhost at 2015/12/15 16:44:46
command line: 
/home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/Speech/LSTM/FullUtterance/../cntk.config currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data RunDir=/tmp/cntk-test-20151215163714.581330/Speech/LSTM_FullUtterance@release_cpu DataDir=/home/alrezni/src/cntk/Tests/Speech/Data ConfigDir=/home/alrezni/src/cntk/Tests/Speech/LSTM/FullUtterance/.. DeviceId=-1 Truncated=false speechTrain=[reader=[nbruttsineachrecurrentiter=2]] speechTrain=[SGD=[epochSize=2560]] speechTrain=[SGD=[maxEpochs=2]] speechTrain=[SGD=[numMBsToShowResult=1]] shareNodeValueMatrices=true 

>>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = Parameter(m, 1, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            dh = PastValue(outputDim, 1, output);                   // hidden state(t-1)
            dc = PastValue(cellDim, 1, ct);                         // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))       // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))         // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))       // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))       // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim      // TODO: 363--is this the correct explanation?
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input(featDim, 1, tag='feature')
        labels = Input(labelDim, 1, tag='label')
feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, features);      
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data
RunDir=/tmp/cntk-test-20151215163714.581330/Speech/LSTM_FullUtterance@release_cpu
DataDir=/home/alrezni/src/cntk/Tests/Speech/Data
ConfigDir=/home/alrezni/src/cntk/Tests/Speech/LSTM/FullUtterance/..
DeviceId=-1
Truncated=false
speechTrain=[reader=[nbruttsineachrecurrentiter=2]]
speechTrain=[SGD=[epochSize=2560]]
speechTrain=[SGD=[maxEpochs=2]]
speechTrain=[SGD=[numMBsToShowResult=1]]
shareNodeValueMatrices=true

<<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
precision = "float"
command = speechTrain
deviceId = -1
parallelTrain = false
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20151215163714.581330/Speech/LSTM_FullUtterance@release_cpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/alrezni/src/cntk/Tests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = Parameter(m, 1, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            dh = PastValue(outputDim, 1, output);                   // hidden state(t-1)
            dc = PastValue(cellDim, 1, ct);                         // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))       // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))         // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))       // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))       // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim      // TODO: 363--is this the correct explanation?
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input(featDim, 1, tag='feature')
        labels = Input(labelDim, 1, tag='label')
feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, features);      
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data
RunDir=/tmp/cntk-test-20151215163714.581330/Speech/LSTM_FullUtterance@release_cpu
DataDir=/home/alrezni/src/cntk/Tests/Speech/Data
ConfigDir=/home/alrezni/src/cntk/Tests/Speech/LSTM/FullUtterance/..
DeviceId=-1
Truncated=false
speechTrain=[reader=[nbruttsineachrecurrentiter=2]]
speechTrain=[SGD=[epochSize=2560]]
speechTrain=[SGD=[maxEpochs=2]]
speechTrain=[SGD=[numMBsToShowResult=1]]
shareNodeValueMatrices=true

<<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.config:command=speechTrain
configparameters: cntk.config:ConfigDir=/home/alrezni/src/cntk/Tests/Speech/LSTM/FullUtterance/..
configparameters: cntk.config:currentDirectory=/home/alrezni/src/cntk/Tests/Speech/Data
configparameters: cntk.config:DataDir=/home/alrezni/src/cntk/Tests/Speech/Data
configparameters: cntk.config:deviceId=-1
configparameters: cntk.config:frameMode=false
configparameters: cntk.config:parallelTrain=false
configparameters: cntk.config:precision=float
configparameters: cntk.config:RunDir=/tmp/cntk-test-20151215163714.581330/Speech/LSTM_FullUtterance@release_cpu
configparameters: cntk.config:shareNodeValueMatrices=true
configparameters: cntk.config:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20151215163714.581330/Speech/LSTM_FullUtterance@release_cpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/alrezni/src/cntk/Tests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = Parameter(m, 1, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            dh = PastValue(outputDim, 1, output);                   // hidden state(t-1)
            dc = PastValue(cellDim, 1, ct);                         // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))       // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))         // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))       // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))       // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim      // TODO: 363--is this the correct explanation?
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input(featDim, 1, tag='feature')
        labels = Input(labelDim, 1, tag='label')
feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, features);      
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
] [reader=[nbruttsineachrecurrentiter=2]] [SGD=[epochSize=2560]] [SGD=[maxEpochs=2]] [SGD=[numMBsToShowResult=1]]

configparameters: cntk.config:truncated=false
<<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
command: speechTrain 
precision = float
CNTKModelPath: /tmp/cntk-test-20151215163714.581330/Speech/LSTM_FullUtterance@release_cpu/models/cntkSpeech.dnn
CNTKCommandTrainInfo: speechTrain : 2
CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 2
CNTKCommandTrainBegin: speechTrain
reading script file /home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.scp ... 948 entries
total 132 state names in state list /home/alrezni/src/cntk/Tests/Speech/Data/state.list
htkmlfreader: reading MLF file /home/alrezni/src/cntk/Tests/Speech/Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
Node --> B = LearnableParameter
Node --> labels = InputValue
Node --> LSTMoutputW.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].Wmr = LearnableParameter
Node --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].Wmr = LearnableParameter
Node --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].Wmr = LearnableParameter
Node --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> features = InputValue
Node --> feashift = RowSlice
Node --> featNorm.meanVector = Mean
Node --> featNorm.invStdDevVector = InvStdDev
Node --> featNorm = PerDimMeanVarNormalization
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].dh = PastValue
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = Scale
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[1].ot.z.Plus_left = Plus
Node --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = Scale
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[1].ft.z.Plus_left = Plus
Node --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[1].dc = PastValue
Node --> LSTMoutput[1].ft.z.Plus_right.matrix = Scale
Node --> LSTMoutput[1].ft.z.Plus_right = DiagTimes
Node --> LSTMoutput[1].ft.z = Plus
Node --> LSTMoutput[1].ft = Sigmoid
Node --> LSTMoutput[1].bft = ElementTimes
Node --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale
Node --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = Scale
Node --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[1].it.z.Plus_left = Plus
Node --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[1].it.z.Plus_right.matrix = Scale
Node --> LSTMoutput[1].it.z.Plus_right = DiagTimes
Node --> LSTMoutput[1].it.z = Plus
Node --> LSTMoutput[1].it = Sigmoid
Node --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right = Scale
Node --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left = Times
Node --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale
Node --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left = Times
Node --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter
Node --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right = Plus
Node --> LSTMoutput[1].bit.DotTimes_right.z = Plus
Node --> LSTMoutput[1].bit.DotTimes_right = Tanh
Node --> LSTMoutput[1].bit = ElementTimes
Node --> LSTMoutput[1].ct = Plus
Node --> LSTMoutput[1].ot.z.Plus_right.matrix = Scale
Node --> LSTMoutput[1].ot.z.Plus_right = DiagTimes
Node --> LSTMoutput[1].ot.z = Plus
Node --> LSTMoutput[1].ot = Sigmoid
Node --> LSTMoutput[1].mt.DotTimes_right = Tanh
Node --> LSTMoutput[1].mt = ElementTimes
Node --> LSTMoutput[1].output.Times_right = Scale
Node --> LSTMoutput[1].output = Times
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].dh = PastValue
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = Scale
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[2].ot.z.Plus_left = Plus
Node --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = Scale
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[2].ft.z.Plus_left = Plus
Node --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[2].dc = PastValue
Node --> LSTMoutput[2].ft.z.Plus_right.matrix = Scale
Node --> LSTMoutput[2].ft.z.Plus_right = DiagTimes
Node --> LSTMoutput[2].ft.z = Plus
Node --> LSTMoutput[2].ft = Sigmoid
Node --> LSTMoutput[2].bft = ElementTimes
Node --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale
Node --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = Scale
Node --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[2].it.z.Plus_left = Plus
Node --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[2].it.z.Plus_right.matrix = Scale
Node --> LSTMoutput[2].it.z.Plus_right = DiagTimes
Node --> LSTMoutput[2].it.z = Plus
Node --> LSTMoutput[2].it = Sigmoid
Node --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right = Scale
Node --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left = Times
Node --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale
Node --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left = Times
Node --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter
Node --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right = Plus
Node --> LSTMoutput[2].bit.DotTimes_right.z = Plus
Node --> LSTMoutput[2].bit.DotTimes_right = Tanh
Node --> LSTMoutput[2].bit = ElementTimes
Node --> LSTMoutput[2].ct = Plus
Node --> LSTMoutput[2].ot.z.Plus_right.matrix = Scale
Node --> LSTMoutput[2].ot.z.Plus_right = DiagTimes
Node --> LSTMoutput[2].ot.z = Plus
Node --> LSTMoutput[2].ot = Sigmoid
Node --> LSTMoutput[2].mt.DotTimes_right = Tanh
Node --> LSTMoutput[2].mt = ElementTimes
Node --> LSTMoutput[2].output.Times_right = Scale
Node --> LSTMoutput[2].output = Times
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].dh = PastValue
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = Scale
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[3].ot.z.Plus_left = Plus
Node --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = Scale
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[3].ft.z.Plus_left = Plus
Node --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[3].dc = PastValue
Node --> LSTMoutput[3].ft.z.Plus_right.matrix = Scale
Node --> LSTMoutput[3].ft.z.Plus_right = DiagTimes
Node --> LSTMoutput[3].ft.z = Plus
Node --> LSTMoutput[3].ft = Sigmoid
Node --> LSTMoutput[3].bft = ElementTimes
Node --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale
Node --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = Scale
Node --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[3].it.z.Plus_left = Plus
Node --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[3].it.z.Plus_right.matrix = Scale
Node --> LSTMoutput[3].it.z.Plus_right = DiagTimes
Node --> LSTMoutput[3].it.z = Plus
Node --> LSTMoutput[3].it = Sigmoid
Node --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right = Scale
Node --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left = Times
Node --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale
Node --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left = Times
Node --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter
Node --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right = Plus
Node --> LSTMoutput[3].bit.DotTimes_right.z = Plus
Node --> LSTMoutput[3].bit.DotTimes_right = Tanh
Node --> LSTMoutput[3].bit = ElementTimes
Node --> LSTMoutput[3].ct = Plus
Node --> LSTMoutput[3].ot.z.Plus_right.matrix = Scale
Node --> LSTMoutput[3].ot.z.Plus_right = DiagTimes
Node --> LSTMoutput[3].ot.z = Plus
Node --> LSTMoutput[3].ot = Sigmoid
Node --> LSTMoutput[3].mt.DotTimes_right = Tanh
Node --> LSTMoutput[3].mt = ElementTimes
Node --> LSTMoutput[3].output.Times_right = Scale
Node --> LSTMoutput[3].output = Times
Node --> LSTMoutputW.Plus_left.Times_right = Scale
Node --> LSTMoutputW.Plus_left = Times
Node --> LSTMoutputW = Plus
Node --> Err = ErrorPrediction
Node --> logPrior.x = Mean
Node --> logPrior = Log
Node --> ScaledLogLikelihood = Minus
Node --> cr = CrossEntropyWithSoftmax

Post-processing network...

6 roots:
	ScaledLogLikelihood = Minus
	featNorm.meanVector = Mean
	featNorm.invStdDevVector = InvStdDev
	logPrior.x = Mean
	Err = ErrorPrediction
	cr = CrossEntropyWithSoftmax

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ot.z.Plus_left.Plus_right
	LSTMoutput[1].ot.z.Plus_left	LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ft.z.Plus_left.Plus_right
	LSTMoutput[1].ft.z.Plus_left	LSTMoutput[1].dc	LSTMoutput[1].ft.z.Plus_right.matrix
	LSTMoutput[1].ft.z.Plus_right	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].it.z.Plus_left.Plus_right
	LSTMoutput[1].it.z.Plus_left	LSTMoutput[1].it.z.Plus_right.matrix	LSTMoutput[1].it.z.Plus_right
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[1].bit.DotTimes_right.z.Plus_right	LSTMoutput[1].bit.DotTimes_right.z
	LSTMoutput[1].bit.DotTimes_right	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.Plus_right.matrix	LSTMoutput[1].ot.z.Plus_right	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.DotTimes_right	LSTMoutput[1].mt
	LSTMoutput[1].output.Times_right	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ot.z.Plus_left.Plus_right
	LSTMoutput[2].ot.z.Plus_left	LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ft.z.Plus_left.Plus_right
	LSTMoutput[2].ft.z.Plus_left	LSTMoutput[2].dc	LSTMoutput[2].ft.z.Plus_right.matrix
	LSTMoutput[2].ft.z.Plus_right	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].it.z.Plus_left.Plus_right
	LSTMoutput[2].it.z.Plus_left	LSTMoutput[2].it.z.Plus_right.matrix	LSTMoutput[2].it.z.Plus_right
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[2].bit.DotTimes_right.z.Plus_right	LSTMoutput[2].bit.DotTimes_right.z
	LSTMoutput[2].bit.DotTimes_right	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.Plus_right.matrix	LSTMoutput[2].ot.z.Plus_right	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.DotTimes_right	LSTMoutput[2].mt
	LSTMoutput[2].output.Times_right	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ot.z.Plus_left.Plus_right
	LSTMoutput[3].ot.z.Plus_left	LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ft.z.Plus_left.Plus_right
	LSTMoutput[3].ft.z.Plus_left	LSTMoutput[3].dc	LSTMoutput[3].ft.z.Plus_right.matrix
	LSTMoutput[3].ft.z.Plus_right	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].it.z.Plus_left.Plus_right
	LSTMoutput[3].it.z.Plus_left	LSTMoutput[3].it.z.Plus_right.matrix	LSTMoutput[3].it.z.Plus_right
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[3].bit.DotTimes_right.z.Plus_right	LSTMoutput[3].bit.DotTimes_right.z
	LSTMoutput[3].bit.DotTimes_right	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.Plus_right.matrix	LSTMoutput[3].ot.z.Plus_right	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.DotTimes_right	LSTMoutput[3].mt
	LSTMoutput[3].output.Times_right	LSTMoutput[3].output

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ot.z.Plus_left.Plus_right
	LSTMoutput[1].ot.z.Plus_left	LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ft.z.Plus_left.Plus_right
	LSTMoutput[1].ft.z.Plus_left	LSTMoutput[1].dc	LSTMoutput[1].ft.z.Plus_right.matrix
	LSTMoutput[1].ft.z.Plus_right	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].it.z.Plus_left.Plus_right
	LSTMoutput[1].it.z.Plus_left	LSTMoutput[1].it.z.Plus_right.matrix	LSTMoutput[1].it.z.Plus_right
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[1].bit.DotTimes_right.z.Plus_right	LSTMoutput[1].bit.DotTimes_right.z
	LSTMoutput[1].bit.DotTimes_right	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.Plus_right.matrix	LSTMoutput[1].ot.z.Plus_right	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.DotTimes_right	LSTMoutput[1].mt
	LSTMoutput[1].output.Times_right	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ot.z.Plus_left.Plus_right
	LSTMoutput[2].ot.z.Plus_left	LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ft.z.Plus_left.Plus_right
	LSTMoutput[2].ft.z.Plus_left	LSTMoutput[2].dc	LSTMoutput[2].ft.z.Plus_right.matrix
	LSTMoutput[2].ft.z.Plus_right	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].it.z.Plus_left.Plus_right
	LSTMoutput[2].it.z.Plus_left	LSTMoutput[2].it.z.Plus_right.matrix	LSTMoutput[2].it.z.Plus_right
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[2].bit.DotTimes_right.z.Plus_right	LSTMoutput[2].bit.DotTimes_right.z
	LSTMoutput[2].bit.DotTimes_right	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.Plus_right.matrix	LSTMoutput[2].ot.z.Plus_right	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.DotTimes_right	LSTMoutput[2].mt
	LSTMoutput[2].output.Times_right	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ot.z.Plus_left.Plus_right
	LSTMoutput[3].ot.z.Plus_left	LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ft.z.Plus_left.Plus_right
	LSTMoutput[3].ft.z.Plus_left	LSTMoutput[3].dc	LSTMoutput[3].ft.z.Plus_right.matrix
	LSTMoutput[3].ft.z.Plus_right	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].it.z.Plus_left.Plus_right
	LSTMoutput[3].it.z.Plus_left	LSTMoutput[3].it.z.Plus_right.matrix	LSTMoutput[3].it.z.Plus_right
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[3].bit.DotTimes_right.z.Plus_right	LSTMoutput[3].bit.DotTimes_right.z
	LSTMoutput[3].bit.DotTimes_right	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.Plus_right.matrix	LSTMoutput[3].ot.z.Plus_right	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.DotTimes_right	LSTMoutput[3].mt
	LSTMoutput[3].output.Times_right	LSTMoutput[3].output

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ot.z.Plus_left.Plus_right
	LSTMoutput[1].ot.z.Plus_left	LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ft.z.Plus_left.Plus_right
	LSTMoutput[1].ft.z.Plus_left	LSTMoutput[1].dc	LSTMoutput[1].ft.z.Plus_right.matrix
	LSTMoutput[1].ft.z.Plus_right	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].it.z.Plus_left.Plus_right
	LSTMoutput[1].it.z.Plus_left	LSTMoutput[1].it.z.Plus_right.matrix	LSTMoutput[1].it.z.Plus_right
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[1].bit.DotTimes_right.z.Plus_right	LSTMoutput[1].bit.DotTimes_right.z
	LSTMoutput[1].bit.DotTimes_right	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.Plus_right.matrix	LSTMoutput[1].ot.z.Plus_right	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.DotTimes_right	LSTMoutput[1].mt
	LSTMoutput[1].output.Times_right	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ot.z.Plus_left.Plus_right
	LSTMoutput[2].ot.z.Plus_left	LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ft.z.Plus_left.Plus_right
	LSTMoutput[2].ft.z.Plus_left	LSTMoutput[2].dc	LSTMoutput[2].ft.z.Plus_right.matrix
	LSTMoutput[2].ft.z.Plus_right	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].it.z.Plus_left.Plus_right
	LSTMoutput[2].it.z.Plus_left	LSTMoutput[2].it.z.Plus_right.matrix	LSTMoutput[2].it.z.Plus_right
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[2].bit.DotTimes_right.z.Plus_right	LSTMoutput[2].bit.DotTimes_right.z
	LSTMoutput[2].bit.DotTimes_right	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.Plus_right.matrix	LSTMoutput[2].ot.z.Plus_right	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.DotTimes_right	LSTMoutput[2].mt
	LSTMoutput[2].output.Times_right	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ot.z.Plus_left.Plus_right
	LSTMoutput[3].ot.z.Plus_left	LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ft.z.Plus_left.Plus_right
	LSTMoutput[3].ft.z.Plus_left	LSTMoutput[3].dc	LSTMoutput[3].ft.z.Plus_right.matrix
	LSTMoutput[3].ft.z.Plus_right	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].it.z.Plus_left.Plus_right
	LSTMoutput[3].it.z.Plus_left	LSTMoutput[3].it.z.Plus_right.matrix	LSTMoutput[3].it.z.Plus_right
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[3].bit.DotTimes_right.z.Plus_right	LSTMoutput[3].bit.DotTimes_right.z
	LSTMoutput[3].bit.DotTimes_right	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.Plus_right.matrix	LSTMoutput[3].ot.z.Plus_right	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.DotTimes_right	LSTMoutput[3].mt
	LSTMoutput[3].output.Times_right	LSTMoutput[3].output

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ot.z.Plus_left.Plus_right
	LSTMoutput[1].ot.z.Plus_left	LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ft.z.Plus_left.Plus_right
	LSTMoutput[1].ft.z.Plus_left	LSTMoutput[1].dc	LSTMoutput[1].ft.z.Plus_right.matrix
	LSTMoutput[1].ft.z.Plus_right	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].it.z.Plus_left.Plus_right
	LSTMoutput[1].it.z.Plus_left	LSTMoutput[1].it.z.Plus_right.matrix	LSTMoutput[1].it.z.Plus_right
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[1].bit.DotTimes_right.z.Plus_right	LSTMoutput[1].bit.DotTimes_right.z
	LSTMoutput[1].bit.DotTimes_right	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.Plus_right.matrix	LSTMoutput[1].ot.z.Plus_right	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.DotTimes_right	LSTMoutput[1].mt
	LSTMoutput[1].output.Times_right	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ot.z.Plus_left.Plus_right
	LSTMoutput[2].ot.z.Plus_left	LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ft.z.Plus_left.Plus_right
	LSTMoutput[2].ft.z.Plus_left	LSTMoutput[2].dc	LSTMoutput[2].ft.z.Plus_right.matrix
	LSTMoutput[2].ft.z.Plus_right	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].it.z.Plus_left.Plus_right
	LSTMoutput[2].it.z.Plus_left	LSTMoutput[2].it.z.Plus_right.matrix	LSTMoutput[2].it.z.Plus_right
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[2].bit.DotTimes_right.z.Plus_right	LSTMoutput[2].bit.DotTimes_right.z
	LSTMoutput[2].bit.DotTimes_right	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.Plus_right.matrix	LSTMoutput[2].ot.z.Plus_right	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.DotTimes_right	LSTMoutput[2].mt
	LSTMoutput[2].output.Times_right	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ot.z.Plus_left.Plus_right
	LSTMoutput[3].ot.z.Plus_left	LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ft.z.Plus_left.Plus_right
	LSTMoutput[3].ft.z.Plus_left	LSTMoutput[3].dc	LSTMoutput[3].ft.z.Plus_right.matrix
	LSTMoutput[3].ft.z.Plus_right	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].it.z.Plus_left.Plus_right
	LSTMoutput[3].it.z.Plus_left	LSTMoutput[3].it.z.Plus_right.matrix	LSTMoutput[3].it.z.Plus_right
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[3].bit.DotTimes_right.z.Plus_right	LSTMoutput[3].bit.DotTimes_right.z
	LSTMoutput[3].bit.DotTimes_right	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.Plus_right.matrix	LSTMoutput[3].ot.z.Plus_right	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.DotTimes_right	LSTMoutput[3].mt
	LSTMoutput[3].output.Times_right	LSTMoutput[3].output

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ot.z.Plus_left.Plus_right
	LSTMoutput[1].ot.z.Plus_left	LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ft.z.Plus_left.Plus_right
	LSTMoutput[1].ft.z.Plus_left	LSTMoutput[1].dc	LSTMoutput[1].ft.z.Plus_right.matrix
	LSTMoutput[1].ft.z.Plus_right	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].it.z.Plus_left.Plus_right
	LSTMoutput[1].it.z.Plus_left	LSTMoutput[1].it.z.Plus_right.matrix	LSTMoutput[1].it.z.Plus_right
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[1].bit.DotTimes_right.z.Plus_right	LSTMoutput[1].bit.DotTimes_right.z
	LSTMoutput[1].bit.DotTimes_right	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.Plus_right.matrix	LSTMoutput[1].ot.z.Plus_right	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.DotTimes_right	LSTMoutput[1].mt
	LSTMoutput[1].output.Times_right	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ot.z.Plus_left.Plus_right
	LSTMoutput[2].ot.z.Plus_left	LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ft.z.Plus_left.Plus_right
	LSTMoutput[2].ft.z.Plus_left	LSTMoutput[2].dc	LSTMoutput[2].ft.z.Plus_right.matrix
	LSTMoutput[2].ft.z.Plus_right	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].it.z.Plus_left.Plus_right
	LSTMoutput[2].it.z.Plus_left	LSTMoutput[2].it.z.Plus_right.matrix	LSTMoutput[2].it.z.Plus_right
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[2].bit.DotTimes_right.z.Plus_right	LSTMoutput[2].bit.DotTimes_right.z
	LSTMoutput[2].bit.DotTimes_right	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.Plus_right.matrix	LSTMoutput[2].ot.z.Plus_right	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.DotTimes_right	LSTMoutput[2].mt
	LSTMoutput[2].output.Times_right	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ot.z.Plus_left.Plus_right
	LSTMoutput[3].ot.z.Plus_left	LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ft.z.Plus_left.Plus_right
	LSTMoutput[3].ft.z.Plus_left	LSTMoutput[3].dc	LSTMoutput[3].ft.z.Plus_right.matrix
	LSTMoutput[3].ft.z.Plus_right	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].it.z.Plus_left.Plus_right
	LSTMoutput[3].it.z.Plus_left	LSTMoutput[3].it.z.Plus_right.matrix	LSTMoutput[3].it.z.Plus_right
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[3].bit.DotTimes_right.z.Plus_right	LSTMoutput[3].bit.DotTimes_right.z
	LSTMoutput[3].bit.DotTimes_right	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.Plus_right.matrix	LSTMoutput[3].ot.z.Plus_right	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.DotTimes_right	LSTMoutput[3].mt
	LSTMoutput[3].output.Times_right	LSTMoutput[3].output

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ot.z.Plus_left.Plus_right
	LSTMoutput[1].ot.z.Plus_left	LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ft.z.Plus_left.Plus_right
	LSTMoutput[1].ft.z.Plus_left	LSTMoutput[1].dc	LSTMoutput[1].ft.z.Plus_right.matrix
	LSTMoutput[1].ft.z.Plus_right	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].it.z.Plus_left.Plus_right
	LSTMoutput[1].it.z.Plus_left	LSTMoutput[1].it.z.Plus_right.matrix	LSTMoutput[1].it.z.Plus_right
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[1].bit.DotTimes_right.z.Plus_right	LSTMoutput[1].bit.DotTimes_right.z
	LSTMoutput[1].bit.DotTimes_right	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.Plus_right.matrix	LSTMoutput[1].ot.z.Plus_right	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.DotTimes_right	LSTMoutput[1].mt
	LSTMoutput[1].output.Times_right	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ot.z.Plus_left.Plus_right
	LSTMoutput[2].ot.z.Plus_left	LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ft.z.Plus_left.Plus_right
	LSTMoutput[2].ft.z.Plus_left	LSTMoutput[2].dc	LSTMoutput[2].ft.z.Plus_right.matrix
	LSTMoutput[2].ft.z.Plus_right	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].it.z.Plus_left.Plus_right
	LSTMoutput[2].it.z.Plus_left	LSTMoutput[2].it.z.Plus_right.matrix	LSTMoutput[2].it.z.Plus_right
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[2].bit.DotTimes_right.z.Plus_right	LSTMoutput[2].bit.DotTimes_right.z
	LSTMoutput[2].bit.DotTimes_right	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.Plus_right.matrix	LSTMoutput[2].ot.z.Plus_right	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.DotTimes_right	LSTMoutput[2].mt
	LSTMoutput[2].output.Times_right	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ot.z.Plus_left.Plus_right
	LSTMoutput[3].ot.z.Plus_left	LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ft.z.Plus_left.Plus_right
	LSTMoutput[3].ft.z.Plus_left	LSTMoutput[3].dc	LSTMoutput[3].ft.z.Plus_right.matrix
	LSTMoutput[3].ft.z.Plus_right	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].it.z.Plus_left.Plus_right
	LSTMoutput[3].it.z.Plus_left	LSTMoutput[3].it.z.Plus_right.matrix	LSTMoutput[3].it.z.Plus_right
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[3].bit.DotTimes_right.z.Plus_right	LSTMoutput[3].bit.DotTimes_right.z
	LSTMoutput[3].bit.DotTimes_right	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.Plus_right.matrix	LSTMoutput[3].ot.z.Plus_right	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.DotTimes_right	LSTMoutput[3].mt
	LSTMoutput[3].output.Times_right	LSTMoutput[3].output

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ot.z.Plus_left.Plus_right
	LSTMoutput[1].ot.z.Plus_left	LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ft.z.Plus_left.Plus_right
	LSTMoutput[1].ft.z.Plus_left	LSTMoutput[1].dc	LSTMoutput[1].ft.z.Plus_right.matrix
	LSTMoutput[1].ft.z.Plus_right	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].it.z.Plus_left.Plus_right
	LSTMoutput[1].it.z.Plus_left	LSTMoutput[1].it.z.Plus_right.matrix	LSTMoutput[1].it.z.Plus_right
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[1].bit.DotTimes_right.z.Plus_right	LSTMoutput[1].bit.DotTimes_right.z
	LSTMoutput[1].bit.DotTimes_right	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.Plus_right.matrix	LSTMoutput[1].ot.z.Plus_right	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.DotTimes_right	LSTMoutput[1].mt
	LSTMoutput[1].output.Times_right	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ot.z.Plus_left.Plus_right
	LSTMoutput[2].ot.z.Plus_left	LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ft.z.Plus_left.Plus_right
	LSTMoutput[2].ft.z.Plus_left	LSTMoutput[2].dc	LSTMoutput[2].ft.z.Plus_right.matrix
	LSTMoutput[2].ft.z.Plus_right	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].it.z.Plus_left.Plus_right
	LSTMoutput[2].it.z.Plus_left	LSTMoutput[2].it.z.Plus_right.matrix	LSTMoutput[2].it.z.Plus_right
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[2].bit.DotTimes_right.z.Plus_right	LSTMoutput[2].bit.DotTimes_right.z
	LSTMoutput[2].bit.DotTimes_right	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.Plus_right.matrix	LSTMoutput[2].ot.z.Plus_right	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.DotTimes_right	LSTMoutput[2].mt
	LSTMoutput[2].output.Times_right	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ot.z.Plus_left.Plus_right
	LSTMoutput[3].ot.z.Plus_left	LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ft.z.Plus_left.Plus_right
	LSTMoutput[3].ft.z.Plus_left	LSTMoutput[3].dc	LSTMoutput[3].ft.z.Plus_right.matrix
	LSTMoutput[3].ft.z.Plus_right	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].it.z.Plus_left.Plus_right
	LSTMoutput[3].it.z.Plus_left	LSTMoutput[3].it.z.Plus_right.matrix	LSTMoutput[3].it.z.Plus_right
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left	LSTMoutput[3].bit.DotTimes_right.z.Plus_right	LSTMoutput[3].bit.DotTimes_right.z
	LSTMoutput[3].bit.DotTimes_right	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.Plus_right.matrix	LSTMoutput[3].ot.z.Plus_right	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.DotTimes_right	LSTMoutput[3].mt
	LSTMoutput[3].output.Times_right	LSTMoutput[3].output
FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
FormNestedNetwork: WARNING: Was called twice for featNorm.meanVector Mean operation
FormNestedNetwork: WARNING: Was called twice for featNorm.invStdDevVector InvStdDev operation
FormNestedNetwork: WARNING: Was called twice for logPrior.x Mean operation
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for cr CrossEntropyWithSoftmax operation


Validating for node ScaledLogLikelihood. 274 nodes to process in pass 1.

Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left[1024, 33], LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = Scale(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 0], LSTMoutput[1].dc[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = Scale(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z.Plus_right.matrix[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left[1024, 1], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_left[1024, MBSize 1], LSTMoutput[1].bit.DotTimes_right.z.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right = Tanh(LSTMoutput[1].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 0], LSTMoutput[1].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = Scale(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt.DotTimes_right = Tanh(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 0], LSTMoutput[1].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output.Times_right = Scale(LSTMoutput[1].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = Scale(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 0], LSTMoutput[2].dc[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = Scale(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z.Plus_right.matrix[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left[1024, 1], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right = Tanh(LSTMoutput[2].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 0], LSTMoutput[2].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = Scale(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt.DotTimes_right = Tanh(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 0], LSTMoutput[2].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output.Times_right = Scale(LSTMoutput[2].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = Scale(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 0], LSTMoutput[3].dc[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = Scale(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z.Plus_right.matrix[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, 1]) -> [256, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left[1024, 1], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right = Tanh(LSTMoutput[3].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 0], LSTMoutput[3].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = Scale(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt.DotTimes_right = Tanh(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 0], LSTMoutput[3].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output.Times_right = Scale(LSTMoutput[3].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left.Times_right = Scale(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132, 256], LSTMoutputW.Plus_left.Times_right[256, MBSize 0]) -> [132, MBSize 0]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132, MBSize 0], B[132, 1]) -> [132, MBSize 0]
Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> logPrior.x = Mean(labels[132, MBSize 1]) -> [132, 1]
Validating --> logPrior = Log(logPrior.x[132, 1]) -> [132, 1]
Validating --> ScaledLogLikelihood = Minus(LSTMoutputW[132, MBSize 0], logPrior[132, 1]) -> [132, MBSize 0]

Validating for node ScaledLogLikelihood. 185 nodes to process in pass 2.

Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left[1024, 33], LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = Scale(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 0], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = Scale(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_left[1024, MBSize 1], LSTMoutput[1].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right = Tanh(LSTMoutput[1].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 0], LSTMoutput[1].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = Scale(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt.DotTimes_right = Tanh(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 0], LSTMoutput[1].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output.Times_right = Scale(LSTMoutput[1].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = Scale(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 0], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = Scale(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right = Tanh(LSTMoutput[2].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 0], LSTMoutput[2].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = Scale(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt.DotTimes_right = Tanh(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 0], LSTMoutput[2].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output.Times_right = Scale(LSTMoutput[2].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = Scale(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 0], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = Scale(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right = Tanh(LSTMoutput[3].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 0], LSTMoutput[3].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = Scale(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt.DotTimes_right = Tanh(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 0], LSTMoutput[3].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output.Times_right = Scale(LSTMoutput[3].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left.Times_right = Scale(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132, 256], LSTMoutputW.Plus_left.Times_right[256, MBSize 0]) -> [132, MBSize 0]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132, MBSize 0], B[132, 1]) -> [132, MBSize 0]
Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> logPrior.x = Mean(labels[132, MBSize 1]) -> [132, 1]
Validating --> logPrior = Log(logPrior.x[132, 1]) -> [132, 1]
Validating --> ScaledLogLikelihood = Minus(LSTMoutputW[132, MBSize 0], logPrior[132, 1]) -> [132, MBSize 0]

Validating for node ScaledLogLikelihood. 60 nodes to process in pass 3.

Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left[1024, 33], LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = Scale(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 0], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = Scale(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_left[1024, MBSize 1], LSTMoutput[1].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right = Tanh(LSTMoutput[1].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 0], LSTMoutput[1].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = Scale(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt.DotTimes_right = Tanh(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 0], LSTMoutput[1].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output.Times_right = Scale(LSTMoutput[1].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = Scale(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 0], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = Scale(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right = Tanh(LSTMoutput[2].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 0], LSTMoutput[2].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = Scale(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt.DotTimes_right = Tanh(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 0], LSTMoutput[2].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output.Times_right = Scale(LSTMoutput[2].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = Scale(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 0], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = Scale(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right = Tanh(LSTMoutput[3].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 0], LSTMoutput[3].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = Scale(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt.DotTimes_right = Tanh(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 0], LSTMoutput[3].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output.Times_right = Scale(LSTMoutput[3].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left.Times_right = Scale(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132, 256], LSTMoutputW.Plus_left.Times_right[256, MBSize 0]) -> [132, MBSize 0]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132, MBSize 0], B[132, 1]) -> [132, MBSize 0]
Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> logPrior.x = Mean(labels[132, MBSize 1]) -> [132, 1]
Validating --> logPrior = Log(logPrior.x[132, 1]) -> [132, 1]
Validating --> ScaledLogLikelihood = Minus(LSTMoutputW[132, MBSize 0], logPrior[132, 1]) -> [132, MBSize 0]

Validating for node ScaledLogLikelihood, final verification.

Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left[1024, 33], LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = Scale(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 0], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = Scale(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_left[1024, MBSize 1], LSTMoutput[1].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right = Tanh(LSTMoutput[1].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 0], LSTMoutput[1].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = Scale(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt.DotTimes_right = Tanh(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 0], LSTMoutput[1].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output.Times_right = Scale(LSTMoutput[1].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = Scale(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 0], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = Scale(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right = Tanh(LSTMoutput[2].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 0], LSTMoutput[2].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = Scale(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt.DotTimes_right = Tanh(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 0], LSTMoutput[2].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output.Times_right = Scale(LSTMoutput[2].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = Scale(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 0], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = Scale(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right = Tanh(LSTMoutput[3].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 0], LSTMoutput[3].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = Scale(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt.DotTimes_right = Tanh(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 0], LSTMoutput[3].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output.Times_right = Scale(LSTMoutput[3].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left.Times_right = Scale(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132, 256], LSTMoutputW.Plus_left.Times_right[256, MBSize 0]) -> [132, MBSize 0]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132, MBSize 0], B[132, 1]) -> [132, MBSize 0]
Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> logPrior.x = Mean(labels[132, MBSize 1]) -> [132, 1]
Validating --> logPrior = Log(logPrior.x[132, 1]) -> [132, 1]
Validating --> ScaledLogLikelihood = Minus(LSTMoutputW[132, MBSize 0], logPrior[132, 1]) -> [132, MBSize 0]

128 out of 274 nodes do not share the minibatch layout with the input data.


Validating for node featNorm.meanVector. 3 nodes to process in pass 1.

Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]

Validating for node featNorm.meanVector, final verification.

Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]

1 out of 3 nodes do not share the minibatch layout with the input data.


Validating for node featNorm.invStdDevVector. 3 nodes to process in pass 1.

Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]

Validating for node featNorm.invStdDevVector, final verification.

Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]

1 out of 3 nodes do not share the minibatch layout with the input data.


Validating for node logPrior.x. 2 nodes to process in pass 1.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> logPrior.x = Mean(labels[132, MBSize 1]) -> [132, 1]

Validating for node logPrior.x, final verification.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> logPrior.x = Mean(labels[132, MBSize 1]) -> [132, 1]

1 out of 2 nodes do not share the minibatch layout with the input data.


Validating for node Err. 272 nodes to process in pass 1.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left[1024, 33], LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = Scale(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 0], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = Scale(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_left[1024, MBSize 1], LSTMoutput[1].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right = Tanh(LSTMoutput[1].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 0], LSTMoutput[1].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = Scale(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt.DotTimes_right = Tanh(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 0], LSTMoutput[1].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output.Times_right = Scale(LSTMoutput[1].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = Scale(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 0], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = Scale(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right = Tanh(LSTMoutput[2].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 0], LSTMoutput[2].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = Scale(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt.DotTimes_right = Tanh(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 0], LSTMoutput[2].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output.Times_right = Scale(LSTMoutput[2].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = Scale(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 0], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = Scale(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right = Tanh(LSTMoutput[3].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 0], LSTMoutput[3].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = Scale(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt.DotTimes_right = Tanh(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 0], LSTMoutput[3].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output.Times_right = Scale(LSTMoutput[3].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left.Times_right = Scale(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132, 256], LSTMoutputW.Plus_left.Times_right[256, MBSize 0]) -> [132, MBSize 0]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132, MBSize 0], B[132, 1]) -> [132, MBSize 0]
Validating --> Err = ErrorPrediction(labels[132, MBSize 1], LSTMoutputW[132, MBSize 0]) -> [1, 1]

Validating for node Err. 179 nodes to process in pass 2.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left[1024, 33], LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = Scale(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 0], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = Scale(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_left[1024, MBSize 1], LSTMoutput[1].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right = Tanh(LSTMoutput[1].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 0], LSTMoutput[1].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = Scale(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt.DotTimes_right = Tanh(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 0], LSTMoutput[1].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output.Times_right = Scale(LSTMoutput[1].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = Scale(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 0], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = Scale(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right = Tanh(LSTMoutput[2].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 0], LSTMoutput[2].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = Scale(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt.DotTimes_right = Tanh(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 0], LSTMoutput[2].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output.Times_right = Scale(LSTMoutput[2].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = Scale(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 0], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = Scale(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right = Tanh(LSTMoutput[3].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 0], LSTMoutput[3].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = Scale(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt.DotTimes_right = Tanh(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 0], LSTMoutput[3].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output.Times_right = Scale(LSTMoutput[3].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left.Times_right = Scale(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132, 256], LSTMoutputW.Plus_left.Times_right[256, MBSize 0]) -> [132, MBSize 0]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132, MBSize 0], B[132, 1]) -> [132, MBSize 0]
Validating --> Err = ErrorPrediction(labels[132, MBSize 1], LSTMoutputW[132, MBSize 0]) -> [1, 1]

Validating for node Err. 6 nodes to process in pass 3.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left[1024, 33], LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = Scale(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 0], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = Scale(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_left[1024, MBSize 1], LSTMoutput[1].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right = Tanh(LSTMoutput[1].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 0], LSTMoutput[1].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = Scale(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt.DotTimes_right = Tanh(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 0], LSTMoutput[1].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output.Times_right = Scale(LSTMoutput[1].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = Scale(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 0], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = Scale(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right = Tanh(LSTMoutput[2].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 0], LSTMoutput[2].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = Scale(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt.DotTimes_right = Tanh(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 0], LSTMoutput[2].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output.Times_right = Scale(LSTMoutput[2].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = Scale(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 0], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = Scale(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right = Tanh(LSTMoutput[3].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 0], LSTMoutput[3].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = Scale(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt.DotTimes_right = Tanh(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 0], LSTMoutput[3].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output.Times_right = Scale(LSTMoutput[3].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left.Times_right = Scale(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132, 256], LSTMoutputW.Plus_left.Times_right[256, MBSize 0]) -> [132, MBSize 0]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132, MBSize 0], B[132, 1]) -> [132, MBSize 0]
Validating --> Err = ErrorPrediction(labels[132, MBSize 1], LSTMoutputW[132, MBSize 0]) -> [1, 1]

Validating for node Err, final verification.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left[1024, 33], LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = Scale(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 0], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = Scale(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_left[1024, MBSize 1], LSTMoutput[1].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right = Tanh(LSTMoutput[1].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 0], LSTMoutput[1].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = Scale(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt.DotTimes_right = Tanh(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 0], LSTMoutput[1].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output.Times_right = Scale(LSTMoutput[1].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = Scale(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 0], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = Scale(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right = Tanh(LSTMoutput[2].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 0], LSTMoutput[2].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = Scale(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt.DotTimes_right = Tanh(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 0], LSTMoutput[2].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output.Times_right = Scale(LSTMoutput[2].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = Scale(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 0], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = Scale(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right = Tanh(LSTMoutput[3].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 0], LSTMoutput[3].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = Scale(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt.DotTimes_right = Tanh(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 0], LSTMoutput[3].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output.Times_right = Scale(LSTMoutput[3].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left.Times_right = Scale(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132, 256], LSTMoutputW.Plus_left.Times_right[256, MBSize 0]) -> [132, MBSize 0]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132, MBSize 0], B[132, 1]) -> [132, MBSize 0]
Validating --> Err = ErrorPrediction(labels[132, MBSize 1], LSTMoutputW[132, MBSize 0]) -> [1, 1]

127 out of 272 nodes do not share the minibatch layout with the input data.


Validating for node cr. 272 nodes to process in pass 1.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left[1024, 33], LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = Scale(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 0], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = Scale(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_left[1024, MBSize 1], LSTMoutput[1].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right = Tanh(LSTMoutput[1].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 0], LSTMoutput[1].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = Scale(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt.DotTimes_right = Tanh(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 0], LSTMoutput[1].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output.Times_right = Scale(LSTMoutput[1].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = Scale(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 0], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = Scale(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right = Tanh(LSTMoutput[2].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 0], LSTMoutput[2].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = Scale(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt.DotTimes_right = Tanh(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 0], LSTMoutput[2].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output.Times_right = Scale(LSTMoutput[2].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = Scale(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 0], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = Scale(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right = Tanh(LSTMoutput[3].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 0], LSTMoutput[3].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = Scale(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt.DotTimes_right = Tanh(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 0], LSTMoutput[3].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output.Times_right = Scale(LSTMoutput[3].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left.Times_right = Scale(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132, 256], LSTMoutputW.Plus_left.Times_right[256, MBSize 0]) -> [132, MBSize 0]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132, MBSize 0], B[132, 1]) -> [132, MBSize 0]
Validating --> cr = CrossEntropyWithSoftmax(labels[132, MBSize 1], LSTMoutputW[132, MBSize 0]) -> [1, 1]

Validating for node cr. 179 nodes to process in pass 2.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left[1024, 33], LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = Scale(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 0], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = Scale(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_left[1024, MBSize 1], LSTMoutput[1].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right = Tanh(LSTMoutput[1].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 0], LSTMoutput[1].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = Scale(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt.DotTimes_right = Tanh(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 0], LSTMoutput[1].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output.Times_right = Scale(LSTMoutput[1].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = Scale(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 0], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = Scale(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right = Tanh(LSTMoutput[2].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 0], LSTMoutput[2].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = Scale(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt.DotTimes_right = Tanh(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 0], LSTMoutput[2].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output.Times_right = Scale(LSTMoutput[2].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = Scale(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 0], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = Scale(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right = Tanh(LSTMoutput[3].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 0], LSTMoutput[3].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = Scale(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt.DotTimes_right = Tanh(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 0], LSTMoutput[3].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output.Times_right = Scale(LSTMoutput[3].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left.Times_right = Scale(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132, 256], LSTMoutputW.Plus_left.Times_right[256, MBSize 0]) -> [132, MBSize 0]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132, MBSize 0], B[132, 1]) -> [132, MBSize 0]
Validating --> cr = CrossEntropyWithSoftmax(labels[132, MBSize 1], LSTMoutputW[132, MBSize 0]) -> [1, 1]

Validating for node cr. 6 nodes to process in pass 3.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left[1024, 33], LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = Scale(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 0], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = Scale(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_left[1024, MBSize 1], LSTMoutput[1].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right = Tanh(LSTMoutput[1].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 0], LSTMoutput[1].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = Scale(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt.DotTimes_right = Tanh(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 0], LSTMoutput[1].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output.Times_right = Scale(LSTMoutput[1].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = Scale(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 0], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = Scale(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right = Tanh(LSTMoutput[2].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 0], LSTMoutput[2].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = Scale(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt.DotTimes_right = Tanh(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 0], LSTMoutput[2].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output.Times_right = Scale(LSTMoutput[2].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = Scale(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 0], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = Scale(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right = Tanh(LSTMoutput[3].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 0], LSTMoutput[3].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = Scale(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt.DotTimes_right = Tanh(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 0], LSTMoutput[3].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output.Times_right = Scale(LSTMoutput[3].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left.Times_right = Scale(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132, 256], LSTMoutputW.Plus_left.Times_right[256, MBSize 0]) -> [132, MBSize 0]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132, MBSize 0], B[132, 1]) -> [132, MBSize 0]
Validating --> cr = CrossEntropyWithSoftmax(labels[132, MBSize 1], LSTMoutputW[132, MBSize 0]) -> [1, 1]

Validating for node cr, final verification.

Validating --> labels = InputValue -> [132, MBSize 1]
Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132, 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256, 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> features = InputValue -> [363, MBSize 1]
Validating --> feashift = RowSlice(features[363, MBSize 1]) -> [33, MBSize 1]
Validating --> featNorm.meanVector = Mean(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33, MBSize 1]) -> [33, 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33, MBSize 1], featNorm.meanVector[33, 1], featNorm.invStdDevVector[33, 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 1], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 33]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], featNorm[33, MBSize 1]) -> [33, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left[1024, 33], LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right[33, MBSize 1]) -> [1024, MBSize 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = Scale(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024, MBSize 0], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = Scale(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024, MBSize 0], LSTMoutput[1].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right.z = Plus(LSTMoutput[1].bit.DotTimes_right.z.Plus_left[1024, MBSize 1], LSTMoutput[1].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit.DotTimes_right = Tanh(LSTMoutput[1].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024, MBSize 0], LSTMoutput[1].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024, MBSize 0], LSTMoutput[1].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = Scale(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[1].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt.DotTimes_right = Tanh(LSTMoutput[1].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024, MBSize 0], LSTMoutput[1].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output.Times_right = Scale(LSTMoutput[1].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256, 1024], LSTMoutput[1].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[1].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = Scale(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024, MBSize 0], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = Scale(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024, MBSize 0], LSTMoutput[2].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right.z = Plus(LSTMoutput[2].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit.DotTimes_right = Tanh(LSTMoutput[2].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024, MBSize 0], LSTMoutput[2].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024, MBSize 0], LSTMoutput[2].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = Scale(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[2].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt.DotTimes_right = Tanh(LSTMoutput[2].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024, MBSize 0], LSTMoutput[2].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output.Times_right = Scale(LSTMoutput[2].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256, 1024], LSTMoutput[2].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[2].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024, 256]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1, 1]) -> [1, 1]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024, 1]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = Scale(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ft.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024, MBSize 0], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = Scale(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024, 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_left.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = Scale(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].dc[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].it.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024, MBSize 0], LSTMoutput[3].it.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right = Scale(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].dh[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left[1024, 256], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right[256, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right[1024, 1]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right.z = Plus(LSTMoutput[3].bit.DotTimes_right.z.Plus_left[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit.DotTimes_right = Tanh(LSTMoutput[3].bit.DotTimes_right.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024, MBSize 0], LSTMoutput[3].bit.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024, MBSize 0], LSTMoutput[3].bit[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = Scale(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1, 1], LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024, 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024, MBSize 0], LSTMoutput[3].ot.z.Plus_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt.DotTimes_right = Tanh(LSTMoutput[3].ct[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024, MBSize 0], LSTMoutput[3].mt.DotTimes_right[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output.Times_right = Scale(LSTMoutput[3].output.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].mt[1024, MBSize 0]) -> [1024, MBSize 0]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256, 1024], LSTMoutput[3].output.Times_right[1024, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left.Times_right = Scale(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1, 1], LSTMoutput[3].output[256, MBSize 0]) -> [256, MBSize 0]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132, 256], LSTMoutputW.Plus_left.Times_right[256, MBSize 0]) -> [132, MBSize 0]
Validating --> B = LearnableParameter -> [132, 1]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132, MBSize 0], B[132, 1]) -> [132, MBSize 0]
Validating --> cr = CrossEntropyWithSoftmax(labels[132, MBSize 1], LSTMoutputW[132, MBSize 0]) -> [1, 1]

127 out of 272 nodes do not share the minibatch layout with the input data.

Post-processing network complete.
N9Microsoft3MSR4CNTK18ComputationNetworkE [
  B : LearnableParameter 132 x 1 ()
  cr : CrossEntropyWithSoftmax 1 x 1 (
    labels
    LSTMoutputW
  )
  Err : ErrorPrediction 1 x 1 (
    labels
    LSTMoutputW
  )
  feashift : RowSlice 33 x 1 (
    features
  )
  featNorm : PerDimMeanVarNormalization 33 x 1 (
    feashift
    featNorm.meanVector
    featNorm.invStdDevVector
  )
  featNorm.invStdDevVector : InvStdDev 33 x 1 (
    feashift
  )
  featNorm.meanVector : Mean 33 x 1 (
    feashift
  )
  features : InputValue 363 x 1 ()
  labels : InputValue 132 x 1 ()
  logPrior : Log 132 x 1 (
    logPrior.x
  )
  logPrior.x : Mean 132 x 1 (
    labels
  )
  LSTMoutput[1].bft : ElementTimes 1024 x 0 (
    LSTMoutput[1].ft
    LSTMoutput[1].dc
  )
  LSTMoutput[1].bit : ElementTimes 1024 x 0 (
    LSTMoutput[1].it
    LSTMoutput[1].bit.DotTimes_right
  )
  LSTMoutput[1].bit.DotTimes_right : Tanh 1024 x 0 (
    LSTMoutput[1].bit.DotTimes_right.z
  )
  LSTMoutput[1].bit.DotTimes_right.z : Plus 1024 x 0 (
    LSTMoutput[1].bit.DotTimes_right.z.Plus_left
    LSTMoutput[1].bit.DotTimes_right.z.Plus_right
  )
  LSTMoutput[1].bit.DotTimes_right.z.Plus_left : Times 1024 x 1 (
    LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left
    LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right
  )
  LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_left : LearnableParameter 1024 x 33 ()
  LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right : Scale 33 x 1 (
    LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor
    featNorm
  )
  LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].bit.DotTimes_right.z.Plus_right : Plus 1024 x 0 (
    LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left
    LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right
  )
  LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left : Times 1024 x 0 (
    LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left
    LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
  )
  LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right : Scale 256 x 0 (
    LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[1].dh
  )
  LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].bit.DotTimes_right.z.Plus_right.Plus_right : LearnableParameter 1024 x 1 ()
  LSTMoutput[1].ct : Plus 1024 x 0 (
    LSTMoutput[1].bft
    LSTMoutput[1].bit
  )
  LSTMoutput[1].dc : PastValue 1024 x 0 (
    LSTMoutput[1].ct
  )
  LSTMoutput[1].dh : PastValue 256 x 0 (
    LSTMoutput[1].output
  )
  LSTMoutput[1].ft : Sigmoid 1024 x 0 (
    LSTMoutput[1].ft.z
  )
  LSTMoutput[1].ft.z : Plus 1024 x 0 (
    LSTMoutput[1].ft.z.Plus_left
    LSTMoutput[1].ft.z.Plus_right
  )
  LSTMoutput[1].ft.z.Plus_left : Plus 1024 x 0 (
    LSTMoutput[1].ft.z.Plus_left.Plus_left
    LSTMoutput[1].ft.z.Plus_left.Plus_right
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_left : Plus 1024 x 0 (
    LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left : Times 1024 x 1 (
    LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter 1024 x 33 ()
  LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right : Scale 33 x 1 (
    LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    featNorm
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right : LearnableParameter 1024 x 1 ()
  LSTMoutput[1].ft.z.Plus_left.Plus_right : Times 1024 x 0 (
    LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left
    LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right : Scale 256 x 0 (
    LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[1].dh
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].ft.z.Plus_right : DiagTimes 1024 x 0 (
    LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[1].ft.z.Plus_right.matrix
  )
  LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[1].ft.z.Plus_right.matrix : Scale 1024 x 0 (
    LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[1].dc
  )
  LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].it : Sigmoid 1024 x 0 (
    LSTMoutput[1].it.z
  )
  LSTMoutput[1].it.z : Plus 1024 x 0 (
    LSTMoutput[1].it.z.Plus_left
    LSTMoutput[1].it.z.Plus_right
  )
  LSTMoutput[1].it.z.Plus_left : Plus 1024 x 0 (
    LSTMoutput[1].it.z.Plus_left.Plus_left
    LSTMoutput[1].it.z.Plus_left.Plus_right
  )
  LSTMoutput[1].it.z.Plus_left.Plus_left : Plus 1024 x 0 (
    LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left : Times 1024 x 1 (
    LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter 1024 x 33 ()
  LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right : Scale 33 x 1 (
    LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    featNorm
  )
  LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right : LearnableParameter 1024 x 1 ()
  LSTMoutput[1].it.z.Plus_left.Plus_right : Times 1024 x 0 (
    LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left
    LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right : Scale 256 x 0 (
    LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[1].dh
  )
  LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].it.z.Plus_right : DiagTimes 1024 x 0 (
    LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[1].it.z.Plus_right.matrix
  )
  LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[1].it.z.Plus_right.matrix : Scale 1024 x 0 (
    LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[1].dc
  )
  LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].mt : ElementTimes 1024 x 0 (
    LSTMoutput[1].ot
    LSTMoutput[1].mt.DotTimes_right
  )
  LSTMoutput[1].mt.DotTimes_right : Tanh 1024 x 0 (
    LSTMoutput[1].ct
  )
  LSTMoutput[1].ot : Sigmoid 1024 x 0 (
    LSTMoutput[1].ot.z
  )
  LSTMoutput[1].ot.z : Plus 1024 x 0 (
    LSTMoutput[1].ot.z.Plus_left
    LSTMoutput[1].ot.z.Plus_right
  )
  LSTMoutput[1].ot.z.Plus_left : Plus 1024 x 0 (
    LSTMoutput[1].ot.z.Plus_left.Plus_left
    LSTMoutput[1].ot.z.Plus_left.Plus_right
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_left : Plus 1024 x 0 (
    LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left : Times 1024 x 1 (
    LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter 1024 x 33 ()
  LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right : Scale 33 x 1 (
    LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    featNorm
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right : LearnableParameter 1024 x 1 ()
  LSTMoutput[1].ot.z.Plus_left.Plus_right : Times 1024 x 0 (
    LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left
    LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right : Scale 256 x 0 (
    LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[1].dh
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].ot.z.Plus_right : DiagTimes 1024 x 0 (
    LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[1].ot.z.Plus_right.matrix
  )
  LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[1].ot.z.Plus_right.matrix : Scale 1024 x 0 (
    LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[1].ct
  )
  LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].output : Times 256 x 0 (
    LSTMoutput[1].Wmr
    LSTMoutput[1].output.Times_right
  )
  LSTMoutput[1].output.Times_right : Scale 1024 x 0 (
    LSTMoutput[1].output.Times_right.scalarScalingFactor
    LSTMoutput[1].mt
  )
  LSTMoutput[1].output.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[1].output.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].output.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[1].Wmr : LearnableParameter 256 x 1024 ()
  LSTMoutput[2].bft : ElementTimes 1024 x 0 (
    LSTMoutput[2].ft
    LSTMoutput[2].dc
  )
  LSTMoutput[2].bit : ElementTimes 1024 x 0 (
    LSTMoutput[2].it
    LSTMoutput[2].bit.DotTimes_right
  )
  LSTMoutput[2].bit.DotTimes_right : Tanh 1024 x 0 (
    LSTMoutput[2].bit.DotTimes_right.z
  )
  LSTMoutput[2].bit.DotTimes_right.z : Plus 1024 x 0 (
    LSTMoutput[2].bit.DotTimes_right.z.Plus_left
    LSTMoutput[2].bit.DotTimes_right.z.Plus_right
  )
  LSTMoutput[2].bit.DotTimes_right.z.Plus_left : Times 1024 x 0 (
    LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left
    LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right
  )
  LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right : Scale 256 x 0 (
    LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[1].output
  )
  LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].bit.DotTimes_right.z.Plus_right : Plus 1024 x 0 (
    LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left
    LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right
  )
  LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left : Times 1024 x 0 (
    LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left
    LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
  )
  LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right : Scale 256 x 0 (
    LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[2].dh
  )
  LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].bit.DotTimes_right.z.Plus_right.Plus_right : LearnableParameter 1024 x 1 ()
  LSTMoutput[2].ct : Plus 1024 x 0 (
    LSTMoutput[2].bft
    LSTMoutput[2].bit
  )
  LSTMoutput[2].dc : PastValue 1024 x 0 (
    LSTMoutput[2].ct
  )
  LSTMoutput[2].dh : PastValue 256 x 0 (
    LSTMoutput[2].output
  )
  LSTMoutput[2].ft : Sigmoid 1024 x 0 (
    LSTMoutput[2].ft.z
  )
  LSTMoutput[2].ft.z : Plus 1024 x 0 (
    LSTMoutput[2].ft.z.Plus_left
    LSTMoutput[2].ft.z.Plus_right
  )
  LSTMoutput[2].ft.z.Plus_left : Plus 1024 x 0 (
    LSTMoutput[2].ft.z.Plus_left.Plus_left
    LSTMoutput[2].ft.z.Plus_left.Plus_right
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_left : Plus 1024 x 0 (
    LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left : Times 1024 x 0 (
    LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right : Scale 256 x 0 (
    LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[1].output
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right : LearnableParameter 1024 x 1 ()
  LSTMoutput[2].ft.z.Plus_left.Plus_right : Times 1024 x 0 (
    LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left
    LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right : Scale 256 x 0 (
    LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[2].dh
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].ft.z.Plus_right : DiagTimes 1024 x 0 (
    LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[2].ft.z.Plus_right.matrix
  )
  LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[2].ft.z.Plus_right.matrix : Scale 1024 x 0 (
    LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[2].dc
  )
  LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].it : Sigmoid 1024 x 0 (
    LSTMoutput[2].it.z
  )
  LSTMoutput[2].it.z : Plus 1024 x 0 (
    LSTMoutput[2].it.z.Plus_left
    LSTMoutput[2].it.z.Plus_right
  )
  LSTMoutput[2].it.z.Plus_left : Plus 1024 x 0 (
    LSTMoutput[2].it.z.Plus_left.Plus_left
    LSTMoutput[2].it.z.Plus_left.Plus_right
  )
  LSTMoutput[2].it.z.Plus_left.Plus_left : Plus 1024 x 0 (
    LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left : Times 1024 x 0 (
    LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right : Scale 256 x 0 (
    LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[1].output
  )
  LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right : LearnableParameter 1024 x 1 ()
  LSTMoutput[2].it.z.Plus_left.Plus_right : Times 1024 x 0 (
    LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left
    LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right : Scale 256 x 0 (
    LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[2].dh
  )
  LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].it.z.Plus_right : DiagTimes 1024 x 0 (
    LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[2].it.z.Plus_right.matrix
  )
  LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[2].it.z.Plus_right.matrix : Scale 1024 x 0 (
    LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[2].dc
  )
  LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].mt : ElementTimes 1024 x 0 (
    LSTMoutput[2].ot
    LSTMoutput[2].mt.DotTimes_right
  )
  LSTMoutput[2].mt.DotTimes_right : Tanh 1024 x 0 (
    LSTMoutput[2].ct
  )
  LSTMoutput[2].ot : Sigmoid 1024 x 0 (
    LSTMoutput[2].ot.z
  )
  LSTMoutput[2].ot.z : Plus 1024 x 0 (
    LSTMoutput[2].ot.z.Plus_left
    LSTMoutput[2].ot.z.Plus_right
  )
  LSTMoutput[2].ot.z.Plus_left : Plus 1024 x 0 (
    LSTMoutput[2].ot.z.Plus_left.Plus_left
    LSTMoutput[2].ot.z.Plus_left.Plus_right
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_left : Plus 1024 x 0 (
    LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left : Times 1024 x 0 (
    LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right : Scale 256 x 0 (
    LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[1].output
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right : LearnableParameter 1024 x 1 ()
  LSTMoutput[2].ot.z.Plus_left.Plus_right : Times 1024 x 0 (
    LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left
    LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right : Scale 256 x 0 (
    LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[2].dh
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].ot.z.Plus_right : DiagTimes 1024 x 0 (
    LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[2].ot.z.Plus_right.matrix
  )
  LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[2].ot.z.Plus_right.matrix : Scale 1024 x 0 (
    LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[2].ct
  )
  LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].output : Times 256 x 0 (
    LSTMoutput[2].Wmr
    LSTMoutput[2].output.Times_right
  )
  LSTMoutput[2].output.Times_right : Scale 1024 x 0 (
    LSTMoutput[2].output.Times_right.scalarScalingFactor
    LSTMoutput[2].mt
  )
  LSTMoutput[2].output.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[2].output.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].output.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[2].Wmr : LearnableParameter 256 x 1024 ()
  LSTMoutput[3].bft : ElementTimes 1024 x 0 (
    LSTMoutput[3].ft
    LSTMoutput[3].dc
  )
  LSTMoutput[3].bit : ElementTimes 1024 x 0 (
    LSTMoutput[3].it
    LSTMoutput[3].bit.DotTimes_right
  )
  LSTMoutput[3].bit.DotTimes_right : Tanh 1024 x 0 (
    LSTMoutput[3].bit.DotTimes_right.z
  )
  LSTMoutput[3].bit.DotTimes_right.z : Plus 1024 x 0 (
    LSTMoutput[3].bit.DotTimes_right.z.Plus_left
    LSTMoutput[3].bit.DotTimes_right.z.Plus_right
  )
  LSTMoutput[3].bit.DotTimes_right.z.Plus_left : Times 1024 x 0 (
    LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left
    LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right
  )
  LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right : Scale 256 x 0 (
    LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[2].output
  )
  LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].bit.DotTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].bit.DotTimes_right.z.Plus_right : Plus 1024 x 0 (
    LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left
    LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right
  )
  LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left : Times 1024 x 0 (
    LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left
    LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right
  )
  LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right : Scale 256 x 0 (
    LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[3].dh
  )
  LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].bit.DotTimes_right.z.Plus_right.Plus_right : LearnableParameter 1024 x 1 ()
  LSTMoutput[3].ct : Plus 1024 x 0 (
    LSTMoutput[3].bft
    LSTMoutput[3].bit
  )
  LSTMoutput[3].dc : PastValue 1024 x 0 (
    LSTMoutput[3].ct
  )
  LSTMoutput[3].dh : PastValue 256 x 0 (
    LSTMoutput[3].output
  )
  LSTMoutput[3].ft : Sigmoid 1024 x 0 (
    LSTMoutput[3].ft.z
  )
  LSTMoutput[3].ft.z : Plus 1024 x 0 (
    LSTMoutput[3].ft.z.Plus_left
    LSTMoutput[3].ft.z.Plus_right
  )
  LSTMoutput[3].ft.z.Plus_left : Plus 1024 x 0 (
    LSTMoutput[3].ft.z.Plus_left.Plus_left
    LSTMoutput[3].ft.z.Plus_left.Plus_right
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_left : Plus 1024 x 0 (
    LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left : Times 1024 x 0 (
    LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right : Scale 256 x 0 (
    LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[2].output
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right : LearnableParameter 1024 x 1 ()
  LSTMoutput[3].ft.z.Plus_left.Plus_right : Times 1024 x 0 (
    LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left
    LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right : Scale 256 x 0 (
    LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[3].dh
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].ft.z.Plus_right : DiagTimes 1024 x 0 (
    LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[3].ft.z.Plus_right.matrix
  )
  LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[3].ft.z.Plus_right.matrix : Scale 1024 x 0 (
    LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[3].dc
  )
  LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].it : Sigmoid 1024 x 0 (
    LSTMoutput[3].it.z
  )
  LSTMoutput[3].it.z : Plus 1024 x 0 (
    LSTMoutput[3].it.z.Plus_left
    LSTMoutput[3].it.z.Plus_right
  )
  LSTMoutput[3].it.z.Plus_left : Plus 1024 x 0 (
    LSTMoutput[3].it.z.Plus_left.Plus_left
    LSTMoutput[3].it.z.Plus_left.Plus_right
  )
  LSTMoutput[3].it.z.Plus_left.Plus_left : Plus 1024 x 0 (
    LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left : Times 1024 x 0 (
    LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right : Scale 256 x 0 (
    LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[2].output
  )
  LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right : LearnableParameter 1024 x 1 ()
  LSTMoutput[3].it.z.Plus_left.Plus_right : Times 1024 x 0 (
    LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left
    LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right : Scale 256 x 0 (
    LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[3].dh
  )
  LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].it.z.Plus_right : DiagTimes 1024 x 0 (
    LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[3].it.z.Plus_right.matrix
  )
  LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[3].it.z.Plus_right.matrix : Scale 1024 x 0 (
    LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[3].dc
  )
  LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].mt : ElementTimes 1024 x 0 (
    LSTMoutput[3].ot
    LSTMoutput[3].mt.DotTimes_right
  )
  LSTMoutput[3].mt.DotTimes_right : Tanh 1024 x 0 (
    LSTMoutput[3].ct
  )
  LSTMoutput[3].ot : Sigmoid 1024 x 0 (
    LSTMoutput[3].ot.z
  )
  LSTMoutput[3].ot.z : Plus 1024 x 0 (
    LSTMoutput[3].ot.z.Plus_left
    LSTMoutput[3].ot.z.Plus_right
  )
  LSTMoutput[3].ot.z.Plus_left : Plus 1024 x 0 (
    LSTMoutput[3].ot.z.Plus_left.Plus_left
    LSTMoutput[3].ot.z.Plus_left.Plus_right
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_left : Plus 1024 x 0 (
    LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left : Times 1024 x 0 (
    LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right : Scale 256 x 0 (
    LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[2].output
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right : LearnableParameter 1024 x 1 ()
  LSTMoutput[3].ot.z.Plus_left.Plus_right : Times 1024 x 0 (
    LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left
    LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left : LearnableParameter 1024 x 256 ()
  LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right : Scale 256 x 0 (
    LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[3].dh
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].ot.z.Plus_right : DiagTimes 1024 x 0 (
    LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[3].ot.z.Plus_right.matrix
  )
  LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter 1024 x 1 ()
  LSTMoutput[3].ot.z.Plus_right.matrix : Scale 1024 x 0 (
    LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[3].ct
  )
  LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].output : Times 256 x 0 (
    LSTMoutput[3].Wmr
    LSTMoutput[3].output.Times_right
  )
  LSTMoutput[3].output.Times_right : Scale 1024 x 0 (
    LSTMoutput[3].output.Times_right.scalarScalingFactor
    LSTMoutput[3].mt
  )
  LSTMoutput[3].output.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutput[3].output.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].output.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  LSTMoutput[3].Wmr : LearnableParameter 256 x 1024 ()
  LSTMoutputW : Plus 132 x 0 (
    LSTMoutputW.Plus_left
    B
  )
  LSTMoutputW.Plus_left : Times 132 x 0 (
    LSTMoutputW.Plus_left.Times_left
    LSTMoutputW.Plus_left.Times_right
  )
  LSTMoutputW.Plus_left.Times_left : LearnableParameter 132 x 256 ()
  LSTMoutputW.Plus_left.Times_right : Scale 256 x 0 (
    LSTMoutputW.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[3].output
  )
  LSTMoutputW.Plus_left.Times_right.scalarScalingFactor : Exp 1 x 1 (
    LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter 1 x 1 ()
  ScaledLogLikelihood : Minus 132 x 0 (
    LSTMoutputW
    logPrior
  )
]

SGD using CPU.

Training criterion node(s):
	cr = CrossEntropyWithSoftmax

Evaluation criterion node(s):
	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Precomputing --> 3 PreCompute nodes found.

	NodeName: featNorm.invStdDevVector
	NodeName: featNorm.meanVector
	NodeName: logPrior.x
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

Precomputing --> Completed.

Set Max Temp Mem Size For Convolution Nodes to 0 samples.
Starting Epoch 1: learning rate per sample = 0.025000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..2560] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

Starting minibatch loop.
 Epoch[ 1 of 2]-Minibatch[   1-   1, 0.78%]: SamplesSeen = 616; TrainLossPerSample =  4.88280378; EvalErr[0]PerSample = 0.98376623; TotalTime = 1.2988s; SamplesPerSecond = 474.3
 Epoch[ 1 of 2]-Minibatch[   2-   2, 1.56%]: SamplesSeen = 836; TrainLossPerSample =  4.35807662; EvalErr[0]PerSample = 0.82894737; TotalTime = 1.4869s; SamplesPerSecond = 562.2
 Epoch[ 1 of 2]-Minibatch[   3-   3, 2.34%]: SamplesSeen = 634; TrainLossPerSample = 11.80097841; EvalErr[0]PerSample = 0.88012618; TotalTime = 1.2202s; SamplesPerSecond = 519.6
 Epoch[ 1 of 2]-Minibatch[   4-   4, 3.12%]: SamplesSeen = 994; TrainLossPerSample =  6.12752000; EvalErr[0]PerSample = 0.90643863; TotalTime = 1.8431s; SamplesPerSecond = 539.3
Finished Epoch[ 1 of 2]: [Training Set] TrainLossPerSample = 6.5661473; EvalErrPerSample = 0.89545453; AvgLearningRatePerSample = 0.025; EpochTime=5.85064
Starting Epoch 2: learning rate per sample = 0.025000  effective momentum = 0.900000  momentum as time constant = 189.8 samples
minibatchiterator: epoch 1: frames [2560..5120] (first utterance at frame 2872), data subset 0 of 1, with 1 datapasses

Starting minibatch loop.
 Epoch[ 2 of 2]-Minibatch[   1-   1, 0.78%]: SamplesSeen = 626; TrainLossPerSample =  5.72786549; EvalErr[0]PerSample = 0.97284345; TotalTime = 1.0976s; SamplesPerSecond = 570.3
 Epoch[ 2 of 2]-Minibatch[   2-   2, 1.56%]: SamplesSeen = 476; TrainLossPerSample =  4.85364436; EvalErr[0]PerSample = 0.90336134; TotalTime = 0.7505s; SamplesPerSecond = 634.2
 Epoch[ 2 of 2]-Minibatch[   3-   3, 2.34%]: SamplesSeen = 894; TrainLossPerSample =  4.97484532; EvalErr[0]PerSample = 0.90156600; TotalTime = 1.5183s; SamplesPerSecond = 588.8
Finished Epoch[ 2 of 2]: [Training Set] TrainLossPerSample = 5.1821094; EvalErrPerSample = 0.92434871; AvgLearningRatePerSample = 0.025; EpochTime=3.36763
CNTKCommandTrainEnd: speechTrain
COMPLETED