CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264173120 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config/02_Convolution.cntk currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu DataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config OutputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu DeviceId=0 timestamping=true train=[SGD=[maxEpochs=3]] imageLayout="cudnn"
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 12:04:41
		Last modified date: Tue Jul 12 04:28:35 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by philly on 34e58dd0283f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
07/14/2016 13:06:51: -------------------------------------------------------------------
07/14/2016 13:06:51: Build info: 

07/14/2016 13:06:51: 		Built time: Jul 14 2016 12:04:41
07/14/2016 13:06:51: 		Last modified date: Tue Jul 12 04:28:35 2016
07/14/2016 13:06:51: 		Build type: release
07/14/2016 13:06:51: 		Build target: GPU
07/14/2016 13:06:51: 		With 1bit-SGD: no
07/14/2016 13:06:51: 		Math lib: mkl
07/14/2016 13:06:51: 		CUDA_PATH: /usr/local/cuda-7.5
07/14/2016 13:06:51: 		CUB_PATH: /usr/local/cub-1.4.1
07/14/2016 13:06:51: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/14/2016 13:06:51: 		Build Branch: HEAD
07/14/2016 13:06:51: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 13:06:51: 		Built by philly on 34e58dd0283f
07/14/2016 13:06:51: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
07/14/2016 13:06:51: -------------------------------------------------------------------
07/14/2016 13:06:51: -------------------------------------------------------------------
07/14/2016 13:06:51: GPU info:

07/14/2016 13:06:51: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 13:06:51: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 13:06:51: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 13:06:51: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 13:06:51: -------------------------------------------------------------------

07/14/2016 13:06:51: Running on localhost at 2016/07/14 13:06:51
07/14/2016 13:06:51: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config/02_Convolution.cntk  currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData  RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu  DataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config  OutputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu  DeviceId=0  timestamping=true  train=[SGD=[maxEpochs=3]]  imageLayout="cudnn"



07/14/2016 13:06:51: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 13:06:51: rootDir = ".."
configDir = "$rootDir$/Config"
dataDir   = "$rootDir$/Data"
outputDir = "$rootDir$/Output"
modelDir  = "$outputDir$/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "$modelDir$/02_Convolution"
traceLevel = 1
numMBsToShowResult = 500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly = true
        ndlMacros = "$configDir$/Macros.ndl"
        networkDescription = "$ConfigDir$/02_Convolution.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.1*5:0.3
        momentumPerMB = 0*10:0.7
        maxEpochs = 15
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
test = [
    action = test
    minibatchSize = 1024
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = [
            features = [
            dim = 784
            format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu
DataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config
OutputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

07/14/2016 13:06:51: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 13:06:51: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 13:06:51: rootDir = ".."
configDir = "../Config"
dataDir   = "../Data"
outputDir = "../Output"
modelDir  = "/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution"
traceLevel = 1
numMBsToShowResult = 500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly = true
        ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config/Macros.ndl"
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config/02_Convolution.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.1*5:0.3
        momentumPerMB = 0*10:0.7
        maxEpochs = 15
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
test = [
    action = test
    minibatchSize = 1024
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
            dim = 784
            format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu
DataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config
OutputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

07/14/2016 13:06:51: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 13:06:51: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 02_Convolution.cntk:command=train:test
configparameters: 02_Convolution.cntk:configDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config
configparameters: 02_Convolution.cntk:currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
configparameters: 02_Convolution.cntk:dataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
configparameters: 02_Convolution.cntk:deviceId=0
configparameters: 02_Convolution.cntk:imageLayout=cudnn
configparameters: 02_Convolution.cntk:modelDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/Models
configparameters: 02_Convolution.cntk:modelPath=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution
configparameters: 02_Convolution.cntk:numMBsToShowResult=500
configparameters: 02_Convolution.cntk:outputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu
configparameters: 02_Convolution.cntk:precision=float
configparameters: 02_Convolution.cntk:rootDir=..
configparameters: 02_Convolution.cntk:RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu
configparameters: 02_Convolution.cntk:test=[
    action = test
    minibatchSize = 1024
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
            dim = 784
            format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 02_Convolution.cntk:timestamping=true
configparameters: 02_Convolution.cntk:traceLevel=1
configparameters: 02_Convolution.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly = true
        ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config/Macros.ndl"
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config/02_Convolution.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.1*5:0.3
        momentumPerMB = 0*10:0.7
        maxEpochs = 15
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
] [SGD=[maxEpochs=3]]

07/14/2016 13:06:51: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 13:06:51: Commands: train test
07/14/2016 13:06:51: Precision = "float"
07/14/2016 13:06:51: CNTKModelPath: /tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution
07/14/2016 13:06:51: CNTKCommandTrainInfo: train : 3
07/14/2016 13:06:51: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/14/2016 13:06:51: ##############################################################################
07/14/2016 13:06:51: #                                                                            #
07/14/2016 13:06:51: # Action "train"                                                             #
07/14/2016 13:06:51: #                                                                            #
07/14/2016 13:06:51: ##############################################################################

07/14/2016 13:06:51: CNTKCommandTrainBegin: train
NDLBuilder Using GPU 0

07/14/2016 13:06:52: Creating virgin network.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.w.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.w.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1.c.c = Convolution (conv1.w.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.b.b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1.cpb = Plus (conv1.c.c, conv1.b.b) : [28 x 28 x 16 x *], [1 x 1 x 16] -> [28 x 28 x 16 x *]
Validating --> conv1.out = RectifiedLinear (conv1.cpb) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> pool1 = MaxPooling (conv1.out) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Validating --> conv2.c.c = Convolution (conv2.w.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.b.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2.cpb = Plus (conv2.c.c, conv2.b.b) : [14 x 14 x 32 x *], [1 x 1 x 32] -> [14 x 14 x 32 x *]
Validating --> conv2.out = RectifiedLinear (conv2.cpb) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> pool2.p = Pooling (conv2.out) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> h1.t = Times (h1.W, pool2.p) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *], [128 x 1] -> [128 x 1 x *]
Validating --> h1.y = Sigmoid (h1.z) : [128 x 1 x *] -> [128 x 1 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x 1 x *] -> [10 x 1 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x 1 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.

pool2.p: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 13:06:52: Created model with 27 nodes on GPU 0.

07/14/2016 13:06:52: Training criterion node(s):
07/14/2016 13:06:52: 	ce = CrossEntropyWithSoftmax

07/14/2016 13:06:52: Evaluation criterion node(s):

07/14/2016 13:06:52: 	errs = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[errs Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *]] [features Gradient[28 x 28 x 1 x *]] [labels Gradient[10 x *]] }
0x7ff825c50898: {[ce Value[1]] }
0x7ff825c50a58: {[conv1.c.c Value[28 x 28 x 16 x *]] }
0x7ff825c89e98: {[featScaled Value[28 x 28 x 1 x *]] }
0x7ff825c8a668: {[conv1.cpb Value[28 x 28 x 16 x *]] [conv1.w.W Gradient[16 x 25]] }
0x7ff825c8a828: {[conv1.c.c Gradient[28 x 28 x 16 x *]] [conv1.out Value[28 x 28 x 16 x *]] }
0x7ff825c8a9e8: {[conv1.cpb Gradient[28 x 28 x 16 x *]] [pool1 Value[14 x 14 x 16 x *]] }
0x7ff825c8aba8: {[conv2.c.c Value[14 x 14 x 32 x *]] }
0x7ff825c8ad68: {[conv1.b.b Gradient[1 x 1 x 16]] [conv1.out Gradient[28 x 28 x 16 x *]] }
0x7ff825c8af28: {[conv2.cpb Value[14 x 14 x 32 x *]] [conv2.w.W Gradient[32 x 400]] }
0x7ff825c8b0e8: {[conv2.c.c Gradient[14 x 14 x 32 x *]] [conv2.out Value[14 x 14 x 32 x *]] }
0x7ff825c8b2a8: {[conv2.cpb Gradient[14 x 14 x 32 x *]] [pool1 Gradient[14 x 14 x 16 x *]] [pool2.p Value[7 x 7 x 32 x *]] }
0x7ff825c8b468: {[conv2.b.b Gradient[1 x 1 x 32]] [conv2.out Gradient[14 x 14 x 32 x *]] [h1.t Value[128 x *]] }
0x7ff825c8b628: {[h1.W Gradient[128 x 7 x 7 x 32]] [h1.z Value[128 x 1 x *]] }
0x7ff825c8b7e8: {[h1.t Gradient[128 x *]] [h1.y Value[128 x 1 x *]] }
0x7ff825c8b9a8: {[h1.z Gradient[128 x 1 x *]] [ol.t Value[10 x 1 x *]] [pool2.p Gradient[7 x 7 x 32 x *]] }
0x7ff825c8c458: {[ce Gradient[1]] }
0x7ff825c8c618: {[ol.W Gradient[10 x 128]] [ol.z Gradient[10 x 1 x *]] }
0x7ff825c8c7d8: {[ol.t Gradient[10 x 1 x *]] }
0x7ff825c8c998: {[ol.b Gradient[10 x 1]] }
0x7ff825c8cb58: {[h1.b Gradient[128 x 1]] [h1.y Gradient[128 x 1 x *]] }
0x7ff82def0f98: {[labels Value[10 x *]] }
0x7ff82def4d48: {[featScale Value[1 x 1]] }
0x7ff8302257e8: {[conv1.w.W Value[16 x 25]] }
0x7ff830226118: {[conv1.b.b Value[1 x 1 x 16]] }
0x7ff830227378: {[conv2.w.W Value[32 x 400]] }
0x7ff830228978: {[conv2.b.b Value[1 x 1 x 32]] }
0x7ff83022cea8: {[h1.W Value[128 x 7 x 7 x 32]] }
0x7ff83022e038: {[h1.b Value[128 x 1]] }
0x7ff83022f2e8: {[ol.W Value[10 x 128]] }
0x7ff830230198: {[ol.b Value[10 x 1]] }
0x7ff830235238: {[ol.z Value[10 x 1 x *]] }
0x7ff830275428: {[errs Value[1]] }
0x7ff8361d0c58: {[features Value[28 x 28 x 1 x *]] }

07/14/2016 13:06:52: No PreCompute nodes found, skipping PreCompute step.

07/14/2016 13:06:52: Starting Epoch 1: learning rate per sample = 0.003125  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..60000] (first sequence at sample 0), data subset 0 of 1

07/14/2016 13:06:52: Starting minibatch loop.
07/14/2016 13:06:54:  Epoch[ 1 of 3]-Minibatch[   1- 500, 26.67%]: ce = 1.05326855 * 16000; errs = 35.013% * 16000; time = 1.9883s; samplesPerSecond = 8047.1
07/14/2016 13:06:55:  Epoch[ 1 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.16105554 * 16000; errs = 4.412% * 16000; time = 0.9799s; samplesPerSecond = 16327.6
07/14/2016 13:06:56:  Epoch[ 1 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.10891687 * 16000; errs = 3.231% * 16000; time = 0.9673s; samplesPerSecond = 16541.7
07/14/2016 13:06:57: Finished Epoch[ 1 of 3]: [Training] ce = 0.37111071 * 60000; errs = 11.935% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.003125; epochTime=4.67781s
07/14/2016 13:06:57: SGD: Saving checkpoint model '/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution.1'

07/14/2016 13:06:57: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 1: frames [60000..120000] (first sequence at sample 60000), data subset 0 of 1

07/14/2016 13:06:57: Starting minibatch loop.
07/14/2016 13:06:58:  Epoch[ 2 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.07269138 * 16000; errs = 2.188% * 16000; time = 0.9737s; samplesPerSecond = 16432.0
07/14/2016 13:06:59:  Epoch[ 2 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.06284383 * 16000; errs = 1.731% * 16000; time = 0.9722s; samplesPerSecond = 16456.7
07/14/2016 13:06:59:  Epoch[ 2 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.06468748 * 16000; errs = 2.006% * 16000; time = 0.9650s; samplesPerSecond = 16579.7
07/14/2016 13:07:00: Finished Epoch[ 2 of 3]: [Training] ce = 0.06641834 * 60000; errs = 1.983% * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.003125; epochTime=3.64381s
07/14/2016 13:07:00: SGD: Saving checkpoint model '/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution.2'

07/14/2016 13:07:00: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 2: frames [120000..180000] (first sequence at sample 120000), data subset 0 of 1

07/14/2016 13:07:00: Starting minibatch loop.
07/14/2016 13:07:01:  Epoch[ 3 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.04169954 * 16000; errs = 1.200% * 16000; time = 0.9751s; samplesPerSecond = 16407.9
07/14/2016 13:07:02:  Epoch[ 3 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.04678108 * 16000; errs = 1.394% * 16000; time = 0.9748s; samplesPerSecond = 16414.0
07/14/2016 13:07:03:  Epoch[ 3 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.04975363 * 16000; errs = 1.481% * 16000; time = 0.9722s; samplesPerSecond = 16457.3
07/14/2016 13:07:04: Finished Epoch[ 3 of 3]: [Training] ce = 0.04527572 * 60000; errs = 1.323% * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.003125; epochTime=3.65392s
07/14/2016 13:07:04: SGD: Saving checkpoint model '/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution'
07/14/2016 13:07:04: CNTKCommandTrainEnd: train

07/14/2016 13:07:04: Action "train" complete.


07/14/2016 13:07:04: ##############################################################################
07/14/2016 13:07:04: #                                                                            #
07/14/2016 13:07:04: # Action "test"                                                              #
07/14/2016 13:07:04: #                                                                            #
07/14/2016 13:07:04: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.w.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.w.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1.c.c = Convolution (conv1.w.W, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> conv1.b.b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1.cpb = Plus (conv1.c.c, conv1.b.b) : [28 x 28 x 16 x *1], [1 x 1 x 16] -> [28 x 28 x 16 x *1]
Validating --> conv1.out = RectifiedLinear (conv1.cpb) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1.out) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> conv2.c.c = Convolution (conv2.w.W, pool1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> conv2.b.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2.cpb = Plus (conv2.c.c, conv2.b.b) : [14 x 14 x 32 x *1], [1 x 1 x 32] -> [14 x 14 x 32 x *1]
Validating --> conv2.out = RectifiedLinear (conv2.cpb) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> pool2.p = Pooling (conv2.out) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2.p) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *1], [128 x 1] -> [128 x 1 x *1]
Validating --> h1.y = Sigmoid (h1.z) : [128 x 1 x *1] -> [128 x 1 x *1]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x 1 x *1] -> [10 x 1 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x 1 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.

pool2.p: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[ce Gradient[1]] [conv1.b.b Gradient[1 x 1 x 16]] [conv1.c.c Gradient[28 x 28 x 16 x *1]] [conv1.cpb Gradient[28 x 28 x 16 x *1]] [conv1.out Gradient[28 x 28 x 16 x *1]] [conv1.w.W Gradient[16 x 25]] [conv2.b.b Gradient[1 x 1 x 32]] [conv2.c.c Gradient[14 x 14 x 32 x *1]] [conv2.cpb Gradient[14 x 14 x 32 x *1]] [conv2.out Gradient[14 x 14 x 32 x *1]] [conv2.w.W Gradient[32 x 400]] [errs Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *1]] [features Gradient[28 x 28 x 1 x *1]] [h1.W Gradient[128 x 7 x 7 x 32]] [h1.b Gradient[128 x 1]] [h1.t Gradient[128 x *1]] [h1.y Gradient[128 x 1 x *1]] [h1.z Gradient[128 x 1 x *1]] [labels Gradient[10 x *1]] [ol.W Gradient[10 x 128]] [ol.b Gradient[10 x 1]] [ol.t Gradient[10 x 1 x *1]] [ol.z Gradient[10 x 1 x *1]] [pool1 Gradient[14 x 14 x 16 x *1]] [pool2.p Gradient[7 x 7 x 32 x *1]] }
0x7ff825cc6218: {[conv1.cpb Value[28 x 28 x 16 x *1]] }
0x7ff825cc63d8: {[conv1.out Value[28 x 28 x 16 x *1]] }
0x7ff825cc6598: {[pool1 Value[14 x 14 x 16 x *1]] }
0x7ff825cc6758: {[conv2.c.c Value[14 x 14 x 32 x *1]] }
0x7ff825cc6ad8: {[conv2.cpb Value[14 x 14 x 32 x *1]] }
0x7ff825cc6c98: {[conv2.out Value[14 x 14 x 32 x *1]] }
0x7ff825cc6e58: {[pool2.p Value[7 x 7 x 32 x *1]] }
0x7ff825cc7018: {[h1.t Value[128 x *1]] }
0x7ff825cc71d8: {[h1.z Value[128 x 1 x *1]] }
0x7ff825cc7398: {[h1.y Value[128 x 1 x *1]] }
0x7ff825cc7558: {[ol.t Value[10 x 1 x *1]] }
0x7ff825cc7718: {[ol.z Value[10 x 1 x *1]] }
0x7ff832ed6548: {[featScaled Value[28 x 28 x 1 x *1]] }
0x7ff832ed6ce8: {[conv1.b.b Value[1 x 1 x 16]] }
0x7ff832ed8b58: {[conv1.w.W Value[16 x 25]] }
0x7ff832ed8f78: {[conv2.b.b Value[1 x 1 x 32]] }
0x7ff836e9bf08: {[conv2.w.W Value[32 x 400]] }
0x7ff836e9c758: {[featScale Value[1 x 1]] }
0x7ff836e9d3d8: {[features Value[28 x 28 x 1 x *1]] }
0x7ff836e9dae8: {[h1.W Value[128 x 7 x 7 x 32]] }
0x7ff836e9de28: {[h1.b Value[128 x 1]] }
0x7ff836e9fed8: {[labels Value[10 x *1]] }
0x7ff836ea03e8: {[ol.W Value[10 x 128]] }
0x7ff836ea0728: {[ol.b Value[10 x 1]] }
0x7ff836ea5f18: {[ce Value[1]] }
0x7ff836ea6fd8: {[conv1.c.c Value[28 x 28 x 16 x *1]] }
0x7ff836ea8798: {[errs Value[1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
07/14/2016 13:07:04: Minibatch[1-10]: errs = 1.370% * 10000; ce = 0.04494518 * 10000
07/14/2016 13:07:04: Final Results: Minibatch[1-10]: errs = 1.370% * 10000; ce = 0.04494518 * 10000; perplexity = 1.04597052

07/14/2016 13:07:04: Action "test" complete.

07/14/2016 13:07:04: __COMPLETED__