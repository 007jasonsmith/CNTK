CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 268381192 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/debug/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/02_Convolution.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu DeviceId=0 timestamping=true train=[SGD=[maxEpochs=3]] imageLayout="cudnn"
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 05:11:35
		Last modified date: Thu Jul 14 03:20:47 2016
		Build type: Debug
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData
07/14/2016 05:43:36: -------------------------------------------------------------------
07/14/2016 05:43:36: Build info: 

07/14/2016 05:43:36: 		Built time: Jul 14 2016 05:11:35
07/14/2016 05:43:36: 		Last modified date: Thu Jul 14 03:20:47 2016
07/14/2016 05:43:36: 		Build type: Debug
07/14/2016 05:43:36: 		Build target: GPU
07/14/2016 05:43:36: 		With 1bit-SGD: no
07/14/2016 05:43:36: 		Math lib: mkl
07/14/2016 05:43:36: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
07/14/2016 05:43:36: 		CUB_PATH: C:\src\cub-1.4.1
07/14/2016 05:43:36: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
07/14/2016 05:43:36: 		Build Branch: HEAD
07/14/2016 05:43:36: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 05:43:36: 		Built by svcphil on liana-08-w
07/14/2016 05:43:36: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
07/14/2016 05:43:36: -------------------------------------------------------------------
07/14/2016 05:43:39: -------------------------------------------------------------------
07/14/2016 05:43:39: GPU info:

07/14/2016 05:43:39: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
07/14/2016 05:43:39: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
07/14/2016 05:43:39: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
07/14/2016 05:43:39: -------------------------------------------------------------------

07/14/2016 05:43:39: Running on DPHAIM-25 at 2016/07/14 05:43:39
07/14/2016 05:43:39: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/02_Convolution.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu  DeviceId=0  timestamping=true  train=[SGD=[maxEpochs=3]]  imageLayout="cudnn"



07/14/2016 05:43:39: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:43:39: rootDir = ".."
configDir = "$rootDir$/Config"
dataDir   = "$rootDir$/Data"
outputDir = "$rootDir$/Output"
modelDir  = "$outputDir$/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "$modelDir$/02_Convolution"
traceLevel = 1
numMBsToShowResult = 500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly = true
        ndlMacros = "$configDir$/Macros.ndl"
        networkDescription = "$ConfigDir$/02_Convolution.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.1*5:0.3
        momentumPerMB = 0*10:0.7
        maxEpochs = 15
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
test = [
    action = test
    minibatchSize = 1024
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = [
            features = [
            dim = 784
            format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

07/14/2016 05:43:39: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:43:39: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:43:39: rootDir = ".."
configDir = "../Config"
dataDir   = "../Data"
outputDir = "../Output"
modelDir  = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu/Models/02_Convolution"
traceLevel = 1
numMBsToShowResult = 500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly = true
        ndlMacros = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/Macros.ndl"
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/02_Convolution.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.1*5:0.3
        momentumPerMB = 0*10:0.7
        maxEpochs = 15
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
test = [
    action = test
    minibatchSize = 1024
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
            dim = 784
            format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

07/14/2016 05:43:39: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:43:39: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 02_Convolution.cntk:command=train:test
configparameters: 02_Convolution.cntk:configDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config
configparameters: 02_Convolution.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData
configparameters: 02_Convolution.cntk:dataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData
configparameters: 02_Convolution.cntk:deviceId=0
configparameters: 02_Convolution.cntk:imageLayout=cudnn
configparameters: 02_Convolution.cntk:modelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu/Models
configparameters: 02_Convolution.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu/Models/02_Convolution
configparameters: 02_Convolution.cntk:numMBsToShowResult=500
configparameters: 02_Convolution.cntk:outputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu
configparameters: 02_Convolution.cntk:precision=float
configparameters: 02_Convolution.cntk:rootDir=..
configparameters: 02_Convolution.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu
configparameters: 02_Convolution.cntk:test=[
    action = test
    minibatchSize = 1024
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
            dim = 784
            format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 02_Convolution.cntk:timestamping=true
configparameters: 02_Convolution.cntk:traceLevel=1
configparameters: 02_Convolution.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly = true
        ndlMacros = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/Macros.ndl"
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/02_Convolution.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.1*5:0.3
        momentumPerMB = 0*10:0.7
        maxEpochs = 15
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu\TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
] [SGD=[maxEpochs=3]]

07/14/2016 05:43:39: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 05:43:39: Commands: train test
07/14/2016 05:43:39: Precision = "float"
07/14/2016 05:43:39: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu/Models/02_Convolution
07/14/2016 05:43:39: CNTKCommandTrainInfo: train : 3
07/14/2016 05:43:39: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/14/2016 05:43:39: ##############################################################################
07/14/2016 05:43:39: #                                                                            #
07/14/2016 05:43:39: # Action "train"                                                             #
07/14/2016 05:43:39: #                                                                            #
07/14/2016 05:43:39: ##############################################################################

07/14/2016 05:43:39: CNTKCommandTrainBegin: train
NDLBuilder Using GPU 0

07/14/2016 05:43:40: Creating virgin network.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.w.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.w.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1.c.c = Convolution (conv1.w.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.b.b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1.cpb = Plus (conv1.c.c, conv1.b.b) : [28 x 28 x 16 x *], [1 x 1 x 16] -> [28 x 28 x 16 x *]
Validating --> conv1.out = RectifiedLinear (conv1.cpb) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> pool1 = MaxPooling (conv1.out) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Validating --> conv2.c.c = Convolution (conv2.w.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.b.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2.cpb = Plus (conv2.c.c, conv2.b.b) : [14 x 14 x 32 x *], [1 x 1 x 32] -> [14 x 14 x 32 x *]
Validating --> conv2.out = RectifiedLinear (conv2.cpb) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> pool2.p = Pooling (conv2.out) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> h1.t = Times (h1.W, pool2.p) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *], [128 x 1] -> [128 x 1 x *]
Validating --> h1.y = Sigmoid (h1.z) : [128 x 1 x *] -> [128 x 1 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x 1 x *] -> [10 x 1 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x 1 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.

pool2.p: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 05:43:42: Created model with 27 nodes on GPU 0.

07/14/2016 05:43:42: Training criterion node(s):
07/14/2016 05:43:42: 	ce = CrossEntropyWithSoftmax

07/14/2016 05:43:42: Evaluation criterion node(s):

07/14/2016 05:43:42: 	errs = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[errs Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *]] [features Gradient[28 x 28 x 1 x *]] [labels Gradient[10 x *]] }
00000062D5461360: {[conv1.w.W Value[16 x 25]] }
00000062D5461500: {[conv1.b.b Value[1 x 1 x 16]] }
00000062D54616A0: {[conv2.w.W Value[32 x 400]] }
00000062D5461770: {[h1.W Value[128 x 7 x 7 x 32]] }
00000062D5461910: {[ol.W Value[10 x 128]] }
00000062D5461AB0: {[ol.b Value[10 x 1]] }
00000062D54623A0: {[featScale Value[1 x 1]] }
00000062D54626E0: {[conv2.b.b Value[1 x 1 x 32]] }
00000062D54627B0: {[h1.b Value[128 x 1]] }
00000062D5462E30: {[labels Value[10 x *]] }
00000062D909AC80: {[features Value[28 x 28 x 1 x *]] }
00000062E4C92170: {[conv2.c.c Value[14 x 14 x 32 x *]] }
00000062E4C923E0: {[conv1.c.c Value[28 x 28 x 16 x *]] }
00000062E4C92650: {[conv2.c.c Gradient[14 x 14 x 32 x *]] [conv2.out Value[14 x 14 x 32 x *]] }
00000062E4C92990: {[ol.b Gradient[10 x 1]] }
00000062E4C92E70: {[conv1.c.c Gradient[28 x 28 x 16 x *]] [conv1.out Value[28 x 28 x 16 x *]] }
00000062E4C92F40: {[h1.t Gradient[128 x *]] [h1.y Value[128 x 1 x *]] }
00000062E4C931B0: {[errs Value[1]] }
00000062E4C93420: {[h1.W Gradient[128 x 7 x 7 x 32]] [h1.z Value[128 x 1 x *]] }
00000062E4C934F0: {[conv1.b.b Gradient[1 x 1 x 16]] [conv1.out Gradient[28 x 28 x 16 x *]] }
00000062E4C935C0: {[conv2.cpb Value[14 x 14 x 32 x *]] [conv2.w.W Gradient[32 x 400]] }
00000062E4C93690: {[ol.t Gradient[10 x 1 x *]] }
00000062E4C93760: {[h1.b Gradient[128 x 1]] [h1.y Gradient[128 x 1 x *]] }
00000062E4C93AA0: {[ce Value[1]] }
00000062E4C93B70: {[featScaled Value[28 x 28 x 1 x *]] }
00000062E4C941F0: {[ol.z Value[10 x 1 x *]] }
00000062E4C94940: {[conv1.cpb Value[28 x 28 x 16 x *]] [conv1.w.W Gradient[16 x 25]] }
00000062E4C94A10: {[conv2.cpb Gradient[14 x 14 x 32 x *]] [pool1 Gradient[14 x 14 x 16 x *]] [pool2.p Value[7 x 7 x 32 x *]] }
00000062E4C94AE0: {[ce Gradient[1]] }
00000062E4C94BB0: {[ol.W Gradient[10 x 128]] [ol.z Gradient[10 x 1 x *]] }
00000062E4C94EF0: {[conv2.b.b Gradient[1 x 1 x 32]] [conv2.out Gradient[14 x 14 x 32 x *]] [h1.t Value[128 x *]] }
00000062E4C94FC0: {[h1.z Gradient[128 x 1 x *]] [ol.t Value[10 x 1 x *]] [pool2.p Gradient[7 x 7 x 32 x *]] }
00000062E4C95090: {[conv1.cpb Gradient[28 x 28 x 16 x *]] [pool1 Value[14 x 14 x 16 x *]] }

07/14/2016 05:43:42: No PreCompute nodes found, skipping PreCompute step.

07/14/2016 05:43:42: Starting Epoch 1: learning rate per sample = 0.003125  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..60000] (first sequence at sample 0), data subset 0 of 1

07/14/2016 05:43:42: Starting minibatch loop.
07/14/2016 05:44:04:  Epoch[ 1 of 3]-Minibatch[   1- 500, 26.67%]: ce = 1.47777881 * 16000; errs = 51.250% * 16000; time = 21.5678s; samplesPerSecond = 741.8
07/14/2016 05:44:10:  Epoch[ 1 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.20338794 * 16000; errs = 5.769% * 16000; time = 5.7176s; samplesPerSecond = 2798.4
07/14/2016 05:44:15:  Epoch[ 1 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.12023584 * 16000; errs = 3.456% * 16000; time = 5.7864s; samplesPerSecond = 2765.1
07/14/2016 05:44:20: Finished Epoch[ 1 of 3]: [Training] ce = 0.49955332 * 60000; errs = 16.693% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.003125; epochTime=38.7011s
07/14/2016 05:44:20: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu/Models/02_Convolution.1'

07/14/2016 05:44:20: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 1: frames [60000..120000] (first sequence at sample 60000), data subset 0 of 1

07/14/2016 05:44:20: Starting minibatch loop.
07/14/2016 05:44:26:  Epoch[ 2 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.07662521 * 16000; errs = 2.275% * 16000; time = 5.5534s; samplesPerSecond = 2881.1
07/14/2016 05:44:31:  Epoch[ 2 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.06535907 * 16000; errs = 1.906% * 16000; time = 5.5324s; samplesPerSecond = 2892.0
07/14/2016 05:44:37:  Epoch[ 2 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.06633690 * 16000; errs = 2.044% * 16000; time = 5.5024s; samplesPerSecond = 2907.8
07/14/2016 05:44:42: Finished Epoch[ 2 of 3]: [Training] ce = 0.06626525 * 60000; errs = 1.978% * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.003125; epochTime=21.3899s
07/14/2016 05:44:42: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu/Models/02_Convolution.2'

07/14/2016 05:44:42: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 2: frames [120000..180000] (first sequence at sample 120000), data subset 0 of 1

07/14/2016 05:44:42: Starting minibatch loop.
07/14/2016 05:44:47:  Epoch[ 3 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.04957206 * 16000; errs = 1.544% * 16000; time = 5.5456s; samplesPerSecond = 2885.2
07/14/2016 05:44:53:  Epoch[ 3 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.04278843 * 16000; errs = 1.244% * 16000; time = 5.5573s; samplesPerSecond = 2879.1
07/14/2016 05:44:59:  Epoch[ 3 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.04431517 * 16000; errs = 1.287% * 16000; time = 5.5565s; samplesPerSecond = 2879.5
07/14/2016 05:45:03: Finished Epoch[ 3 of 3]: [Training] ce = 0.04455286 * 60000; errs = 1.323% * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.003125; epochTime=21.5013s
07/14/2016 05:45:03: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_02_Convolution@debug_gpu/Models/02_Convolution'
07/14/2016 05:45:04: CNTKCommandTrainEnd: train

07/14/2016 05:45:04: Action "train" complete.


07/14/2016 05:45:04: ##############################################################################
07/14/2016 05:45:04: #                                                                            #
07/14/2016 05:45:04: # Action "test"                                                              #
07/14/2016 05:45:04: #                                                                            #
07/14/2016 05:45:04: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.w.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.w.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1.c.c = Convolution (conv1.w.W, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> conv1.b.b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1.cpb = Plus (conv1.c.c, conv1.b.b) : [28 x 28 x 16 x *1], [1 x 1 x 16] -> [28 x 28 x 16 x *1]
Validating --> conv1.out = RectifiedLinear (conv1.cpb) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1.out) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> conv2.c.c = Convolution (conv2.w.W, pool1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> conv2.b.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2.cpb = Plus (conv2.c.c, conv2.b.b) : [14 x 14 x 32 x *1], [1 x 1 x 32] -> [14 x 14 x 32 x *1]
Validating --> conv2.out = RectifiedLinear (conv2.cpb) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> pool2.p = Pooling (conv2.out) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2.p) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *1], [128 x 1] -> [128 x 1 x *1]
Validating --> h1.y = Sigmoid (h1.z) : [128 x 1 x *1] -> [128 x 1 x *1]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x 1 x *1] -> [10 x 1 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x 1 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.

pool2.p: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[ce Gradient[1]] [conv1.b.b Gradient[1 x 1 x 16]] [conv1.c.c Gradient[28 x 28 x 16 x *1]] [conv1.cpb Gradient[28 x 28 x 16 x *1]] [conv1.out Gradient[28 x 28 x 16 x *1]] [conv1.w.W Gradient[16 x 25]] [conv2.b.b Gradient[1 x 1 x 32]] [conv2.c.c Gradient[14 x 14 x 32 x *1]] [conv2.cpb Gradient[14 x 14 x 32 x *1]] [conv2.out Gradient[14 x 14 x 32 x *1]] [conv2.w.W Gradient[32 x 400]] [errs Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *1]] [features Gradient[28 x 28 x 1 x *1]] [h1.W Gradient[128 x 7 x 7 x 32]] [h1.b Gradient[128 x 1]] [h1.t Gradient[128 x *1]] [h1.y Gradient[128 x 1 x *1]] [h1.z Gradient[128 x 1 x *1]] [labels Gradient[10 x *1]] [ol.W Gradient[10 x 128]] [ol.b Gradient[10 x 1]] [ol.t Gradient[10 x 1 x *1]] [ol.z Gradient[10 x 1 x *1]] [pool1 Gradient[14 x 14 x 16 x *1]] [pool2.p Gradient[7 x 7 x 32 x *1]] }
00000062FC4766F0: {[ol.t Value[10 x 1 x *1]] }
00000062FC476890: {[conv2.cpb Value[14 x 14 x 32 x *1]] }
00000062FC476E40: {[conv1.b.b Value[1 x 1 x 16]] }
00000062FC477180: {[featScale Value[1 x 1]] }
00000062FC477250: {[h1.b Value[128 x 1]] }
00000062FC477320: {[conv1.w.W Value[16 x 25]] }
00000062FC4773F0: {[conv2.b.b Value[1 x 1 x 32]] }
00000062FC4774C0: {[h1.W Value[128 x 7 x 7 x 32]] }
00000062FC477590: {[labels Value[10 x *1]] }
00000062FC477660: {[conv2.w.W Value[32 x 400]] }
00000062FC477730: {[ol.b Value[10 x 1]] }
00000062FC477800: {[errs Value[1]] }
00000062FC4778D0: {[conv1.cpb Value[28 x 28 x 16 x *1]] }
00000062FC4779A0: {[h1.z Value[128 x 1 x *1]] }
00000062FC477A70: {[ol.z Value[10 x 1 x *1]] }
00000062FC477F50: {[pool2.p Value[7 x 7 x 32 x *1]] }
00000062FC478020: {[ce Value[1]] }
00000062FC4780F0: {[featScaled Value[28 x 28 x 1 x *1]] }
00000062FC478290: {[conv2.c.c Value[14 x 14 x 32 x *1]] }
00000062FC4785D0: {[features Value[28 x 28 x 1 x *1]] }
00000062FC478770: {[conv1.out Value[28 x 28 x 16 x *1]] }
00000062FC478910: {[conv1.c.c Value[28 x 28 x 16 x *1]] }
00000062FC4789E0: {[pool1 Value[14 x 14 x 16 x *1]] }
00000062FC478AB0: {[conv2.out Value[14 x 14 x 32 x *1]] }
00000062FC478B80: {[h1.t Value[128 x *1]] }
00000062FC478D20: {[ol.W Value[10 x 128]] }
00000062FC478DF0: {[h1.y Value[128 x 1 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
07/14/2016 05:45:08: Minibatch[1-10]: errs = 1.300% * 10000; ce = 0.04229402 * 10000
07/14/2016 05:45:08: Final Results: Minibatch[1-10]: errs = 1.300% * 10000; ce = 0.04229402 * 10000; perplexity = 1.04320116

07/14/2016 05:45:08: Action "test" complete.

07/14/2016 05:45:08: __COMPLETED__