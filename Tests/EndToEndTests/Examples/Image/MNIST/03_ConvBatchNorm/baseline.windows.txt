CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 268381192 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/debug/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/03_ConvBatchNorm.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu DeviceId=0 timestamping=true train=[SGD=[maxEpochs=3]] imageLayout="cudnn"
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 05:11:35
		Last modified date: Thu Jul 14 03:20:47 2016
		Build type: Debug
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData
07/14/2016 05:45:10: -------------------------------------------------------------------
07/14/2016 05:45:10: Build info: 

07/14/2016 05:45:10: 		Built time: Jul 14 2016 05:11:35
07/14/2016 05:45:10: 		Last modified date: Thu Jul 14 03:20:47 2016
07/14/2016 05:45:10: 		Build type: Debug
07/14/2016 05:45:10: 		Build target: GPU
07/14/2016 05:45:10: 		With 1bit-SGD: no
07/14/2016 05:45:10: 		Math lib: mkl
07/14/2016 05:45:10: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
07/14/2016 05:45:10: 		CUB_PATH: C:\src\cub-1.4.1
07/14/2016 05:45:10: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
07/14/2016 05:45:10: 		Build Branch: HEAD
07/14/2016 05:45:10: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 05:45:10: 		Built by svcphil on liana-08-w
07/14/2016 05:45:10: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
07/14/2016 05:45:10: -------------------------------------------------------------------
07/14/2016 05:45:12: -------------------------------------------------------------------
07/14/2016 05:45:12: GPU info:

07/14/2016 05:45:12: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
07/14/2016 05:45:12: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
07/14/2016 05:45:12: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
07/14/2016 05:45:12: -------------------------------------------------------------------

07/14/2016 05:45:12: Running on DPHAIM-25 at 2016/07/14 05:45:12
07/14/2016 05:45:12: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/03_ConvBatchNorm.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu  DeviceId=0  timestamping=true  train=[SGD=[maxEpochs=3]]  imageLayout="cudnn"



07/14/2016 05:45:12: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:45:12: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "$ModelDir$/03_ConvBatchNorm"
traceLevel=1
numMBsToShowResult=500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "$ConfigDir$/Macros.ndl"
        networkDescription = "$ConfigDir$/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 1024
    modelPath=$ModelDir$/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

07/14/2016 05:45:12: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:45:12: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:45:12: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu/Models/03_ConvBatchNorm"
traceLevel=1
numMBsToShowResult=500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/Macros.ndl"
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 1024
    modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu/Models/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

07/14/2016 05:45:12: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:45:12: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 03_ConvBatchNorm.cntk:command=train:test
configparameters: 03_ConvBatchNorm.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config
configparameters: 03_ConvBatchNorm.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData
configparameters: 03_ConvBatchNorm.cntk:DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData
configparameters: 03_ConvBatchNorm.cntk:deviceId=0
configparameters: 03_ConvBatchNorm.cntk:imageLayout=cudnn
configparameters: 03_ConvBatchNorm.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu/Models
configparameters: 03_ConvBatchNorm.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu/Models/03_ConvBatchNorm
configparameters: 03_ConvBatchNorm.cntk:numMBsToShowResult=500
configparameters: 03_ConvBatchNorm.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu
configparameters: 03_ConvBatchNorm.cntk:precision=float
configparameters: 03_ConvBatchNorm.cntk:RootDir=..
configparameters: 03_ConvBatchNorm.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu
configparameters: 03_ConvBatchNorm.cntk:test=[
    action = "test"
    minibatchSize = 1024
    modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu/Models/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 03_ConvBatchNorm.cntk:timestamping=true
configparameters: 03_ConvBatchNorm.cntk:traceLevel=1
configparameters: 03_ConvBatchNorm.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/Macros.ndl"
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu\TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

07/14/2016 05:45:12: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 05:45:12: Commands: train test
07/14/2016 05:45:12: Precision = "float"
07/14/2016 05:45:12: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu/Models/03_ConvBatchNorm
07/14/2016 05:45:12: CNTKCommandTrainInfo: train : 3
07/14/2016 05:45:12: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/14/2016 05:45:12: ##############################################################################
07/14/2016 05:45:12: #                                                                            #
07/14/2016 05:45:12: # Action "train"                                                             #
07/14/2016 05:45:12: #                                                                            #
07/14/2016 05:45:12: ##############################################################################

07/14/2016 05:45:12: CNTKCommandTrainBegin: train
NDLBuilder Using GPU 0

07/14/2016 05:45:13: Creating virgin network.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 1568]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]

h1.t Times operation: For legacy compatibility, the sample layout of left input (h1.W LearnableParameter operation) was patched to [128 x 7 x 7 x 32] (from [128 x 1568])
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 05:45:14: Created model with 36 nodes on GPU 0.

07/14/2016 05:45:14: Training criterion node(s):
07/14/2016 05:45:14: 	ce = CrossEntropyWithSoftmax

07/14/2016 05:45:14: Evaluation criterion node(s):

07/14/2016 05:45:14: 	errs = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [errs Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *]] [features Gradient[28 x 28 x 1 x *]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [labels Gradient[10 x *]] }
0000005002436270: {[ol.z Value[10 x 1 x *]] }
0000005002436340: {[conv1.c.c.c Value[28 x 28 x 16 x *]] }
00000050024364E0: {[ol.W Gradient[10 x 128]] [ol.z Gradient[10 x 1 x *]] }
00000050024365B0: {[conv1.c.c.y Gradient[28 x 28 x 16 x *]] [pool1 Value[14 x 14 x 16 x *]] }
0000005002436680: {[h1.W Gradient[128 x 7 x 7 x 32]] }
00000050024368F0: {[featScaled Value[28 x 28 x 1 x *]] }
0000005002436A90: {[conv2.c.c.b Gradient[32 x 1]] }
0000005002436D00: {[conv1.c.c.b Gradient[16 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *]] [conv2.y Value[14 x 14 x 32 x *]] }
00000050024371E0: {[conv2.c.c.y Gradient[14 x 14 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
0000005002437380: {[ol.b Gradient[10 x 1]] }
0000005002437450: {[conv1.c.c.sc Gradient[16 x 1]] [conv1.y Gradient[28 x 28 x 16 x *]] }
0000005002437520: {[conv1.c.W Gradient[16 x 25]] [conv2.c.c.c Value[14 x 14 x 32 x *]] }
00000050024375F0: {[conv2.c.c.sc Gradient[32 x 1]] [conv2.y Gradient[14 x 14 x 32 x *]] [h1.t Value[128 x *]] }
0000005002437860: {[conv1.c.c.c Gradient[28 x 28 x 16 x *]] [conv1.y Value[28 x 28 x 16 x *]] }
0000005002437930: {[conv2.c.W Gradient[32 x 400]] [h1.t Gradient[128 x *]] [h1.y Value[128 x *]] }
0000005002437AD0: {[h1.sc Gradient[128 x 1]] [h1.y Gradient[128 x *]] }
0000005002437BA0: {[conv2.c.c.y Value[14 x 14 x 32 x *]] }
0000005002437E10: {[conv1.c.c.y Value[28 x 28 x 16 x *]] }
0000005002437FB0: {[ce Value[1]] }
0000005002438220: {[ol.t Gradient[10 x *]] [pool1 Gradient[14 x 14 x 16 x *]] [pool2 Gradient[7 x 7 x 32 x *]] }
0000005002438630: {[h1.bn Gradient[128 x *]] [ol.t Value[10 x *]] }
0000005002438B10: {[h1.bn Value[128 x *]] }
0000005002438E50: {[h1.b Gradient[128 x 1]] }
0000005002438FF0: {[errs Value[1]] }
0000005002439260: {[ce Gradient[1]] }
0000005070EE5050: {[conv1.c.c.b Value[16 x 1]] }
0000005070EE5120: {[conv1.c.c.sc Value[16 x 1]] }
0000005070EE51F0: {[conv1.c.c.m Value[16 x 1]] }
0000005070EE5390: {[conv1.c.c.isd Value[16 x 1]] }
0000005070EE5530: {[featScale Value[1 x 1]] }
0000005070EE5600: {[conv1.c.W Value[16 x 25]] }
0000005070EE57A0: {[conv2.c.W Value[32 x 400]] }
0000005070EE68B0: {[labels Value[10 x *]] }
0000005071307AA0: {[conv2.c.c.sc Value[32 x 1]] }
0000005071307C40: {[h1.isd Value[128 x 1]] }
0000005071307D10: {[h1.sc Value[128 x 1]] }
0000005071307DE0: {[conv2.c.c.isd Value[32 x 1]] }
0000005071307EB0: {[ol.b Value[10 x 1]] }
0000005071308460: {[ol.W Value[10 x 128]] }
00000050713086D0: {[conv2.c.c.m Value[32 x 1]] }
0000005071308940: {[h1.b Value[128 x 1]] }
0000005071308BB0: {[conv2.c.c.b Value[32 x 1]] }
0000005071308D50: {[h1.m Value[128 x 1]] }
0000005071309160: {[h1.W Value[128 x 7 x 7 x 32]] }
000000507624E510: {[features Value[28 x 28 x 1 x *]] }

07/14/2016 05:45:14: No PreCompute nodes found, skipping PreCompute step.

07/14/2016 05:45:14: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..60000] (first sequence at sample 0), data subset 0 of 1

07/14/2016 05:45:15: Starting minibatch loop.
07/14/2016 05:45:38:  Epoch[ 1 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.17381656 * 16000; errs = 5.287% * 16000; time = 22.6157s; samplesPerSecond = 707.5
07/14/2016 05:45:44:  Epoch[ 1 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.07823898 * 16000; errs = 2.413% * 16000; time = 6.6290s; samplesPerSecond = 2413.6
07/14/2016 05:45:51:  Epoch[ 1 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.06138672 * 16000; errs = 1.938% * 16000; time = 6.6567s; samplesPerSecond = 2403.6
07/14/2016 05:45:57: Finished Epoch[ 1 of 3]: [Training] ce = 0.09559987 * 60000; errs = 2.925% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.015625; epochTime=42.1848s
07/14/2016 05:45:57: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu/Models/03_ConvBatchNorm.1'
Setting batch normalization blend time constant to 1.#INF.

07/14/2016 05:45:57: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 1: frames [60000..120000] (first sequence at sample 60000), data subset 0 of 1

07/14/2016 05:45:57: Starting minibatch loop.
07/14/2016 05:46:03:  Epoch[ 2 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.02306039 * 16000; errs = 0.713% * 16000; time = 6.6682s; samplesPerSecond = 2399.5
07/14/2016 05:46:10:  Epoch[ 2 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.02068081 * 16000; errs = 0.650% * 16000; time = 6.6136s; samplesPerSecond = 2419.2
07/14/2016 05:46:17:  Epoch[ 2 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.01890676 * 16000; errs = 0.531% * 16000; time = 6.5910s; samplesPerSecond = 2427.6
07/14/2016 05:46:22: Finished Epoch[ 2 of 3]: [Training] ce = 0.02001918 * 60000; errs = 0.610% * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.003125; epochTime=25.4619s
07/14/2016 05:46:22: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu/Models/03_ConvBatchNorm.2'

07/14/2016 05:46:22: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 2: frames [120000..180000] (first sequence at sample 120000), data subset 0 of 1

07/14/2016 05:46:22: Starting minibatch loop.
07/14/2016 05:46:29:  Epoch[ 3 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.01535764 * 16000; errs = 0.406% * 16000; time = 6.6825s; samplesPerSecond = 2394.3
07/14/2016 05:46:36:  Epoch[ 3 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01255998 * 16000; errs = 0.344% * 16000; time = 6.6918s; samplesPerSecond = 2391.0
07/14/2016 05:46:42:  Epoch[ 3 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.01354141 * 16000; errs = 0.394% * 16000; time = 6.6919s; samplesPerSecond = 2390.9
07/14/2016 05:46:48: Finished Epoch[ 3 of 3]: [Training] ce = 0.01399758 * 60000; errs = 0.397% * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.003125; epochTime=25.7593s
07/14/2016 05:46:48: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054332.293697\Examples\Image\MNIST_03_ConvBatchNorm@debug_gpu/Models/03_ConvBatchNorm'
07/14/2016 05:46:49: CNTKCommandTrainEnd: train

07/14/2016 05:46:49: Action "train" complete.


07/14/2016 05:46:49: ##############################################################################
07/14/2016 05:46:49: #                                                                            #
07/14/2016 05:46:49: # Action "test"                                                              #
07/14/2016 05:46:49: #                                                                            #
07/14/2016 05:46:49: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *1], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *1] -> [128 x *1]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[ce Gradient[1]] [conv1.c.W Gradient[16 x 25]] [conv1.c.c.b Gradient[16 x 1]] [conv1.c.c.c Gradient[28 x 28 x 16 x *1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv1.c.c.sc Gradient[16 x 1]] [conv1.c.c.y Gradient[28 x 28 x 16 x *1]] [conv1.y Gradient[28 x 28 x 16 x *1]] [conv2.c.W Gradient[32 x 400]] [conv2.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv2.c.c.sc Gradient[32 x 1]] [conv2.c.c.y Gradient[14 x 14 x 32 x *1]] [conv2.y Gradient[14 x 14 x 32 x *1]] [errs Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *1]] [features Gradient[28 x 28 x 1 x *1]] [h1.W Gradient[128 x 7 x 7 x 32]] [h1.b Gradient[128 x 1]] [h1.bn Gradient[128 x *1]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [h1.sc Gradient[128 x 1]] [h1.t Gradient[128 x *1]] [h1.y Gradient[128 x *1]] [labels Gradient[10 x *1]] [ol.W Gradient[10 x 128]] [ol.b Gradient[10 x 1]] [ol.t Gradient[10 x *1]] [ol.z Gradient[10 x 1 x *1]] [pool1 Gradient[14 x 14 x 16 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] }
00000050024361A0: {[conv1.y Value[28 x 28 x 16 x *1]] }
0000005002436270: {[conv2.c.c.y Value[14 x 14 x 32 x *1]] }
0000005002436340: {[errs Value[1]] }
00000050024365B0: {[featScaled Value[28 x 28 x 1 x *1]] }
00000050024368F0: {[ol.W Value[10 x 128]] }
00000050024369C0: {[h1.bn Value[128 x *1]] }
0000005002436A90: {[ol.z Value[10 x 1 x *1]] }
0000005002437110: {[pool2 Value[7 x 7 x 32 x *1]] }
00000050024371E0: {[ol.t Value[10 x *1]] }
00000050024372B0: {[features Value[28 x 28 x 1 x *1]] }
00000050024375F0: {[conv1.c.c.y Value[28 x 28 x 16 x *1]] }
00000050024376C0: {[h1.isd Value[128 x 1]] }
0000005002437860: {[h1.W Value[128 x 7 x 7 x 32]] }
0000005002437930: {[conv2.y Value[14 x 14 x 32 x *1]] }
0000005002437BA0: {[ce Value[1]] }
0000005002437EE0: {[h1.y Value[128 x *1]] }
0000005002437FB0: {[conv2.c.c.c Value[14 x 14 x 32 x *1]] }
0000005002438150: {[conv1.c.c.c Value[28 x 28 x 16 x *1]] }
0000005002438490: {[h1.sc Value[128 x 1]] }
0000005002438560: {[pool1 Value[14 x 14 x 16 x *1]] }
0000005002438700: {[ol.b Value[10 x 1]] }
0000005002438B10: {[h1.b Value[128 x 1]] }
0000005002438D80: {[h1.t Value[128 x *1]] }
0000005002438FF0: {[labels Value[10 x *1]] }
0000005002439260: {[h1.m Value[128 x 1]] }
00000050039D9DB0: {[conv2.c.c.isd Value[32 x 1]] }
00000050039DA430: {[conv1.c.c.isd Value[16 x 1]] }
00000050039DA500: {[conv2.c.c.b Value[32 x 1]] }
00000050039DA6A0: {[conv1.c.c.b Value[16 x 1]] }
00000050039DB060: {[conv2.c.c.sc Value[32 x 1]] }
00000050039DB2D0: {[conv2.c.c.m Value[32 x 1]] }
00000050039DB470: {[conv2.c.W Value[32 x 400]] }
00000050039DB540: {[conv1.c.c.m Value[16 x 1]] }
00000050039DB610: {[conv1.c.c.sc Value[16 x 1]] }
00000050039DB6E0: {[featScale Value[1 x 1]] }
00000050039DB7B0: {[conv1.c.W Value[16 x 25]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
07/14/2016 05:46:52: Minibatch[1-10]: errs = 0.730% * 10000; ce = 0.02156557 * 10000
07/14/2016 05:46:52: Final Results: Minibatch[1-10]: errs = 0.730% * 10000; ce = 0.02156557 * 10000; perplexity = 1.02179978

07/14/2016 05:46:52: Action "test" complete.

07/14/2016 05:46:52: __COMPLETED__