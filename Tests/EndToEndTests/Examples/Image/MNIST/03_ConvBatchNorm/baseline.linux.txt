CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264173120 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.cntk currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu DataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config OutputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu DeviceId=0 timestamping=true train=[SGD=[maxEpochs=3]] imageLayout="cudnn"
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 12:04:41
		Last modified date: Tue Jul 12 04:28:35 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by philly on 34e58dd0283f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
07/14/2016 13:07:06: -------------------------------------------------------------------
07/14/2016 13:07:06: Build info: 

07/14/2016 13:07:06: 		Built time: Jul 14 2016 12:04:41
07/14/2016 13:07:06: 		Last modified date: Tue Jul 12 04:28:35 2016
07/14/2016 13:07:06: 		Build type: release
07/14/2016 13:07:06: 		Build target: GPU
07/14/2016 13:07:06: 		With 1bit-SGD: no
07/14/2016 13:07:06: 		Math lib: mkl
07/14/2016 13:07:06: 		CUDA_PATH: /usr/local/cuda-7.5
07/14/2016 13:07:06: 		CUB_PATH: /usr/local/cub-1.4.1
07/14/2016 13:07:06: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/14/2016 13:07:06: 		Build Branch: HEAD
07/14/2016 13:07:06: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 13:07:06: 		Built by philly on 34e58dd0283f
07/14/2016 13:07:06: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
07/14/2016 13:07:06: -------------------------------------------------------------------
07/14/2016 13:07:06: -------------------------------------------------------------------
07/14/2016 13:07:06: GPU info:

07/14/2016 13:07:06: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 13:07:06: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 13:07:06: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 13:07:06: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 13:07:06: -------------------------------------------------------------------

07/14/2016 13:07:06: Running on localhost at 2016/07/14 13:07:06
07/14/2016 13:07:06: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.cntk  currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData  RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu  DataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config  OutputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu  DeviceId=0  timestamping=true  train=[SGD=[maxEpochs=3]]  imageLayout="cudnn"



07/14/2016 13:07:06: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 13:07:06: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "$ModelDir$/03_ConvBatchNorm"
traceLevel=1
numMBsToShowResult=500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "$ConfigDir$/Macros.ndl"
        networkDescription = "$ConfigDir$/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 1024
    modelPath=$ModelDir$/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config
OutputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

07/14/2016 13:07:06: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 13:07:06: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 13:07:06: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm"
traceLevel=1
numMBsToShowResult=500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/Macros.ndl"
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 1024
    modelPath=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config
OutputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

07/14/2016 13:07:06: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 13:07:06: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 03_ConvBatchNorm.cntk:command=train:test
configparameters: 03_ConvBatchNorm.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config
configparameters: 03_ConvBatchNorm.cntk:currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
configparameters: 03_ConvBatchNorm.cntk:DataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
configparameters: 03_ConvBatchNorm.cntk:deviceId=0
configparameters: 03_ConvBatchNorm.cntk:imageLayout=cudnn
configparameters: 03_ConvBatchNorm.cntk:ModelDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models
configparameters: 03_ConvBatchNorm.cntk:modelPath=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
configparameters: 03_ConvBatchNorm.cntk:numMBsToShowResult=500
configparameters: 03_ConvBatchNorm.cntk:OutputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:precision=float
configparameters: 03_ConvBatchNorm.cntk:RootDir=..
configparameters: 03_ConvBatchNorm.cntk:RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:test=[
    action = "test"
    minibatchSize = 1024
    modelPath=/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 03_ConvBatchNorm.cntk:timestamping=true
configparameters: 03_ConvBatchNorm.cntk:traceLevel=1
configparameters: 03_ConvBatchNorm.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/Macros.ndl"
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

07/14/2016 13:07:06: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 13:07:06: Commands: train test
07/14/2016 13:07:06: Precision = "float"
07/14/2016 13:07:06: CNTKModelPath: /tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
07/14/2016 13:07:06: CNTKCommandTrainInfo: train : 3
07/14/2016 13:07:06: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/14/2016 13:07:06: ##############################################################################
07/14/2016 13:07:06: #                                                                            #
07/14/2016 13:07:06: # Action "train"                                                             #
07/14/2016 13:07:06: #                                                                            #
07/14/2016 13:07:06: ##############################################################################

07/14/2016 13:07:06: CNTKCommandTrainBegin: train
NDLBuilder Using GPU 0

07/14/2016 13:07:07: Creating virgin network.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 1568]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]

h1.t Times operation: For legacy compatibility, the sample layout of left input (h1.W LearnableParameter operation) was patched to [128 x 7 x 7 x 32] (from [128 x 1568])
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 13:07:07: Created model with 36 nodes on GPU 0.

07/14/2016 13:07:07: Training criterion node(s):
07/14/2016 13:07:07: 	ce = CrossEntropyWithSoftmax

07/14/2016 13:07:07: Evaluation criterion node(s):

07/14/2016 13:07:07: 	errs = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [errs Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *]] [features Gradient[28 x 28 x 1 x *]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [labels Gradient[10 x *]] }
0x7fcea4e03498: {[conv1.c.c.c Value[28 x 28 x 16 x *]] }
0x7fcea4e037d8: {[featScaled Value[28 x 28 x 1 x *]] }
0x7fcea4e04888: {[conv1.c.c.c Gradient[28 x 28 x 16 x *]] [conv1.y Value[28 x 28 x 16 x *]] }
0x7fcea4e04a48: {[conv1.c.c.y Gradient[28 x 28 x 16 x *]] [pool1 Value[14 x 14 x 16 x *]] }
0x7fcea4e04c08: {[conv1.c.W Gradient[16 x 25]] [conv2.c.c.c Value[14 x 14 x 32 x *]] }
0x7fcea4e04dc8: {[conv1.c.c.sc Gradient[16 x 1]] [conv1.y Gradient[28 x 28 x 16 x *]] }
0x7fcea4e04f88: {[conv2.c.c.y Value[14 x 14 x 32 x *]] }
0x7fcea4e054c8: {[conv1.c.c.b Gradient[16 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *]] [conv2.y Value[14 x 14 x 32 x *]] }
0x7fcea4e05688: {[conv2.c.c.y Gradient[14 x 14 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
0x7fcea4e05848: {[conv2.c.c.sc Gradient[32 x 1]] [conv2.y Gradient[14 x 14 x 32 x *]] [h1.t Value[128 x *]] }
0x7fcea4e05a08: {[h1.bn Value[128 x *]] }
0x7fcea4e05d88: {[conv2.c.c.b Gradient[32 x 1]] }
0x7fcea4e05f48: {[conv2.c.W Gradient[32 x 400]] [h1.t Gradient[128 x *]] [h1.y Value[128 x *]] }
0x7fcea4e06108: {[h1.bn Gradient[128 x *]] [ol.t Value[10 x *]] }
0x7fcea4e0d048: {[ce Gradient[1]] }
0x7fcea4e0d208: {[ol.W Gradient[10 x 128]] [ol.z Gradient[10 x 1 x *]] }
0x7fcea4e0d3c8: {[ol.t Gradient[10 x *]] [pool1 Gradient[14 x 14 x 16 x *]] [pool2 Gradient[7 x 7 x 32 x *]] }
0x7fcea4e0d588: {[ol.b Gradient[10 x 1]] }
0x7fcea4e0d748: {[h1.sc Gradient[128 x 1]] [h1.y Gradient[128 x *]] }
0x7fcea4e0d938: {[h1.W Gradient[128 x 7 x 7 x 32]] }
0x7fcea4e0daf8: {[h1.b Gradient[128 x 1]] }
0x7fcea50fff68: {[ol.z Value[10 x 1 x *]] }
0x7fcead0be298: {[conv1.c.c.y Value[28 x 28 x 16 x *]] }
0x7fcead0f2dc8: {[errs Value[1]] }
0x7fcead0ff628: {[ce Value[1]] }
0x7fceaf675388: {[labels Value[10 x *]] }
0x7fceaf675ec8: {[conv1.c.W Value[16 x 25]] }
0x7fceaf6765b8: {[conv1.c.c.b Value[16 x 1]] }
0x7fceaf677278: {[conv1.c.c.sc Value[16 x 1]] }
0x7fceaf677e08: {[conv1.c.c.m Value[16 x 1]] }
0x7fceaf678968: {[conv1.c.c.isd Value[16 x 1]] }
0x7fceaf679a88: {[conv2.c.W Value[32 x 400]] }
0x7fceaf67b288: {[conv2.c.c.b Value[32 x 1]] }
0x7fceaf67bce8: {[conv2.c.c.sc Value[32 x 1]] }
0x7fceaf67c648: {[ol.b Value[10 x 1]] }
0x7fceaf67cbf8: {[conv2.c.c.m Value[32 x 1]] }
0x7fceaf67d718: {[conv2.c.c.isd Value[32 x 1]] }
0x7fceaf67dea8: {[h1.W Value[128 x 7 x 7 x 32]] }
0x7fceaf6801b8: {[h1.b Value[128 x 1]] }
0x7fceaf680bf8: {[h1.sc Value[128 x 1]] }
0x7fceaf681508: {[h1.m Value[128 x 1]] }
0x7fceaf681dc8: {[h1.isd Value[128 x 1]] }
0x7fceaf6826e8: {[ol.W Value[10 x 128]] }
0x7fceaf6931d8: {[featScale Value[1 x 1]] }
0x7fceb4469118: {[features Value[28 x 28 x 1 x *]] }

07/14/2016 13:07:07: No PreCompute nodes found, skipping PreCompute step.

07/14/2016 13:07:07: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..60000] (first sequence at sample 0), data subset 0 of 1

07/14/2016 13:07:07: Starting minibatch loop.
07/14/2016 13:07:09:  Epoch[ 1 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.18339107 * 16000; errs = 5.775% * 16000; time = 2.1035s; samplesPerSecond = 7606.2
07/14/2016 13:07:10:  Epoch[ 1 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.08028206 * 16000; errs = 2.513% * 16000; time = 1.0422s; samplesPerSecond = 15352.2
07/14/2016 13:07:11:  Epoch[ 1 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.06888300 * 16000; errs = 2.125% * 16000; time = 1.0407s; samplesPerSecond = 15374.5
07/14/2016 13:07:12: Finished Epoch[ 1 of 3]: [Training] ce = 0.09943753 * 60000; errs = 3.100% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.015625; epochTime=4.98712s
07/14/2016 13:07:12: SGD: Saving checkpoint model '/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.1'
Setting batch normalization blend time constant to inf.

07/14/2016 13:07:12: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 1: frames [60000..120000] (first sequence at sample 60000), data subset 0 of 1

07/14/2016 13:07:12: Starting minibatch loop.
07/14/2016 13:07:13:  Epoch[ 2 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.02287748 * 16000; errs = 0.725% * 16000; time = 1.0421s; samplesPerSecond = 15353.4
07/14/2016 13:07:14:  Epoch[ 2 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01810283 * 16000; errs = 0.569% * 16000; time = 1.0409s; samplesPerSecond = 15370.8
07/14/2016 13:07:15:  Epoch[ 2 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.02055570 * 16000; errs = 0.625% * 16000; time = 1.0389s; samplesPerSecond = 15400.9
07/14/2016 13:07:16: Finished Epoch[ 2 of 3]: [Training] ce = 0.02064246 * 60000; errs = 0.627% * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.003125; epochTime=3.90901s
07/14/2016 13:07:16: SGD: Saving checkpoint model '/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.2'

07/14/2016 13:07:16: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 2: frames [120000..180000] (first sequence at sample 120000), data subset 0 of 1

07/14/2016 13:07:16: Starting minibatch loop.
07/14/2016 13:07:17:  Epoch[ 3 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.01147295 * 16000; errs = 0.287% * 16000; time = 1.0468s; samplesPerSecond = 15285.2
07/14/2016 13:07:18:  Epoch[ 3 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01524000 * 16000; errs = 0.438% * 16000; time = 1.0468s; samplesPerSecond = 15285.2
07/14/2016 13:07:19:  Epoch[ 3 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.01627144 * 16000; errs = 0.487% * 16000; time = 1.0448s; samplesPerSecond = 15313.6
07/14/2016 13:07:20: Finished Epoch[ 3 of 3]: [Training] ce = 0.01406867 * 60000; errs = 0.390% * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.003125; epochTime=3.93094s
07/14/2016 13:07:20: SGD: Saving checkpoint model '/tmp/cntk-test-20160714121541.422646/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm'
07/14/2016 13:07:20: CNTKCommandTrainEnd: train

07/14/2016 13:07:20: Action "train" complete.


07/14/2016 13:07:20: ##############################################################################
07/14/2016 13:07:20: #                                                                            #
07/14/2016 13:07:20: # Action "test"                                                              #
07/14/2016 13:07:20: #                                                                            #
07/14/2016 13:07:20: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *1], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *1] -> [128 x *1]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[ce Gradient[1]] [conv1.c.W Gradient[16 x 25]] [conv1.c.c.b Gradient[16 x 1]] [conv1.c.c.c Gradient[28 x 28 x 16 x *1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv1.c.c.sc Gradient[16 x 1]] [conv1.c.c.y Gradient[28 x 28 x 16 x *1]] [conv1.y Gradient[28 x 28 x 16 x *1]] [conv2.c.W Gradient[32 x 400]] [conv2.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv2.c.c.sc Gradient[32 x 1]] [conv2.c.c.y Gradient[14 x 14 x 32 x *1]] [conv2.y Gradient[14 x 14 x 32 x *1]] [errs Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *1]] [features Gradient[28 x 28 x 1 x *1]] [h1.W Gradient[128 x 7 x 7 x 32]] [h1.b Gradient[128 x 1]] [h1.bn Gradient[128 x *1]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [h1.sc Gradient[128 x 1]] [h1.t Gradient[128 x *1]] [h1.y Gradient[128 x *1]] [labels Gradient[10 x *1]] [ol.W Gradient[10 x 128]] [ol.b Gradient[10 x 1]] [ol.t Gradient[10 x *1]] [ol.z Gradient[10 x 1 x *1]] [pool1 Gradient[14 x 14 x 16 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] }
0x7fce8fcc5038: {[labels Value[10 x *1]] }
0x7fce8fcc55d8: {[ol.W Value[10 x 128]] }
0x7fce8fcc5918: {[ol.b Value[10 x 1]] }
0x7fceb4441858: {[conv1.c.c.b Value[16 x 1]] }
0x7fceb4442fd8: {[conv1.c.c.isd Value[16 x 1]] }
0x7fceb4443a28: {[conv1.c.c.m Value[16 x 1]] }
0x7fceb44443c8: {[conv1.c.c.sc Value[16 x 1]] }
0x7fceb44450e8: {[conv1.c.W Value[16 x 25]] }
0x7fceb4446268: {[conv2.c.c.b Value[32 x 1]] }
0x7fceb44473e8: {[conv2.c.c.isd Value[32 x 1]] }
0x7fceb44475a8: {[conv2.c.c.m Value[32 x 1]] }
0x7fceb4448788: {[conv2.c.c.sc Value[32 x 1]] }
0x7fceb4449508: {[conv2.c.W Value[32 x 400]] }
0x7fceb444a308: {[featScale Value[1 x 1]] }
0x7fceb4700a58: {[features Value[28 x 28 x 1 x *1]] }
0x7fceb47014a8: {[h1.b Value[128 x 1]] }
0x7fceb47016a8: {[h1.sc Value[128 x 1]] }
0x7fceb4701788: {[h1.isd Value[128 x 1]] }
0x7fceb4702808: {[h1.m Value[128 x 1]] }
0x7fceb4703388: {[h1.W Value[128 x 7 x 7 x 32]] }
0x7fceb4705aa8: {[featScaled Value[28 x 28 x 1 x *1]] }
0x7fceb47067d8: {[conv1.c.c.y Value[28 x 28 x 16 x *1]] }
0x7fceb4706f88: {[ce Value[1]] }
0x7fceb474c7c8: {[conv1.c.c.c Value[28 x 28 x 16 x *1]] }
0x7fceb474d588: {[conv1.y Value[28 x 28 x 16 x *1]] }
0x7fceb474d748: {[pool1 Value[14 x 14 x 16 x *1]] }
0x7fceb474d908: {[conv2.c.c.c Value[14 x 14 x 32 x *1]] }
0x7fceb474dc88: {[conv2.c.c.y Value[14 x 14 x 32 x *1]] }
0x7fceb474e1c8: {[conv2.y Value[14 x 14 x 32 x *1]] }
0x7fceb474e388: {[pool2 Value[7 x 7 x 32 x *1]] }
0x7fceb474e548: {[h1.t Value[128 x *1]] }
0x7fceb474e708: {[h1.bn Value[128 x *1]] }
0x7fceb4fc2518: {[errs Value[1]] }
0x7fceb4fee728: {[h1.y Value[128 x *1]] }
0x7fceb4fee8e8: {[ol.t Value[10 x *1]] }
0x7fceb4feeaa8: {[ol.z Value[10 x 1 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
07/14/2016 13:07:20: Minibatch[1-10]: errs = 0.760% * 10000; ce = 0.02058535 * 10000
07/14/2016 13:07:20: Final Results: Minibatch[1-10]: errs = 0.760% * 10000; ce = 0.02058535 * 10000; perplexity = 1.02079869

07/14/2016 13:07:20: Action "test" complete.

07/14/2016 13:07:20: __COMPLETED__