CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264173120 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.cntk currentDirectory=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData RunDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu DataDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config OutputDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu DeviceId=0 timestamping=true train=[SGD=[maxEpochs=3]] imageLayout="cudnn"
-------------------------------------------------------------------
Build info: 

		Built time: Jul 13 2016 12:01:30
		Last modified date: Tue Jul 12 04:28:35 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 50bb4c8afbc87c14548a5b5f315a064186a5cb5f
		Built by philly on 2bc22072e267
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
07/13/2016 13:11:20: -------------------------------------------------------------------
07/13/2016 13:11:20: Build info: 

07/13/2016 13:11:20: 		Built time: Jul 13 2016 12:01:30
07/13/2016 13:11:20: 		Last modified date: Tue Jul 12 04:28:35 2016
07/13/2016 13:11:20: 		Build type: release
07/13/2016 13:11:20: 		Build target: GPU
07/13/2016 13:11:20: 		With 1bit-SGD: no
07/13/2016 13:11:20: 		Math lib: mkl
07/13/2016 13:11:20: 		CUDA_PATH: /usr/local/cuda-7.5
07/13/2016 13:11:20: 		CUB_PATH: /usr/local/cub-1.4.1
07/13/2016 13:11:20: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/13/2016 13:11:20: 		Build Branch: HEAD
07/13/2016 13:11:20: 		Build SHA1: 50bb4c8afbc87c14548a5b5f315a064186a5cb5f
07/13/2016 13:11:20: 		Built by philly on 2bc22072e267
07/13/2016 13:11:20: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
07/13/2016 13:11:20: -------------------------------------------------------------------
07/13/2016 13:11:21: -------------------------------------------------------------------
07/13/2016 13:11:21: GPU info:

07/13/2016 13:11:21: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 13:11:21: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 13:11:21: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 13:11:21: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 13:11:21: -------------------------------------------------------------------

07/13/2016 13:11:21: Running on localhost at 2016/07/13 13:11:21
07/13/2016 13:11:21: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.cntk  currentDirectory=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData  RunDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu  DataDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config  OutputDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu  DeviceId=0  timestamping=true  train=[SGD=[maxEpochs=3]]  imageLayout="cudnn"



07/13/2016 13:11:21: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/13/2016 13:11:21: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "$ModelDir$/03_ConvBatchNorm"
traceLevel=1
numMBsToShowResult=500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "$ConfigDir$/Macros.ndl"
        networkDescription = "$ConfigDir$/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 1024
    modelPath=$ModelDir$/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
RunDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DataDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config
OutputDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

07/13/2016 13:11:21: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/13/2016 13:11:21: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/13/2016 13:11:21: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm"
traceLevel=1
numMBsToShowResult=500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/Macros.ndl"
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 1024
    modelPath=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
RunDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DataDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config
OutputDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

07/13/2016 13:11:21: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/13/2016 13:11:21: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 03_ConvBatchNorm.cntk:command=train:test
configparameters: 03_ConvBatchNorm.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config
configparameters: 03_ConvBatchNorm.cntk:currentDirectory=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
configparameters: 03_ConvBatchNorm.cntk:DataDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
configparameters: 03_ConvBatchNorm.cntk:deviceId=0
configparameters: 03_ConvBatchNorm.cntk:imageLayout=cudnn
configparameters: 03_ConvBatchNorm.cntk:ModelDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models
configparameters: 03_ConvBatchNorm.cntk:modelPath=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
configparameters: 03_ConvBatchNorm.cntk:numMBsToShowResult=500
configparameters: 03_ConvBatchNorm.cntk:OutputDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:precision=float
configparameters: 03_ConvBatchNorm.cntk:RootDir=..
configparameters: 03_ConvBatchNorm.cntk:RunDir=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:test=[
    action = "test"
    minibatchSize = 1024
    modelPath=/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 03_ConvBatchNorm.cntk:timestamping=true
configparameters: 03_ConvBatchNorm.cntk:traceLevel=1
configparameters: 03_ConvBatchNorm.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/Macros.ndl"
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

07/13/2016 13:11:21: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/13/2016 13:11:21: Commands: train test
07/13/2016 13:11:21: Precision = "float"
07/13/2016 13:11:21: CNTKModelPath: /tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
07/13/2016 13:11:21: CNTKCommandTrainInfo: train : 3
07/13/2016 13:11:21: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/13/2016 13:11:21: ##############################################################################
07/13/2016 13:11:21: #                                                                            #
07/13/2016 13:11:21: # Action "train"                                                             #
07/13/2016 13:11:21: #                                                                            #
07/13/2016 13:11:21: ##############################################################################

07/13/2016 13:11:21: CNTKCommandTrainBegin: train
NDLBuilder Using GPU 0

07/13/2016 13:11:21: Creating virgin network.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 1568]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]

h1.t Times operation: For legacy compatibility, the sample layout of left input (h1.W LearnableParameter operation) was patched to [128 x 7 x 7 x 32] (from [128 x 1568])
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/13/2016 13:11:22: Created model with 36 nodes on GPU 0.

07/13/2016 13:11:22: Training criterion node(s):
07/13/2016 13:11:22: 	ce = CrossEntropyWithSoftmax

07/13/2016 13:11:22: Evaluation criterion node(s):

07/13/2016 13:11:22: 	errs = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [errs Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *]] [features Gradient[28 x 28 x 1 x *]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [labels Gradient[10 x *]] }
0x1db2358: {[features Value[28 x 28 x 1 x *]] }
0x26cccf8: {[conv1.c.W Value[16 x 25]] }
0x26cd3e8: {[conv1.c.c.b Value[16 x 1]] }
0x26ce0a8: {[conv1.c.c.sc Value[16 x 1]] }
0x26ce838: {[conv1.c.c.m Value[16 x 1]] }
0x26cf738: {[conv1.c.c.isd Value[16 x 1]] }
0x26d07f8: {[conv2.c.W Value[32 x 400]] }
0x26d1fc8: {[conv2.c.c.b Value[32 x 1]] }
0x26d2cb8: {[conv2.c.c.sc Value[32 x 1]] }
0x26d3388: {[ol.b Value[10 x 1]] }
0x26d39c8: {[conv2.c.c.m Value[32 x 1]] }
0x26d4538: {[conv2.c.c.isd Value[32 x 1]] }
0x26d5518: {[h1.W Value[128 x 7 x 7 x 32]] }
0x26d6fa8: {[h1.b Value[128 x 1]] }
0x26d7988: {[h1.sc Value[128 x 1]] }
0x26d82b8: {[h1.m Value[128 x 1]] }
0x26d8c08: {[h1.isd Value[128 x 1]] }
0x26d9de8: {[ol.W Value[10 x 128]] }
0x26dd668: {[ce Value[1]] }
0x26ed728: {[featScale Value[1 x 1]] }
0x26eefc8: {[labels Value[10 x *]] }
0x2b15498: {[ol.z Value[10 x 1 x *]] }
0x6fddf58: {[errs Value[1]] }
0x6fe1338: {[featScaled Value[28 x 28 x 1 x *]] }
0x6fe1678: {[conv1.c.c.c Value[28 x 28 x 16 x *]] }
0x6fe1928: {[conv1.c.c.y Value[28 x 28 x 16 x *]] }
0x6fe2278: {[conv1.c.c.c Gradient[28 x 28 x 16 x *]] [conv1.y Value[28 x 28 x 16 x *]] }
0x6fe2848: {[conv1.c.c.y Gradient[28 x 28 x 16 x *]] [pool1 Value[14 x 14 x 16 x *]] }
0x6fe2a08: {[conv1.c.W Gradient[16 x 25]] [conv2.c.c.c Value[14 x 14 x 32 x *]] }
0x6fe2bc8: {[conv1.c.c.sc Gradient[16 x 1]] [conv1.y Gradient[28 x 28 x 16 x *]] }
0x6fe2d88: {[conv2.c.c.y Value[14 x 14 x 32 x *]] }
0x6fe32c8: {[conv1.c.c.b Gradient[16 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *]] [conv2.y Value[14 x 14 x 32 x *]] }
0x6fe3488: {[conv2.c.c.y Gradient[14 x 14 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
0x6fe3648: {[conv2.c.c.sc Gradient[32 x 1]] [conv2.y Gradient[14 x 14 x 32 x *]] [h1.t Value[128 x *]] }
0x6fe3808: {[h1.bn Value[128 x *]] }
0x6fe3b88: {[conv2.c.c.b Gradient[32 x 1]] }
0x6fe3d48: {[conv2.c.W Gradient[32 x 400]] [h1.t Gradient[128 x *]] [h1.y Value[128 x *]] }
0x6fe3f08: {[h1.bn Gradient[128 x *]] [ol.t Value[10 x *]] }
0x7009b88: {[ce Gradient[1]] }
0x7009d48: {[ol.W Gradient[10 x 128]] [ol.z Gradient[10 x 1 x *]] }
0x7009f08: {[ol.t Gradient[10 x *]] [pool1 Gradient[14 x 14 x 16 x *]] [pool2 Gradient[7 x 7 x 32 x *]] }
0x700a0c8: {[ol.b Gradient[10 x 1]] }
0x700a288: {[h1.sc Gradient[128 x 1]] [h1.y Gradient[128 x *]] }
0x700a478: {[h1.W Gradient[128 x 7 x 7 x 32]] }
0x700a638: {[h1.b Gradient[128 x 1]] }

07/13/2016 13:11:22: No PreCompute nodes found, skipping PreCompute step.

07/13/2016 13:11:22: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..60000] (first sequence at sample 0), data subset 0 of 1

07/13/2016 13:11:22: Starting minibatch loop.
07/13/2016 13:11:24:  Epoch[ 1 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.18344121 * 16000; errs = 5.675% * 16000; time = 2.0866s; samplesPerSecond = 7668.1
07/13/2016 13:11:25:  Epoch[ 1 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.08097731 * 16000; errs = 2.538% * 16000; time = 1.0422s; samplesPerSecond = 15352.8
07/13/2016 13:11:26:  Epoch[ 1 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.06772836 * 16000; errs = 2.188% * 16000; time = 1.0343s; samplesPerSecond = 15468.9
07/13/2016 13:11:27: Finished Epoch[ 1 of 3]: [Training] ce = 0.09938351 * 60000; errs = 3.130% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.015625; epochTime=4.95468s
07/13/2016 13:11:27: SGD: Saving checkpoint model '/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.1'
Setting batch normalization blend time constant to inf.

07/13/2016 13:11:27: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 1: frames [60000..120000] (first sequence at sample 60000), data subset 0 of 1

07/13/2016 13:11:27: Starting minibatch loop.
07/13/2016 13:11:28:  Epoch[ 2 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.02199582 * 16000; errs = 0.731% * 16000; time = 1.0369s; samplesPerSecond = 15430.1
07/13/2016 13:11:29:  Epoch[ 2 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01757875 * 16000; errs = 0.594% * 16000; time = 1.0455s; samplesPerSecond = 15303.1
07/13/2016 13:11:30:  Epoch[ 2 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.01977809 * 16000; errs = 0.613% * 16000; time = 1.0442s; samplesPerSecond = 15323.4
07/13/2016 13:11:31: Finished Epoch[ 2 of 3]: [Training] ce = 0.02000322 * 60000; errs = 0.637% * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.003125; epochTime=3.9191s
07/13/2016 13:11:31: SGD: Saving checkpoint model '/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.2'

07/13/2016 13:11:31: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 2: frames [120000..180000] (first sequence at sample 120000), data subset 0 of 1

07/13/2016 13:11:31: Starting minibatch loop.
07/13/2016 13:11:32:  Epoch[ 3 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.01116578 * 16000; errs = 0.300% * 16000; time = 1.0416s; samplesPerSecond = 15360.9
07/13/2016 13:11:33:  Epoch[ 3 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01456736 * 16000; errs = 0.438% * 16000; time = 1.0424s; samplesPerSecond = 15349.8
07/13/2016 13:11:34:  Epoch[ 3 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.01608349 * 16000; errs = 0.456% * 16000; time = 1.0394s; samplesPerSecond = 15392.9
07/13/2016 13:11:35: Finished Epoch[ 3 of 3]: [Training] ce = 0.01370172 * 60000; errs = 0.387% * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.003125; epochTime=3.91462s
07/13/2016 13:11:35: SGD: Saving checkpoint model '/tmp/cntk-test-20160713122019.252341/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm'
07/13/2016 13:11:35: CNTKCommandTrainEnd: train

07/13/2016 13:11:35: Action "train" complete.


07/13/2016 13:11:35: ##############################################################################
07/13/2016 13:11:35: #                                                                            #
07/13/2016 13:11:35: # Action "test"                                                              #
07/13/2016 13:11:35: #                                                                            #
07/13/2016 13:11:35: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *1], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *1] -> [128 x *1]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[ce Gradient[1]] [conv1.c.W Gradient[16 x 25]] [conv1.c.c.b Gradient[16 x 1]] [conv1.c.c.c Gradient[28 x 28 x 16 x *1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv1.c.c.sc Gradient[16 x 1]] [conv1.c.c.y Gradient[28 x 28 x 16 x *1]] [conv1.y Gradient[28 x 28 x 16 x *1]] [conv2.c.W Gradient[32 x 400]] [conv2.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv2.c.c.sc Gradient[32 x 1]] [conv2.c.c.y Gradient[14 x 14 x 32 x *1]] [conv2.y Gradient[14 x 14 x 32 x *1]] [errs Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *1]] [features Gradient[28 x 28 x 1 x *1]] [h1.W Gradient[128 x 7 x 7 x 32]] [h1.b Gradient[128 x 1]] [h1.bn Gradient[128 x *1]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [h1.sc Gradient[128 x 1]] [h1.t Gradient[128 x *1]] [h1.y Gradient[128 x *1]] [labels Gradient[10 x *1]] [ol.W Gradient[10 x 128]] [ol.b Gradient[10 x 1]] [ol.t Gradient[10 x *1]] [ol.z Gradient[10 x 1 x *1]] [pool1 Gradient[14 x 14 x 16 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] }
0x7f3e1b109ab8: {[conv1.c.c.b Value[16 x 1]] }
0x7f3e1b10b238: {[conv1.c.c.isd Value[16 x 1]] }
0x7f3e1b10b398: {[conv1.c.c.m Value[16 x 1]] }
0x7f3e1b10bdb8: {[conv1.c.c.sc Value[16 x 1]] }
0x7f3e1b10c798: {[conv1.c.W Value[16 x 25]] }
0x7f3e1b10e508: {[conv2.c.c.b Value[32 x 1]] }
0x7f3e1b10f398: {[conv2.c.W Value[32 x 400]] }
0x7f3e1b10f6a8: {[conv2.c.c.isd Value[32 x 1]] }
0x7f3e1b110088: {[conv2.c.c.m Value[32 x 1]] }
0x7f3e1b110a68: {[conv2.c.c.sc Value[32 x 1]] }
0x7f3e1b111b58: {[featScale Value[1 x 1]] }
0x7f3e1b112e18: {[features Value[28 x 28 x 1 x *1]] }
0x7f3e1b1138a8: {[h1.b Value[128 x 1]] }
0x7f3e1b113be8: {[h1.isd Value[128 x 1]] }
0x7f3e1b114c48: {[h1.m Value[128 x 1]] }
0x7f3e1b114e98: {[h1.sc Value[128 x 1]] }
0x7f3e1b115718: {[h1.W Value[128 x 7 x 7 x 32]] }
0x7f3e1b1170a8: {[labels Value[10 x *1]] }
0x7f3e1b117648: {[ol.W Value[10 x 128]] }
0x7f3e1b117988: {[ol.b Value[10 x 1]] }
0x7f3e1b11f368: {[errs Value[1]] }
0x7f3e1b151b38: {[ce Value[1]] }
0x7f3e1b181998: {[conv1.c.c.c Value[28 x 28 x 16 x *1]] }
0x7f3e1b181cd8: {[featScaled Value[28 x 28 x 1 x *1]] }
0x7f3e1b181ec8: {[conv1.c.c.y Value[28 x 28 x 16 x *1]] }
0x7f3e1b182e48: {[conv1.y Value[28 x 28 x 16 x *1]] }
0x7f3e1b183008: {[pool1 Value[14 x 14 x 16 x *1]] }
0x7f3e1b1831c8: {[conv2.c.c.c Value[14 x 14 x 32 x *1]] }
0x7f3e1b183548: {[conv2.c.c.y Value[14 x 14 x 32 x *1]] }
0x7f3e1b183a88: {[conv2.y Value[14 x 14 x 32 x *1]] }
0x7f3e1b183c48: {[pool2 Value[7 x 7 x 32 x *1]] }
0x7f3e1b183e08: {[h1.t Value[128 x *1]] }
0x7f3e1b183fc8: {[h1.bn Value[128 x *1]] }
0x7f3e1b18a908: {[h1.y Value[128 x *1]] }
0x7f3e1b18aac8: {[ol.t Value[10 x *1]] }
0x7f3e1b18ac88: {[ol.z Value[10 x 1 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
07/13/2016 13:11:35: Minibatch[1-10]: errs = 0.780% * 10000; ce = 0.02127647 * 10000
07/13/2016 13:11:35: Final Results: Minibatch[1-10]: errs = 0.780% * 10000; ce = 0.02127647 * 10000; perplexity = 1.02150442

07/13/2016 13:11:35: Action "test" complete.

07/13/2016 13:11:35: __COMPLETED__