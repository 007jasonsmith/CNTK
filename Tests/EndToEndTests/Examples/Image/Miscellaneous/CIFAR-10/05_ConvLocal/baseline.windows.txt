CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3530 @ 2.80GHz
    Hardware threads: 4
    Total Memory: 12580404 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/05_ConvLocal.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10 OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=5]] Train=[SGD=[epochSize=100]] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Jul 13 2016 03:55:32
		Last modified date: Fri Jul  8 10:29:45 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 50bb4c8afbc87c14548a5b5f315a064186a5cb5f
		Built by svcphil on LIANA-09-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData
07/13/2016 04:43:09: Redirecting stderr to file -_Train_Test.log
07/13/2016 04:43:09: -------------------------------------------------------------------
07/13/2016 04:43:09: Build info: 

07/13/2016 04:43:09: 		Built time: Jul 13 2016 03:55:32
07/13/2016 04:43:09: 		Last modified date: Fri Jul  8 10:29:45 2016
07/13/2016 04:43:09: 		Build type: Release
07/13/2016 04:43:09: 		Build target: GPU
07/13/2016 04:43:09: 		With 1bit-SGD: no
07/13/2016 04:43:09: 		Math lib: mkl
07/13/2016 04:43:09: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
07/13/2016 04:43:09: 		CUB_PATH: C:\src\cub-1.4.1
07/13/2016 04:43:09: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
07/13/2016 04:43:09: 		Build Branch: HEAD
07/13/2016 04:43:09: 		Build SHA1: 50bb4c8afbc87c14548a5b5f315a064186a5cb5f
07/13/2016 04:43:09: 		Built by svcphil on LIANA-09-w
07/13/2016 04:43:09: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
07/13/2016 04:43:09: -------------------------------------------------------------------
07/13/2016 04:43:09: -------------------------------------------------------------------
07/13/2016 04:43:09: GPU info:

07/13/2016 04:43:09: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8090 MB
07/13/2016 04:43:09: -------------------------------------------------------------------

07/13/2016 04:43:09: Running on cntk-muc00 at 2016/07/13 04:43:09
07/13/2016 04:43:09: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/05_ConvLocal.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=5]]  Train=[SGD=[epochSize=100]]  stderr=-



07/13/2016 04:43:09: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/13/2016 04:43:09: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
command = Train:Test
modelPath = "$ModelDir$/05_ConvLocal"
stderr = "$OutputDir$/05_ConvLocal"
traceLevel = 1
numMBsToShowResult = 50
Train = [
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/05_ConvLocal.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

07/13/2016 04:43:09: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/13/2016 04:43:09: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/13/2016 04:43:09: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models"
ndlMacros = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
command = Train:Test
modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal"
stderr = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/05_ConvLocal"
traceLevel = 1
numMBsToShowResult = 50
Train = [
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/05_ConvLocal.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

07/13/2016 04:43:09: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/13/2016 04:43:09: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 05_ConvLocal.cntk:command=Train:Test
configparameters: 05_ConvLocal.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 05_ConvLocal.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData
configparameters: 05_ConvLocal.cntk:DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData
configparameters: 05_ConvLocal.cntk:deviceId=0
configparameters: 05_ConvLocal.cntk:imageLayout=cudnn
configparameters: 05_ConvLocal.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models
configparameters: 05_ConvLocal.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal
configparameters: 05_ConvLocal.cntk:ndlMacros=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl
configparameters: 05_ConvLocal.cntk:numMBsToShowResult=50
configparameters: 05_ConvLocal.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu
configparameters: 05_ConvLocal.cntk:precision=float
configparameters: 05_ConvLocal.cntk:RootDir=.
configparameters: 05_ConvLocal.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu
configparameters: 05_ConvLocal.cntk:stderr=-
configparameters: 05_ConvLocal.cntk:Test=[
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]

configparameters: 05_ConvLocal.cntk:timestamping=true
configparameters: 05_ConvLocal.cntk:traceLevel=1
configparameters: 05_ConvLocal.cntk:Train=[
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/05_ConvLocal.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
] [SGD=[maxEpochs=5]] [SGD=[epochSize=100]]

07/13/2016 04:43:09: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/13/2016 04:43:09: Commands: Train Test
07/13/2016 04:43:09: Precision = "float"
07/13/2016 04:43:09: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal
07/13/2016 04:43:09: CNTKCommandTrainInfo: Train : 5
07/13/2016 04:43:09: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5

07/13/2016 04:43:09: ##############################################################################
07/13/2016 04:43:09: #                                                                            #
07/13/2016 04:43:09: # Action "train"                                                             #
07/13/2016 04:43:09: #                                                                            #
07/13/2016 04:43:09: ##############################################################################

07/13/2016 04:43:09: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0

07/13/2016 04:43:10: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 32 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 7 x 7 x 32]
Validating --> conv4.W = LearnableParameter() :  -> [1568 x 576]
Validating --> conv3.W = LearnableParameter() :  -> [3136 x 576]
Validating --> conv2.W = LearnableParameter() :  -> [64 x 1600]
Validating --> conv1.W = LearnableParameter() :  -> [64 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Validating --> conv1.c = Convolution (conv1.W, featScaled) : [64 x 75], [32 x 32 x 3 x *] -> [32 x 32 x 64 x *]
Validating --> conv1.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv1.p = Plus (conv1.c, conv1.b) : [32 x 32 x 64 x *], [1 x 1 x 64] -> [32 x 32 x 64 x *]
Validating --> conv1.y = RectifiedLinear (conv1.p) : [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> conv2.c = Convolution (conv2.W, pool1) : [64 x 1600], [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> conv2.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv2.p = Plus (conv2.c, conv2.b) : [15 x 15 x 64 x *], [1 x 1 x 64] -> [15 x 15 x 64 x *]
Validating --> conv2.y = RectifiedLinear (conv2.p) : [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> conv3.c = Convolution (conv3.W, pool2) : [3136 x 576], [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> conv3.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv3.p = Plus (conv3.c, conv3.b) : [7 x 7 x 64 x *], [1 x 1 x 64] -> [7 x 7 x 64 x *]
Validating --> conv3.y = RectifiedLinear (conv3.p) : [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> conv4.c = Convolution (conv4.W, conv3.y) : [1568 x 576], [7 x 7 x 64 x *] -> [7 x 7 x 32 x *]
Validating --> conv4.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv4.p = Plus (conv4.c, conv4.b) : [7 x 7 x 32 x *], [1 x 1 x 32] -> [7 x 7 x 32 x *]
Validating --> conv4.y = RectifiedLinear (conv4.p) : [7 x 7 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, conv4.y) : [10 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 19 nodes to process in pass 2.


Validating network, final pass.


conv1.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 64, Kernel: 5 x 5 x 3, Map: 1 x 1 x 64, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 5 x 5 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool2: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv3.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1), LowerPad: 0, UpperPad: 0.

conv4.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 32, Kernel: 3 x 3 x 64, Map: 32, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1), LowerPad: 0, UpperPad: 0.


13 out of 32 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/13/2016 04:43:11: Created model with 32 nodes on GPU 0.

07/13/2016 04:43:11: Training criterion node(s):
07/13/2016 04:43:11: 	CE = CrossEntropyWithSoftmax

07/13/2016 04:43:11: Evaluation criterion node(s):

07/13/2016 04:43:11: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[Err Gradient[1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *]] [features Gradient[32 x 32 x 3 x *]] [labels Gradient[10 x *]] }
000000115001F280: {[features Value[32 x 32 x 3 x *]] }
000000115349E0D0: {[conv1.b Value[1 x 1 x 64]] }
000000115349E490: {[conv2.b Value[1 x 1 x 64]] }
000000115349E5D0: {[conv4.W Value[1568 x 576]] }
000000115349E670: {[conv4.b Value[1 x 1 x 32]] }
000000115349E7B0: {[conv3.b Value[1 x 1 x 64]] }
000000115349EDF0: {[OutputNodes.W Value[10 x 7 x 7 x 32]] }
000000115349EF30: {[OutputNodes.b Value[10]] }
000000115349F110: {[conv3.W Value[3136 x 576]] }
000000115349F250: {[featOffs Value[1 x 1]] }
000000115349F430: {[conv1.W Value[64 x 75]] }
000000115349F890: {[conv2.W Value[64 x 1600]] }
000000115349FA70: {[labels Value[10 x *]] }
000000116A59B720: {[featScaled Value[32 x 32 x 3 x *]] }
000000116A59BB80: {[conv1.p Gradient[32 x 32 x 64 x *]] [pool1 Value[15 x 15 x 64 x *]] }
000000116A59BEA0: {[conv2.c Value[15 x 15 x 64 x *]] }
000000116A59BF40: {[conv1.b Gradient[1 x 1 x 64]] [conv1.y Gradient[32 x 32 x 64 x *]] }
000000116A59C1C0: {[Err Value[1]] }
000000116A59C260: {[conv3.c Value[7 x 7 x 64 x *]] }
000000116A59C300: {[conv4.c Value[7 x 7 x 32 x *]] }
000000116A59C6C0: {[conv1.W Gradient[64 x 75]] [conv1.p Value[32 x 32 x 64 x *]] }
000000116A59C760: {[conv1.c Value[32 x 32 x 64 x *]] }
000000116A59C9E0: {[conv2.W Gradient[64 x 1600]] [conv2.p Value[15 x 15 x 64 x *]] }
000000116A59CA80: {[conv3.W Gradient[3136 x 576]] [conv3.p Value[7 x 7 x 64 x *]] }
000000116A59CB20: {[conv2.c Gradient[15 x 15 x 64 x *]] [conv2.y Value[15 x 15 x 64 x *]] }
000000116A59CDA0: {[CE Value[1]] }
000000116A59CE40: {[conv1.c Gradient[32 x 32 x 64 x *]] [conv1.y Value[32 x 32 x 64 x *]] }
000000116A59CF80: {[conv2.p Gradient[15 x 15 x 64 x *]] [pool1 Gradient[15 x 15 x 64 x *]] [pool2 Value[7 x 7 x 64 x *]] }
000000116A59D0C0: {[conv3.c Gradient[7 x 7 x 64 x *]] [conv3.y Value[7 x 7 x 64 x *]] }
000000116A59D200: {[conv2.b Gradient[1 x 1 x 64]] [conv2.y Gradient[15 x 15 x 64 x *]] }
000000116A59D2A0: {[conv3.p Gradient[7 x 7 x 64 x *]] [pool2 Gradient[7 x 7 x 64 x *]] }
000000116A59D340: {[OutputNodes.z Value[10 x *]] }
000000116A59E380: {[OutputNodes.t Value[10 x *]] [conv3.b Gradient[1 x 1 x 64]] [conv3.y Gradient[7 x 7 x 64 x *]] [conv4.p Gradient[7 x 7 x 32 x *]] }
000000116A59E740: {[conv4.W Gradient[1568 x 576]] [conv4.p Value[7 x 7 x 32 x *]] }
000000116A59E880: {[conv4.b Gradient[1 x 1 x 32]] [conv4.y Gradient[7 x 7 x 32 x *]] }
000000116A59EC40: {[OutputNodes.t Gradient[10 x *]] }
000000116A59EE20: {[conv4.c Gradient[7 x 7 x 32 x *]] [conv4.y Value[7 x 7 x 32 x *]] }
000000116A59EEC0: {[OutputNodes.W Gradient[10 x 7 x 7 x 32]] [OutputNodes.z Gradient[10 x *]] }
000000116A59F0A0: {[CE Gradient[1]] }
000000116A59F1E0: {[OutputNodes.b Gradient[10]] }

07/13/2016 04:43:11: No PreCompute nodes found, skipping PreCompute step.

07/13/2016 04:43:11: Starting Epoch 1: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..100] (first sequence at sample 0), data subset 0 of 1

07/13/2016 04:43:11: Starting minibatch loop.
07/13/2016 04:43:17: Finished Epoch[ 1 of 5]: [Training] CE = 2.30259964 * 100; Err = 0.92000000 * 100; totalSamplesSeen = 100; learningRatePerSample = 0.00015625; epochTime=5.5368s
07/13/2016 04:43:17: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.1'

07/13/2016 04:43:17: Starting Epoch 2: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 1: frames [100..200] (first sequence at sample 100), data subset 0 of 1

07/13/2016 04:43:17: Starting minibatch loop.
07/13/2016 04:43:17: Finished Epoch[ 2 of 5]: [Training] CE = 2.30259521 * 100; Err = 0.88000000 * 100; totalSamplesSeen = 200; learningRatePerSample = 0.00015625; epochTime=0.237389s
07/13/2016 04:43:20: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.2'

07/13/2016 04:43:20: Starting Epoch 3: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 2: frames [200..300] (first sequence at sample 200), data subset 0 of 1

07/13/2016 04:43:20: Starting minibatch loop.
07/13/2016 04:43:21: Finished Epoch[ 3 of 5]: [Training] CE = 2.30259430 * 100; Err = 0.89000000 * 100; totalSamplesSeen = 300; learningRatePerSample = 0.00015625; epochTime=0.247237s
07/13/2016 04:43:21: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.3'

07/13/2016 04:43:21: Starting Epoch 4: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 3: frames [300..400] (first sequence at sample 300), data subset 0 of 1

07/13/2016 04:43:21: Starting minibatch loop.
07/13/2016 04:43:21: Finished Epoch[ 4 of 5]: [Training] CE = 2.30256668 * 100; Err = 0.92000000 * 100; totalSamplesSeen = 400; learningRatePerSample = 0.00015625; epochTime=0.23853s
07/13/2016 04:43:21: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.4'

07/13/2016 04:43:22: Starting Epoch 5: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 4: frames [400..500] (first sequence at sample 400), data subset 0 of 1

07/13/2016 04:43:22: Starting minibatch loop.
07/13/2016 04:43:22: Finished Epoch[ 5 of 5]: [Training] CE = 2.30257965 * 100; Err = 0.93000000 * 100; totalSamplesSeen = 500; learningRatePerSample = 0.00015625; epochTime=0.229396s
07/13/2016 04:43:22: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043432.985841\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal'
07/13/2016 04:43:23: CNTKCommandTrainEnd: Train

07/13/2016 04:43:23: Action "train" complete.


07/13/2016 04:43:23: ##############################################################################
07/13/2016 04:43:23: #                                                                            #
07/13/2016 04:43:23: # Action "test"                                                              #
07/13/2016 04:43:23: #                                                                            #
07/13/2016 04:43:23: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 32 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 7 x 7 x 32]
Validating --> conv4.W = LearnableParameter() :  -> [1568 x 576]
Validating --> conv3.W = LearnableParameter() :  -> [3136 x 576]
Validating --> conv2.W = LearnableParameter() :  -> [64 x 1600]
Validating --> conv1.W = LearnableParameter() :  -> [64 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> conv1.c = Convolution (conv1.W, featScaled) : [64 x 75], [32 x 32 x 3 x *1] -> [32 x 32 x 64 x *1]
Validating --> conv1.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv1.p = Plus (conv1.c, conv1.b) : [32 x 32 x 64 x *1], [1 x 1 x 64] -> [32 x 32 x 64 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.p) : [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> conv2.c = Convolution (conv2.W, pool1) : [64 x 1600], [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> conv2.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv2.p = Plus (conv2.c, conv2.b) : [15 x 15 x 64 x *1], [1 x 1 x 64] -> [15 x 15 x 64 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.p) : [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.c = Convolution (conv3.W, pool2) : [3136 x 576], [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv3.p = Plus (conv3.c, conv3.b) : [7 x 7 x 64 x *1], [1 x 1 x 64] -> [7 x 7 x 64 x *1]
Validating --> conv3.y = RectifiedLinear (conv3.p) : [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv4.c = Convolution (conv4.W, conv3.y) : [1568 x 576], [7 x 7 x 64 x *1] -> [7 x 7 x 32 x *1]
Validating --> conv4.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv4.p = Plus (conv4.c, conv4.b) : [7 x 7 x 32 x *1], [1 x 1 x 32] -> [7 x 7 x 32 x *1]
Validating --> conv4.y = RectifiedLinear (conv4.p) : [7 x 7 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, conv4.y) : [10 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 19 nodes to process in pass 2.


Validating network, final pass.


conv1.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 64, Kernel: 5 x 5 x 3, Map: 1 x 1 x 64, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 5 x 5 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool2: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv3.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1), LowerPad: 0, UpperPad: 0.

conv4.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 32, Kernel: 3 x 3 x 64, Map: 32, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1), LowerPad: 0, UpperPad: 0.


13 out of 32 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 7 x 7 x 32]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.W Gradient[64 x 75]] [conv1.b Gradient[1 x 1 x 64]] [conv1.c Gradient[32 x 32 x 64 x *1]] [conv1.p Gradient[32 x 32 x 64 x *1]] [conv1.y Gradient[32 x 32 x 64 x *1]] [conv2.W Gradient[64 x 1600]] [conv2.b Gradient[1 x 1 x 64]] [conv2.c Gradient[15 x 15 x 64 x *1]] [conv2.p Gradient[15 x 15 x 64 x *1]] [conv2.y Gradient[15 x 15 x 64 x *1]] [conv3.W Gradient[3136 x 576]] [conv3.b Gradient[1 x 1 x 64]] [conv3.c Gradient[7 x 7 x 64 x *1]] [conv3.p Gradient[7 x 7 x 64 x *1]] [conv3.y Gradient[7 x 7 x 64 x *1]] [conv4.W Gradient[1568 x 576]] [conv4.b Gradient[1 x 1 x 32]] [conv4.c Gradient[7 x 7 x 32 x *1]] [conv4.p Gradient[7 x 7 x 32 x *1]] [conv4.y Gradient[7 x 7 x 32 x *1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *1]] [features Gradient[32 x 32 x 3 x *1]] [labels Gradient[10 x *1]] [pool1 Gradient[15 x 15 x 64 x *1]] [pool2 Gradient[7 x 7 x 64 x *1]] }
0000001101F7ED00: {[conv3.b Value[1 x 1 x 64]] }
0000001101F7F200: {[conv2.b Value[1 x 1 x 64]] }
0000001101F7F480: {[conv2.W Value[64 x 1600]] }
0000001101F7F660: {[conv3.W Value[3136 x 576]] }
0000001101F80240: {[conv1.W Value[64 x 75]] }
0000001101F80560: {[conv1.b Value[1 x 1 x 64]] }
0000001101F806A0: {[conv4.b Value[1 x 1 x 32]] }
0000001101F80880: {[OutputNodes.W Value[10 x 7 x 7 x 32]] }
0000001101F80A60: {[Err Value[1]] }
0000001101F80D80: {[CE Value[1]] }
0000001101F80EC0: {[labels Value[10 x *1]] }
0000001101F80F60: {[OutputNodes.b Value[10]] }
0000001101F81000: {[featScaled Value[32 x 32 x 3 x *1]] }
0000001101F81140: {[conv1.c Value[32 x 32 x 64 x *1]] }
0000001101F813C0: {[conv1.p Value[32 x 32 x 64 x *1]] }
0000001101F81460: {[conv1.y Value[32 x 32 x 64 x *1]] }
0000001101F81500: {[pool1 Value[15 x 15 x 64 x *1]] }
0000001101F815A0: {[conv2.c Value[15 x 15 x 64 x *1]] }
0000001101F816E0: {[features Value[32 x 32 x 3 x *1]] }
0000001101F81820: {[conv2.p Value[15 x 15 x 64 x *1]] }
0000001101F81A00: {[featOffs Value[1 x 1]] }
0000001101F81C80: {[conv4.W Value[1568 x 576]] }
000000116A59BB80: {[conv3.c Value[7 x 7 x 64 x *1]] }
000000116A59BEA0: {[conv4.p Value[7 x 7 x 32 x *1]] }
000000116A59BF40: {[pool2 Value[7 x 7 x 64 x *1]] }
000000116A59BFE0: {[OutputNodes.t Value[10 x *1]] }
000000116A59C1C0: {[conv3.y Value[7 x 7 x 64 x *1]] }
000000116A59C300: {[conv3.p Value[7 x 7 x 64 x *1]] }
000000116A59C6C0: {[OutputNodes.z Value[10 x *1]] }
000000116A59C9E0: {[conv2.y Value[15 x 15 x 64 x *1]] }
000000116A59CDA0: {[conv4.c Value[7 x 7 x 32 x *1]] }
000000116A59CF80: {[conv4.y Value[7 x 7 x 32 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
07/13/2016 04:43:25: Minibatch[1-50]: Err = 0.85750000 * 800; CE = 2.30253222 * 800
07/13/2016 04:43:25: Minibatch[51-100]: Err = 0.87125000 * 800; CE = 2.30253631 * 800
07/13/2016 04:43:25: Minibatch[101-150]: Err = 0.85625000 * 800; CE = 2.30251288 * 800
07/13/2016 04:43:26: Minibatch[151-200]: Err = 0.85500000 * 800; CE = 2.30251468 * 800
07/13/2016 04:43:26: Minibatch[201-250]: Err = 0.87000000 * 800; CE = 2.30251705 * 800
07/13/2016 04:43:26: Minibatch[251-300]: Err = 0.86625000 * 800; CE = 2.30253836 * 800
07/13/2016 04:43:27: Minibatch[301-350]: Err = 0.86000000 * 800; CE = 2.30252063 * 800
07/13/2016 04:43:27: Minibatch[351-400]: Err = 0.85625000 * 800; CE = 2.30249118 * 800
07/13/2016 04:43:27: Minibatch[401-450]: Err = 0.84875000 * 800; CE = 2.30249790 * 800
07/13/2016 04:43:28: Minibatch[451-500]: Err = 0.85000000 * 800; CE = 2.30251111 * 800
07/13/2016 04:43:28: Minibatch[501-550]: Err = 0.84875000 * 800; CE = 2.30249963 * 800
07/13/2016 04:43:28: Minibatch[551-600]: Err = 0.87250000 * 800; CE = 2.30252601 * 800
07/13/2016 04:43:28: Minibatch[601-625]: Err = 0.83750000 * 400; CE = 2.30252339 * 400
07/13/2016 04:43:28: Final Results: Minibatch[1-625]: Err = 0.85850000 * 10000; CE = 2.30251677 * 10000; perplexity = 9.99931682

07/13/2016 04:43:28: Action "test" complete.

07/13/2016 04:43:28: __COMPLETED__