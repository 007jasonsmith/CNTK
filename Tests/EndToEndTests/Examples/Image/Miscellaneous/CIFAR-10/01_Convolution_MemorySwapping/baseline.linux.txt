07/20/2016 16:21:45: -------------------------------------------------------------------
07/20/2016 16:21:45: Build info: 

07/20/2016 16:21:45: 		Built time: Jul 20 2016 16:11:38
07/20/2016 16:21:45: 		Last modified date: Wed Jul 20 16:11:11 2016
07/20/2016 16:21:45: 		Build type: debug
07/20/2016 16:21:45: 		Build target: GPU
07/20/2016 16:21:45: 		With 1bit-SGD: yes
07/20/2016 16:21:45: 		Math lib: acml
07/20/2016 16:21:45: 		CUDA_PATH: /usr/local/cuda-7.5
07/20/2016 16:21:45: 		CUB_PATH: /usr/local/cub-1.4.1
07/20/2016 16:21:45: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/20/2016 16:21:45: 		Build Branch: t-tidett/memoryswapping
07/20/2016 16:21:45: 		Build SHA1: e6043b78c343c3065c6c86847d433df91f2dcfb2 (modified)
07/20/2016 16:21:45: 		Built by tim on tim
07/20/2016 16:21:45: 		Build Path: /home/tim/git/cntk_dev
07/20/2016 16:21:45: -------------------------------------------------------------------

07/20/2016 16:21:45: Running on localhost at 2016/07/20 16:21:45
07/20/2016 16:21:45: Command line: 
/home/tim/git/cntk_dev/build/debug/bin/cntk  configFile=/home/tim/git/cntk_dev/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/01_Convolution_MemorySwapping/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/01_Conv.cntk  currentDirectory=/home/tim/git/cntk_dev/Examples/Image/Miscellaneous/CIFAR-10  RunDir=/tmp/cntk-test-20160720161803.302375/Examples/Image/Miscellaneous/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu  DataDir=/home/tim/git/cntk_dev/Examples/Image/Miscellaneous/CIFAR-10  ConfigDir=/home/tim/git/cntk_dev/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/01_Convolution_MemorySwapping/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10  OutputDir=/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu  DeviceId=0  timestamping=true  useMemorySwapping=true  Train=[SGD=[maxEpochs=10]]  Train=[SGD=[epochSize=100]]



07/20/2016 16:21:45: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/20/2016 16:21:45: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
command = Train:Test
modelPath = "$ModelDir$/01_Convolution"
stderr = "$OutputDir$/01_Conv"
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/01_Convolution.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
        dropoutRate = 0*5:0.5
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=/home/tim/git/cntk_dev/Examples/Image/Miscellaneous/CIFAR-10
RunDir=/tmp/cntk-test-20160720161803.302375/Examples/Image/Miscellaneous/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu
DataDir=/home/tim/git/cntk_dev/Examples/Image/Miscellaneous/CIFAR-10
ConfigDir=/home/tim/git/cntk_dev/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/01_Convolution_MemorySwapping/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu
DeviceId=0
timestamping=true
useMemorySwapping=true
Train=[SGD=[maxEpochs=10]]
Train=[SGD=[epochSize=100]]

07/20/2016 16:21:45: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/20/2016 16:21:45: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/20/2016 16:21:45: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models"
ndlMacros = "/home/tim/git/cntk_dev/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/01_Convolution_MemorySwapping/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
command = Train:Test
modelPath = "/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models/01_Convolution"
stderr = "/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/01_Conv"
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "/home/tim/git/cntk_dev/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/01_Convolution_MemorySwapping/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/01_Convolution.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
        dropoutRate = 0*5:0.5
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/tim/git/cntk_dev/Examples/Image/Miscellaneous/CIFAR-10/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/tim/git/cntk_dev/Examples/Image/Miscellaneous/CIFAR-10/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=/home/tim/git/cntk_dev/Examples/Image/Miscellaneous/CIFAR-10
RunDir=/tmp/cntk-test-20160720161803.302375/Examples/Image/Miscellaneous/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu
DataDir=/home/tim/git/cntk_dev/Examples/Image/Miscellaneous/CIFAR-10
ConfigDir=/home/tim/git/cntk_dev/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/01_Convolution_MemorySwapping/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu
DeviceId=0
timestamping=true
useMemorySwapping=true
Train=[SGD=[maxEpochs=10]]
Train=[SGD=[epochSize=100]]

07/20/2016 16:21:45: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/20/2016 16:21:45: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 01_Conv.cntk:command=Train:Test
configparameters: 01_Conv.cntk:ConfigDir=/home/tim/git/cntk_dev/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/01_Convolution_MemorySwapping/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
configparameters: 01_Conv.cntk:currentDirectory=/home/tim/git/cntk_dev/Examples/Image/Miscellaneous/CIFAR-10
configparameters: 01_Conv.cntk:DataDir=/home/tim/git/cntk_dev/Examples/Image/Miscellaneous/CIFAR-10
configparameters: 01_Conv.cntk:deviceId=0
configparameters: 01_Conv.cntk:imageLayout=cudnn
configparameters: 01_Conv.cntk:initOnCPUOnly=true
configparameters: 01_Conv.cntk:ModelDir=/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models
configparameters: 01_Conv.cntk:modelPath=/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models/01_Convolution
configparameters: 01_Conv.cntk:ndlMacros=/home/tim/git/cntk_dev/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/01_Convolution_MemorySwapping/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl
configparameters: 01_Conv.cntk:numMBsToShowResult=500
configparameters: 01_Conv.cntk:OutputDir=/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu
configparameters: 01_Conv.cntk:precision=float
configparameters: 01_Conv.cntk:RootDir=.
configparameters: 01_Conv.cntk:RunDir=/tmp/cntk-test-20160720161803.302375/Examples/Image/Miscellaneous/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu
configparameters: 01_Conv.cntk:stderr=/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/01_Conv
configparameters: 01_Conv.cntk:Test=[
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/tim/git/cntk_dev/Examples/Image/Miscellaneous/CIFAR-10/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]

configparameters: 01_Conv.cntk:timestamping=true
configparameters: 01_Conv.cntk:traceLevel=1
configparameters: 01_Conv.cntk:Train=[
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "/home/tim/git/cntk_dev/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/01_Convolution_MemorySwapping/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/01_Convolution.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
        dropoutRate = 0*5:0.5
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/tim/git/cntk_dev/Examples/Image/Miscellaneous/CIFAR-10/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
] [SGD=[maxEpochs=10]] [SGD=[epochSize=100]]

configparameters: 01_Conv.cntk:useMemorySwapping=true
07/20/2016 16:21:45: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/20/2016 16:21:45: Commands: Train Test
07/20/2016 16:21:45: Precision = "float"
07/20/2016 16:21:45: CNTKModelPath: /home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models/01_Convolution
07/20/2016 16:21:45: CNTKCommandTrainInfo: Train : 10
07/20/2016 16:21:45: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 10

07/20/2016 16:21:45: ##############################################################################
07/20/2016 16:21:45: #                                                                            #
07/20/2016 16:21:45: # Action "train"                                                             #
07/20/2016 16:21:45: #                                                                            #
07/20/2016 16:21:45: ##############################################################################

07/20/2016 16:21:45: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0

07/20/2016 16:21:45: Creating virgin network.
SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 34 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 3 x 3 x 64]
Validating --> conv3_act.W = LearnableParameter() :  -> [64 x 800]
Validating --> conv2_act.W = LearnableParameter() :  -> [32 x 800]
Validating --> conv1_act.W = LearnableParameter() :  -> [32 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Validating --> conv1_act.c = Convolution (conv1_act.W, featScaled) : [32 x 75], [32 x 32 x 3 x *] -> [32 x 32 x 32 x *]
Validating --> conv1_act.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv1_act.p = Plus (conv1_act.c, conv1_act.b) : [32 x 32 x 32 x *], [1 x 1 x 32] -> [32 x 32 x 32 x *]
Validating --> conv1_act.y = RectifiedLinear (conv1_act.p) : [32 x 32 x 32 x *] -> [32 x 32 x 32 x *]
Validating --> pool1 = MaxPooling (conv1_act.y) : [32 x 32 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> conv2_act.c = Convolution (conv2_act.W, pool1) : [32 x 800], [15 x 15 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> conv2_act.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.p = Plus (conv2_act.c, conv2_act.b) : [15 x 15 x 32 x *], [1 x 1 x 32] -> [15 x 15 x 32 x *]
Validating --> conv2_act.y = RectifiedLinear (conv2_act.p) : [15 x 15 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> pool2 = MaxPooling (conv2_act.y) : [15 x 15 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> conv3_act.c = Convolution (conv3_act.W, pool2) : [64 x 800], [7 x 7 x 32 x *] -> [7 x 7 x 64 x *]
Validating --> conv3_act.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv3_act.p = Plus (conv3_act.c, conv3_act.b) : [7 x 7 x 64 x *], [1 x 1 x 64] -> [7 x 7 x 64 x *]
Validating --> conv3_act.y = RectifiedLinear (conv3_act.p) : [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> pool3 = MaxPooling (conv3_act.y) : [7 x 7 x 64 x *] -> [3 x 3 x 64 x *]
Validating --> h1.t = Times (h1.W, pool3) : [64 x 3 x 3 x 64], [3 x 3 x 64 x *] -> [64 x *]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.z = Plus (h1.t, h1.b) : [64 x *], [64 x 1] -> [64 x 1 x *]
Validating --> h1.y = RectifiedLinear (h1.z) : [64 x 1 x *] -> [64 x 1 x *]
Validating --> h1_d = Dropout (h1.y) : [64 x 1 x *] -> [64 x 1 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1_d) : [10 x 64], [64 x 1 x *] -> [10 x 1 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x 1 x *], [10] -> [10 x 1 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 21 nodes to process in pass 2.


Validating network, final pass.


conv1_act.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 32, Kernel: 5 x 5 x 3, Map: 1 x 1 x 32, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 32, Output: 15 x 15 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2_act.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 15 x 15 x 32, Kernel: 5 x 5 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool2: using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 7 x 7 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv3_act.c: using cuDNN convolution engine for geometry: Input: 7 x 7 x 32, Output: 7 x 7 x 64, Kernel: 5 x 5 x 32, Map: 1 x 1 x 64, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool3: using cuDNN convolution engine for geometry: Input: 7 x 7 x 64, Output: 3 x 3 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


13 out of 34 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/20/2016 16:21:46: Created model with 34 nodes on GPU 0.

07/20/2016 16:21:46: Training criterion node(s):
07/20/2016 16:21:46: 	CE = CrossEntropyWithSoftmax

07/20/2016 16:21:46: Evaluation criterion node(s):

07/20/2016 16:21:46: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[Err Gradient[1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *]] [features Gradient[32 x 32 x 3 x *]] [labels Gradient[10 x *]] }
0x2bb4ba8: {[features Value[32 x 32 x 3 x *]] }
0x2bb6048: {[conv1_act.W Gradient[32 x 75]] [conv1_act.p Value[32 x 32 x 32 x *]] }
0x3117298: {[conv1_act.W Value[32 x 75]] }
0x3117a78: {[conv1_act.b Value[1 x 1 x 32]] }
0x31195b8: {[conv2_act.W Value[32 x 800]] }
0x311a608: {[conv2_act.b Value[1 x 1 x 32]] }
0x311c158: {[conv3_act.W Value[64 x 800]] }
0x311c9a8: {[conv3_act.b Value[1 x 1 x 64]] }
0x311e6c8: {[h1.W Value[64 x 3 x 3 x 64]] }
0x311ee48: {[h1.b Value[64 x 1]] }
0x3120558: {[OutputNodes.W Value[10 x 64]] }
0x3121358: {[OutputNodes.b Value[10]] }
0x3136978: {[featOffs Value[1 x 1]] }
0x3137be8: {[labels Value[10 x *]] }
0x42779d8: {[OutputNodes.z Value[10 x 1 x *]] }
0xdce2f18: {[OutputNodes.t Value[10 x 1 x *]] [h1.b Gradient[64 x 1]] [h1.y Gradient[64 x 1 x *]] }
0xdce39f8: {[CE Gradient[1]] }
0xdce3bb8: {[OutputNodes.W Gradient[10 x 64]] [OutputNodes.z Gradient[10 x 1 x *]] }
0xdce3d78: {[OutputNodes.t Gradient[10 x 1 x *]] }
0xdce3f38: {[OutputNodes.b Gradient[10]] }
0xdce40f8: {[h1_d Gradient[64 x 1 x *]] }
0xdced808: {[CE Value[1]] }
0xdceda28: {[conv1_act.c Gradient[32 x 32 x 32 x *]] [conv1_act.y Value[32 x 32 x 32 x *]] }
0xdcedbe8: {[conv1_act.p Gradient[32 x 32 x 32 x *]] [pool1 Value[15 x 15 x 32 x *]] }
0xdceded8: {[Err Value[1]] }
0xdd14088: {[conv1_act.c Value[32 x 32 x 32 x *]] }
0xdd142e8: {[featScaled Value[32 x 32 x 3 x *]] }
0xdd14c78: {[conv2_act.c Value[15 x 15 x 32 x *]] }
0xdd14e38: {[conv1_act.b Gradient[1 x 1 x 32]] [conv1_act.y Gradient[32 x 32 x 32 x *]] }
0xdd153a8: {[conv2_act.W Gradient[32 x 800]] [conv2_act.p Value[15 x 15 x 32 x *]] }
0xdd15568: {[conv2_act.c Gradient[15 x 15 x 32 x *]] [conv2_act.y Value[15 x 15 x 32 x *]] }
0xdd15728: {[conv2_act.p Gradient[15 x 15 x 32 x *]] [pool1 Gradient[15 x 15 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
0xdd158e8: {[conv3_act.c Value[7 x 7 x 64 x *]] }
0xdd15aa8: {[conv2_act.b Gradient[1 x 1 x 32]] [conv2_act.y Gradient[15 x 15 x 32 x *]] }
0xdd15c68: {[conv3_act.W Gradient[64 x 800]] [conv3_act.p Value[7 x 7 x 64 x *]] }
0xdd15e28: {[conv3_act.c Gradient[7 x 7 x 64 x *]] [conv3_act.y Value[7 x 7 x 64 x *]] }
0xdd15fe8: {[conv3_act.p Gradient[7 x 7 x 64 x *]] [pool2 Gradient[7 x 7 x 32 x *]] [pool3 Value[3 x 3 x 64 x *]] }
0xdd161a8: {[conv3_act.b Gradient[1 x 1 x 64]] [conv3_act.y Gradient[7 x 7 x 64 x *]] [h1.t Value[64 x *]] }
0xdd16368: {[h1.W Gradient[64 x 3 x 3 x 64]] [h1.z Value[64 x 1 x *]] }
0xdd16528: {[h1.t Gradient[64 x *]] [h1.y Value[64 x 1 x *]] }
0xdd166e8: {[h1_d Value[64 x 1 x *]] }
0xdd168a8: {[h1.z Gradient[64 x 1 x *]] [pool3 Gradient[3 x 3 x 64 x *]] }

07/20/2016 16:21:46: No PreCompute nodes found, skipping PreCompute step.

07/20/2016 16:21:46: Starting Epoch 1: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..100] (first sequence at sample 0), data subset 0 of 1

07/20/2016 16:21:46: Starting minibatch loop.
Begin benchmarking for memory swapping...
Step number: 1 step name: featScaled_forward
Step number: 2 step name: conv1_act.c_forward
Step number: 3 step name: conv1_act.p_forward
Step number: 4 step name: conv1_act.y_forward
Step number: 5 step name: pool1_forward
Step number: 6 step name: conv2_act.c_forward
Step number: 7 step name: conv2_act.p_forward
Step number: 8 step name: conv2_act.y_forward
Step number: 9 step name: pool2_forward
Step number: 10 step name: conv3_act.c_forward
Step number: 11 step name: conv3_act.p_forward
Step number: 12 step name: conv3_act.y_forward
Step number: 13 step name: pool3_forward
Step number: 14 step name: h1.t_forward
Step number: 15 step name: h1.z_forward
Step number: 16 step name: h1.y_forward
Step number: 17 step name: h1_d_forward
Step number: 18 step name: OutputNodes.t_forward
Step number: 19 step name: OutputNodes.z_forward
Step number: 20 step name: Err_forward
Step number: 22 step name: CE_forward
Step number: 23 step name: CE_backprop
Step number: 24 step name: OutputNodes.z_backprop
Step number: 25 step name: OutputNodes.t_backprop
Step number: 26 step name: h1_d_backprop
Step number: 27 step name: h1.y_backprop
Step number: 28 step name: h1.z_backprop
Step number: 29 step name: h1.t_backprop
Step number: 30 step name: pool3_backprop
Step number: 31 step name: conv3_act.y_backprop
Step number: 32 step name: conv3_act.p_backprop
Step number: 33 step name: conv3_act.c_backprop
Step number: 34 step name: pool2_backprop
Step number: 35 step name: conv2_act.y_backprop
Step number: 36 step name: conv2_act.p_backprop
Step number: 37 step name: conv2_act.c_backprop
Step number: 38 step name: pool1_backprop
Step number: 39 step name: conv1_act.y_backprop
Step number: 40 step name: conv1_act.p_backprop
Step number: 41 step name: conv1_act.c_backprop
Memory swapping benchmarking complete!Swapping buffer: 0x3117298 with dim 32x75 out at step 2 and in at step 40
Swapping buffer: 0x3117a78 with dim 1x32 out at step 3 and in at step 39
Swapping buffer: 0x31195b8 with dim 32x800 out at step 6 and in at step 36
Swapping buffer: 0x311a608 with dim 1x32 out at step 7 and in at step 35
Swapping buffer: 0x311c158 with dim 64x800 out at step 10 and in at step 30
Swapping buffer: 0x311c9a8 with dim 1x64 out at step 11 and in at step 31
Swapping buffer: 0x311e6c8 with dim 64x576 out at step 14 and in at step 22
Swapping buffer: 0x311ee48 with dim 64x1 out at step 15 and in at step 27
Swapping buffer: 0x3120558 with dim 10x64 out at step 18 and in at step 24
Swapping buffer: 0x3121358 with dim 10x1 out at step 19 and in at step 23
Swapping buffer: 0x3137be8 with dim 10x64 out at step 20 and in at step 21
Swapping buffer: 0x42779d8 with dim 10x64 out at step 20 and in at step 21
Total swapped memory: 0.450844MB
Total swappable memory: 1.200848MB
07/20/2016 16:22:18: Finished Epoch[ 1 of 10]: [Training] CE = 0.82891922 * 100; Err = 0.89000000 * 100; totalSamplesSeen = 100; learningRatePerSample = 0.00015625; epochTime=31.8463s
07/20/2016 16:22:18: SGD: Saving checkpoint model '/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models/01_Convolution.1'

07/20/2016 16:22:18: Starting Epoch 2: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 1: frames [100..200] (first sequence at sample 100), data subset 0 of 1

07/20/2016 16:22:18: Starting minibatch loop.
07/20/2016 16:22:18: Finished Epoch[ 2 of 10]: [Training] CE = 2.30222031 * 100; Err = 0.89000000 * 100; totalSamplesSeen = 200; learningRatePerSample = 0.00015625; epochTime=0.031029s
07/20/2016 16:22:18: SGD: Saving checkpoint model '/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models/01_Convolution.2'

07/20/2016 16:22:18: Starting Epoch 3: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 2: frames [200..300] (first sequence at sample 200), data subset 0 of 1

07/20/2016 16:22:18: Starting minibatch loop.
07/20/2016 16:22:18: Finished Epoch[ 3 of 10]: [Training] CE = 2.30178452 * 100; Err = 0.86000000 * 100; totalSamplesSeen = 300; learningRatePerSample = 0.00015625; epochTime=0.029557s
07/20/2016 16:22:18: SGD: Saving checkpoint model '/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models/01_Convolution.3'

07/20/2016 16:22:18: Starting Epoch 4: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 3: frames [300..400] (first sequence at sample 300), data subset 0 of 1

07/20/2016 16:22:18: Starting minibatch loop.
07/20/2016 16:22:18: Finished Epoch[ 4 of 10]: [Training] CE = 2.30170151 * 100; Err = 0.97000000 * 100; totalSamplesSeen = 400; learningRatePerSample = 0.00015625; epochTime=0.028792s
07/20/2016 16:22:18: SGD: Saving checkpoint model '/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models/01_Convolution.4'

07/20/2016 16:22:18: Starting Epoch 5: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 4: frames [400..500] (first sequence at sample 400), data subset 0 of 1

07/20/2016 16:22:18: Starting minibatch loop.
07/20/2016 16:22:18: Finished Epoch[ 5 of 10]: [Training] CE = 2.29459167 * 100; Err = 0.90000000 * 100; totalSamplesSeen = 500; learningRatePerSample = 0.00015625; epochTime=0.028549s
07/20/2016 16:22:18: SGD: Saving checkpoint model '/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models/01_Convolution.5'
Setting dropout rate to 0.5.

07/20/2016 16:22:18: Starting Epoch 6: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 5: frames [500..600] (first sequence at sample 500), data subset 0 of 1

07/20/2016 16:22:18: Starting minibatch loop.
(GPU): creating curand object with seed 5
07/20/2016 16:22:18: Finished Epoch[ 6 of 10]: [Training] CE = 2.30529144 * 100; Err = 0.88000000 * 100; totalSamplesSeen = 600; learningRatePerSample = 0.00015625; epochTime=0.035715s
07/20/2016 16:22:18: SGD: Saving checkpoint model '/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models/01_Convolution.6'

07/20/2016 16:22:18: Starting Epoch 7: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 6: frames [600..700] (first sequence at sample 600), data subset 0 of 1

07/20/2016 16:22:18: Starting minibatch loop.
(GPU): creating curand object with seed 6
07/20/2016 16:22:18: Finished Epoch[ 7 of 10]: [Training] CE = 2.28787933 * 100; Err = 0.89000000 * 100; totalSamplesSeen = 700; learningRatePerSample = 0.00015625; epochTime=0.032405s
07/20/2016 16:22:18: SGD: Saving checkpoint model '/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models/01_Convolution.7'

07/20/2016 16:22:18: Starting Epoch 8: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 7: frames [700..800] (first sequence at sample 700), data subset 0 of 1

07/20/2016 16:22:18: Starting minibatch loop.
(GPU): creating curand object with seed 7
07/20/2016 16:22:18: Finished Epoch[ 8 of 10]: [Training] CE = 2.29023804 * 100; Err = 0.90000000 * 100; totalSamplesSeen = 800; learningRatePerSample = 0.00015625; epochTime=0.02843s
07/20/2016 16:22:18: SGD: Saving checkpoint model '/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models/01_Convolution.8'

07/20/2016 16:22:18: Starting Epoch 9: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 8: frames [800..900] (first sequence at sample 800), data subset 0 of 1

07/20/2016 16:22:18: Starting minibatch loop.
(GPU): creating curand object with seed 8
07/20/2016 16:22:19: Finished Epoch[ 9 of 10]: [Training] CE = 2.30029861 * 100; Err = 0.94000000 * 100; totalSamplesSeen = 900; learningRatePerSample = 0.00015625; epochTime=0.028552s
07/20/2016 16:22:19: SGD: Saving checkpoint model '/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models/01_Convolution.9'

07/20/2016 16:22:19: Starting Epoch 10: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 9: frames [900..1000] (first sequence at sample 900), data subset 0 of 1

07/20/2016 16:22:19: Starting minibatch loop.
(GPU): creating curand object with seed 9
07/20/2016 16:22:19: Finished Epoch[10 of 10]: [Training] CE = 2.29944702 * 100; Err = 0.89000000 * 100; totalSamplesSeen = 1000; learningRatePerSample = 0.00015625; epochTime=0.028383s
07/20/2016 16:22:19: SGD: Saving checkpoint model '/home/tim/CIFAR-10_01_Convolution_MemorySwapping@debug_gpu/Models/01_Convolution'
07/20/2016 16:22:19: CNTKCommandTrainEnd: Train

07/20/2016 16:22:19: Action "train" complete.


07/20/2016 16:22:19: ##############################################################################
07/20/2016 16:22:19: #                                                                            #
07/20/2016 16:22:19: # Action "test"                                                              #
07/20/2016 16:22:19: #                                                                            #
07/20/2016 16:22:19: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 34 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 3 x 3 x 64]
Validating --> conv3_act.W = LearnableParameter() :  -> [64 x 800]
Validating --> conv2_act.W = LearnableParameter() :  -> [32 x 800]
Validating --> conv1_act.W = LearnableParameter() :  -> [32 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> conv1_act.c = Convolution (conv1_act.W, featScaled) : [32 x 75], [32 x 32 x 3 x *1] -> [32 x 32 x 32 x *1]
Validating --> conv1_act.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv1_act.p = Plus (conv1_act.c, conv1_act.b) : [32 x 32 x 32 x *1], [1 x 1 x 32] -> [32 x 32 x 32 x *1]
Validating --> conv1_act.y = RectifiedLinear (conv1_act.p) : [32 x 32 x 32 x *1] -> [32 x 32 x 32 x *1]
Validating --> pool1 = MaxPooling (conv1_act.y) : [32 x 32 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> conv2_act.c = Convolution (conv2_act.W, pool1) : [32 x 800], [15 x 15 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> conv2_act.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.p = Plus (conv2_act.c, conv2_act.b) : [15 x 15 x 32 x *1], [1 x 1 x 32] -> [15 x 15 x 32 x *1]
Validating --> conv2_act.y = RectifiedLinear (conv2_act.p) : [15 x 15 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2_act.y) : [15 x 15 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> conv3_act.c = Convolution (conv3_act.W, pool2) : [64 x 800], [7 x 7 x 32 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3_act.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv3_act.p = Plus (conv3_act.c, conv3_act.b) : [7 x 7 x 64 x *1], [1 x 1 x 64] -> [7 x 7 x 64 x *1]
Validating --> conv3_act.y = RectifiedLinear (conv3_act.p) : [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> pool3 = MaxPooling (conv3_act.y) : [7 x 7 x 64 x *1] -> [3 x 3 x 64 x *1]
Validating --> h1.t = Times (h1.W, pool3) : [64 x 3 x 3 x 64], [3 x 3 x 64 x *1] -> [64 x *1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.z = Plus (h1.t, h1.b) : [64 x *1], [64 x 1] -> [64 x 1 x *1]
Validating --> h1.y = RectifiedLinear (h1.z) : [64 x 1 x *1] -> [64 x 1 x *1]
Validating --> h1_d = Dropout (h1.y) : [64 x 1 x *1] -> [64 x 1 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1_d) : [10 x 64], [64 x 1 x *1] -> [10 x 1 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x 1 x *1], [10] -> [10 x 1 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 21 nodes to process in pass 2.


Validating network, final pass.


conv1_act.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 32, Kernel: 5 x 5 x 3, Map: 1 x 1 x 32, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 32, Output: 15 x 15 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2_act.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 15 x 15 x 32, Kernel: 5 x 5 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool2: using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 7 x 7 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv3_act.c: using cuDNN convolution engine for geometry: Input: 7 x 7 x 32, Output: 7 x 7 x 64, Kernel: 5 x 5 x 32, Map: 1 x 1 x 64, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool3: using cuDNN convolution engine for geometry: Input: 7 x 7 x 64, Output: 3 x 3 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


13 out of 34 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 64]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x 1 x *1]] [OutputNodes.z Gradient[10 x 1 x *1]] [conv1_act.W Gradient[32 x 75]] [conv1_act.b Gradient[1 x 1 x 32]] [conv1_act.c Gradient[32 x 32 x 32 x *1]] [conv1_act.p Gradient[32 x 32 x 32 x *1]] [conv1_act.y Gradient[32 x 32 x 32 x *1]] [conv2_act.W Gradient[32 x 800]] [conv2_act.b Gradient[1 x 1 x 32]] [conv2_act.c Gradient[15 x 15 x 32 x *1]] [conv2_act.p Gradient[15 x 15 x 32 x *1]] [conv2_act.y Gradient[15 x 15 x 32 x *1]] [conv3_act.W Gradient[64 x 800]] [conv3_act.b Gradient[1 x 1 x 64]] [conv3_act.c Gradient[7 x 7 x 64 x *1]] [conv3_act.p Gradient[7 x 7 x 64 x *1]] [conv3_act.y Gradient[7 x 7 x 64 x *1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *1]] [features Gradient[32 x 32 x 3 x *1]] [h1.W Gradient[64 x 3 x 3 x 64]] [h1.b Gradient[64 x 1]] [h1.t Gradient[64 x *1]] [h1.y Gradient[64 x 1 x *1]] [h1.z Gradient[64 x 1 x *1]] [h1_d Gradient[64 x 1 x *1]] [labels Gradient[10 x *1]] [pool1 Gradient[15 x 15 x 32 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] [pool3 Gradient[3 x 3 x 64 x *1]] }
0x241e418: {[conv1_act.c Value[32 x 32 x 32 x *1]] }
0x2480868: {[featScaled Value[32 x 32 x 3 x *1]] }
0x24a0908: {[conv2_act.c Value[15 x 15 x 32 x *1]] }
0x24a0c88: {[conv2_act.p Value[15 x 15 x 32 x *1]] }
0x24a0e48: {[conv2_act.y Value[15 x 15 x 32 x *1]] }
0x2a2e8b8: {[Err Value[1]] }
0x2a2fbb8: {[conv1_act.b Value[1 x 1 x 32]] }
0x2a30e88: {[conv1_act.W Value[32 x 75]] }
0x2a30fe8: {[conv2_act.W Value[32 x 800]] }
0x2a31b08: {[conv3_act.b Value[1 x 1 x 64]] }
0x2a31d18: {[conv3_act.W Value[64 x 800]] }
0x2a34588: {[conv2_act.b Value[1 x 1 x 32]] }
0x2ade338: {[pool2 Value[7 x 7 x 32 x *1]] }
0x2ade4f8: {[conv3_act.c Value[7 x 7 x 64 x *1]] }
0x2ade878: {[conv3_act.p Value[7 x 7 x 64 x *1]] }
0x2adea38: {[conv3_act.y Value[7 x 7 x 64 x *1]] }
0x2adebf8: {[pool3 Value[3 x 3 x 64 x *1]] }
0x2adedb8: {[h1.t Value[64 x *1]] }
0x2adef78: {[h1.z Value[64 x 1 x *1]] }
0x2adf138: {[h1.y Value[64 x 1 x *1]] }
0x2adf2f8: {[h1_d Value[64 x 1 x *1]] }
0x2adf678: {[OutputNodes.t Value[10 x 1 x *1]] }
0x2adf838: {[OutputNodes.z Value[10 x 1 x *1]] }
0x2ae06c8: {[pool1 Value[15 x 15 x 32 x *1]] }
0x2b794b8: {[featOffs Value[1 x 1]] }
0x2b7a0d8: {[features Value[32 x 32 x 3 x *1]] }
0x2b7aab8: {[h1.b Value[64 x 1]] }
0x2b7b7a8: {[h1.W Value[64 x 3 x 3 x 64]] }
0x2b80278: {[conv1_act.p Value[32 x 32 x 32 x *1]] }
0x2b803d8: {[conv1_act.y Value[32 x 32 x 32 x *1]] }
0x2baf208: {[CE Value[1]] }
0x2bb05f8: {[labels Value[10 x *1]] }
0x2bb1008: {[OutputNodes.b Value[10]] }
0x2bb1cb8: {[OutputNodes.W Value[10 x 64]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
07/20/2016 16:22:25: Minibatch[1-500]: Err = 0.87012500 * 8000; CE = 2.28339032 * 8000
07/20/2016 16:22:25: Minibatch[501-625]: Err = 0.87000000 * 2000; CE = 2.28301412 * 2000
07/20/2016 16:22:25: Final Results: Minibatch[1-625]: Err = 0.87010000 * 10000; CE = 2.28331508 * 10000; perplexity = 9.80914469

07/20/2016 16:22:25: Action "test" complete.

07/20/2016 16:22:25: __COMPLETED__
