CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3550 @ 3.07GHz
    Hardware threads: 4
    Total Memory: 12580388 kB
-------------------------------------------------------------------
Looking for data in: /cygdrive/c/Data/CNTKTestData
Copying test data to local directory
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/03_ResNet.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10 OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=1]] Train=[SGD=[epochSize=128]] Train=[reader=[randomize=none]] Train=[SGD=[minibatchSize=16]] Test=[minibatchSize=16] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 05:09:49
		Last modified date: Fri Jul  8 10:29:39 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by svcphil on DPHAIM-24
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData
07/14/2016 05:25:59: Redirecting stderr to file -_Train_Test.log
07/14/2016 05:25:59: -------------------------------------------------------------------
07/14/2016 05:25:59: Build info: 

07/14/2016 05:25:59: 		Built time: Jul 14 2016 05:09:49
07/14/2016 05:25:59: 		Last modified date: Fri Jul  8 10:29:39 2016
07/14/2016 05:25:59: 		Build type: Release
07/14/2016 05:25:59: 		Build target: GPU
07/14/2016 05:25:59: 		With 1bit-SGD: no
07/14/2016 05:25:59: 		Math lib: mkl
07/14/2016 05:25:59: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
07/14/2016 05:25:59: 		CUB_PATH: C:\src\cub-1.4.1
07/14/2016 05:25:59: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
07/14/2016 05:25:59: 		Build Branch: HEAD
07/14/2016 05:25:59: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 05:25:59: 		Built by svcphil on DPHAIM-24
07/14/2016 05:25:59: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
07/14/2016 05:25:59: -------------------------------------------------------------------
07/14/2016 05:25:59: -------------------------------------------------------------------
07/14/2016 05:25:59: GPU info:

07/14/2016 05:25:59: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
07/14/2016 05:25:59: -------------------------------------------------------------------

07/14/2016 05:25:59: Running on cntk-muc02 at 2016/07/14 05:25:59
07/14/2016 05:25:59: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/03_ResNet.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=1]]  Train=[SGD=[epochSize=128]]  Train=[reader=[randomize=none]]  Train=[SGD=[minibatchSize=16]]  Test=[minibatchSize=16]  stderr=-



07/14/2016 05:25:59: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:25:59: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch = "true"
parallelTrain = "false"
command = Train:Test
stderr = "$OutputDir$/03_ResNet"
traceLevel = 1
numMBsToShowResult = 200
Proj16to32Filename = "$ConfigDir$/16to32.txt"
Proj32to64Filename = "$ConfigDir$/32to64.txt"
Train = [
    action = "train"
    modelPath = "$ModelDir$/03_ResNet"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/03_ResNet.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 128
        learningRatesPerMB = 1.0*80:0.1*40:0.01
        momentumPerMB = 0.9
        maxEpochs = 160
        L2RegWeight = 0.0001
        dropoutRate = 0
        ParallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = "true"
            parallelizationStartEpoch = 1
            DataParallelSGD = [
                gradientBits = 32
            ]
        ]
    ]
    reader = [
        readerType = "ImageReader"
        file = "$DataDir$/cifar-10-batches-py/train_map.txt"
        randomize = "auto"
        features = [
            width = 32
            height = 32
            channels = 3
            cropType = "random"
            cropRatio = 0.8
            jitterType = "uniRatio"
            interpolations = "linear"
            meanFile = "$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels = [
            labelDim = 10
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "$ModelDir$/03_ResNet"
    minibatchSize = 512
    reader = [
        readerType = "ImageReader"
        file = "$DataDir$/cifar-10-batches-py/test_map.txt"
        randomize = "none"
        features = [
            width = 32
            height = 32
            channels = 3
            cropType = "center"
            cropRatio = 1
            jitterType = "uniRatio"
            interpolations = "linear"
            meanFile = "$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels = [
            labelDim = 10
        ]
    ]    
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train=[SGD=[minibatchSize=16]]
Test=[minibatchSize=16]
stderr=-

07/14/2016 05:25:59: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:25:59: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:25:59: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models"
ndlMacros = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch = "true"
parallelTrain = "false"
command = Train:Test
stderr = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/03_ResNet"
traceLevel = 1
numMBsToShowResult = 200
Proj16to32Filename = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/16to32.txt"
Proj32to64Filename = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/32to64.txt"
Train = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models/03_ResNet"
     NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/03_ResNet.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 128
        learningRatesPerMB = 1.0*80:0.1*40:0.01
        momentumPerMB = 0.9
        maxEpochs = 160
        L2RegWeight = 0.0001
        dropoutRate = 0
        ParallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = "true"
            parallelizationStartEpoch = 1
            DataParallelSGD = [
                gradientBits = 32
            ]
        ]
    ]
    reader = [
        readerType = "ImageReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/train_map.txt"
        randomize = "auto"
        features = [
            width = 32
            height = 32
            channels = 3
            cropType = "random"
            cropRatio = 0.8
            jitterType = "uniRatio"
            interpolations = "linear"
            meanFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels = [
            labelDim = 10
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models/03_ResNet"
    minibatchSize = 512
    reader = [
        readerType = "ImageReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/test_map.txt"
        randomize = "none"
        features = [
            width = 32
            height = 32
            channels = 3
            cropType = "center"
            cropRatio = 1
            jitterType = "uniRatio"
            interpolations = "linear"
            meanFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels = [
            labelDim = 10
        ]
    ]    
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train=[SGD=[minibatchSize=16]]
Test=[minibatchSize=16]
stderr=-

07/14/2016 05:25:59: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:25:59: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 03_ResNet.cntk:command=Train:Test
configparameters: 03_ResNet.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 03_ResNet.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData
configparameters: 03_ResNet.cntk:DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData
configparameters: 03_ResNet.cntk:deviceId=0
configparameters: 03_ResNet.cntk:imageLayout=cudnn
configparameters: 03_ResNet.cntk:initOnCPUOnly=true
configparameters: 03_ResNet.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models
configparameters: 03_ResNet.cntk:ndlMacros=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl
configparameters: 03_ResNet.cntk:numMBsToShowResult=200
configparameters: 03_ResNet.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu
configparameters: 03_ResNet.cntk:parallelTrain=false
configparameters: 03_ResNet.cntk:precision=float
configparameters: 03_ResNet.cntk:prefetch=true
configparameters: 03_ResNet.cntk:Proj16to32Filename=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/16to32.txt
configparameters: 03_ResNet.cntk:Proj32to64Filename=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/32to64.txt
configparameters: 03_ResNet.cntk:RootDir=.
configparameters: 03_ResNet.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu
configparameters: 03_ResNet.cntk:stderr=-
configparameters: 03_ResNet.cntk:Test=[
    action = "test"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models/03_ResNet"
    minibatchSize = 512
    reader = [
        readerType = "ImageReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/test_map.txt"
        randomize = "none"
        features = [
            width = 32
            height = 32
            channels = 3
            cropType = "center"
            cropRatio = 1
            jitterType = "uniRatio"
            interpolations = "linear"
            meanFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels = [
            labelDim = 10
        ]
    ]    
] [minibatchSize=16]

configparameters: 03_ResNet.cntk:timestamping=true
configparameters: 03_ResNet.cntk:traceLevel=1
configparameters: 03_ResNet.cntk:Train=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models/03_ResNet"
     NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/03_ResNet.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 128
        learningRatesPerMB = 1.0*80:0.1*40:0.01
        momentumPerMB = 0.9
        maxEpochs = 160
        L2RegWeight = 0.0001
        dropoutRate = 0
        ParallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = "true"
            parallelizationStartEpoch = 1
            DataParallelSGD = [
                gradientBits = 32
            ]
        ]
    ]
    reader = [
        readerType = "ImageReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/train_map.txt"
        randomize = "auto"
        features = [
            width = 32
            height = 32
            channels = 3
            cropType = "random"
            cropRatio = 0.8
            jitterType = "uniRatio"
            interpolations = "linear"
            meanFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels = [
            labelDim = 10
        ]
    ]    
] [SGD=[maxEpochs=1]] [SGD=[epochSize=128]] [reader=[randomize=none]] [SGD=[minibatchSize=16]]

07/14/2016 05:25:59: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 05:25:59: Commands: Train Test
07/14/2016 05:25:59: Precision = "float"
07/14/2016 05:25:59: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models/03_ResNet
07/14/2016 05:25:59: CNTKCommandTrainInfo: Train : 1
07/14/2016 05:25:59: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 1

07/14/2016 05:25:59: ##############################################################################
07/14/2016 05:25:59: #                                                                            #
07/14/2016 05:25:59: # Action "train"                                                             #
07/14/2016 05:25:59: #                                                                            #
07/14/2016 05:25:59: ##############################################################################

07/14/2016 05:25:59: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/14/2016 05:25:59: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 184 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *] -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_3.y) : [32 x 144], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_3.y) : [32 x 16], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_3.y) : [64 x 288], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_3.y) : [64 x 32], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling (rn3_3.y) : [8 x 8 x 64 x *] -> [1 x 1 x 64 x *]

OutputNodes.t Times operation: For legacy compatibility, the sample layout of left input (OutputNodes.W LearnableParameter operation) was patched to [10 x 1 x 1 x 64] (from [10 x 64])
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 75 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


109 out of 184 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 05:26:00: Created model with 184 nodes on GPU 0.

07/14/2016 05:26:00: Training criterion node(s):
07/14/2016 05:26:00: 	CE = CrossEntropyWithSoftmax

07/14/2016 05:26:00: Evaluation criterion node(s):

07/14/2016 05:26:00: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[Err Gradient[1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [features Gradient[32 x 32 x 3 x *]] [labels Gradient[10 x *]] [rn1_1.c1.c.c.isd Gradient[16 x 1]] [rn1_1.c1.c.c.m Gradient[16 x 1]] [rn1_1.c2.c.isd Gradient[16 x 1]] [rn1_1.c2.c.m Gradient[16 x 1]] [rn1_2.c1.c.c.isd Gradient[16 x 1]] [rn1_2.c1.c.c.m Gradient[16 x 1]] [rn1_2.c2.c.isd Gradient[16 x 1]] [rn1_2.c2.c.m Gradient[16 x 1]] [rn1_3.c1.c.c.isd Gradient[16 x 1]] [rn1_3.c1.c.c.m Gradient[16 x 1]] [rn1_3.c2.c.isd Gradient[16 x 1]] [rn1_3.c2.c.m Gradient[16 x 1]] [rn2_1.c1.c.c.isd Gradient[32 x 1]] [rn2_1.c1.c.c.m Gradient[32 x 1]] [rn2_1.c2.c.isd Gradient[32 x 1]] [rn2_1.c2.c.m Gradient[32 x 1]] [rn2_1.c_proj.isd Gradient[32 x 1]] [rn2_1.c_proj.m Gradient[32 x 1]] [rn2_1_Wproj Gradient[32 x 16]] [rn2_2.c1.c.c.isd Gradient[32 x 1]] [rn2_2.c1.c.c.m Gradient[32 x 1]] [rn2_2.c2.c.isd Gradient[32 x 1]] [rn2_2.c2.c.m Gradient[32 x 1]] [rn2_3.c1.c.c.isd Gradient[32 x 1]] [rn2_3.c1.c.c.m Gradient[32 x 1]] [rn2_3.c2.c.isd Gradient[32 x 1]] [rn2_3.c2.c.m Gradient[32 x 1]] [rn3_1.c1.c.c.isd Gradient[64 x 1]] [rn3_1.c1.c.c.m Gradient[64 x 1]] [rn3_1.c2.c.isd Gradient[64 x 1]] [rn3_1.c2.c.m Gradient[64 x 1]] [rn3_1.c_proj.isd Gradient[64 x 1]] [rn3_1.c_proj.m Gradient[64 x 1]] [rn3_1_Wproj Gradient[64 x 32]] [rn3_2.c1.c.c.isd Gradient[64 x 1]] [rn3_2.c1.c.c.m Gradient[64 x 1]] [rn3_2.c2.c.isd Gradient[64 x 1]] [rn3_2.c2.c.m Gradient[64 x 1]] [rn3_3.c1.c.c.isd Gradient[64 x 1]] [rn3_3.c1.c.c.m Gradient[64 x 1]] [rn3_3.c2.c.isd Gradient[64 x 1]] [rn3_3.c2.c.m Gradient[64 x 1]] }
000000BA17D576B0: {[labels Value[10 x *]] }
000000BA17D588D0: {[features Value[32 x 32 x 3 x *]] }
000000BA18A54100: {[rn2_1.c1.c.W Value[32 x 144]] }
000000BA18A541A0: {[rn2_1.c1.c.c.b Value[32 x 1]] }
000000BA18A54560: {[rn1_2.c2.c.b Value[16 x 1]] }
000000BA18A546A0: {[rn1_3.c1.c.c.b Value[16 x 1]] }
000000BA18A54740: {[rn1_3.c1.c.c.m Value[16 x 1]] }
000000BA18A547E0: {[rn1_3.c1.c.c.isd Value[16 x 1]] }
000000BA18A54920: {[rn1_3.c2.c.sc Value[16 x 1]] }
000000BA18A549C0: {[rn1_3.c2.c.m Value[16 x 1]] }
000000BA18A54C40: {[rn1_3.c2.c.isd Value[16 x 1]] }
000000BA18A54E20: {[rn2_1_Wproj Value[32 x 16]] }
000000BA18A55320: {[rn1_2.c2.c.isd Value[16 x 1]] }
000000BA18A555A0: {[rn1_3.c2.W Value[16 x 144]] }
000000BA18A55780: {[rn1_3.c1.c.W Value[16 x 144]] }
000000BA18A55960: {[rn1_3.c1.c.c.sc Value[16 x 1]] }
000000BA18A55A00: {[rn1_2.c2.c.sc Value[16 x 1]] }
000000BA18A55BE0: {[rn1_3.c2.c.b Value[16 x 1]] }
000000BA18A55D20: {[rn1_2.c2.c.m Value[16 x 1]] }
000000BA18A55DC0: {[rn1_2.c2.W Value[16 x 144]] }
000000BA18F72860: {[rn2_1.c_proj.isd Value[32 x 1]] }
000000BA18F729A0: {[rn2_1.c_proj.m Value[32 x 1]] }
000000BA18F72B80: {[rn2_2.c1.c.c.b Value[32 x 1]] }
000000BA18F72C20: {[rn2_2.c1.c.c.sc Value[32 x 1]] }
000000BA18F72D60: {[rn2_2.c1.c.c.isd Value[32 x 1]] }
000000BA18F73120: {[rn2_2.c1.c.W Value[32 x 288]] }
000000BA18F73300: {[rn2_1.c2.c.b Value[32 x 1]] }
000000BA18F733A0: {[rn2_1.c1.c.c.sc Value[32 x 1]] }
000000BA18F73760: {[rn2_2.c2.c.b Value[32 x 1]] }
000000BA18F738A0: {[rn2_1.c_proj.b Value[32 x 1]] }
000000BA18F73BC0: {[rn2_2.c1.c.c.m Value[32 x 1]] }
000000BA18F73C60: {[rn2_1.c1.c.c.m Value[32 x 1]] }
000000BA18F73DA0: {[rn2_2.c2.W Value[32 x 288]] }
000000BA18F74020: {[rn2_1.c2.c.sc Value[32 x 1]] }
000000BA18F74160: {[rn2_1.c2.c.isd Value[32 x 1]] }
000000BA18F74200: {[rn2_1.c2.W Value[32 x 288]] }
000000BA18F742A0: {[rn2_1.c2.c.m Value[32 x 1]] }
000000BA18F74480: {[rn2_1.c_proj.sc Value[32 x 1]] }
000000BA18F745C0: {[rn2_1.c1.c.c.isd Value[32 x 1]] }
000000BA18F7A670: {[rn1_1.c1.c.c.b Value[16 x 1]] }
000000BA18F7A710: {[rn1_1.c1.c.c.m Value[16 x 1]] }
000000BA18F7A850: {[rn1_1.c2.c.b Value[16 x 1]] }
000000BA18F7A990: {[rn1_1.c1.c.c.sc Value[16 x 1]] }
000000BA18F7AA30: {[rn1_1.c2.c.sc Value[16 x 1]] }
000000BA18F7ACB0: {[rn1_2.c1.c.W Value[16 x 144]] }
000000BA18F7AD50: {[rn1_1.c1.c.W Value[16 x 144]] }
000000BA18F7ADF0: {[rn1_1.c2.c.m Value[16 x 1]] }
000000BA18F7AE90: {[conv1.c.c.b Value[16 x 1]] }
000000BA18F7AFD0: {[conv1.c.c.m Value[16 x 1]] }
000000BA18F7B430: {[rn1_2.c1.c.c.sc Value[16 x 1]] }
000000BA18F7B570: {[rn1_2.c1.c.c.m Value[16 x 1]] }
000000BA18F7B610: {[conv1.c.c.isd Value[16 x 1]] }
000000BA18F7B930: {[rn1_1.c2.c.isd Value[16 x 1]] }
000000BA18F7BA70: {[rn1_2.c1.c.c.b Value[16 x 1]] }
000000BA18F7BB10: {[rn1_1.c2.W Value[16 x 144]] }
000000BA18F7BCF0: {[conv1.c.W Value[16 x 27]] }
000000BA18F7BF70: {[rn1_2.c1.c.c.isd Value[16 x 1]] }
000000BA18F7C0B0: {[rn1_1.c1.c.c.isd Value[16 x 1]] }
000000BA18F7C290: {[conv1.c.c.sc Value[16 x 1]] }
000000BA18FAEFF0: {[rn2_3.c1.c.c.m Value[32 x 1]] }
000000BA18FAF1D0: {[rn2_3.c1.c.c.sc Value[32 x 1]] }
000000BA18FAF3B0: {[rn2_3.c2.c.b Value[32 x 1]] }
000000BA18FAF450: {[rn2_3.c2.c.isd Value[32 x 1]] }
000000BA18FAF4F0: {[rn2_3.c1.c.W Value[32 x 288]] }
000000BA18FAF8B0: {[rn2_3.c2.c.m Value[32 x 1]] }
000000BA18FAF9F0: {[rn2_3.c1.c.c.b Value[32 x 1]] }
000000BA18FAFA90: {[rn3_1.c1.c.W Value[64 x 288]] }
000000BA18FAFE50: {[rn3_1.c1.c.c.sc Value[64 x 1]] }
000000BA18FB00D0: {[rn3_1.c1.c.c.b Value[64 x 1]] }
000000BA18FB02B0: {[rn2_2.c2.c.isd Value[32 x 1]] }
000000BA18FB0350: {[rn2_3.c2.W Value[32 x 288]] }
000000BA18FB03F0: {[rn2_3.c2.c.sc Value[32 x 1]] }
000000BA18FB0490: {[rn3_1_Wproj Value[64 x 32]] }
000000BA18FB05D0: {[rn3_1.c1.c.c.m Value[64 x 1]] }
000000BA18FB07B0: {[rn3_1.c1.c.c.isd Value[64 x 1]] }
000000BA18FB0AD0: {[rn2_3.c1.c.c.isd Value[32 x 1]] }
000000BA18FB0B70: {[rn2_2.c2.c.sc Value[32 x 1]] }
000000BA18FB0CB0: {[rn2_2.c2.c.m Value[32 x 1]] }
000000BA18FB21E0: {[rn3_2.c2.c.m Value[64 x 1]] }
000000BA18FB2460: {[rn3_1.c2.c.sc Value[64 x 1]] }
000000BA18FB25A0: {[rn3_2.c1.c.W Value[64 x 576]] }
000000BA18FB2780: {[rn3_2.c1.c.c.b Value[64 x 1]] }
000000BA18FB28C0: {[rn3_1.c_proj.sc Value[64 x 1]] }
000000BA18FB2BE0: {[rn3_2.c2.c.b Value[64 x 1]] }
000000BA18FB2C80: {[rn3_2.c1.c.c.sc Value[64 x 1]] }
000000BA18FB2E60: {[rn3_1.c2.c.m Value[64 x 1]] }
000000BA18FB2FA0: {[rn3_1.c2.W Value[64 x 576]] }
000000BA18FB3040: {[rn3_1.c_proj.m Value[64 x 1]] }
000000BA18FB30E0: {[rn3_1.c_proj.isd Value[64 x 1]] }
000000BA18FB32C0: {[rn3_2.c2.c.sc Value[64 x 1]] }
000000BA18FB3540: {[rn3_1.c_proj.b Value[64 x 1]] }
000000BA18FB35E0: {[rn3_2.c2.c.isd Value[64 x 1]] }
000000BA18FB37C0: {[rn3_1.c2.c.b Value[64 x 1]] }
000000BA18FB3860: {[rn3_2.c1.c.c.m Value[64 x 1]] }
000000BA18FB3900: {[rn3_2.c2.W Value[64 x 576]] }
000000BA18FB3A40: {[rn3_1.c2.c.isd Value[64 x 1]] }
000000BA18FB3D60: {[rn3_2.c1.c.c.isd Value[64 x 1]] }
000000BA18FC6900: {[rn3_3.c1.c.c.isd Value[64 x 1]] }
000000BA18FC6CC0: {[rn3_3.c2.c.m Value[64 x 1]] }
000000BA18FC6FE0: {[rn3_3.c2.c.sc Value[64 x 1]] }
000000BA18FC7080: {[rn3_3.c2.c.isd Value[64 x 1]] }
000000BA18FC71C0: {[rn3_3.c1.c.c.sc Value[64 x 1]] }
000000BA18FC78A0: {[rn3_3.c1.c.W Value[64 x 576]] }
000000BA18FC7940: {[rn3_3.c1.c.c.b Value[64 x 1]] }
000000BA18FC7C60: {[rn3_3.c2.W Value[64 x 576]] }
000000BA18FC7D00: {[rn3_3.c2.c.b Value[64 x 1]] }
000000BA18FC7DA0: {[rn3_3.c1.c.c.m Value[64 x 1]] }
000000BA18FC7EE0: {[OutputNodes.W Value[10 x 1 x 1 x 64]] }
000000BA18FC7F80: {[OutputNodes.b Value[10]] }
000000BA228113F0: {[OutputNodes.z Value[10 x *]] }
000000BA22811670: {[CE Value[1]] }
000000BA22811710: {[conv1.c.c.c Value[32 x 32 x 16 x *]] }
000000BA22811850: {[conv1.c.c.y Value[32 x 32 x 16 x *]] }
000000BA228118F0: {[conv1.c.c.c Gradient[32 x 32 x 16 x *]] [conv1.y Value[32 x 32 x 16 x *]] }
000000BA22811990: {[rn1_1.c1.c.c.c Value[32 x 32 x 16 x *]] }
000000BA228124D0: {[Err Value[1]] }
000000BA22812930: {[conv1.c.c.y Gradient[32 x 32 x 16 x *]] }
000000BA228129D0: {[rn1_1.c1.c.c.y Value[32 x 32 x 16 x *]] }
000000BA25917900: {[rn3_2.c1.c.c.y Value[8 x 8 x 64 x *]] }
000000BA259179A0: {[rn2_1.c2.c.sc Gradient[32 x 1]] [rn2_1.c_proj.c Value[16 x 16 x 32 x *]] }
000000BA25917AE0: {[rn2_2.c2.c.c Value[16 x 16 x 32 x *]] }
000000BA25917B80: {[rn2_3.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_3.y Value[16 x 16 x 32 x *]] }
000000BA25917CC0: {[rn2_3.c2.c.sc Gradient[32 x 1]] [rn2_3.p Gradient[16 x 16 x 32 x *]] }
000000BA25917D60: {[rn3_1.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_1.y Value[8 x 8 x 64 x *]] }
000000BA25917E00: {[rn2_2.c2.W Gradient[32 x 288]] [rn2_3.c1.c.c.c Value[16 x 16 x 32 x *]] }
000000BA25917EA0: {[rn3_1.c1.c.c.y Value[8 x 8 x 64 x *]] }
000000BA25917F40: {[rn2_1.c2.W Gradient[32 x 288]] [rn2_2.c1.c.c.c Value[16 x 16 x 32 x *]] }
000000BA25917FE0: {[rn2_2.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
000000BA25918080: {[rn2_2.c1.c.W Gradient[32 x 288]] [rn2_2.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_2.p Value[16 x 16 x 32 x *]] }
000000BA25918120: {[rn2_1.c_proj.y Gradient[16 x 16 x 32 x *]] [rn2_2.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_2.c1.y Value[16 x 16 x 32 x *]] }
000000BA259181C0: {[rn2_3.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
000000BA25918260: {[rn2_2.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_2.y Value[16 x 16 x 32 x *]] }
000000BA25918300: {[rn2_3.c2.W Gradient[32 x 288]] [rn3_1.c1.c.c.c Value[8 x 8 x 64 x *]] }
000000BA259183A0: {[rn3_1.c2.c.y Value[8 x 8 x 64 x *]] }
000000BA259184E0: {[rn3_1.c1.c.c.b Gradient[64 x 1]] }
000000BA25918580: {[rn1_3.c1.c.c.sc Gradient[16 x 1]] [rn1_3.c1.y Gradient[32 x 32 x 16 x *]] [rn1_3.y Gradient[32 x 32 x 16 x *]] }
000000BA25918620: {[rn3_1.c2.c.b Gradient[64 x 1]] [rn3_1.c_proj.c Gradient[8 x 8 x 64 x *]] [rn3_1.p Value[8 x 8 x 64 x *]] }
000000BA259186C0: {[rn3_1.c2.W Gradient[64 x 576]] [rn3_2.c1.c.c.c Value[8 x 8 x 64 x *]] }
000000BA25918760: {[rn2_1.c1.c.c.y Value[16 x 16 x 32 x *]] }
000000BA25918800: {[rn2_2.c1.c.c.y Value[16 x 16 x 32 x *]] }
000000BA25918940: {[rn1_3.c2.c.b Gradient[16 x 1]] [rn2_1.c2.c.c Value[16 x 16 x 32 x *]] }
000000BA25918A80: {[rn2_1.c_proj.y Value[16 x 16 x 32 x *]] }
000000BA25918C60: {[rn2_1.c1.c.c.b Gradient[32 x 1]] }
000000BA25918D00: {[rn2_1.c2.c.b Gradient[32 x 1]] [rn2_1.c_proj.c Gradient[16 x 16 x 32 x *]] [rn2_1.p Value[16 x 16 x 32 x *]] }
000000BA25918E40: {[rn2_1.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_1.y Value[16 x 16 x 32 x *]] }
000000BA25918EE0: {[rn1_2.c1.c.c.sc Gradient[16 x 1]] [rn1_2.c1.y Gradient[32 x 32 x 16 x *]] [rn1_2.y Gradient[32 x 32 x 16 x *]] [rn2_1.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_1.c1.y Value[16 x 16 x 32 x *]] }
000000BA25918F80: {[rn2_2.c2.c.sc Gradient[32 x 1]] [rn2_2.p Gradient[16 x 16 x 32 x *]] }
000000BA25919020: {[rn2_2.c2.c.b Gradient[32 x 1]] [rn2_3.c2.c.c Value[16 x 16 x 32 x *]] }
000000BA259190C0: {[rn2_3.c2.c.y Value[16 x 16 x 32 x *]] }
000000BA25919160: {[rn2_1.c_proj.sc Gradient[32 x 1]] [rn2_1.p Gradient[16 x 16 x 32 x *]] }
000000BA25919200: {[rn2_1.c1.c.c.sc Gradient[32 x 1]] [rn2_1.c1.y Gradient[16 x 16 x 32 x *]] [rn2_1.y Gradient[16 x 16 x 32 x *]] [rn2_3.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_3.c1.y Value[16 x 16 x 32 x *]] }
000000BA259192A0: {[rn2_3.c1.c.c.b Gradient[32 x 1]] }
000000BA25919340: {[rn2_3.c1.c.W Gradient[32 x 288]] [rn2_3.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_3.p Value[16 x 16 x 32 x *]] }
000000BA25919520: {[rn2_2.c1.c.c.b Gradient[32 x 1]] }
000000BA259195C0: {[rn1_3.c2.c.sc Gradient[16 x 1]] [rn1_3.p Gradient[32 x 32 x 16 x *]] }
000000BA25919660: {[rn2_3.c1.c.c.y Value[16 x 16 x 32 x *]] }
000000BA25919700: {[rn2_1.c_proj.b Gradient[32 x 1]] }
000000BA259198E0: {[rn2_2.c2.c.y Value[16 x 16 x 32 x *]] }
000000BA25919980: {[rn2_1.c1.c.W Gradient[32 x 144]] [rn2_1.c2.c.c Gradient[16 x 16 x 32 x *]] }
000000BA25919A20: {[rn2_2.c1.c.c.sc Gradient[32 x 1]] [rn2_2.c1.y Gradient[16 x 16 x 32 x *]] [rn2_2.y Gradient[16 x 16 x 32 x *]] [rn3_1.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_1.c1.y Value[8 x 8 x 64 x *]] }
000000BA25919AC0: {[rn2_3.c2.c.b Gradient[32 x 1]] [rn3_1.c2.c.c Value[8 x 8 x 64 x *]] }
000000BA25919C00: {[rn3_1.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
000000BA25919CA0: {[rn2_1.c2.c.y Value[16 x 16 x 32 x *]] }
000000BA25919D40: {[rn2_1.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
000000BA25919E80: {[rn3_1.c2.c.sc Gradient[64 x 1]] [rn3_1.c_proj.c Value[8 x 8 x 64 x *]] }
000000BA25919F20: {[rn3_1.c1.c.W Gradient[64 x 288]] [rn3_1.c2.c.c Gradient[8 x 8 x 64 x *]] }
000000BA25919FC0: {[rn3_1.c_proj.y Value[8 x 8 x 64 x *]] }
000000BA2591A060: {[rn3_1.c_proj.sc Gradient[64 x 1]] [rn3_1.p Gradient[8 x 8 x 64 x *]] }
000000BA2591A100: {[rn1_3.c2.W Gradient[16 x 144]] [rn2_1.c1.c.c.c Value[16 x 16 x 32 x *]] }
000000BA2591A1A0: {[rn1_2.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
000000BA2591A240: {[rn1_3.c1.c.W Gradient[16 x 144]] [rn1_3.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_3.p Value[32 x 32 x 16 x *]] }
000000BA2591A4C0: {[conv1.c.W Gradient[16 x 27]] [rn1_1.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_1.c1.y Value[32 x 32 x 16 x *]] }
000000BA2591A560: {[rn1_2.c1.c.c.y Value[32 x 32 x 16 x *]] }
000000BA2591A600: {[conv1.c.c.b Gradient[16 x 1]] [rn1_1.c2.c.c Value[32 x 32 x 16 x *]] }
000000BA2591A6A0: {[rn1_2.c2.c.y Value[32 x 32 x 16 x *]] }
000000BA2591A740: {[rn1_2.c1.c.c.b Gradient[16 x 1]] }
000000BA2591A7E0: {[rn1_1.c2.c.y Value[32 x 32 x 16 x *]] }
000000BA2591A880: {[rn1_3.c1.c.c.y Value[32 x 32 x 16 x *]] }
000000BA2591A920: {[conv1.c.c.sc Gradient[16 x 1]] [conv1.y Gradient[32 x 32 x 16 x *]] [rn1_2.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_2.c1.y Value[32 x 32 x 16 x *]] }
000000BA2591ABA0: {[rn1_1.c2.c.b Gradient[16 x 1]] [rn1_2.c2.c.c Value[32 x 32 x 16 x *]] }
000000BA2591AC40: {[rn1_3.c2.c.y Value[32 x 32 x 16 x *]] }
000000BA2591ACE0: {[rn1_3.c1.c.c.b Gradient[16 x 1]] }
000000BA2591AD80: {[rn1_1.c2.c.sc Gradient[16 x 1]] [rn1_1.p Gradient[32 x 32 x 16 x *]] }
000000BA2591AEC0: {[rn1_2.c2.W Gradient[16 x 144]] [rn1_3.c1.c.c.c Value[32 x 32 x 16 x *]] }
000000BA2591AF60: {[rn1_1.c2.W Gradient[16 x 144]] [rn1_2.c1.c.c.c Value[32 x 32 x 16 x *]] }
000000BA2591B000: {[rn1_2.c1.c.W Gradient[16 x 144]] [rn1_2.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_2.p Value[32 x 32 x 16 x *]] }
000000BA2591B0A0: {[rn1_2.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_2.y Value[32 x 32 x 16 x *]] }
000000BA2591B1E0: {[rn1_1.c1.c.c.b Gradient[16 x 1]] }
000000BA2591B280: {[rn1_1.c1.c.W Gradient[16 x 144]] [rn1_1.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_1.p Value[32 x 32 x 16 x *]] }
000000BA2591B320: {[rn1_2.c2.c.sc Gradient[16 x 1]] [rn1_2.p Gradient[32 x 32 x 16 x *]] }
000000BA2591B3C0: {[rn1_1.c1.c.c.sc Gradient[16 x 1]] [rn1_1.c1.y Gradient[32 x 32 x 16 x *]] [rn1_1.y Gradient[32 x 32 x 16 x *]] [rn1_3.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_3.c1.y Value[32 x 32 x 16 x *]] }
000000BA2591B460: {[rn1_1.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
000000BA2591B500: {[rn1_1.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_1.y Value[32 x 32 x 16 x *]] }
000000BA2591B5A0: {[rn1_2.c2.c.b Gradient[16 x 1]] [rn1_3.c2.c.c Value[32 x 32 x 16 x *]] }
000000BA2591B6E0: {[rn1_3.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
000000BA2591B780: {[rn1_3.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_3.y Value[32 x 32 x 16 x *]] }
000000BA25934AB0: {[rn2_3.c1.c.c.sc Gradient[32 x 1]] [rn2_3.c1.y Gradient[16 x 16 x 32 x *]] [rn2_3.y Gradient[16 x 16 x 32 x *]] }
000000BA25934B50: {[rn3_2.c1.c.W Gradient[64 x 576]] [rn3_2.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_2.p Value[8 x 8 x 64 x *]] }
000000BA25934BF0: {[rn3_2.c2.c.sc Gradient[64 x 1]] [rn3_2.p Gradient[8 x 8 x 64 x *]] }
000000BA25934C90: {[rn3_3.c1.c.W Gradient[64 x 576]] [rn3_3.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_3.p Value[8 x 8 x 64 x *]] }
000000BA259350F0: {[rn3_1.c1.c.c.sc Gradient[64 x 1]] [rn3_1.c1.y Gradient[8 x 8 x 64 x *]] [rn3_1.y Gradient[8 x 8 x 64 x *]] [rn3_3.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_3.c1.y Value[8 x 8 x 64 x *]] }
000000BA25935190: {[rn3_3.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_3.y Value[8 x 8 x 64 x *]] }
000000BA259352D0: {[rn3_3.c1.c.c.b Gradient[64 x 1]] }
000000BA25935730: {[rn3_2.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
000000BA259359B0: {[rn3_3.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
000000BA25935A50: {[OutputNodes.b Gradient[10]] }
000000BA25935AF0: {[rn3_2.c2.W Gradient[64 x 576]] [rn3_3.c1.c.c.c Value[8 x 8 x 64 x *]] }
000000BA25935B90: {[OutputNodes.t Value[10 x *]] [rn3_3.c1.c.c.sc Gradient[64 x 1]] [rn3_3.c1.y Gradient[8 x 8 x 64 x *]] [rn3_3.y Gradient[8 x 8 x 64 x *]] }
000000BA25935C30: {[rn3_3.c2.c.b Gradient[64 x 1]] }
000000BA25935D70: {[OutputNodes.W Gradient[10 x 1 x 1 x 64]] [OutputNodes.z Gradient[10 x *]] }
000000BA25935E10: {[rn3_2.c1.c.c.b Gradient[64 x 1]] }
000000BA25936090: {[pool Gradient[1 x 1 x 64 x *]] [rn3_3.c2.W Gradient[64 x 576]] }
000000BA25936310: {[rn3_2.c2.c.b Gradient[64 x 1]] [rn3_3.c2.c.c Value[8 x 8 x 64 x *]] }
000000BA259364F0: {[OutputNodes.t Gradient[10 x *]] [rn3_2.c1.c.c.sc Gradient[64 x 1]] [rn3_2.c1.y Gradient[8 x 8 x 64 x *]] [rn3_2.y Gradient[8 x 8 x 64 x *]] }
000000BA259366D0: {[rn3_1.c_proj.b Gradient[64 x 1]] }
000000BA259368B0: {[rn3_3.c2.c.y Value[8 x 8 x 64 x *]] }
000000BA25936950: {[rn3_2.c2.c.c Value[8 x 8 x 64 x *]] }
000000BA259369F0: {[rn3_3.c1.c.c.y Value[8 x 8 x 64 x *]] }
000000BA25936A90: {[pool Value[1 x 1 x 64 x *]] [rn3_3.c2.c.sc Gradient[64 x 1]] [rn3_3.p Gradient[8 x 8 x 64 x *]] }
000000BA25936B30: {[rn3_2.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_2.y Value[8 x 8 x 64 x *]] }
000000BA25937030: {[rn3_1.c_proj.y Gradient[8 x 8 x 64 x *]] [rn3_2.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_2.c1.y Value[8 x 8 x 64 x *]] }
000000BA259370D0: {[rn3_2.c2.c.y Value[8 x 8 x 64 x *]] }
000000BA25937170: {[CE Gradient[1]] }

07/14/2016 05:26:01: No PreCompute nodes found, skipping PreCompute step.

07/14/2016 05:26:01: Starting Epoch 1: learning rate per sample = 0.062500  effective momentum = 0.900000  momentum as time constant = 151.9 samples

07/14/2016 05:26:01: Starting minibatch loop.
07/14/2016 05:26:03: Finished Epoch[ 1 of 1]: [Training] CE = 2.56269813 * 128; Err = 0.96093750 * 128; totalSamplesSeen = 128; learningRatePerSample = 0.0625; epochTime=2.01885s
07/14/2016 05:26:03: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models/03_ResNet'
07/14/2016 05:26:03: CNTKCommandTrainEnd: Train

07/14/2016 05:26:03: Action "train" complete.


07/14/2016 05:26:03: ##############################################################################
07/14/2016 05:26:03: #                                                                            #
07/14/2016 05:26:03: # Action "test"                                                              #
07/14/2016 05:26:03: #                                                                            #
07/14/2016 05:26:03: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 184 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 1 x 1 x 64]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *1] -> [32 x 32 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_3.y) : [32 x 144], [32 x 32 x 16 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_3.y) : [32 x 16], [32 x 32 x 16 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_3.y) : [64 x 288], [16 x 16 x 32 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_3.y) : [64 x 32], [16 x 16 x 32 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> pool = AveragePooling (rn3_3.y) : [8 x 8 x 64 x *1] -> [1 x 1 x 64 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 75 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


109 out of 184 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 1 x 1 x 64]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.c.W Gradient[16 x 27]] [conv1.c.c.b Gradient[16 x 1]] [conv1.c.c.c Gradient[32 x 32 x 16 x *1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv1.c.c.sc Gradient[16 x 1]] [conv1.c.c.y Gradient[32 x 32 x 16 x *1]] [conv1.y Gradient[32 x 32 x 16 x *1]] [features Gradient[32 x 32 x 3 x *1]] [labels Gradient[10 x *1]] [pool Gradient[1 x 1 x 64 x *1]] [rn1_1.c1.c.W Gradient[16 x 144]] [rn1_1.c1.c.c.b Gradient[16 x 1]] [rn1_1.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_1.c1.c.c.isd Gradient[16 x 1]] [rn1_1.c1.c.c.m Gradient[16 x 1]] [rn1_1.c1.c.c.sc Gradient[16 x 1]] [rn1_1.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_1.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_1.c2.W Gradient[16 x 144]] [rn1_1.c2.c.b Gradient[16 x 1]] [rn1_1.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_1.c2.c.isd Gradient[16 x 1]] [rn1_1.c2.c.m Gradient[16 x 1]] [rn1_1.c2.c.sc Gradient[16 x 1]] [rn1_1.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_1.p Gradient[32 x 32 x 16 x *1]] [rn1_1.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.c.W Gradient[16 x 144]] [rn1_2.c1.c.c.b Gradient[16 x 1]] [rn1_2.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.c.c.isd Gradient[16 x 1]] [rn1_2.c1.c.c.m Gradient[16 x 1]] [rn1_2.c1.c.c.sc Gradient[16 x 1]] [rn1_2.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c2.W Gradient[16 x 144]] [rn1_2.c2.c.b Gradient[16 x 1]] [rn1_2.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_2.c2.c.isd Gradient[16 x 1]] [rn1_2.c2.c.m Gradient[16 x 1]] [rn1_2.c2.c.sc Gradient[16 x 1]] [rn1_2.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_2.p Gradient[32 x 32 x 16 x *1]] [rn1_2.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.c.W Gradient[16 x 144]] [rn1_3.c1.c.c.b Gradient[16 x 1]] [rn1_3.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.c.c.isd Gradient[16 x 1]] [rn1_3.c1.c.c.m Gradient[16 x 1]] [rn1_3.c1.c.c.sc Gradient[16 x 1]] [rn1_3.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c2.W Gradient[16 x 144]] [rn1_3.c2.c.b Gradient[16 x 1]] [rn1_3.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_3.c2.c.isd Gradient[16 x 1]] [rn1_3.c2.c.m Gradient[16 x 1]] [rn1_3.c2.c.sc Gradient[16 x 1]] [rn1_3.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_3.p Gradient[32 x 32 x 16 x *1]] [rn1_3.y Gradient[32 x 32 x 16 x *1]] [rn2_1.c1.c.W Gradient[32 x 144]] [rn2_1.c1.c.c.b Gradient[32 x 1]] [rn2_1.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c1.c.c.isd Gradient[32 x 1]] [rn2_1.c1.c.c.m Gradient[32 x 1]] [rn2_1.c1.c.c.sc Gradient[32 x 1]] [rn2_1.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c2.W Gradient[32 x 288]] [rn2_1.c2.c.b Gradient[32 x 1]] [rn2_1.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c2.c.isd Gradient[32 x 1]] [rn2_1.c2.c.m Gradient[32 x 1]] [rn2_1.c2.c.sc Gradient[32 x 1]] [rn2_1.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c_proj.b Gradient[32 x 1]] [rn2_1.c_proj.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c_proj.isd Gradient[32 x 1]] [rn2_1.c_proj.m Gradient[32 x 1]] [rn2_1.c_proj.sc Gradient[32 x 1]] [rn2_1.c_proj.y Gradient[16 x 16 x 32 x *1]] [rn2_1.p Gradient[16 x 16 x 32 x *1]] [rn2_1.y Gradient[16 x 16 x 32 x *1]] [rn2_1_Wproj Gradient[32 x 16]] [rn2_2.c1.c.W Gradient[32 x 288]] [rn2_2.c1.c.c.b Gradient[32 x 1]] [rn2_2.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_2.c1.c.c.isd Gradient[32 x 1]] [rn2_2.c1.c.c.m Gradient[32 x 1]] [rn2_2.c1.c.c.sc Gradient[32 x 1]] [rn2_2.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_2.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_2.c2.W Gradient[32 x 288]] [rn2_2.c2.c.b Gradient[32 x 1]] [rn2_2.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_2.c2.c.isd Gradient[32 x 1]] [rn2_2.c2.c.m Gradient[32 x 1]] [rn2_2.c2.c.sc Gradient[32 x 1]] [rn2_2.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_2.p Gradient[16 x 16 x 32 x *1]] [rn2_2.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.c.W Gradient[32 x 288]] [rn2_3.c1.c.c.b Gradient[32 x 1]] [rn2_3.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.c.c.isd Gradient[32 x 1]] [rn2_3.c1.c.c.m Gradient[32 x 1]] [rn2_3.c1.c.c.sc Gradient[32 x 1]] [rn2_3.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c2.W Gradient[32 x 288]] [rn2_3.c2.c.b Gradient[32 x 1]] [rn2_3.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_3.c2.c.isd Gradient[32 x 1]] [rn2_3.c2.c.m Gradient[32 x 1]] [rn2_3.c2.c.sc Gradient[32 x 1]] [rn2_3.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_3.p Gradient[16 x 16 x 32 x *1]] [rn2_3.y Gradient[16 x 16 x 32 x *1]] [rn3_1.c1.c.W Gradient[64 x 288]] [rn3_1.c1.c.c.b Gradient[64 x 1]] [rn3_1.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c1.c.c.isd Gradient[64 x 1]] [rn3_1.c1.c.c.m Gradient[64 x 1]] [rn3_1.c1.c.c.sc Gradient[64 x 1]] [rn3_1.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c2.W Gradient[64 x 576]] [rn3_1.c2.c.b Gradient[64 x 1]] [rn3_1.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c2.c.isd Gradient[64 x 1]] [rn3_1.c2.c.m Gradient[64 x 1]] [rn3_1.c2.c.sc Gradient[64 x 1]] [rn3_1.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c_proj.b Gradient[64 x 1]] [rn3_1.c_proj.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c_proj.isd Gradient[64 x 1]] [rn3_1.c_proj.m Gradient[64 x 1]] [rn3_1.c_proj.sc Gradient[64 x 1]] [rn3_1.c_proj.y Gradient[8 x 8 x 64 x *1]] [rn3_1.p Gradient[8 x 8 x 64 x *1]] [rn3_1.y Gradient[8 x 8 x 64 x *1]] [rn3_1_Wproj Gradient[64 x 32]] [rn3_2.c1.c.W Gradient[64 x 576]] [rn3_2.c1.c.c.b Gradient[64 x 1]] [rn3_2.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_2.c1.c.c.isd Gradient[64 x 1]] [rn3_2.c1.c.c.m Gradient[64 x 1]] [rn3_2.c1.c.c.sc Gradient[64 x 1]] [rn3_2.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_2.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_2.c2.W Gradient[64 x 576]] [rn3_2.c2.c.b Gradient[64 x 1]] [rn3_2.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_2.c2.c.isd Gradient[64 x 1]] [rn3_2.c2.c.m Gradient[64 x 1]] [rn3_2.c2.c.sc Gradient[64 x 1]] [rn3_2.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_2.p Gradient[8 x 8 x 64 x *1]] [rn3_2.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.c.W Gradient[64 x 576]] [rn3_3.c1.c.c.b Gradient[64 x 1]] [rn3_3.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.c.c.isd Gradient[64 x 1]] [rn3_3.c1.c.c.m Gradient[64 x 1]] [rn3_3.c1.c.c.sc Gradient[64 x 1]] [rn3_3.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c2.W Gradient[64 x 576]] [rn3_3.c2.c.b Gradient[64 x 1]] [rn3_3.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_3.c2.c.isd Gradient[64 x 1]] [rn3_3.c2.c.m Gradient[64 x 1]] [rn3_3.c2.c.sc Gradient[64 x 1]] [rn3_3.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_3.p Gradient[8 x 8 x 64 x *1]] [rn3_3.y Gradient[8 x 8 x 64 x *1]] }
000000BA00A3B080: {[rn3_3.y Value[8 x 8 x 64 x *1]] }
000000BA00A3B1C0: {[rn3_3.c1.c.c.y Value[8 x 8 x 64 x *1]] }
000000BA00A3B3A0: {[rn3_2.c2.c.c Value[8 x 8 x 64 x *1]] }
000000BA00A3B4E0: {[rn2_3.p Value[16 x 16 x 32 x *1]] }
000000BA00A3B940: {[OutputNodes.z Value[10 x *1]] }
000000BA00A3BA80: {[rn3_1.p Value[8 x 8 x 64 x *1]] }
000000BA00A3BB20: {[rn3_1.c_proj.y Value[8 x 8 x 64 x *1]] }
000000BA00A3BC60: {[pool Value[1 x 1 x 64 x *1]] }
000000BA00A3BD00: {[OutputNodes.t Value[10 x *1]] }
000000BA00A3BF80: {[rn3_2.c2.c.y Value[8 x 8 x 64 x *1]] }
000000BA00A3C160: {[rn3_1.c1.c.c.c Value[8 x 8 x 64 x *1]] }
000000BA00A3C3E0: {[rn3_2.c1.c.c.y Value[8 x 8 x 64 x *1]] }
000000BA00A3C480: {[rn3_1.c1.y Value[8 x 8 x 64 x *1]] }
000000BA00A3C520: {[rn2_3.y Value[16 x 16 x 32 x *1]] }
000000BA00A3C5C0: {[rn3_1.c2.c.c Value[8 x 8 x 64 x *1]] }
000000BA00A3C660: {[rn3_1.c_proj.c Value[8 x 8 x 64 x *1]] }
000000BA00A3C700: {[rn2_3.c2.c.c Value[16 x 16 x 32 x *1]] }
000000BA00A3C7A0: {[rn3_3.c1.c.c.c Value[8 x 8 x 64 x *1]] }
000000BA00A3C8E0: {[rn3_3.c2.c.y Value[8 x 8 x 64 x *1]] }
000000BA00A3CCA0: {[rn2_3.c1.y Value[16 x 16 x 32 x *1]] }
000000BA00A3CD40: {[rn3_2.c1.c.c.c Value[8 x 8 x 64 x *1]] }
000000BA00A3CDE0: {[rn3_1.y Value[8 x 8 x 64 x *1]] }
000000BA00A3CE80: {[rn2_3.c2.c.y Value[16 x 16 x 32 x *1]] }
000000BA00A3CF20: {[rn3_2.y Value[8 x 8 x 64 x *1]] }
000000BA00A3D060: {[rn3_1.c2.c.y Value[8 x 8 x 64 x *1]] }
000000BA00A3D100: {[rn3_3.c2.c.c Value[8 x 8 x 64 x *1]] }
000000BA00A3D240: {[rn3_2.p Value[8 x 8 x 64 x *1]] }
000000BA00A3D380: {[rn3_2.c1.y Value[8 x 8 x 64 x *1]] }
000000BA00A3D420: {[rn3_3.c1.y Value[8 x 8 x 64 x *1]] }
000000BA00A3D4C0: {[rn3_3.p Value[8 x 8 x 64 x *1]] }
000000BA00A3D6A0: {[rn3_1.c1.c.c.y Value[8 x 8 x 64 x *1]] }
000000BA00A40300: {[rn2_2.c1.c.c.c Value[16 x 16 x 32 x *1]] }
000000BA00A403A0: {[rn1_3.c1.y Value[32 x 32 x 16 x *1]] }
000000BA00A404E0: {[rn2_1.c2.c.c Value[16 x 16 x 32 x *1]] }
000000BA00A40620: {[rn1_1.p Value[32 x 32 x 16 x *1]] }
000000BA00A40940: {[rn1_1.c2.c.c Value[32 x 32 x 16 x *1]] }
000000BA00A40A80: {[conv1.y Value[32 x 32 x 16 x *1]] }
000000BA00A40B20: {[rn1_1.c1.y Value[32 x 32 x 16 x *1]] }
000000BA00A40BC0: {[rn1_1.c1.c.c.c Value[32 x 32 x 16 x *1]] }
000000BA00A40C60: {[rn1_2.c1.y Value[32 x 32 x 16 x *1]] }
000000BA00A40D00: {[rn1_1.y Value[32 x 32 x 16 x *1]] }
000000BA00A40F80: {[rn2_1.c2.c.y Value[16 x 16 x 32 x *1]] }
000000BA00A41020: {[rn1_2.c2.c.y Value[32 x 32 x 16 x *1]] }
000000BA00A41160: {[rn1_3.y Value[32 x 32 x 16 x *1]] }
000000BA00A41200: {[rn1_3.c1.c.c.c Value[32 x 32 x 16 x *1]] }
000000BA00A413E0: {[rn1_3.c2.c.y Value[32 x 32 x 16 x *1]] }
000000BA00A41480: {[rn1_3.p Value[32 x 32 x 16 x *1]] }
000000BA00A41520: {[rn2_1.c1.c.c.y Value[16 x 16 x 32 x *1]] }
000000BA00A415C0: {[rn1_2.c1.c.c.c Value[32 x 32 x 16 x *1]] }
000000BA00A418E0: {[rn2_2.c1.c.c.y Value[16 x 16 x 32 x *1]] }
000000BA00A41A20: {[rn1_2.c1.c.c.y Value[32 x 32 x 16 x *1]] }
000000BA00A41C00: {[rn1_2.p Value[32 x 32 x 16 x *1]] }
000000BA00A41D40: {[rn2_1.c1.c.c.c Value[16 x 16 x 32 x *1]] }
000000BA00A41DE0: {[rn1_2.y Value[32 x 32 x 16 x *1]] }
000000BA00A41F20: {[rn2_1.c_proj.c Value[16 x 16 x 32 x *1]] }
000000BA00A41FC0: {[rn2_1.p Value[16 x 16 x 32 x *1]] }
000000BA00A42240: {[rn1_3.c1.c.c.y Value[32 x 32 x 16 x *1]] }
000000BA00A422E0: {[rn1_1.c1.c.c.y Value[32 x 32 x 16 x *1]] }
000000BA00A42420: {[rn1_3.c2.c.c Value[32 x 32 x 16 x *1]] }
000000BA00A424C0: {[rn1_1.c2.c.y Value[32 x 32 x 16 x *1]] }
000000BA00A42560: {[rn2_1.c1.y Value[16 x 16 x 32 x *1]] }
000000BA00A42600: {[rn1_2.c2.c.c Value[32 x 32 x 16 x *1]] }
000000BA00A42740: {[rn2_1.c_proj.y Value[16 x 16 x 32 x *1]] }
000000BA00A427E0: {[rn2_1.y Value[16 x 16 x 32 x *1]] }
000000BA00A42880: {[rn2_2.p Value[16 x 16 x 32 x *1]] }
000000BA00A42920: {[rn2_3.c1.c.c.c Value[16 x 16 x 32 x *1]] }
000000BA00A429C0: {[rn2_2.c2.c.c Value[16 x 16 x 32 x *1]] }
000000BA00A42BA0: {[rn2_2.y Value[16 x 16 x 32 x *1]] }
000000BA00A42CE0: {[rn2_3.c1.c.c.y Value[16 x 16 x 32 x *1]] }
000000BA00A42D80: {[rn2_2.c2.c.y Value[16 x 16 x 32 x *1]] }
000000BA00A42EC0: {[rn2_2.c1.y Value[16 x 16 x 32 x *1]] }
000000BA1731A690: {[rn2_3.c2.W Value[32 x 288]] }
000000BA17D57250: {[rn2_3.c2.c.isd Value[32 x 1]] }
000000BA17D576B0: {[rn2_3.c2.c.m Value[32 x 1]] }
000000BA17D58150: {[rn2_3.c2.c.b Value[32 x 1]] }
000000BA18FC62C0: {[rn2_1.c_proj.sc Value[32 x 1]] }
000000BA18FC69A0: {[rn2_2.c1.c.c.isd Value[32 x 1]] }
000000BA18FC6C20: {[rn2_2.c1.c.c.b Value[32 x 1]] }
000000BA18FC6E00: {[rn2_2.c2.c.isd Value[32 x 1]] }
000000BA18FC6EA0: {[rn2_2.c2.c.m Value[32 x 1]] }
000000BA18FC6FE0: {[rn2_2.c2.c.sc Value[32 x 1]] }
000000BA18FC73A0: {[rn2_2.c2.W Value[32 x 288]] }
000000BA18FC76C0: {[rn2_2.c1.c.c.sc Value[32 x 1]] }
000000BA18FC7800: {[rn2_2.c1.c.W Value[32 x 288]] }
000000BA18FC78A0: {[rn2_1_Wproj Value[32 x 16]] }
000000BA18FC7BC0: {[rn2_2.c2.c.b Value[32 x 1]] }
000000BA18FC7DA0: {[rn2_1.c_proj.m Value[32 x 1]] }
000000BA18FC7E40: {[rn2_3.c1.c.c.b Value[32 x 1]] }
000000BA18FC7EE0: {[rn2_2.c1.c.c.m Value[32 x 1]] }
000000BA18FD6770: {[rn2_3.c2.c.sc Value[32 x 1]] }
000000BA22811710: {[rn2_3.c1.c.c.isd Value[32 x 1]] }
000000BA22811850: {[rn2_3.c1.c.c.sc Value[32 x 1]] }
000000BA22812570: {[rn2_3.c1.c.W Value[32 x 288]] }
000000BA22812890: {[rn2_3.c1.c.c.m Value[32 x 1]] }
000000BA25934BF0: {[conv1.c.c.b Value[16 x 1]] }
000000BA25934D30: {[conv1.c.W Value[16 x 27]] }
000000BA25935230: {[rn1_2.c1.c.c.sc Value[16 x 1]] }
000000BA25935370: {[conv1.c.c.sc Value[16 x 1]] }
000000BA25935550: {[rn1_1.c2.c.isd Value[16 x 1]] }
000000BA25935690: {[rn1_1.c1.c.W Value[16 x 144]] }
000000BA25935730: {[rn1_1.c2.c.sc Value[16 x 1]] }
000000BA259357D0: {[rn1_1.c2.W Value[16 x 144]] }
000000BA25935AF0: {[rn1_1.c1.c.c.sc Value[16 x 1]] }
000000BA25935B90: {[labels Value[10 x *1]] }
000000BA25935D70: {[conv1.c.c.m Value[16 x 1]] }
000000BA25935E10: {[conv1.c.c.isd Value[16 x 1]] }
000000BA25935EB0: {[rn1_1.c1.c.c.isd Value[16 x 1]] }
000000BA259363B0: {[features Value[32 x 32 x 3 x *1]] }
000000BA25936450: {[rn1_1.c1.c.c.m Value[16 x 1]] }
000000BA259364F0: {[rn1_2.c1.c.c.b Value[16 x 1]] }
000000BA25936630: {[OutputNodes.b Value[10]] }
000000BA259366D0: {[rn1_1.c2.c.b Value[16 x 1]] }
000000BA25936770: {[rn1_2.c1.c.c.isd Value[16 x 1]] }
000000BA259368B0: {[rn1_2.c1.c.c.m Value[16 x 1]] }
000000BA259369F0: {[OutputNodes.W Value[10 x 1 x 1 x 64]] }
000000BA25936D10: {[rn1_1.c1.c.c.b Value[16 x 1]] }
000000BA259370D0: {[rn1_1.c2.c.m Value[16 x 1]] }
000000BA25937710: {[rn1_2.c2.c.sc Value[16 x 1]] }
000000BA25937850: {[rn1_3.c1.c.W Value[16 x 144]] }
000000BA25937A30: {[rn1_3.c2.c.b Value[16 x 1]] }
000000BA25937C10: {[rn1_3.c2.c.isd Value[16 x 1]] }
000000BA25937D50: {[rn1_3.c2.c.m Value[16 x 1]] }
000000BA25937F30: {[rn1_3.c2.c.sc Value[16 x 1]] }
000000BA25938250: {[rn1_2.c1.c.W Value[16 x 144]] }
000000BA25938430: {[rn1_3.c1.c.c.sc Value[16 x 1]] }
000000BA25938750: {[rn1_3.c1.c.c.m Value[16 x 1]] }
000000BA25938D90: {[rn1_2.c2.c.isd Value[16 x 1]] }
000000BA259390B0: {[rn1_3.c1.c.c.b Value[16 x 1]] }
000000BA25939150: {[rn1_3.c1.c.c.isd Value[16 x 1]] }
000000BA259391F0: {[rn1_2.c2.c.b Value[16 x 1]] }
000000BA259396F0: {[rn1_2.c2.c.m Value[16 x 1]] }
000000BA25939A10: {[rn1_2.c2.W Value[16 x 144]] }
000000BA2593A190: {[rn2_1.c1.c.c.m Value[32 x 1]] }
000000BA2593A370: {[rn2_1.c1.c.c.sc Value[32 x 1]] }
000000BA2593A4B0: {[rn2_1.c1.c.c.isd Value[32 x 1]] }
000000BA2593A550: {[rn2_1.c1.c.W Value[32 x 144]] }
000000BA2593A690: {[rn2_1.c2.c.b Value[32 x 1]] }
000000BA2593B310: {[rn1_3.c2.W Value[16 x 144]] }
000000BA2593B6D0: {[rn2_1.c2.c.isd Value[32 x 1]] }
000000BA2593B770: {[rn2_1.c1.c.c.b Value[32 x 1]] }
000000BA2593C530: {[rn2_1.c2.W Value[32 x 288]] }
000000BA2593C670: {[rn2_1.c2.c.m Value[32 x 1]] }
000000BA2593C710: {[rn2_1.c_proj.b Value[32 x 1]] }
000000BA2593C7B0: {[rn2_1.c_proj.isd Value[32 x 1]] }
000000BA2593C990: {[rn2_1.c2.c.sc Value[32 x 1]] }
000000BA7D745120: {[rn3_1.c2.W Value[64 x 576]] }
000000BA7D7451C0: {[rn3_1.c2.c.m Value[64 x 1]] }
000000BA7D745440: {[rn3_2.c1.c.c.b Value[64 x 1]] }
000000BA7D745580: {[rn3_2.c2.c.b Value[64 x 1]] }
000000BA7D7456C0: {[rn3_1.c_proj.m Value[64 x 1]] }
000000BA7D745760: {[rn3_2.c2.c.isd Value[64 x 1]] }
000000BA7D7458A0: {[rn3_1.c_proj.sc Value[64 x 1]] }
000000BA7D745A80: {[rn3_1.c2.c.isd Value[64 x 1]] }
000000BA7D745B20: {[rn3_2.c1.c.c.isd Value[64 x 1]] }
000000BA7D745C60: {[rn3_2.c2.c.sc Value[64 x 1]] }
000000BA7D745F80: {[rn3_2.c2.W Value[64 x 576]] }
000000BA7D746020: {[rn3_1.c1.c.c.sc Value[64 x 1]] }
000000BA7D746200: {[rn3_2.c1.c.W Value[64 x 576]] }
000000BA7D746340: {[rn3_1.c1.c.c.m Value[64 x 1]] }
000000BA7D7463E0: {[rn3_1_Wproj Value[64 x 32]] }
000000BA7D746480: {[rn3_2.c2.c.m Value[64 x 1]] }
000000BA7D746660: {[rn3_1.c1.c.c.isd Value[64 x 1]] }
000000BA7D7468E0: {[rn3_1.c_proj.isd Value[64 x 1]] }
000000BA7D746A20: {[rn3_1.c2.c.b Value[64 x 1]] }
000000BA7D746C00: {[rn3_1.c_proj.b Value[64 x 1]] }
000000BA7D7471A0: {[rn3_1.c1.c.c.b Value[64 x 1]] }
000000BA7D747240: {[rn3_1.c2.c.sc Value[64 x 1]] }
000000BA7D747560: {[rn3_2.c1.c.c.m Value[64 x 1]] }
000000BA7D747600: {[rn3_2.c1.c.c.sc Value[64 x 1]] }
000000BA7D7477E0: {[rn3_1.c1.c.W Value[64 x 288]] }
000000BA7D747880: {[CE Value[1]] }
000000BA7D747920: {[conv1.c.c.c Value[32 x 32 x 16 x *1]] }
000000BA7D7479C0: {[conv1.c.c.y Value[32 x 32 x 16 x *1]] }
000000BA7D747B00: {[rn3_3.c1.c.c.sc Value[64 x 1]] }
000000BA7D748140: {[rn3_3.c2.c.m Value[64 x 1]] }
000000BA7D7481E0: {[rn3_3.c1.c.W Value[64 x 576]] }
000000BA7D748320: {[rn3_3.c1.c.c.b Value[64 x 1]] }
000000BA7D748460: {[rn3_3.c1.c.c.isd Value[64 x 1]] }
000000BA7D748640: {[rn3_3.c1.c.c.m Value[64 x 1]] }
000000BA7D748780: {[rn3_3.c2.c.sc Value[64 x 1]] }
000000BA7D748820: {[rn3_3.c2.c.isd Value[64 x 1]] }
000000BA7D748A00: {[rn3_3.c2.W Value[64 x 576]] }
000000BA7D748C80: {[Err Value[1]] }
000000BA7D748DC0: {[rn3_3.c2.c.b Value[64 x 1]] }

07/14/2016 05:26:05: Minibatch[1-200]: Err = 0.89781250 * 3200; CE = 2.30323239 * 3200
07/14/2016 05:26:06: Minibatch[201-400]: Err = 0.90156250 * 3200; CE = 2.30283531 * 3200
07/14/2016 05:26:07: Minibatch[401-600]: Err = 0.90000000 * 3200; CE = 2.30346999 * 3200
07/14/2016 05:26:07: Minibatch[601-625]: Err = 0.90500000 * 400; CE = 2.30618266 * 400
07/14/2016 05:26:07: Final Results: Minibatch[1-625]: Err = 0.90000000 * 10000; CE = 2.30329937 * 10000; perplexity = 10.00714530

07/14/2016 05:26:07: Action "test" complete.

07/14/2016 05:26:07: __COMPLETED__