CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264173120 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv.cntk currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu DataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10 OutputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=5]] Train=[SGD=[epochSize=100]] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 12:04:41
		Last modified date: Tue Jul 12 04:28:35 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by philly on 34e58dd0283f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
07/14/2016 13:07:45: Redirecting stderr to file -_Train_Test.log
07/14/2016 13:07:45: -------------------------------------------------------------------
07/14/2016 13:07:45: Build info: 

07/14/2016 13:07:45: 		Built time: Jul 14 2016 12:04:41
07/14/2016 13:07:45: 		Last modified date: Tue Jul 12 04:28:35 2016
07/14/2016 13:07:45: 		Build type: release
07/14/2016 13:07:45: 		Build target: GPU
07/14/2016 13:07:45: 		With 1bit-SGD: no
07/14/2016 13:07:45: 		Math lib: mkl
07/14/2016 13:07:45: 		CUDA_PATH: /usr/local/cuda-7.5
07/14/2016 13:07:45: 		CUB_PATH: /usr/local/cub-1.4.1
07/14/2016 13:07:45: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/14/2016 13:07:45: 		Build Branch: HEAD
07/14/2016 13:07:45: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 13:07:45: 		Built by philly on 34e58dd0283f
07/14/2016 13:07:45: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
07/14/2016 13:07:45: -------------------------------------------------------------------
07/14/2016 13:07:46: -------------------------------------------------------------------
07/14/2016 13:07:46: GPU info:

07/14/2016 13:07:46: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 13:07:46: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 13:07:46: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 13:07:46: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 13:07:46: -------------------------------------------------------------------

07/14/2016 13:07:46: Running on localhost at 2016/07/14 13:07:46
07/14/2016 13:07:46: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv.cntk  currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData  RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu  DataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10  OutputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=5]]  Train=[SGD=[epochSize=100]]  stderr=-



07/14/2016 13:07:46: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 13:07:46: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
command = Train:Test
stderr = "$OutputDir$/02_BatchNormConv"
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "$ModelDir$/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "$ModelDir$/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

07/14/2016 13:07:46: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 13:07:46: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 13:07:46: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models"
ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
command = Train:Test
stderr = "/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/02_BatchNormConv"
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

07/14/2016 13:07:46: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 13:07:46: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 02_BatchNormConv.cntk:command=Train:Test
configparameters: 02_BatchNormConv.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
configparameters: 02_BatchNormConv.cntk:currentDirectory=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
configparameters: 02_BatchNormConv.cntk:DataDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
configparameters: 02_BatchNormConv.cntk:deviceId=0
configparameters: 02_BatchNormConv.cntk:imageLayout=cudnn
configparameters: 02_BatchNormConv.cntk:initOnCPUOnly=true
configparameters: 02_BatchNormConv.cntk:ModelDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models
configparameters: 02_BatchNormConv.cntk:ndlMacros=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl
configparameters: 02_BatchNormConv.cntk:numMBsToShowResult=500
configparameters: 02_BatchNormConv.cntk:OutputDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
configparameters: 02_BatchNormConv.cntk:precision=float
configparameters: 02_BatchNormConv.cntk:RootDir=.
configparameters: 02_BatchNormConv.cntk:RunDir=/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
configparameters: 02_BatchNormConv.cntk:stderr=-
configparameters: 02_BatchNormConv.cntk:Test=[
    action = "test"
    modelPath = "/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]

configparameters: 02_BatchNormConv.cntk:timestamping=true
configparameters: 02_BatchNormConv.cntk:traceLevel=1
configparameters: 02_BatchNormConv.cntk:Train=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
] [SGD=[maxEpochs=5]] [SGD=[epochSize=100]]

07/14/2016 13:07:46: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 13:07:46: Commands: Train Test
07/14/2016 13:07:46: Precision = "float"
07/14/2016 13:07:46: CNTKModelPath: /tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv
07/14/2016 13:07:46: CNTKCommandTrainInfo: Train : 5
07/14/2016 13:07:46: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5

07/14/2016 13:07:46: ##############################################################################
07/14/2016 13:07:46: #                                                                            #
07/14/2016 13:07:46: # Action "train"                                                             #
07/14/2016 13:07:46: #                                                                            #
07/14/2016 13:07:46: ##############################################################################

07/14/2016 13:07:46: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0

07/14/2016 13:07:46: Creating virgin network.
SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 45 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 3 x 3 x 64]
Validating --> conv3.c.W = LearnableParameter() :  -> [64 x 800]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 800]
Validating --> conv1.c.W = LearnableParameter() :  -> [32 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [32 x 75], [32 x 32 x 3 x *] -> [32 x 32 x 32 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [32 x 32 x 32 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 32 x *] -> [32 x 32 x 32 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 800], [15 x 15 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [15 x 15 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [15 x 15 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [15 x 15 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> conv3.c.c.c = Convolution (conv3.c.W, pool2) : [64 x 800], [7 x 7 x 32 x *] -> [7 x 7 x 64 x *]
Validating --> conv3.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.y = BatchNormalization (conv3.c.c.c, conv3.c.c.sc, conv3.c.c.b, conv3.c.c.m, conv3.c.c.isd) : [7 x 7 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [7 x 7 x 64 x *]
Validating --> conv3.y = RectifiedLinear (conv3.c.c.y) : [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> pool3 = MaxPooling (conv3.y) : [7 x 7 x 64 x *] -> [3 x 3 x 64 x *]
Validating --> h1.t = Times (h1.W, pool3) : [64 x 3 x 3 x 64], [3 x 3 x 64 x *] -> [64 x *]
Validating --> h1.sc = LearnableParameter() :  -> [64 x 1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.m = LearnableParameter() :  -> [64 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [64 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [64 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [64 x *] -> [64 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 20 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 32, Kernel: 5 x 5 x 3, Map: 1 x 1 x 32, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 32, Output: 15 x 15 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 15 x 15 x 32, Kernel: 5 x 5 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 7 x 7 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv3.c.c.c: using cuDNN convolution engine for geometry: Input: 7 x 7 x 32, Output: 7 x 7 x 64, Kernel: 5 x 5 x 32, Map: 1 x 1 x 64, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool3: using cuDNN convolution engine for geometry: Input: 7 x 7 x 64, Output: 3 x 3 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


25 out of 45 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 13:07:46: Created model with 45 nodes on GPU 0.

07/14/2016 13:07:46: Training criterion node(s):
07/14/2016 13:07:46: 	CE = CrossEntropyWithSoftmax

07/14/2016 13:07:46: Evaluation criterion node(s):

07/14/2016 13:07:46: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[Err Gradient[1]] [conv1.c.c.isd Gradient[32 x 1]] [conv1.c.c.m Gradient[32 x 1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv3.c.c.isd Gradient[64 x 1]] [conv3.c.c.m Gradient[64 x 1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *]] [features Gradient[32 x 32 x 3 x *]] [h1.isd Gradient[64 x 1]] [h1.m Gradient[64 x 1]] [labels Gradient[10 x *]] }
0x7efefe884dc8: {[conv1.c.c.y Gradient[32 x 32 x 32 x *]] [pool1 Value[15 x 15 x 32 x *]] }
0x7efefe884f88: {[conv1.c.W Gradient[32 x 75]] [conv2.c.c.c Value[15 x 15 x 32 x *]] }
0x7efefe885148: {[conv1.c.c.sc Gradient[32 x 1]] [conv1.y Gradient[32 x 32 x 32 x *]] }
0x7efefe885308: {[conv2.c.c.y Value[15 x 15 x 32 x *]] }
0x7efefe885848: {[conv1.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[15 x 15 x 32 x *]] [conv2.y Value[15 x 15 x 32 x *]] }
0x7efefe885a08: {[conv2.c.c.y Gradient[15 x 15 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
0x7efefe885bc8: {[conv2.c.W Gradient[32 x 800]] [conv3.c.c.c Value[7 x 7 x 64 x *]] }
0x7efefe885d88: {[conv2.c.c.sc Gradient[32 x 1]] [conv2.y Gradient[15 x 15 x 32 x *]] }
0x7efefe885f48: {[conv3.c.c.y Value[7 x 7 x 64 x *]] }
0x7efefe886488: {[conv2.c.c.b Gradient[32 x 1]] [conv3.c.c.c Gradient[7 x 7 x 64 x *]] [conv3.y Value[7 x 7 x 64 x *]] }
0x7efefe886648: {[conv3.c.c.y Gradient[7 x 7 x 64 x *]] [pool3 Value[3 x 3 x 64 x *]] }
0x7efefe886808: {[conv3.c.c.sc Gradient[64 x 1]] [conv3.y Gradient[7 x 7 x 64 x *]] [h1.t Value[64 x *]] }
0x7efefe8869c8: {[h1.bn Value[64 x *]] }
0x7efefe886d48: {[conv3.c.c.b Gradient[64 x 1]] }
0x7efefe886f08: {[conv3.c.W Gradient[64 x 800]] [h1.t Gradient[64 x *]] [h1.y Value[64 x *]] }
0x7efefe8870c8: {[OutputNodes.t Value[10 x *]] [h1.bn Gradient[64 x *]] }
0x7efefe887ba8: {[CE Gradient[1]] }
0x7efefe887d68: {[OutputNodes.W Gradient[10 x 64]] [OutputNodes.z Gradient[10 x *]] }
0x7efefe887f28: {[OutputNodes.t Gradient[10 x *]] [pool1 Gradient[15 x 15 x 32 x *]] [pool2 Gradient[7 x 7 x 32 x *]] [pool3 Gradient[3 x 3 x 64 x *]] }
0x7efefe8880e8: {[OutputNodes.b Gradient[10]] }
0x7efefe8882a8: {[h1.sc Gradient[64 x 1]] [h1.y Gradient[64 x *]] }
0x7efefe888498: {[h1.W Gradient[64 x 3 x 3 x 64]] }
0x7efefe888658: {[h1.b Gradient[64 x 1]] }
0x7efefe8acec8: {[CE Value[1]] }
0x7efefe8ae108: {[conv1.c.c.y Value[32 x 32 x 32 x *]] }
0x7efefe8b7638: {[featScaled Value[32 x 32 x 3 x *]] }
0x7efefe8b7978: {[conv1.c.c.c Value[32 x 32 x 32 x *]] }
0x7efefe8b8bf8: {[conv1.c.c.c Gradient[32 x 32 x 32 x *]] [conv1.y Value[32 x 32 x 32 x *]] }
0x7eff07a1f158: {[labels Value[10 x *]] }
0x7eff07a23a78: {[featOffs Value[1 x 1]] }
0x7eff09587658: {[OutputNodes.z Value[10 x *]] }
0x7eff09589298: {[Err Value[1]] }
0x7eff0977c9f8: {[conv1.c.W Value[32 x 75]] }
0x7eff0977cf38: {[conv1.c.c.b Value[32 x 1]] }
0x7eff0977d958: {[conv1.c.c.sc Value[32 x 1]] }
0x7eff0977e7c8: {[conv1.c.c.m Value[32 x 1]] }
0x7eff0977f2b8: {[conv1.c.c.isd Value[32 x 1]] }
0x7eff09780fa8: {[conv2.c.W Value[32 x 800]] }
0x7eff09781e98: {[conv2.c.c.b Value[32 x 1]] }
0x7eff09782588: {[conv2.c.c.sc Value[32 x 1]] }
0x7eff09783028: {[h1.b Value[64 x 1]] }
0x7eff09783598: {[conv2.c.c.m Value[32 x 1]] }
0x7eff09784088: {[conv2.c.c.isd Value[32 x 1]] }
0x7eff097859e8: {[conv3.c.W Value[64 x 800]] }
0x7eff09786268: {[conv3.c.c.b Value[64 x 1]] }
0x7eff09786fb8: {[conv3.c.c.sc Value[64 x 1]] }
0x7eff097876d8: {[conv3.c.c.isd Value[64 x 1]] }
0x7eff09787aa8: {[conv3.c.c.m Value[64 x 1]] }
0x7eff0978a1c8: {[h1.W Value[64 x 3 x 3 x 64]] }
0x7eff0978b598: {[h1.sc Value[64 x 1]] }
0x7eff0978c068: {[h1.m Value[64 x 1]] }
0x7eff0978cbc8: {[h1.isd Value[64 x 1]] }
0x7eff0978dfc8: {[OutputNodes.W Value[10 x 64]] }
0x7eff0978eeb8: {[OutputNodes.b Value[10]] }
0x7eff0e2499f8: {[features Value[32 x 32 x 3 x *]] }

07/14/2016 13:07:46: No PreCompute nodes found, skipping PreCompute step.

07/14/2016 13:07:46: Starting Epoch 1: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..100] (first sequence at sample 0), data subset 0 of 1

07/14/2016 13:07:46: Starting minibatch loop.
07/14/2016 13:07:50: Finished Epoch[ 1 of 5]: [Training] CE = 2.29343704 * 100; Err = 0.87000000 * 100; totalSamplesSeen = 100; learningRatePerSample = 0.00046874999; epochTime=3.52491s
07/14/2016 13:07:50: SGD: Saving checkpoint model '/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.1'

07/14/2016 13:07:50: Starting Epoch 2: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 1: frames [100..200] (first sequence at sample 100), data subset 0 of 1

07/14/2016 13:07:50: Starting minibatch loop.
07/14/2016 13:07:50: Finished Epoch[ 2 of 5]: [Training] CE = 2.22764633 * 100; Err = 0.88000000 * 100; totalSamplesSeen = 200; learningRatePerSample = 0.00046874999; epochTime=0.012064s
07/14/2016 13:07:50: SGD: Saving checkpoint model '/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.2'

07/14/2016 13:07:50: Starting Epoch 3: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 2: frames [200..300] (first sequence at sample 200), data subset 0 of 1

07/14/2016 13:07:50: Starting minibatch loop.
07/14/2016 13:07:50: Finished Epoch[ 3 of 5]: [Training] CE = 2.20062744 * 100; Err = 0.77000000 * 100; totalSamplesSeen = 300; learningRatePerSample = 0.00046874999; epochTime=0.011186s
07/14/2016 13:07:50: SGD: Saving checkpoint model '/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.3'

07/14/2016 13:07:50: Starting Epoch 4: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 3: frames [300..400] (first sequence at sample 300), data subset 0 of 1

07/14/2016 13:07:50: Starting minibatch loop.
07/14/2016 13:07:50: Finished Epoch[ 4 of 5]: [Training] CE = 2.19536057 * 100; Err = 0.81000000 * 100; totalSamplesSeen = 400; learningRatePerSample = 0.00046874999; epochTime=0.011894s
07/14/2016 13:07:50: SGD: Saving checkpoint model '/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.4'

07/14/2016 13:07:50: Starting Epoch 5: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 4: frames [400..500] (first sequence at sample 400), data subset 0 of 1

07/14/2016 13:07:50: Starting minibatch loop.
07/14/2016 13:07:50: Finished Epoch[ 5 of 5]: [Training] CE = 2.16648529 * 100; Err = 0.75000000 * 100; totalSamplesSeen = 500; learningRatePerSample = 0.00046874999; epochTime=0.011199s
07/14/2016 13:07:50: SGD: Saving checkpoint model '/tmp/cntk-test-20160714121541.422646/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv'
07/14/2016 13:07:50: CNTKCommandTrainEnd: Train

07/14/2016 13:07:50: Action "train" complete.


07/14/2016 13:07:50: ##############################################################################
07/14/2016 13:07:50: #                                                                            #
07/14/2016 13:07:50: # Action "test"                                                              #
07/14/2016 13:07:50: #                                                                            #
07/14/2016 13:07:50: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 45 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 3 x 3 x 64]
Validating --> conv3.c.W = LearnableParameter() :  -> [64 x 800]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 800]
Validating --> conv1.c.W = LearnableParameter() :  -> [32 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [32 x 75], [32 x 32 x 3 x *1] -> [32 x 32 x 32 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [32 x 32 x 32 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 32 x *1] -> [32 x 32 x 32 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 800], [15 x 15 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [15 x 15 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [15 x 15 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [15 x 15 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> conv3.c.c.c = Convolution (conv3.c.W, pool2) : [64 x 800], [7 x 7 x 32 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.y = BatchNormalization (conv3.c.c.c, conv3.c.c.sc, conv3.c.c.b, conv3.c.c.m, conv3.c.c.isd) : [7 x 7 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [7 x 7 x 64 x *1]
Validating --> conv3.y = RectifiedLinear (conv3.c.c.y) : [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> pool3 = MaxPooling (conv3.y) : [7 x 7 x 64 x *1] -> [3 x 3 x 64 x *1]
Validating --> h1.t = Times (h1.W, pool3) : [64 x 3 x 3 x 64], [3 x 3 x 64 x *1] -> [64 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [64 x 1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.m = LearnableParameter() :  -> [64 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [64 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [64 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [64 x *1] -> [64 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 20 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 32, Kernel: 5 x 5 x 3, Map: 1 x 1 x 32, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 32, Output: 15 x 15 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 15 x 15 x 32, Kernel: 5 x 5 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 7 x 7 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv3.c.c.c: using cuDNN convolution engine for geometry: Input: 7 x 7 x 32, Output: 7 x 7 x 64, Kernel: 5 x 5 x 32, Map: 1 x 1 x 64, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool3: using cuDNN convolution engine for geometry: Input: 7 x 7 x 64, Output: 3 x 3 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


25 out of 45 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 64]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.c.W Gradient[32 x 75]] [conv1.c.c.b Gradient[32 x 1]] [conv1.c.c.c Gradient[32 x 32 x 32 x *1]] [conv1.c.c.isd Gradient[32 x 1]] [conv1.c.c.m Gradient[32 x 1]] [conv1.c.c.sc Gradient[32 x 1]] [conv1.c.c.y Gradient[32 x 32 x 32 x *1]] [conv1.y Gradient[32 x 32 x 32 x *1]] [conv2.c.W Gradient[32 x 800]] [conv2.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[15 x 15 x 32 x *1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv2.c.c.sc Gradient[32 x 1]] [conv2.c.c.y Gradient[15 x 15 x 32 x *1]] [conv2.y Gradient[15 x 15 x 32 x *1]] [conv3.c.W Gradient[64 x 800]] [conv3.c.c.b Gradient[64 x 1]] [conv3.c.c.c Gradient[7 x 7 x 64 x *1]] [conv3.c.c.isd Gradient[64 x 1]] [conv3.c.c.m Gradient[64 x 1]] [conv3.c.c.sc Gradient[64 x 1]] [conv3.c.c.y Gradient[7 x 7 x 64 x *1]] [conv3.y Gradient[7 x 7 x 64 x *1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *1]] [features Gradient[32 x 32 x 3 x *1]] [h1.W Gradient[64 x 3 x 3 x 64]] [h1.b Gradient[64 x 1]] [h1.bn Gradient[64 x *1]] [h1.isd Gradient[64 x 1]] [h1.m Gradient[64 x 1]] [h1.sc Gradient[64 x 1]] [h1.t Gradient[64 x *1]] [h1.y Gradient[64 x *1]] [labels Gradient[10 x *1]] [pool1 Gradient[15 x 15 x 32 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] [pool3 Gradient[3 x 3 x 64 x *1]] }
0x7efefe881328: {[conv3.c.c.b Value[64 x 1]] }
0x7efefe882498: {[conv3.c.c.isd Value[64 x 1]] }
0x7efefe882658: {[conv3.c.c.m Value[64 x 1]] }
0x7efefe882ec8: {[conv3.c.c.sc Value[64 x 1]] }
0x7efefe883958: {[conv3.c.W Value[64 x 800]] }
0x7efefe884848: {[features Value[32 x 32 x 3 x *1]] }
0x7efefe885208: {[h1.b Value[64 x 1]] }
0x7efefe885408: {[h1.sc Value[64 x 1]] }
0x7efefe8854b8: {[h1.m Value[64 x 1]] }
0x7efefe885f98: {[h1.isd Value[64 x 1]] }
0x7efefe887478: {[h1.W Value[64 x 3 x 3 x 64]] }
0x7efefe888c38: {[OutputNodes.b Value[10]] }
0x7efefe8896e8: {[OutputNodes.W Value[10 x 64]] }
0x7efefe8ae088: {[labels Value[10 x *1]] }
0x7eff0ec32d28: {[featOffs Value[1 x 1]] }
0x7eff0ee4a6f8: {[featScaled Value[32 x 32 x 3 x *1]] }
0x7eff0ee4af58: {[conv1.c.c.b Value[32 x 1]] }
0x7eff0ee4b178: {[CE Value[1]] }
0x7eff0ee4c718: {[conv1.c.c.isd Value[32 x 1]] }
0x7eff0ee4c8b8: {[conv1.c.c.m Value[32 x 1]] }
0x7eff0ee4d258: {[conv1.c.c.sc Value[32 x 1]] }
0x7eff0f043818: {[conv1.y Value[32 x 32 x 32 x *1]] }
0x7eff0f0439d8: {[pool1 Value[15 x 15 x 32 x *1]] }
0x7eff0f043b98: {[conv2.c.c.c Value[15 x 15 x 32 x *1]] }
0x7eff0f043f18: {[conv2.c.c.y Value[15 x 15 x 32 x *1]] }
0x7eff0f044458: {[conv2.y Value[15 x 15 x 32 x *1]] }
0x7eff0f044618: {[pool2 Value[7 x 7 x 32 x *1]] }
0x7eff0f0447d8: {[conv3.c.c.c Value[7 x 7 x 64 x *1]] }
0x7eff0f044b58: {[conv3.c.c.y Value[7 x 7 x 64 x *1]] }
0x7eff0f045098: {[conv3.y Value[7 x 7 x 64 x *1]] }
0x7eff0f045258: {[pool3 Value[3 x 3 x 64 x *1]] }
0x7eff0f045418: {[h1.t Value[64 x *1]] }
0x7eff0f0455d8: {[h1.bn Value[64 x *1]] }
0x7eff0f045b18: {[h1.y Value[64 x *1]] }
0x7eff0f045cd8: {[OutputNodes.t Value[10 x *1]] }
0x7eff0f045e98: {[OutputNodes.z Value[10 x *1]] }
0x7eff0f0b91d8: {[conv1.c.W Value[32 x 75]] }
0x7eff0f0b9968: {[conv2.c.c.b Value[32 x 1]] }
0x7eff0f0b9b68: {[conv2.c.c.isd Value[32 x 1]] }
0x7eff0f0bacb8: {[conv2.c.c.m Value[32 x 1]] }
0x7eff0f0bb6b8: {[conv2.c.c.sc Value[32 x 1]] }
0x7eff0f0bcad8: {[conv2.c.W Value[32 x 800]] }
0x7eff0f0c3cf8: {[conv1.c.c.y Value[32 x 32 x 32 x *1]] }
0x7eff0f0cad48: {[Err Value[1]] }
0x7eff0f0fff48: {[conv1.c.c.c Value[32 x 32 x 32 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
07/14/2016 13:07:51: Minibatch[1-500]: Err = 0.87212500 * 8000; CE = 2.33594554 * 8000
07/14/2016 13:07:51: Minibatch[501-625]: Err = 0.87150000 * 2000; CE = 2.33627981 * 2000
07/14/2016 13:07:51: Final Results: Minibatch[1-625]: Err = 0.87200000 * 10000; CE = 2.33601240 * 10000; perplexity = 10.33992273

07/14/2016 13:07:51: Action "test" complete.

07/14/2016 13:07:51: __COMPLETED__