CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3550 @ 3.07GHz
    Hardware threads: 4
    Total Memory: 12580388 kB
-------------------------------------------------------------------
Looking for data in: /cygdrive/c/Data/CNTKTestData
Copying test data to local directory
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/04_ResNet_56.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10 OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=1]] Train=[SGD=[epochSize=128]] Train=[reader=[randomize=none]] Train=[SGD=[minibatchSize=16]] Test=[minibatchSize=16] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 05:09:49
		Last modified date: Fri Jul  8 10:29:39 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by svcphil on DPHAIM-24
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
07/14/2016 05:26:11: Redirecting stderr to file -_Train_Test.log
07/14/2016 05:26:11: -------------------------------------------------------------------
07/14/2016 05:26:11: Build info: 

07/14/2016 05:26:11: 		Built time: Jul 14 2016 05:09:49
07/14/2016 05:26:11: 		Last modified date: Fri Jul  8 10:29:39 2016
07/14/2016 05:26:11: 		Build type: Release
07/14/2016 05:26:11: 		Build target: GPU
07/14/2016 05:26:11: 		With 1bit-SGD: no
07/14/2016 05:26:11: 		Math lib: mkl
07/14/2016 05:26:11: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
07/14/2016 05:26:11: 		CUB_PATH: C:\src\cub-1.4.1
07/14/2016 05:26:11: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
07/14/2016 05:26:11: 		Build Branch: HEAD
07/14/2016 05:26:11: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 05:26:11: 		Built by svcphil on DPHAIM-24
07/14/2016 05:26:11: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
07/14/2016 05:26:11: -------------------------------------------------------------------
07/14/2016 05:26:12: -------------------------------------------------------------------
07/14/2016 05:26:12: GPU info:

07/14/2016 05:26:12: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
07/14/2016 05:26:12: -------------------------------------------------------------------

07/14/2016 05:26:12: Running on cntk-muc02 at 2016/07/14 05:26:12
07/14/2016 05:26:12: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/04_ResNet_56.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=1]]  Train=[SGD=[epochSize=128]]  Train=[reader=[randomize=none]]  Train=[SGD=[minibatchSize=16]]  Test=[minibatchSize=16]  stderr=-



07/14/2016 05:26:12: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:26:12: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros="$ConfigDir$/Macros.ndl"
precision="float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch="true"
parallelTrain="false"
command=Train:Test
stderr="$OutputDir$/04_ResNet_56"
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = "$ConfigDir$/16to32.txt"
Proj32to64Filename = "$ConfigDir$/32to64.txt"
Train=[
    action="train"
    modelPath="$ModelDir$/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="$ConfigDir$/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="$DataDir$/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
Test=[
    action="test"
    modelPath="$ModelDir$/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="$DataDir$/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train=[SGD=[minibatchSize=16]]
Test=[minibatchSize=16]
stderr=-

07/14/2016 05:26:12: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:26:12: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:26:12: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models"
ndlMacros="C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl"
precision="float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch="true"
parallelTrain="false"
command=Train:Test
stderr="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/04_ResNet_56"
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/16to32.txt"
Proj32to64Filename = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/32to64.txt"
Train=[
    action="train"
    modelPath="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
Test=[
    action="test"
    modelPath="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train=[SGD=[minibatchSize=16]]
Test=[minibatchSize=16]
stderr=-

07/14/2016 05:26:12: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:26:12: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 04_ResNet_56.cntk:command=Train:Test
configparameters: 04_ResNet_56.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 04_ResNet_56.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
configparameters: 04_ResNet_56.cntk:DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
configparameters: 04_ResNet_56.cntk:deviceId=0
configparameters: 04_ResNet_56.cntk:imageLayout=cudnn
configparameters: 04_ResNet_56.cntk:initOnCPUOnly=true
configparameters: 04_ResNet_56.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models
configparameters: 04_ResNet_56.cntk:ndlMacros=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl
configparameters: 04_ResNet_56.cntk:numMBsToShowResult=200
configparameters: 04_ResNet_56.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
configparameters: 04_ResNet_56.cntk:parallelTrain=false
configparameters: 04_ResNet_56.cntk:precision=float
configparameters: 04_ResNet_56.cntk:prefetch=true
configparameters: 04_ResNet_56.cntk:Proj16to32Filename=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/16to32.txt
configparameters: 04_ResNet_56.cntk:Proj32to64Filename=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/32to64.txt
configparameters: 04_ResNet_56.cntk:RootDir=.
configparameters: 04_ResNet_56.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
configparameters: 04_ResNet_56.cntk:stderr=-
configparameters: 04_ResNet_56.cntk:Test=[
    action="test"
    modelPath="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
] [minibatchSize=16]

configparameters: 04_ResNet_56.cntk:timestamping=true
configparameters: 04_ResNet_56.cntk:traceLevel=1
configparameters: 04_ResNet_56.cntk:Train=[
    action="train"
    modelPath="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
] [SGD=[maxEpochs=1]] [SGD=[epochSize=128]] [reader=[randomize=none]] [SGD=[minibatchSize=16]]

07/14/2016 05:26:12: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 05:26:12: Commands: Train Test
07/14/2016 05:26:12: Precision = "float"
07/14/2016 05:26:12: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56
07/14/2016 05:26:12: CNTKCommandTrainInfo: Train : 1
07/14/2016 05:26:12: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 1

07/14/2016 05:26:12: ##############################################################################
07/14/2016 05:26:12: #                                                                            #
07/14/2016 05:26:12: # Action "train"                                                             #
07/14/2016 05:26:12: #                                                                            #
07/14/2016 05:26:12: ##############################################################################

07/14/2016 05:26:12: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/14/2016 05:26:12: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 949 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> rn3_18.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *] -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.c = Convolution (rn1_4.c1.c.W, rn1_3.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization (rn1_4.c1.c.c.c, rn1_4.c1.c.c.sc, rn1_4.c1.c.c.b, rn1_4.c1.c.c.m, rn1_4.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear (rn1_4.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.c = Convolution (rn1_4.c2.W, rn1_4.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization (rn1_4.c2.c.c, rn1_4.c2.c.sc, rn1_4.c2.c.b, rn1_4.c2.c.m, rn1_4.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus (rn1_4.c2.c.y, rn1_3.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear (rn1_4.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.c = Convolution (rn1_5.c1.c.W, rn1_4.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization (rn1_5.c1.c.c.c, rn1_5.c1.c.c.sc, rn1_5.c1.c.c.b, rn1_5.c1.c.c.m, rn1_5.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear (rn1_5.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.c = Convolution (rn1_5.c2.W, rn1_5.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization (rn1_5.c2.c.c, rn1_5.c2.c.sc, rn1_5.c2.c.b, rn1_5.c2.c.m, rn1_5.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus (rn1_5.c2.c.y, rn1_4.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear (rn1_5.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.c = Convolution (rn1_6.c1.c.W, rn1_5.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization (rn1_6.c1.c.c.c, rn1_6.c1.c.c.sc, rn1_6.c1.c.c.b, rn1_6.c1.c.c.m, rn1_6.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear (rn1_6.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.c = Convolution (rn1_6.c2.W, rn1_6.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization (rn1_6.c2.c.c, rn1_6.c2.c.sc, rn1_6.c2.c.b, rn1_6.c2.c.m, rn1_6.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus (rn1_6.c2.c.y, rn1_5.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear (rn1_6.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.c = Convolution (rn1_7.c1.c.W, rn1_6.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization (rn1_7.c1.c.c.c, rn1_7.c1.c.c.sc, rn1_7.c1.c.c.b, rn1_7.c1.c.c.m, rn1_7.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear (rn1_7.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.c = Convolution (rn1_7.c2.W, rn1_7.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization (rn1_7.c2.c.c, rn1_7.c2.c.sc, rn1_7.c2.c.b, rn1_7.c2.c.m, rn1_7.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus (rn1_7.c2.c.y, rn1_6.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear (rn1_7.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.c = Convolution (rn1_8.c1.c.W, rn1_7.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization (rn1_8.c1.c.c.c, rn1_8.c1.c.c.sc, rn1_8.c1.c.c.b, rn1_8.c1.c.c.m, rn1_8.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear (rn1_8.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.c = Convolution (rn1_8.c2.W, rn1_8.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization (rn1_8.c2.c.c, rn1_8.c2.c.sc, rn1_8.c2.c.b, rn1_8.c2.c.m, rn1_8.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus (rn1_8.c2.c.y, rn1_7.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear (rn1_8.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.c = Convolution (rn1_9.c1.c.W, rn1_8.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization (rn1_9.c1.c.c.c, rn1_9.c1.c.c.sc, rn1_9.c1.c.c.b, rn1_9.c1.c.c.m, rn1_9.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear (rn1_9.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.c = Convolution (rn1_9.c2.W, rn1_9.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization (rn1_9.c2.c.c, rn1_9.c2.c.sc, rn1_9.c2.c.b, rn1_9.c2.c.m, rn1_9.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus (rn1_9.c2.c.y, rn1_8.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear (rn1_9.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.c = Convolution (rn1_10.c1.c.W, rn1_9.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization (rn1_10.c1.c.c.c, rn1_10.c1.c.c.sc, rn1_10.c1.c.c.b, rn1_10.c1.c.c.m, rn1_10.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear (rn1_10.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.c = Convolution (rn1_10.c2.W, rn1_10.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization (rn1_10.c2.c.c, rn1_10.c2.c.sc, rn1_10.c2.c.b, rn1_10.c2.c.m, rn1_10.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus (rn1_10.c2.c.y, rn1_9.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear (rn1_10.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.c = Convolution (rn1_11.c1.c.W, rn1_10.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization (rn1_11.c1.c.c.c, rn1_11.c1.c.c.sc, rn1_11.c1.c.c.b, rn1_11.c1.c.c.m, rn1_11.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear (rn1_11.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.c = Convolution (rn1_11.c2.W, rn1_11.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization (rn1_11.c2.c.c, rn1_11.c2.c.sc, rn1_11.c2.c.b, rn1_11.c2.c.m, rn1_11.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus (rn1_11.c2.c.y, rn1_10.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear (rn1_11.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.c = Convolution (rn1_12.c1.c.W, rn1_11.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization (rn1_12.c1.c.c.c, rn1_12.c1.c.c.sc, rn1_12.c1.c.c.b, rn1_12.c1.c.c.m, rn1_12.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear (rn1_12.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.c = Convolution (rn1_12.c2.W, rn1_12.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization (rn1_12.c2.c.c, rn1_12.c2.c.sc, rn1_12.c2.c.b, rn1_12.c2.c.m, rn1_12.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus (rn1_12.c2.c.y, rn1_11.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear (rn1_12.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.c = Convolution (rn1_13.c1.c.W, rn1_12.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization (rn1_13.c1.c.c.c, rn1_13.c1.c.c.sc, rn1_13.c1.c.c.b, rn1_13.c1.c.c.m, rn1_13.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear (rn1_13.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.c = Convolution (rn1_13.c2.W, rn1_13.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization (rn1_13.c2.c.c, rn1_13.c2.c.sc, rn1_13.c2.c.b, rn1_13.c2.c.m, rn1_13.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus (rn1_13.c2.c.y, rn1_12.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear (rn1_13.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.c = Convolution (rn1_14.c1.c.W, rn1_13.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization (rn1_14.c1.c.c.c, rn1_14.c1.c.c.sc, rn1_14.c1.c.c.b, rn1_14.c1.c.c.m, rn1_14.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear (rn1_14.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.c = Convolution (rn1_14.c2.W, rn1_14.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization (rn1_14.c2.c.c, rn1_14.c2.c.sc, rn1_14.c2.c.b, rn1_14.c2.c.m, rn1_14.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus (rn1_14.c2.c.y, rn1_13.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear (rn1_14.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.c = Convolution (rn1_15.c1.c.W, rn1_14.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization (rn1_15.c1.c.c.c, rn1_15.c1.c.c.sc, rn1_15.c1.c.c.b, rn1_15.c1.c.c.m, rn1_15.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear (rn1_15.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.c = Convolution (rn1_15.c2.W, rn1_15.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization (rn1_15.c2.c.c, rn1_15.c2.c.sc, rn1_15.c2.c.b, rn1_15.c2.c.m, rn1_15.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus (rn1_15.c2.c.y, rn1_14.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear (rn1_15.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.c = Convolution (rn1_16.c1.c.W, rn1_15.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization (rn1_16.c1.c.c.c, rn1_16.c1.c.c.sc, rn1_16.c1.c.c.b, rn1_16.c1.c.c.m, rn1_16.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear (rn1_16.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.c = Convolution (rn1_16.c2.W, rn1_16.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization (rn1_16.c2.c.c, rn1_16.c2.c.sc, rn1_16.c2.c.b, rn1_16.c2.c.m, rn1_16.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus (rn1_16.c2.c.y, rn1_15.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear (rn1_16.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.c = Convolution (rn1_17.c1.c.W, rn1_16.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization (rn1_17.c1.c.c.c, rn1_17.c1.c.c.sc, rn1_17.c1.c.c.b, rn1_17.c1.c.c.m, rn1_17.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear (rn1_17.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.c = Convolution (rn1_17.c2.W, rn1_17.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization (rn1_17.c2.c.c, rn1_17.c2.c.sc, rn1_17.c2.c.b, rn1_17.c2.c.m, rn1_17.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus (rn1_17.c2.c.y, rn1_16.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear (rn1_17.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.c = Convolution (rn1_18.c1.c.W, rn1_17.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization (rn1_18.c1.c.c.c, rn1_18.c1.c.c.sc, rn1_18.c1.c.c.b, rn1_18.c1.c.c.m, rn1_18.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear (rn1_18.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.c = Convolution (rn1_18.c2.W, rn1_18.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization (rn1_18.c2.c.c, rn1_18.c2.c.sc, rn1_18.c2.c.b, rn1_18.c2.c.m, rn1_18.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus (rn1_18.c2.c.y, rn1_17.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear (rn1_18.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_18.y) : [32 x 144], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_18.y) : [32 x 16], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.c = Convolution (rn2_4.c1.c.W, rn2_3.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization (rn2_4.c1.c.c.c, rn2_4.c1.c.c.sc, rn2_4.c1.c.c.b, rn2_4.c1.c.c.m, rn2_4.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear (rn2_4.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.c = Convolution (rn2_4.c2.W, rn2_4.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization (rn2_4.c2.c.c, rn2_4.c2.c.sc, rn2_4.c2.c.b, rn2_4.c2.c.m, rn2_4.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus (rn2_4.c2.c.y, rn2_3.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear (rn2_4.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.c = Convolution (rn2_5.c1.c.W, rn2_4.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization (rn2_5.c1.c.c.c, rn2_5.c1.c.c.sc, rn2_5.c1.c.c.b, rn2_5.c1.c.c.m, rn2_5.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear (rn2_5.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.c = Convolution (rn2_5.c2.W, rn2_5.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization (rn2_5.c2.c.c, rn2_5.c2.c.sc, rn2_5.c2.c.b, rn2_5.c2.c.m, rn2_5.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus (rn2_5.c2.c.y, rn2_4.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear (rn2_5.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.c = Convolution (rn2_6.c1.c.W, rn2_5.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization (rn2_6.c1.c.c.c, rn2_6.c1.c.c.sc, rn2_6.c1.c.c.b, rn2_6.c1.c.c.m, rn2_6.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear (rn2_6.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.c = Convolution (rn2_6.c2.W, rn2_6.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization (rn2_6.c2.c.c, rn2_6.c2.c.sc, rn2_6.c2.c.b, rn2_6.c2.c.m, rn2_6.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus (rn2_6.c2.c.y, rn2_5.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear (rn2_6.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.c = Convolution (rn2_7.c1.c.W, rn2_6.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization (rn2_7.c1.c.c.c, rn2_7.c1.c.c.sc, rn2_7.c1.c.c.b, rn2_7.c1.c.c.m, rn2_7.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear (rn2_7.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.c = Convolution (rn2_7.c2.W, rn2_7.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization (rn2_7.c2.c.c, rn2_7.c2.c.sc, rn2_7.c2.c.b, rn2_7.c2.c.m, rn2_7.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus (rn2_7.c2.c.y, rn2_6.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear (rn2_7.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.c = Convolution (rn2_8.c1.c.W, rn2_7.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization (rn2_8.c1.c.c.c, rn2_8.c1.c.c.sc, rn2_8.c1.c.c.b, rn2_8.c1.c.c.m, rn2_8.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear (rn2_8.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.c = Convolution (rn2_8.c2.W, rn2_8.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization (rn2_8.c2.c.c, rn2_8.c2.c.sc, rn2_8.c2.c.b, rn2_8.c2.c.m, rn2_8.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus (rn2_8.c2.c.y, rn2_7.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear (rn2_8.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.c = Convolution (rn2_9.c1.c.W, rn2_8.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization (rn2_9.c1.c.c.c, rn2_9.c1.c.c.sc, rn2_9.c1.c.c.b, rn2_9.c1.c.c.m, rn2_9.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear (rn2_9.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.c = Convolution (rn2_9.c2.W, rn2_9.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization (rn2_9.c2.c.c, rn2_9.c2.c.sc, rn2_9.c2.c.b, rn2_9.c2.c.m, rn2_9.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus (rn2_9.c2.c.y, rn2_8.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear (rn2_9.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.c = Convolution (rn2_10.c1.c.W, rn2_9.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization (rn2_10.c1.c.c.c, rn2_10.c1.c.c.sc, rn2_10.c1.c.c.b, rn2_10.c1.c.c.m, rn2_10.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear (rn2_10.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.c = Convolution (rn2_10.c2.W, rn2_10.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization (rn2_10.c2.c.c, rn2_10.c2.c.sc, rn2_10.c2.c.b, rn2_10.c2.c.m, rn2_10.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus (rn2_10.c2.c.y, rn2_9.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear (rn2_10.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.c = Convolution (rn2_11.c1.c.W, rn2_10.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization (rn2_11.c1.c.c.c, rn2_11.c1.c.c.sc, rn2_11.c1.c.c.b, rn2_11.c1.c.c.m, rn2_11.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear (rn2_11.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.c = Convolution (rn2_11.c2.W, rn2_11.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization (rn2_11.c2.c.c, rn2_11.c2.c.sc, rn2_11.c2.c.b, rn2_11.c2.c.m, rn2_11.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus (rn2_11.c2.c.y, rn2_10.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear (rn2_11.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.c = Convolution (rn2_12.c1.c.W, rn2_11.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization (rn2_12.c1.c.c.c, rn2_12.c1.c.c.sc, rn2_12.c1.c.c.b, rn2_12.c1.c.c.m, rn2_12.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear (rn2_12.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.c = Convolution (rn2_12.c2.W, rn2_12.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization (rn2_12.c2.c.c, rn2_12.c2.c.sc, rn2_12.c2.c.b, rn2_12.c2.c.m, rn2_12.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus (rn2_12.c2.c.y, rn2_11.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear (rn2_12.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.c = Convolution (rn2_13.c1.c.W, rn2_12.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization (rn2_13.c1.c.c.c, rn2_13.c1.c.c.sc, rn2_13.c1.c.c.b, rn2_13.c1.c.c.m, rn2_13.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear (rn2_13.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.c = Convolution (rn2_13.c2.W, rn2_13.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization (rn2_13.c2.c.c, rn2_13.c2.c.sc, rn2_13.c2.c.b, rn2_13.c2.c.m, rn2_13.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus (rn2_13.c2.c.y, rn2_12.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear (rn2_13.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.c = Convolution (rn2_14.c1.c.W, rn2_13.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization (rn2_14.c1.c.c.c, rn2_14.c1.c.c.sc, rn2_14.c1.c.c.b, rn2_14.c1.c.c.m, rn2_14.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear (rn2_14.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.c = Convolution (rn2_14.c2.W, rn2_14.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization (rn2_14.c2.c.c, rn2_14.c2.c.sc, rn2_14.c2.c.b, rn2_14.c2.c.m, rn2_14.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus (rn2_14.c2.c.y, rn2_13.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear (rn2_14.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.c = Convolution (rn2_15.c1.c.W, rn2_14.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization (rn2_15.c1.c.c.c, rn2_15.c1.c.c.sc, rn2_15.c1.c.c.b, rn2_15.c1.c.c.m, rn2_15.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear (rn2_15.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.c = Convolution (rn2_15.c2.W, rn2_15.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization (rn2_15.c2.c.c, rn2_15.c2.c.sc, rn2_15.c2.c.b, rn2_15.c2.c.m, rn2_15.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus (rn2_15.c2.c.y, rn2_14.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear (rn2_15.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.c = Convolution (rn2_16.c1.c.W, rn2_15.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization (rn2_16.c1.c.c.c, rn2_16.c1.c.c.sc, rn2_16.c1.c.c.b, rn2_16.c1.c.c.m, rn2_16.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear (rn2_16.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.c = Convolution (rn2_16.c2.W, rn2_16.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization (rn2_16.c2.c.c, rn2_16.c2.c.sc, rn2_16.c2.c.b, rn2_16.c2.c.m, rn2_16.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus (rn2_16.c2.c.y, rn2_15.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear (rn2_16.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.c = Convolution (rn2_17.c1.c.W, rn2_16.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization (rn2_17.c1.c.c.c, rn2_17.c1.c.c.sc, rn2_17.c1.c.c.b, rn2_17.c1.c.c.m, rn2_17.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear (rn2_17.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.c = Convolution (rn2_17.c2.W, rn2_17.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization (rn2_17.c2.c.c, rn2_17.c2.c.sc, rn2_17.c2.c.b, rn2_17.c2.c.m, rn2_17.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus (rn2_17.c2.c.y, rn2_16.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear (rn2_17.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.c = Convolution (rn2_18.c1.c.W, rn2_17.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization (rn2_18.c1.c.c.c, rn2_18.c1.c.c.sc, rn2_18.c1.c.c.b, rn2_18.c1.c.c.m, rn2_18.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear (rn2_18.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.c = Convolution (rn2_18.c2.W, rn2_18.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization (rn2_18.c2.c.c, rn2_18.c2.c.sc, rn2_18.c2.c.b, rn2_18.c2.c.m, rn2_18.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus (rn2_18.c2.c.y, rn2_17.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear (rn2_18.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_18.y) : [64 x 288], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_18.y) : [64 x 32], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.c = Convolution (rn3_4.c1.c.W, rn3_3.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization (rn3_4.c1.c.c.c, rn3_4.c1.c.c.sc, rn3_4.c1.c.c.b, rn3_4.c1.c.c.m, rn3_4.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear (rn3_4.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.c = Convolution (rn3_4.c2.W, rn3_4.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization (rn3_4.c2.c.c, rn3_4.c2.c.sc, rn3_4.c2.c.b, rn3_4.c2.c.m, rn3_4.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus (rn3_4.c2.c.y, rn3_3.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear (rn3_4.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.c = Convolution (rn3_5.c1.c.W, rn3_4.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization (rn3_5.c1.c.c.c, rn3_5.c1.c.c.sc, rn3_5.c1.c.c.b, rn3_5.c1.c.c.m, rn3_5.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear (rn3_5.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.c = Convolution (rn3_5.c2.W, rn3_5.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization (rn3_5.c2.c.c, rn3_5.c2.c.sc, rn3_5.c2.c.b, rn3_5.c2.c.m, rn3_5.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus (rn3_5.c2.c.y, rn3_4.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear (rn3_5.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.c = Convolution (rn3_6.c1.c.W, rn3_5.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization (rn3_6.c1.c.c.c, rn3_6.c1.c.c.sc, rn3_6.c1.c.c.b, rn3_6.c1.c.c.m, rn3_6.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear (rn3_6.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.c = Convolution (rn3_6.c2.W, rn3_6.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization (rn3_6.c2.c.c, rn3_6.c2.c.sc, rn3_6.c2.c.b, rn3_6.c2.c.m, rn3_6.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus (rn3_6.c2.c.y, rn3_5.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear (rn3_6.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.c = Convolution (rn3_7.c1.c.W, rn3_6.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization (rn3_7.c1.c.c.c, rn3_7.c1.c.c.sc, rn3_7.c1.c.c.b, rn3_7.c1.c.c.m, rn3_7.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear (rn3_7.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.c = Convolution (rn3_7.c2.W, rn3_7.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization (rn3_7.c2.c.c, rn3_7.c2.c.sc, rn3_7.c2.c.b, rn3_7.c2.c.m, rn3_7.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus (rn3_7.c2.c.y, rn3_6.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear (rn3_7.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.c = Convolution (rn3_8.c1.c.W, rn3_7.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization (rn3_8.c1.c.c.c, rn3_8.c1.c.c.sc, rn3_8.c1.c.c.b, rn3_8.c1.c.c.m, rn3_8.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear (rn3_8.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.c = Convolution (rn3_8.c2.W, rn3_8.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization (rn3_8.c2.c.c, rn3_8.c2.c.sc, rn3_8.c2.c.b, rn3_8.c2.c.m, rn3_8.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus (rn3_8.c2.c.y, rn3_7.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear (rn3_8.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.c = Convolution (rn3_9.c1.c.W, rn3_8.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization (rn3_9.c1.c.c.c, rn3_9.c1.c.c.sc, rn3_9.c1.c.c.b, rn3_9.c1.c.c.m, rn3_9.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear (rn3_9.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.c = Convolution (rn3_9.c2.W, rn3_9.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization (rn3_9.c2.c.c, rn3_9.c2.c.sc, rn3_9.c2.c.b, rn3_9.c2.c.m, rn3_9.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus (rn3_9.c2.c.y, rn3_8.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear (rn3_9.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.c = Convolution (rn3_10.c1.c.W, rn3_9.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization (rn3_10.c1.c.c.c, rn3_10.c1.c.c.sc, rn3_10.c1.c.c.b, rn3_10.c1.c.c.m, rn3_10.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear (rn3_10.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.c = Convolution (rn3_10.c2.W, rn3_10.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization (rn3_10.c2.c.c, rn3_10.c2.c.sc, rn3_10.c2.c.b, rn3_10.c2.c.m, rn3_10.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus (rn3_10.c2.c.y, rn3_9.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear (rn3_10.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.c = Convolution (rn3_11.c1.c.W, rn3_10.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization (rn3_11.c1.c.c.c, rn3_11.c1.c.c.sc, rn3_11.c1.c.c.b, rn3_11.c1.c.c.m, rn3_11.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear (rn3_11.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.c = Convolution (rn3_11.c2.W, rn3_11.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization (rn3_11.c2.c.c, rn3_11.c2.c.sc, rn3_11.c2.c.b, rn3_11.c2.c.m, rn3_11.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus (rn3_11.c2.c.y, rn3_10.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear (rn3_11.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.c = Convolution (rn3_12.c1.c.W, rn3_11.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization (rn3_12.c1.c.c.c, rn3_12.c1.c.c.sc, rn3_12.c1.c.c.b, rn3_12.c1.c.c.m, rn3_12.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear (rn3_12.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.c = Convolution (rn3_12.c2.W, rn3_12.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization (rn3_12.c2.c.c, rn3_12.c2.c.sc, rn3_12.c2.c.b, rn3_12.c2.c.m, rn3_12.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus (rn3_12.c2.c.y, rn3_11.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear (rn3_12.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.c = Convolution (rn3_13.c1.c.W, rn3_12.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization (rn3_13.c1.c.c.c, rn3_13.c1.c.c.sc, rn3_13.c1.c.c.b, rn3_13.c1.c.c.m, rn3_13.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear (rn3_13.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.c = Convolution (rn3_13.c2.W, rn3_13.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization (rn3_13.c2.c.c, rn3_13.c2.c.sc, rn3_13.c2.c.b, rn3_13.c2.c.m, rn3_13.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus (rn3_13.c2.c.y, rn3_12.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear (rn3_13.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.c = Convolution (rn3_14.c1.c.W, rn3_13.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization (rn3_14.c1.c.c.c, rn3_14.c1.c.c.sc, rn3_14.c1.c.c.b, rn3_14.c1.c.c.m, rn3_14.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear (rn3_14.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.c = Convolution (rn3_14.c2.W, rn3_14.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization (rn3_14.c2.c.c, rn3_14.c2.c.sc, rn3_14.c2.c.b, rn3_14.c2.c.m, rn3_14.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus (rn3_14.c2.c.y, rn3_13.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear (rn3_14.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.c = Convolution (rn3_15.c1.c.W, rn3_14.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization (rn3_15.c1.c.c.c, rn3_15.c1.c.c.sc, rn3_15.c1.c.c.b, rn3_15.c1.c.c.m, rn3_15.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear (rn3_15.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.c = Convolution (rn3_15.c2.W, rn3_15.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization (rn3_15.c2.c.c, rn3_15.c2.c.sc, rn3_15.c2.c.b, rn3_15.c2.c.m, rn3_15.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus (rn3_15.c2.c.y, rn3_14.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear (rn3_15.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.c = Convolution (rn3_16.c1.c.W, rn3_15.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization (rn3_16.c1.c.c.c, rn3_16.c1.c.c.sc, rn3_16.c1.c.c.b, rn3_16.c1.c.c.m, rn3_16.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear (rn3_16.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.c = Convolution (rn3_16.c2.W, rn3_16.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization (rn3_16.c2.c.c, rn3_16.c2.c.sc, rn3_16.c2.c.b, rn3_16.c2.c.m, rn3_16.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus (rn3_16.c2.c.y, rn3_15.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear (rn3_16.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.c = Convolution (rn3_17.c1.c.W, rn3_16.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization (rn3_17.c1.c.c.c, rn3_17.c1.c.c.sc, rn3_17.c1.c.c.b, rn3_17.c1.c.c.m, rn3_17.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear (rn3_17.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.c = Convolution (rn3_17.c2.W, rn3_17.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization (rn3_17.c2.c.c, rn3_17.c2.c.sc, rn3_17.c2.c.b, rn3_17.c2.c.m, rn3_17.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus (rn3_17.c2.c.y, rn3_16.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear (rn3_17.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.c = Convolution (rn3_18.c1.c.W, rn3_17.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization (rn3_18.c1.c.c.c, rn3_18.c1.c.c.sc, rn3_18.c1.c.c.b, rn3_18.c1.c.c.m, rn3_18.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear (rn3_18.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.c = Convolution (rn3_18.c2.W, rn3_18.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization (rn3_18.c2.c.c, rn3_18.c2.c.sc, rn3_18.c2.c.b, rn3_18.c2.c.m, rn3_18.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus (rn3_18.c2.c.y, rn3_17.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear (rn3_18.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling (rn3_18.y) : [8 x 8 x 64 x *] -> [1 x 1 x 64 x *]

OutputNodes.t Times operation: For legacy compatibility, the sample layout of left input (OutputNodes.W LearnableParameter operation) was patched to [10 x 1 x 1 x 64] (from [10 x 64])
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 390 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 05:26:15: Created model with 949 nodes on GPU 0.

07/14/2016 05:26:15: Training criterion node(s):
07/14/2016 05:26:15: 	CE = CrossEntropyWithSoftmax

07/14/2016 05:26:15: Evaluation criterion node(s):

07/14/2016 05:26:15: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[Err Gradient[1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [features Gradient[32 x 32 x 3 x *]] [labels Gradient[10 x *]] [rn1_1.c1.c.c.isd Gradient[16 x 1]] [rn1_1.c1.c.c.m Gradient[16 x 1]] [rn1_1.c2.c.isd Gradient[16 x 1]] [rn1_1.c2.c.m Gradient[16 x 1]] [rn1_10.c1.c.c.isd Gradient[16 x 1]] [rn1_10.c1.c.c.m Gradient[16 x 1]] [rn1_10.c2.c.isd Gradient[16 x 1]] [rn1_10.c2.c.m Gradient[16 x 1]] [rn1_11.c1.c.c.isd Gradient[16 x 1]] [rn1_11.c1.c.c.m Gradient[16 x 1]] [rn1_11.c2.c.isd Gradient[16 x 1]] [rn1_11.c2.c.m Gradient[16 x 1]] [rn1_12.c1.c.c.isd Gradient[16 x 1]] [rn1_12.c1.c.c.m Gradient[16 x 1]] [rn1_12.c2.c.isd Gradient[16 x 1]] [rn1_12.c2.c.m Gradient[16 x 1]] [rn1_13.c1.c.c.isd Gradient[16 x 1]] [rn1_13.c1.c.c.m Gradient[16 x 1]] [rn1_13.c2.c.isd Gradient[16 x 1]] [rn1_13.c2.c.m Gradient[16 x 1]] [rn1_14.c1.c.c.isd Gradient[16 x 1]] [rn1_14.c1.c.c.m Gradient[16 x 1]] [rn1_14.c2.c.isd Gradient[16 x 1]] [rn1_14.c2.c.m Gradient[16 x 1]] [rn1_15.c1.c.c.isd Gradient[16 x 1]] [rn1_15.c1.c.c.m Gradient[16 x 1]] [rn1_15.c2.c.isd Gradient[16 x 1]] [rn1_15.c2.c.m Gradient[16 x 1]] [rn1_16.c1.c.c.isd Gradient[16 x 1]] [rn1_16.c1.c.c.m Gradient[16 x 1]] [rn1_16.c2.c.isd Gradient[16 x 1]] [rn1_16.c2.c.m Gradient[16 x 1]] [rn1_17.c1.c.c.isd Gradient[16 x 1]] [rn1_17.c1.c.c.m Gradient[16 x 1]] [rn1_17.c2.c.isd Gradient[16 x 1]] [rn1_17.c2.c.m Gradient[16 x 1]] [rn1_18.c1.c.c.isd Gradient[16 x 1]] [rn1_18.c1.c.c.m Gradient[16 x 1]] [rn1_18.c2.c.isd Gradient[16 x 1]] [rn1_18.c2.c.m Gradient[16 x 1]] [rn1_2.c1.c.c.isd Gradient[16 x 1]] [rn1_2.c1.c.c.m Gradient[16 x 1]] [rn1_2.c2.c.isd Gradient[16 x 1]] [rn1_2.c2.c.m Gradient[16 x 1]] [rn1_3.c1.c.c.isd Gradient[16 x 1]] [rn1_3.c1.c.c.m Gradient[16 x 1]] [rn1_3.c2.c.isd Gradient[16 x 1]] [rn1_3.c2.c.m Gradient[16 x 1]] [rn1_4.c1.c.c.isd Gradient[16 x 1]] [rn1_4.c1.c.c.m Gradient[16 x 1]] [rn1_4.c2.c.isd Gradient[16 x 1]] [rn1_4.c2.c.m Gradient[16 x 1]] [rn1_5.c1.c.c.isd Gradient[16 x 1]] [rn1_5.c1.c.c.m Gradient[16 x 1]] [rn1_5.c2.c.isd Gradient[16 x 1]] [rn1_5.c2.c.m Gradient[16 x 1]] [rn1_6.c1.c.c.isd Gradient[16 x 1]] [rn1_6.c1.c.c.m Gradient[16 x 1]] [rn1_6.c2.c.isd Gradient[16 x 1]] [rn1_6.c2.c.m Gradient[16 x 1]] [rn1_7.c1.c.c.isd Gradient[16 x 1]] [rn1_7.c1.c.c.m Gradient[16 x 1]] [rn1_7.c2.c.isd Gradient[16 x 1]] [rn1_7.c2.c.m Gradient[16 x 1]] [rn1_8.c1.c.c.isd Gradient[16 x 1]] [rn1_8.c1.c.c.m Gradient[16 x 1]] [rn1_8.c2.c.isd Gradient[16 x 1]] [rn1_8.c2.c.m Gradient[16 x 1]] [rn1_9.c1.c.c.isd Gradient[16 x 1]] [rn1_9.c1.c.c.m Gradient[16 x 1]] [rn1_9.c2.c.isd Gradient[16 x 1]] [rn1_9.c2.c.m Gradient[16 x 1]] [rn2_1.c1.c.c.isd Gradient[32 x 1]] [rn2_1.c1.c.c.m Gradient[32 x 1]] [rn2_1.c2.c.isd Gradient[32 x 1]] [rn2_1.c2.c.m Gradient[32 x 1]] [rn2_1.c_proj.isd Gradient[32 x 1]] [rn2_1.c_proj.m Gradient[32 x 1]] [rn2_10.c1.c.c.isd Gradient[32 x 1]] [rn2_10.c1.c.c.m Gradient[32 x 1]] [rn2_10.c2.c.isd Gradient[32 x 1]] [rn2_10.c2.c.m Gradient[32 x 1]] [rn2_11.c1.c.c.isd Gradient[32 x 1]] [rn2_11.c1.c.c.m Gradient[32 x 1]] [rn2_11.c2.c.isd Gradient[32 x 1]] [rn2_11.c2.c.m Gradient[32 x 1]] [rn2_12.c1.c.c.isd Gradient[32 x 1]] [rn2_12.c1.c.c.m Gradient[32 x 1]] [rn2_12.c2.c.isd Gradient[32 x 1]] [rn2_12.c2.c.m Gradient[32 x 1]] [rn2_13.c1.c.c.isd Gradient[32 x 1]] [rn2_13.c1.c.c.m Gradient[32 x 1]] [rn2_13.c2.c.isd Gradient[32 x 1]] [rn2_13.c2.c.m Gradient[32 x 1]] [rn2_14.c1.c.c.isd Gradient[32 x 1]] [rn2_14.c1.c.c.m Gradient[32 x 1]] [rn2_14.c2.c.isd Gradient[32 x 1]] [rn2_14.c2.c.m Gradient[32 x 1]] [rn2_15.c1.c.c.isd Gradient[32 x 1]] [rn2_15.c1.c.c.m Gradient[32 x 1]] [rn2_15.c2.c.isd Gradient[32 x 1]] [rn2_15.c2.c.m Gradient[32 x 1]] [rn2_16.c1.c.c.isd Gradient[32 x 1]] [rn2_16.c1.c.c.m Gradient[32 x 1]] [rn2_16.c2.c.isd Gradient[32 x 1]] [rn2_16.c2.c.m Gradient[32 x 1]] [rn2_17.c1.c.c.isd Gradient[32 x 1]] [rn2_17.c1.c.c.m Gradient[32 x 1]] [rn2_17.c2.c.isd Gradient[32 x 1]] [rn2_17.c2.c.m Gradient[32 x 1]] [rn2_18.c1.c.c.isd Gradient[32 x 1]] [rn2_18.c1.c.c.m Gradient[32 x 1]] [rn2_18.c2.c.isd Gradient[32 x 1]] [rn2_18.c2.c.m Gradient[32 x 1]] [rn2_1_Wproj Gradient[32 x 16]] [rn2_2.c1.c.c.isd Gradient[32 x 1]] [rn2_2.c1.c.c.m Gradient[32 x 1]] [rn2_2.c2.c.isd Gradient[32 x 1]] [rn2_2.c2.c.m Gradient[32 x 1]] [rn2_3.c1.c.c.isd Gradient[32 x 1]] [rn2_3.c1.c.c.m Gradient[32 x 1]] [rn2_3.c2.c.isd Gradient[32 x 1]] [rn2_3.c2.c.m Gradient[32 x 1]] [rn2_4.c1.c.c.isd Gradient[32 x 1]] [rn2_4.c1.c.c.m Gradient[32 x 1]] [rn2_4.c2.c.isd Gradient[32 x 1]] [rn2_4.c2.c.m Gradient[32 x 1]] [rn2_5.c1.c.c.isd Gradient[32 x 1]] [rn2_5.c1.c.c.m Gradient[32 x 1]] [rn2_5.c2.c.isd Gradient[32 x 1]] [rn2_5.c2.c.m Gradient[32 x 1]] [rn2_6.c1.c.c.isd Gradient[32 x 1]] [rn2_6.c1.c.c.m Gradient[32 x 1]] [rn2_6.c2.c.isd Gradient[32 x 1]] [rn2_6.c2.c.m Gradient[32 x 1]] [rn2_7.c1.c.c.isd Gradient[32 x 1]] [rn2_7.c1.c.c.m Gradient[32 x 1]] [rn2_7.c2.c.isd Gradient[32 x 1]] [rn2_7.c2.c.m Gradient[32 x 1]] [rn2_8.c1.c.c.isd Gradient[32 x 1]] [rn2_8.c1.c.c.m Gradient[32 x 1]] [rn2_8.c2.c.isd Gradient[32 x 1]] [rn2_8.c2.c.m Gradient[32 x 1]] [rn2_9.c1.c.c.isd Gradient[32 x 1]] [rn2_9.c1.c.c.m Gradient[32 x 1]] [rn2_9.c2.c.isd Gradient[32 x 1]] [rn2_9.c2.c.m Gradient[32 x 1]] [rn3_1.c1.c.c.isd Gradient[64 x 1]] [rn3_1.c1.c.c.m Gradient[64 x 1]] [rn3_1.c2.c.isd Gradient[64 x 1]] [rn3_1.c2.c.m Gradient[64 x 1]] [rn3_1.c_proj.isd Gradient[64 x 1]] [rn3_1.c_proj.m Gradient[64 x 1]] [rn3_10.c1.c.c.isd Gradient[64 x 1]] [rn3_10.c1.c.c.m Gradient[64 x 1]] [rn3_10.c2.c.isd Gradient[64 x 1]] [rn3_10.c2.c.m Gradient[64 x 1]] [rn3_11.c1.c.c.isd Gradient[64 x 1]] [rn3_11.c1.c.c.m Gradient[64 x 1]] [rn3_11.c2.c.isd Gradient[64 x 1]] [rn3_11.c2.c.m Gradient[64 x 1]] [rn3_12.c1.c.c.isd Gradient[64 x 1]] [rn3_12.c1.c.c.m Gradient[64 x 1]] [rn3_12.c2.c.isd Gradient[64 x 1]] [rn3_12.c2.c.m Gradient[64 x 1]] [rn3_13.c1.c.c.isd Gradient[64 x 1]] [rn3_13.c1.c.c.m Gradient[64 x 1]] [rn3_13.c2.c.isd Gradient[64 x 1]] [rn3_13.c2.c.m Gradient[64 x 1]] [rn3_14.c1.c.c.isd Gradient[64 x 1]] [rn3_14.c1.c.c.m Gradient[64 x 1]] [rn3_14.c2.c.isd Gradient[64 x 1]] [rn3_14.c2.c.m Gradient[64 x 1]] [rn3_15.c1.c.c.isd Gradient[64 x 1]] [rn3_15.c1.c.c.m Gradient[64 x 1]] [rn3_15.c2.c.isd Gradient[64 x 1]] [rn3_15.c2.c.m Gradient[64 x 1]] [rn3_16.c1.c.c.isd Gradient[64 x 1]] [rn3_16.c1.c.c.m Gradient[64 x 1]] [rn3_16.c2.c.isd Gradient[64 x 1]] [rn3_16.c2.c.m Gradient[64 x 1]] [rn3_17.c1.c.c.isd Gradient[64 x 1]] [rn3_17.c1.c.c.m Gradient[64 x 1]] [rn3_17.c2.c.isd Gradient[64 x 1]] [rn3_17.c2.c.m Gradient[64 x 1]] [rn3_18.c1.c.c.isd Gradient[64 x 1]] [rn3_18.c1.c.c.m Gradient[64 x 1]] [rn3_18.c2.c.isd Gradient[64 x 1]] [rn3_18.c2.c.m Gradient[64 x 1]] [rn3_1_Wproj Gradient[64 x 32]] [rn3_2.c1.c.c.isd Gradient[64 x 1]] [rn3_2.c1.c.c.m Gradient[64 x 1]] [rn3_2.c2.c.isd Gradient[64 x 1]] [rn3_2.c2.c.m Gradient[64 x 1]] [rn3_3.c1.c.c.isd Gradient[64 x 1]] [rn3_3.c1.c.c.m Gradient[64 x 1]] [rn3_3.c2.c.isd Gradient[64 x 1]] [rn3_3.c2.c.m Gradient[64 x 1]] [rn3_4.c1.c.c.isd Gradient[64 x 1]] [rn3_4.c1.c.c.m Gradient[64 x 1]] [rn3_4.c2.c.isd Gradient[64 x 1]] [rn3_4.c2.c.m Gradient[64 x 1]] [rn3_5.c1.c.c.isd Gradient[64 x 1]] [rn3_5.c1.c.c.m Gradient[64 x 1]] [rn3_5.c2.c.isd Gradient[64 x 1]] [rn3_5.c2.c.m Gradient[64 x 1]] [rn3_6.c1.c.c.isd Gradient[64 x 1]] [rn3_6.c1.c.c.m Gradient[64 x 1]] [rn3_6.c2.c.isd Gradient[64 x 1]] [rn3_6.c2.c.m Gradient[64 x 1]] [rn3_7.c1.c.c.isd Gradient[64 x 1]] [rn3_7.c1.c.c.m Gradient[64 x 1]] [rn3_7.c2.c.isd Gradient[64 x 1]] [rn3_7.c2.c.m Gradient[64 x 1]] [rn3_8.c1.c.c.isd Gradient[64 x 1]] [rn3_8.c1.c.c.m Gradient[64 x 1]] [rn3_8.c2.c.isd Gradient[64 x 1]] [rn3_8.c2.c.m Gradient[64 x 1]] [rn3_9.c1.c.c.isd Gradient[64 x 1]] [rn3_9.c1.c.c.m Gradient[64 x 1]] [rn3_9.c2.c.isd Gradient[64 x 1]] [rn3_9.c2.c.m Gradient[64 x 1]] }
00000089B6591A20: {[features Value[32 x 32 x 3 x *]] }
00000089B708C010: {[rn1_1.c1.c.W Value[16 x 144]] }
00000089B708C0B0: {[rn1_1.c1.c.c.b Value[16 x 1]] }
00000089B708C1F0: {[rn1_1.c1.c.c.sc Value[16 x 1]] }
00000089B708C330: {[conv1.c.c.isd Value[16 x 1]] }
00000089B708C470: {[rn1_1.c1.c.c.m Value[16 x 1]] }
00000089B708C650: {[conv1.c.c.m Value[16 x 1]] }
00000089B708C6F0: {[rn1_1.c1.c.c.isd Value[16 x 1]] }
00000089B708CB50: {[rn1_1.c2.W Value[16 x 144]] }
00000089B708CFB0: {[labels Value[10 x *]] }
00000089B708D2D0: {[conv1.c.c.sc Value[16 x 1]] }
00000089B708D870: {[conv1.c.W Value[16 x 27]] }
00000089B708DB90: {[conv1.c.c.b Value[16 x 1]] }
00000089B7B62360: {[rn1_2.c2.W Value[16 x 144]] }
00000089B7B62400: {[rn1_3.c1.c.W Value[16 x 144]] }
00000089B7B625E0: {[rn1_3.c1.c.c.sc Value[16 x 1]] }
00000089B7B627C0: {[rn1_2.c1.c.W Value[16 x 144]] }
00000089B7B62900: {[rn1_2.c1.c.c.sc Value[16 x 1]] }
00000089B7B62AE0: {[rn1_2.c1.c.c.m Value[16 x 1]] }
00000089B7B62EA0: {[rn1_3.c1.c.c.b Value[16 x 1]] }
00000089B7B62F40: {[rn1_3.c1.c.c.m Value[16 x 1]] }
00000089B7B63120: {[rn1_2.c2.c.m Value[16 x 1]] }
00000089B7B63260: {[rn1_3.c1.c.c.isd Value[16 x 1]] }
00000089B7B633A0: {[rn1_1.c2.c.isd Value[16 x 1]] }
00000089B7B63760: {[rn1_1.c2.c.b Value[16 x 1]] }
00000089B7B638A0: {[rn1_2.c1.c.c.b Value[16 x 1]] }
00000089B7B63A80: {[rn1_2.c1.c.c.isd Value[16 x 1]] }
00000089B7B63B20: {[rn1_2.c2.c.isd Value[16 x 1]] }
00000089B7B63D00: {[rn1_2.c2.c.sc Value[16 x 1]] }
00000089B7B63EE0: {[rn1_1.c2.c.m Value[16 x 1]] }
00000089B7B64020: {[rn1_1.c2.c.sc Value[16 x 1]] }
00000089B7B640C0: {[rn1_2.c2.c.b Value[16 x 1]] }
00000089B7B731B0: {[rn1_3.c2.c.sc Value[16 x 1]] }
00000089B7B73390: {[rn1_4.c1.c.W Value[16 x 144]] }
00000089B7B734D0: {[rn1_4.c1.c.c.b Value[16 x 1]] }
00000089B7B73570: {[rn1_4.c1.c.c.m Value[16 x 1]] }
00000089B7B73750: {[rn1_4.c2.c.b Value[16 x 1]] }
00000089B7B73890: {[rn1_5.c1.c.c.b Value[16 x 1]] }
00000089B7B739D0: {[rn1_3.c2.c.m Value[16 x 1]] }
00000089B7B73B10: {[rn1_4.c2.c.m Value[16 x 1]] }
00000089B7B73BB0: {[rn1_4.c1.c.c.sc Value[16 x 1]] }
00000089B7B73D90: {[rn1_3.c2.c.isd Value[16 x 1]] }
00000089B7B73E30: {[rn1_3.c2.W Value[16 x 144]] }
00000089B7B74290: {[rn1_4.c2.c.sc Value[16 x 1]] }
00000089B7B74470: {[rn1_5.c1.c.W Value[16 x 144]] }
00000089B7B74830: {[rn1_4.c2.W Value[16 x 144]] }
00000089B7B748D0: {[rn1_3.c2.c.b Value[16 x 1]] }
00000089B7B74970: {[rn1_4.c1.c.c.isd Value[16 x 1]] }
00000089B7B74DD0: {[rn1_4.c2.c.isd Value[16 x 1]] }
00000089B7B74F10: {[rn1_5.c1.c.c.sc Value[16 x 1]] }
00000089B7B79E20: {[rn1_6.c2.W Value[16 x 144]] }
00000089B7B79EC0: {[rn1_5.c1.c.c.m Value[16 x 1]] }
00000089B7B7A000: {[rn1_5.c2.c.isd Value[16 x 1]] }
00000089B7B7A0A0: {[rn1_6.c1.c.c.isd Value[16 x 1]] }
00000089B7B7A3C0: {[rn1_6.c1.c.c.sc Value[16 x 1]] }
00000089B7B7A640: {[rn1_5.c1.c.c.isd Value[16 x 1]] }
00000089B7B7A6E0: {[rn1_5.c2.c.b Value[16 x 1]] }
00000089B7B7A780: {[rn1_5.c2.c.m Value[16 x 1]] }
00000089B7B7A8C0: {[rn1_6.c1.c.c.b Value[16 x 1]] }
00000089B7B7AAA0: {[rn1_6.c2.c.m Value[16 x 1]] }
00000089B7B7AC80: {[rn1_6.c1.c.c.m Value[16 x 1]] }
00000089B7B7AFA0: {[rn1_5.c2.c.sc Value[16 x 1]] }
00000089B7B7B180: {[rn1_6.c2.c.b Value[16 x 1]] }
00000089B7B7B220: {[rn1_6.c2.c.sc Value[16 x 1]] }
00000089B7B7B360: {[rn1_6.c2.c.isd Value[16 x 1]] }
00000089B7B7B720: {[rn1_7.c1.c.W Value[16 x 144]] }
00000089B7B7B7C0: {[rn1_6.c1.c.W Value[16 x 144]] }
00000089B7B7B9A0: {[rn1_5.c2.W Value[16 x 144]] }
00000089C08D00E0: {[rn1_8.c1.c.W Value[16 x 144]] }
00000089C08D0180: {[rn1_8.c1.c.c.sc Value[16 x 1]] }
00000089C08D0220: {[rn1_8.c2.c.b Value[16 x 1]] }
00000089C08D02C0: {[rn1_7.c2.c.b Value[16 x 1]] }
00000089C08D0360: {[rn1_7.c2.c.isd Value[16 x 1]] }
00000089C08D0400: {[rn1_8.c1.c.c.b Value[16 x 1]] }
00000089C08D04A0: {[rn1_7.c2.c.sc Value[16 x 1]] }
00000089C08D0860: {[rn1_8.c1.c.c.isd Value[16 x 1]] }
00000089C08D09A0: {[rn1_8.c2.W Value[16 x 144]] }
00000089C08D0AE0: {[rn1_7.c1.c.c.isd Value[16 x 1]] }
00000089C08D0C20: {[rn1_7.c1.c.c.sc Value[16 x 1]] }
00000089C08D0CC0: {[rn1_7.c2.W Value[16 x 144]] }
00000089C08D1260: {[rn1_8.c1.c.c.m Value[16 x 1]] }
00000089C08D13A0: {[rn1_7.c1.c.c.b Value[16 x 1]] }
00000089C08D14E0: {[rn1_7.c2.c.m Value[16 x 1]] }
00000089C08D1800: {[rn1_8.c2.c.sc Value[16 x 1]] }
00000089C08D18A0: {[rn1_8.c2.c.m Value[16 x 1]] }
00000089C08D1E40: {[rn1_8.c2.c.isd Value[16 x 1]] }
00000089C08D1F80: {[rn1_7.c1.c.c.m Value[16 x 1]] }
00000089C08DDDD0: {[rn1_10.c1.c.c.sc Value[16 x 1]] }
00000089C08DDF10: {[rn1_9.c1.c.W Value[16 x 144]] }
00000089C08DE050: {[rn1_10.c2.c.b Value[16 x 1]] }
00000089C08DE230: {[rn1_9.c1.c.c.m Value[16 x 1]] }
00000089C08DE370: {[rn1_9.c2.W Value[16 x 144]] }
00000089C08DE550: {[rn1_10.c2.W Value[16 x 144]] }
00000089C08DE690: {[rn1_10.c2.c.sc Value[16 x 1]] }
00000089C08DE7D0: {[rn1_9.c1.c.c.sc Value[16 x 1]] }
00000089C08DE9B0: {[rn1_9.c2.c.isd Value[16 x 1]] }
00000089C08DEA50: {[rn1_9.c2.c.sc Value[16 x 1]] }
00000089C08DECD0: {[rn1_10.c2.c.m Value[16 x 1]] }
00000089C08DEE10: {[rn1_9.c2.c.b Value[16 x 1]] }
00000089C08DF1D0: {[rn1_10.c1.c.c.isd Value[16 x 1]] }
00000089C08DF270: {[rn1_10.c1.c.W Value[16 x 144]] }
00000089C08DF450: {[rn1_9.c1.c.c.isd Value[16 x 1]] }
00000089C08DF770: {[rn1_10.c1.c.c.m Value[16 x 1]] }
00000089C08DF810: {[rn1_10.c1.c.c.b Value[16 x 1]] }
00000089C08DF9F0: {[rn1_9.c1.c.c.b Value[16 x 1]] }
00000089C08DFA90: {[rn1_9.c2.c.m Value[16 x 1]] }
00000089C08E2600: {[rn1_12.c1.c.c.b Value[16 x 1]] }
00000089C08E2740: {[rn1_12.c2.c.b Value[16 x 1]] }
00000089C08E2B00: {[rn1_11.c1.c.c.sc Value[16 x 1]] }
00000089C08E2BA0: {[rn1_11.c2.c.m Value[16 x 1]] }
00000089C08E2CE0: {[rn1_11.c2.c.b Value[16 x 1]] }
00000089C08E3000: {[rn1_11.c2.W Value[16 x 144]] }
00000089C08E30A0: {[rn1_11.c2.c.isd Value[16 x 1]] }
00000089C08E31E0: {[rn1_12.c1.c.W Value[16 x 144]] }
00000089C08E3320: {[rn1_12.c1.c.c.sc Value[16 x 1]] }
00000089C08E33C0: {[rn1_11.c1.c.c.m Value[16 x 1]] }
00000089C08E35A0: {[rn1_12.c1.c.c.m Value[16 x 1]] }
00000089C08E3820: {[rn1_11.c1.c.c.b Value[16 x 1]] }
00000089C08E38C0: {[rn1_11.c2.c.sc Value[16 x 1]] }
00000089C08E3BE0: {[rn1_12.c1.c.c.isd Value[16 x 1]] }
00000089C08E3C80: {[rn1_10.c2.c.isd Value[16 x 1]] }
00000089C08E3E60: {[rn1_11.c1.c.W Value[16 x 144]] }
00000089C08E4220: {[rn1_11.c1.c.c.isd Value[16 x 1]] }
00000089C08E4360: {[rn1_12.c2.W Value[16 x 144]] }
00000089C08EA780: {[rn1_14.c1.c.c.isd Value[16 x 1]] }
00000089C08EA8C0: {[rn1_13.c1.c.c.sc Value[16 x 1]] }
00000089C08EAE60: {[rn1_13.c1.c.c.m Value[16 x 1]] }
00000089C08EAFA0: {[rn1_13.c2.c.m Value[16 x 1]] }
00000089C08EB040: {[rn1_14.c1.c.c.b Value[16 x 1]] }
00000089C08EB0E0: {[rn1_13.c1.c.W Value[16 x 144]] }
00000089C08EB220: {[rn1_14.c1.c.c.m Value[16 x 1]] }
00000089C08EB4A0: {[rn1_12.c2.c.m Value[16 x 1]] }
00000089C08EB680: {[rn1_13.c2.W Value[16 x 144]] }
00000089C08EB860: {[rn1_13.c2.c.b Value[16 x 1]] }
00000089C08EB900: {[rn1_12.c2.c.sc Value[16 x 1]] }
00000089C08EBA40: {[rn1_12.c2.c.isd Value[16 x 1]] }
00000089C08EBAE0: {[rn1_13.c2.c.sc Value[16 x 1]] }
00000089C08EBB80: {[rn1_13.c2.c.isd Value[16 x 1]] }
00000089C08EBCC0: {[rn1_13.c1.c.c.b Value[16 x 1]] }
00000089C08EBD60: {[rn1_13.c1.c.c.isd Value[16 x 1]] }
00000089C08EC260: {[rn1_14.c1.c.W Value[16 x 144]] }
00000089C08EC3A0: {[rn1_14.c1.c.c.sc Value[16 x 1]] }
00000089C08EE5D0: {[rn2_1.c1.c.c.b Value[32 x 1]] }
00000089C08EE670: {[rn2_1.c_proj.b Value[32 x 1]] }
00000089C08EE990: {[rn1_18.c2.c.m Value[16 x 1]] }
00000089C08EEAD0: {[rn1_18.c2.c.isd Value[16 x 1]] }
00000089C08EEF30: {[rn2_1.c_proj.m Value[32 x 1]] }
00000089C08EF070: {[rn2_1.c2.c.b Value[32 x 1]] }
00000089C08EF110: {[rn2_1.c_proj.isd Value[32 x 1]] }
00000089C08EF390: {[rn1_18.c2.W Value[16 x 144]] }
00000089C08EF4D0: {[rn1_18.c1.c.c.isd Value[16 x 1]] }
00000089C08EF610: {[rn2_1.c1.c.c.sc Value[32 x 1]] }
00000089C08EF890: {[rn2_1.c2.W Value[32 x 288]] }
00000089C08EF930: {[rn2_1.c2.c.sc Value[32 x 1]] }
00000089C08EFB10: {[rn2_1.c1.c.c.m Value[32 x 1]] }
00000089C08EFC50: {[rn1_18.c1.c.c.m Value[16 x 1]] }
00000089C08EFD90: {[rn2_1.c_proj.sc Value[32 x 1]] }
00000089C08EFE30: {[rn2_2.c1.c.W Value[32 x 288]] }
00000089C08F0290: {[rn2_2.c1.c.c.b Value[32 x 1]] }
00000089C08F0650: {[rn2_1.c1.c.c.isd Value[32 x 1]] }
00000089C08F0830: {[rn2_1.c2.c.m Value[32 x 1]] }
00000089C08F08D0: {[rn1_18.c2.c.sc Value[16 x 1]] }
00000089C08F0970: {[rn2_1.c2.c.isd Value[32 x 1]] }
00000089C08F0A10: {[rn1_18.c2.c.b Value[16 x 1]] }
00000089C08F0AB0: {[rn2_1_Wproj Value[32 x 16]] }
00000089C08F0B50: {[rn2_1.c1.c.W Value[32 x 144]] }
00000089C08F10F0: {[rn2_2.c2.c.b Value[32 x 1]] }
00000089C08F1230: {[rn2_3.c1.c.c.sc Value[32 x 1]] }
00000089C08F15F0: {[rn2_3.c1.c.c.isd Value[32 x 1]] }
00000089C08F1730: {[rn2_4.c1.c.W Value[32 x 288]] }
00000089C08F1870: {[rn2_4.c1.c.c.b Value[32 x 1]] }
00000089C08F19B0: {[rn2_4.c1.c.c.sc Value[32 x 1]] }
00000089C08F1A50: {[rn2_4.c1.c.c.isd Value[32 x 1]] }
00000089C08F1AF0: {[rn2_2.c2.c.sc Value[32 x 1]] }
00000089C08F2130: {[rn2_4.c1.c.c.m Value[32 x 1]] }
00000089C08F2270: {[rn2_3.c2.c.m Value[32 x 1]] }
00000089C08F2590: {[rn2_3.c1.c.c.m Value[32 x 1]] }
00000089C08F2630: {[rn2_3.c2.c.isd Value[32 x 1]] }
00000089C08F2770: {[rn2_3.c1.c.W Value[32 x 288]] }
00000089C08F29F0: {[rn2_3.c1.c.c.b Value[32 x 1]] }
00000089C08F2B30: {[rn2_2.c1.c.c.m Value[32 x 1]] }
00000089C08F2DB0: {[rn2_2.c2.c.isd Value[32 x 1]] }
00000089C08F2E50: {[rn2_3.c2.c.sc Value[32 x 1]] }
00000089C08F2F90: {[rn2_2.c1.c.c.isd Value[32 x 1]] }
00000089C08F30D0: {[rn2_2.c2.W Value[32 x 288]] }
00000089C08F3210: {[rn2_2.c1.c.c.sc Value[32 x 1]] }
00000089C08F3350: {[rn2_3.c2.W Value[32 x 288]] }
00000089C08F33F0: {[rn2_3.c2.c.b Value[32 x 1]] }
00000089C08F3530: {[rn2_2.c2.c.m Value[32 x 1]] }
00000089C08F3670: {[rn2_4.c2.c.b Value[32 x 1]] }
00000089C08F3710: {[rn2_6.c1.c.W Value[32 x 288]] }
00000089C08F37B0: {[rn2_6.c2.W Value[32 x 288]] }
00000089C08F3990: {[rn2_4.c2.c.isd Value[32 x 1]] }
00000089C08F3C10: {[rn2_6.c2.c.sc Value[32 x 1]] }
00000089C08F3DF0: {[rn2_5.c2.c.isd Value[32 x 1]] }
00000089C08F3FD0: {[rn2_4.c2.c.m Value[32 x 1]] }
00000089C08F4110: {[rn2_5.c2.c.b Value[32 x 1]] }
00000089C08F42F0: {[rn2_6.c1.c.c.m Value[32 x 1]] }
00000089C08F4390: {[rn2_6.c2.c.b Value[32 x 1]] }
00000089C08F44D0: {[rn2_5.c2.c.sc Value[32 x 1]] }
00000089C08F47F0: {[rn2_5.c1.c.W Value[32 x 288]] }
00000089C08F4890: {[rn2_4.c2.W Value[32 x 288]] }
00000089C08F49D0: {[rn2_5.c2.W Value[32 x 288]] }
00000089C08F4BB0: {[rn2_5.c2.c.m Value[32 x 1]] }
00000089C08F4C50: {[rn2_6.c1.c.c.b Value[32 x 1]] }
00000089C08F4D90: {[rn2_5.c1.c.c.m Value[32 x 1]] }
00000089C08F4F70: {[rn2_6.c2.c.m Value[32 x 1]] }
00000089C08F50B0: {[rn2_6.c2.c.isd Value[32 x 1]] }
00000089C08F51F0: {[rn2_6.c1.c.c.isd Value[32 x 1]] }
00000089C08F5510: {[rn2_5.c1.c.c.b Value[32 x 1]] }
00000089C08F55B0: {[rn2_5.c1.c.c.isd Value[32 x 1]] }
00000089C08F5790: {[rn2_5.c1.c.c.sc Value[32 x 1]] }
00000089C08F58D0: {[rn2_6.c1.c.c.sc Value[32 x 1]] }
00000089C08F5C90: {[rn2_4.c2.c.sc Value[32 x 1]] }
00000089C08F5E70: {[rn2_7.c1.c.c.m Value[32 x 1]] }
00000089C08F6050: {[rn2_7.c1.c.W Value[32 x 288]] }
00000089C08F62D0: {[rn2_7.c1.c.c.sc Value[32 x 1]] }
00000089C08F6370: {[rn2_7.c1.c.c.b Value[32 x 1]] }
00000089C08FC6A0: {[rn1_15.c2.c.m Value[16 x 1]] }
00000089C08FC7E0: {[rn1_15.c1.c.W Value[16 x 144]] }
00000089C08FC880: {[rn1_15.c1.c.c.sc Value[16 x 1]] }
00000089C08FCA60: {[rn1_15.c2.c.isd Value[16 x 1]] }
00000089C08FCC40: {[rn1_14.c2.c.isd Value[16 x 1]] }
00000089C08FCCE0: {[rn1_16.c1.c.W Value[16 x 144]] }
00000089C08FCF60: {[rn1_15.c2.c.b Value[16 x 1]] }
00000089C08FD000: {[rn1_14.c2.W Value[16 x 144]] }
00000089C08FD460: {[rn1_16.c1.c.c.b Value[16 x 1]] }
00000089C08FD640: {[rn1_15.c1.c.c.isd Value[16 x 1]] }
00000089C08FD780: {[rn1_14.c2.c.b Value[16 x 1]] }
00000089C08FD820: {[rn1_16.c1.c.c.sc Value[16 x 1]] }
00000089C08FD960: {[rn1_16.c1.c.c.m Value[16 x 1]] }
00000089C08FDA00: {[rn1_15.c1.c.c.b Value[16 x 1]] }
00000089C08FDBE0: {[rn1_15.c2.W Value[16 x 144]] }
00000089C08FDD20: {[rn1_14.c2.c.sc Value[16 x 1]] }
00000089C08FDDC0: {[rn1_14.c2.c.m Value[16 x 1]] }
00000089C08FDF00: {[rn1_16.c1.c.c.isd Value[16 x 1]] }
00000089C08FE040: {[rn1_15.c1.c.c.m Value[16 x 1]] }
00000089C08FE360: {[rn1_15.c2.c.sc Value[16 x 1]] }
00000089C090E830: {[rn1_17.c1.c.c.m Value[16 x 1]] }
00000089C090EAB0: {[rn1_18.c1.c.W Value[16 x 144]] }
00000089C090EC90: {[rn1_18.c1.c.c.sc Value[16 x 1]] }
00000089C090ED30: {[rn1_17.c2.W Value[16 x 144]] }
00000089C090EE70: {[rn1_17.c1.c.c.sc Value[16 x 1]] }
00000089C090EFB0: {[rn1_16.c2.W Value[16 x 144]] }
00000089C090F0F0: {[rn1_18.c1.c.c.b Value[16 x 1]] }
00000089C090F2D0: {[rn1_17.c1.c.c.b Value[16 x 1]] }
00000089C090F370: {[rn1_16.c2.c.isd Value[16 x 1]] }
00000089C090F410: {[rn1_16.c2.c.m Value[16 x 1]] }
00000089C090F4B0: {[rn1_17.c1.c.c.isd Value[16 x 1]] }
00000089C090F910: {[rn1_17.c2.c.m Value[16 x 1]] }
00000089C090FB90: {[rn1_17.c2.c.sc Value[16 x 1]] }
00000089C090FCD0: {[rn1_16.c2.c.sc Value[16 x 1]] }
00000089C090FD70: {[rn1_17.c2.c.b Value[16 x 1]] }
00000089C090FFF0: {[rn1_17.c2.c.isd Value[16 x 1]] }
00000089C0910270: {[rn1_17.c1.c.W Value[16 x 144]] }
00000089C09103B0: {[rn1_16.c2.c.b Value[16 x 1]] }
00000089C09780B0: {[rn2_13.c1.c.c.m Value[32 x 1]] }
00000089C0978150: {[rn2_13.c2.c.b Value[32 x 1]] }
00000089C0978470: {[rn2_13.c2.W Value[32 x 288]] }
00000089C09786F0: {[rn2_13.c2.c.isd Value[32 x 1]] }
00000089C0978830: {[rn2_14.c1.c.c.m Value[32 x 1]] }
00000089C09788D0: {[rn2_14.c1.c.c.isd Value[32 x 1]] }
00000089C0978A10: {[rn2_13.c1.c.c.b Value[32 x 1]] }
00000089C0978AB0: {[rn2_13.c1.c.c.sc Value[32 x 1]] }
00000089C0978E70: {[rn2_12.c2.c.m Value[32 x 1]] }
00000089C0979050: {[rn2_14.c2.c.sc Value[32 x 1]] }
00000089C0979190: {[rn2_12.c2.c.b Value[32 x 1]] }
00000089C09792D0: {[rn2_13.c1.c.c.isd Value[32 x 1]] }
00000089C09794B0: {[rn2_13.c2.c.sc Value[32 x 1]] }
00000089C0979550: {[rn2_14.c2.c.b Value[32 x 1]] }
00000089C0979690: {[rn2_14.c1.c.c.b Value[32 x 1]] }
00000089C09797D0: {[rn2_14.c2.c.m Value[32 x 1]] }
00000089C0979B90: {[rn2_13.c2.c.m Value[32 x 1]] }
00000089C0979CD0: {[rn2_12.c2.c.isd Value[32 x 1]] }
00000089C0979D70: {[rn2_12.c2.W Value[32 x 288]] }
00000089C0979E10: {[rn2_14.c1.c.c.sc Value[32 x 1]] }
00000089C0979EB0: {[rn2_14.c2.W Value[32 x 288]] }
00000089C0979FF0: {[rn2_14.c2.c.isd Value[32 x 1]] }
00000089C097A270: {[rn2_13.c1.c.W Value[32 x 288]] }
00000089C097A4F0: {[rn2_12.c2.c.sc Value[32 x 1]] }
00000089C097A590: {[rn2_14.c1.c.W Value[32 x 288]] }
00000089C097A9F0: {[rn2_7.c1.c.c.isd Value[32 x 1]] }
00000089C097AA90: {[rn2_8.c1.c.W Value[32 x 288]] }
00000089C097AB30: {[rn2_9.c1.c.c.sc Value[32 x 1]] }
00000089C097AC70: {[rn2_8.c1.c.c.m Value[32 x 1]] }
00000089C097AE50: {[rn2_8.c1.c.c.isd Value[32 x 1]] }
00000089C097B030: {[rn2_8.c2.c.m Value[32 x 1]] }
00000089C097B0D0: {[rn2_8.c2.c.isd Value[32 x 1]] }
00000089C097B170: {[rn2_7.c2.c.isd Value[32 x 1]] }
00000089C097B350: {[rn2_8.c1.c.c.sc Value[32 x 1]] }
00000089C097B670: {[rn2_9.c1.c.W Value[32 x 288]] }
00000089C097BB70: {[rn2_7.c2.c.sc Value[32 x 1]] }
00000089C097BCB0: {[rn2_9.c1.c.c.b Value[32 x 1]] }
00000089C097BD50: {[rn2_9.c1.c.c.m Value[32 x 1]] }
00000089C097BFD0: {[rn2_9.c1.c.c.isd Value[32 x 1]] }
00000089C097C1B0: {[rn2_9.c2.W Value[32 x 288]] }
00000089C097C390: {[rn2_9.c2.c.sc Value[32 x 1]] }
00000089C097C4D0: {[rn2_8.c1.c.c.b Value[32 x 1]] }
00000089C097C570: {[rn2_7.c2.W Value[32 x 288]] }
00000089C097C610: {[rn2_7.c2.c.b Value[32 x 1]] }
00000089C097C750: {[rn2_8.c2.W Value[32 x 288]] }
00000089C097C890: {[rn2_8.c2.c.b Value[32 x 1]] }
00000089C097CD90: {[rn2_9.c2.c.b Value[32 x 1]] }
00000089C097CED0: {[rn2_8.c2.c.sc Value[32 x 1]] }
00000089C097D010: {[rn2_7.c2.c.m Value[32 x 1]] }
00000089C097D150: {[rn2_11.c2.c.m Value[32 x 1]] }
00000089C097D290: {[rn2_11.c2.c.isd Value[32 x 1]] }
00000089C097D3D0: {[rn2_10.c2.c.m Value[32 x 1]] }
00000089C097D510: {[rn2_10.c2.W Value[32 x 288]] }
00000089C097D970: {[rn2_11.c1.c.c.b Value[32 x 1]] }
00000089C097DA10: {[rn2_12.c1.c.W Value[32 x 288]] }
00000089C097DAB0: {[rn2_10.c1.c.c.sc Value[32 x 1]] }
00000089C097DDD0: {[rn2_9.c2.c.isd Value[32 x 1]] }
00000089C097DE70: {[rn2_9.c2.c.m Value[32 x 1]] }
00000089C097E190: {[rn2_10.c1.c.c.m Value[32 x 1]] }
00000089C097E230: {[rn2_10.c2.c.b Value[32 x 1]] }
00000089C097E4B0: {[rn2_11.c1.c.c.m Value[32 x 1]] }
00000089C097E910: {[rn2_11.c1.c.c.sc Value[32 x 1]] }
00000089C097E9B0: {[rn2_10.c1.c.c.b Value[32 x 1]] }
00000089C097EA50: {[rn2_11.c1.c.c.isd Value[32 x 1]] }
00000089C097EAF0: {[rn2_10.c1.c.c.isd Value[32 x 1]] }
00000089C097ECD0: {[rn2_11.c2.W Value[32 x 288]] }
00000089C097EEB0: {[rn2_10.c2.c.sc Value[32 x 1]] }
00000089C097EF50: {[rn2_10.c1.c.W Value[32 x 288]] }
00000089C097F130: {[rn2_11.c1.c.W Value[32 x 288]] }
00000089C097F3B0: {[rn2_11.c2.c.b Value[32 x 1]] }
00000089C097F630: {[rn2_11.c2.c.sc Value[32 x 1]] }
00000089C097F6D0: {[rn2_10.c2.c.isd Value[32 x 1]] }
00000089C097F950: {[rn2_12.c1.c.c.b Value[32 x 1]] }
00000089C097FB30: {[rn2_12.c1.c.c.sc Value[32 x 1]] }
00000089C097FD10: {[rn2_12.c1.c.c.m Value[32 x 1]] }
00000089C097FEF0: {[rn2_12.c1.c.c.isd Value[32 x 1]] }
00000089C09B86B0: {[rn3_2.c2.c.m Value[64 x 1]] }
00000089C09B8890: {[rn3_3.c1.c.c.b Value[64 x 1]] }
00000089C09B8930: {[rn3_3.c1.c.c.sc Value[64 x 1]] }
00000089C09B89D0: {[rn3_3.c1.c.c.m Value[64 x 1]] }
00000089C09B8A70: {[rn3_3.c2.c.b Value[64 x 1]] }
00000089C09B8B10: {[rn3_3.c1.c.W Value[64 x 576]] }
00000089C09B8C50: {[rn3_3.c2.c.sc Value[64 x 1]] }
00000089C09B8E30: {[rn3_3.c2.c.isd Value[64 x 1]] }
00000089C09B8ED0: {[rn3_1.c_proj.isd Value[64 x 1]] }
00000089C09B95B0: {[rn3_2.c2.W Value[64 x 576]] }
00000089C09B9650: {[rn3_2.c1.c.c.m Value[64 x 1]] }
00000089C09B9970: {[rn3_3.c2.c.m Value[64 x 1]] }
00000089C09B9A10: {[rn3_1.c_proj.m Value[64 x 1]] }
00000089C09B9BF0: {[rn3_2.c1.c.c.b Value[64 x 1]] }
00000089C09B9C90: {[rn3_2.c1.c.c.isd Value[64 x 1]] }
00000089C09B9DD0: {[rn3_2.c2.c.sc Value[64 x 1]] }
00000089C09B9E70: {[rn3_2.c2.c.isd Value[64 x 1]] }
00000089C09BA230: {[rn3_2.c1.c.W Value[64 x 576]] }
00000089C09BA2D0: {[rn3_2.c1.c.c.sc Value[64 x 1]] }
00000089C09BA5F0: {[rn3_2.c2.c.b Value[64 x 1]] }
00000089C09BA910: {[rn3_3.c1.c.c.isd Value[64 x 1]] }
00000089C09BAAF0: {[rn3_1.c_proj.sc Value[64 x 1]] }
00000089C09BAC30: {[rn3_3.c2.W Value[64 x 576]] }
00000089C09BAFF0: {[rn2_16.c2.c.b Value[32 x 1]] }
00000089C09BB1D0: {[rn2_16.c2.c.sc Value[32 x 1]] }
00000089C09BB590: {[rn2_17.c1.c.W Value[32 x 288]] }
00000089C09BB6D0: {[rn2_17.c1.c.c.b Value[32 x 1]] }
00000089C09BB8B0: {[rn2_15.c2.c.m Value[32 x 1]] }
00000089C09BB950: {[rn2_17.c1.c.c.sc Value[32 x 1]] }
00000089C09BB9F0: {[rn2_15.c1.c.c.b Value[32 x 1]] }
00000089C09BBBD0: {[rn2_15.c1.c.W Value[32 x 288]] }
00000089C09BBD10: {[rn2_16.c1.c.c.sc Value[32 x 1]] }
00000089C09BBEF0: {[rn2_15.c2.W Value[32 x 288]] }
00000089C09BC030: {[rn2_16.c1.c.c.b Value[32 x 1]] }
00000089C09BC170: {[rn2_15.c1.c.c.m Value[32 x 1]] }
00000089C09BC210: {[rn2_16.c2.W Value[32 x 288]] }
00000089C09BC2B0: {[rn2_16.c2.c.m Value[32 x 1]] }
00000089C09BC490: {[rn2_15.c2.c.b Value[32 x 1]] }
00000089C09BC7B0: {[rn2_16.c1.c.c.m Value[32 x 1]] }
00000089C09BC990: {[rn2_15.c2.c.sc Value[32 x 1]] }
00000089C09BCA30: {[rn2_16.c1.c.c.isd Value[32 x 1]] }
00000089C09BCAD0: {[rn2_16.c2.c.isd Value[32 x 1]] }
00000089C09BCF30: {[rn2_15.c1.c.c.isd Value[32 x 1]] }
00000089C09BD1B0: {[rn2_15.c1.c.c.sc Value[32 x 1]] }
00000089C09BD250: {[rn2_15.c2.c.isd Value[32 x 1]] }
00000089C09BD2F0: {[rn2_16.c1.c.W Value[32 x 288]] }
00000089C09BD570: {[rn2_18.c1.c.W Value[32 x 288]] }
00000089C09BD6B0: {[rn2_17.c2.c.isd Value[32 x 1]] }
00000089C09BD930: {[rn2_18.c2.c.sc Value[32 x 1]] }
00000089C09BD9D0: {[rn2_18.c2.c.m Value[32 x 1]] }
00000089C09BDC50: {[rn2_17.c2.c.b Value[32 x 1]] }
00000089C09BDCF0: {[rn3_1.c1.c.W Value[64 x 288]] }
00000089C09BDD90: {[rn3_1.c1.c.c.b Value[64 x 1]] }
00000089C09BDE30: {[rn2_18.c1.c.c.m Value[32 x 1]] }
00000089C09BDF70: {[rn2_18.c2.c.b Value[32 x 1]] }
00000089C09BE1F0: {[rn2_17.c1.c.c.isd Value[32 x 1]] }
00000089C09BE3D0: {[rn3_1_Wproj Value[64 x 32]] }
00000089C09BE5B0: {[rn3_1.c1.c.c.sc Value[64 x 1]] }
00000089C09BE790: {[rn2_18.c1.c.c.isd Value[32 x 1]] }
00000089C09BE8D0: {[rn2_18.c1.c.c.b Value[32 x 1]] }
00000089C09BE970: {[rn2_18.c2.c.isd Value[32 x 1]] }
00000089C09BEBF0: {[rn3_1.c1.c.c.isd Value[64 x 1]] }
00000089C09BED30: {[rn2_17.c2.W Value[32 x 288]] }
00000089C09BEDD0: {[rn2_17.c2.c.m Value[32 x 1]] }
00000089C09BEFB0: {[rn2_18.c1.c.c.sc Value[32 x 1]] }
00000089C09BF190: {[rn3_1.c1.c.c.m Value[64 x 1]] }
00000089C09BF410: {[rn3_1.c2.W Value[64 x 576]] }
00000089C09BF550: {[rn2_17.c2.c.sc Value[32 x 1]] }
00000089C09BF7D0: {[rn2_17.c1.c.c.m Value[32 x 1]] }
00000089C09BFCD0: {[rn2_18.c2.W Value[32 x 288]] }
00000089C09BFD70: {[rn3_1.c2.c.b Value[64 x 1]] }
00000089C09BFEB0: {[rn3_1.c2.c.isd Value[64 x 1]] }
00000089C09BFFF0: {[rn3_1.c_proj.b Value[64 x 1]] }
00000089C09C0130: {[rn3_1.c2.c.sc Value[64 x 1]] }
00000089C09C0310: {[rn3_1.c2.c.m Value[64 x 1]] }
00000089C09C8590: {[rn3_4.c2.c.b Value[64 x 1]] }
00000089C09C8770: {[rn3_5.c2.W Value[64 x 576]] }
00000089C09C88B0: {[rn3_4.c2.c.isd Value[64 x 1]] }
00000089C09C8BD0: {[rn3_5.c2.c.m Value[64 x 1]] }
00000089C09C8C70: {[rn3_5.c1.c.c.m Value[64 x 1]] }
00000089C09C9170: {[rn3_4.c2.c.sc Value[64 x 1]] }
00000089C09C9210: {[rn3_4.c1.c.c.m Value[64 x 1]] }
00000089C09C93F0: {[rn3_4.c1.c.c.sc Value[64 x 1]] }
00000089C09C95D0: {[rn3_6.c1.c.W Value[64 x 576]] }
00000089C09C9670: {[rn3_6.c1.c.c.b Value[64 x 1]] }
00000089C09C97B0: {[rn3_5.c1.c.c.isd Value[64 x 1]] }
00000089C09C9850: {[rn3_6.c1.c.c.sc Value[64 x 1]] }
00000089C09C9AD0: {[rn3_5.c1.c.c.b Value[64 x 1]] }
00000089C09C9B70: {[rn3_5.c2.c.isd Value[64 x 1]] }
00000089C09C9CB0: {[rn3_4.c2.c.m Value[64 x 1]] }
00000089C09C9D50: {[rn3_4.c1.c.c.b Value[64 x 1]] }
00000089C09C9E90: {[rn3_5.c1.c.c.sc Value[64 x 1]] }
00000089C09C9F30: {[rn3_5.c2.c.sc Value[64 x 1]] }
00000089C09CA070: {[rn3_6.c1.c.c.m Value[64 x 1]] }
00000089C09CA390: {[rn3_6.c1.c.c.isd Value[64 x 1]] }
00000089C09CA430: {[rn3_4.c1.c.W Value[64 x 576]] }
00000089C09CA7F0: {[rn3_5.c1.c.W Value[64 x 576]] }
00000089C09CA890: {[rn3_4.c1.c.c.isd Value[64 x 1]] }
00000089C09CA9D0: {[rn3_5.c2.c.b Value[64 x 1]] }
00000089C09CAC50: {[rn3_4.c2.W Value[64 x 576]] }
00000089C09CAD90: {[rn3_8.c1.c.c.m Value[64 x 1]] }
00000089C09CB150: {[rn3_8.c2.c.b Value[64 x 1]] }
00000089C09CB1F0: {[rn3_8.c2.c.sc Value[64 x 1]] }
00000089C09CB3D0: {[rn3_7.c2.c.isd Value[64 x 1]] }
00000089C09CB470: {[rn3_6.c2.W Value[64 x 576]] }
00000089C09CB5B0: {[rn3_7.c2.W Value[64 x 576]] }
00000089C09CB650: {[rn3_8.c1.c.c.isd Value[64 x 1]] }
00000089C09CB970: {[rn3_8.c1.c.c.sc Value[64 x 1]] }
00000089C09CBC90: {[rn3_6.c2.c.sc Value[64 x 1]] }
00000089C09CBDD0: {[rn3_6.c2.c.isd Value[64 x 1]] }
00000089C09CBF10: {[rn3_8.c1.c.W Value[64 x 576]] }
00000089C09CBFB0: {[rn3_7.c2.c.b Value[64 x 1]] }
00000089C09CC4B0: {[rn3_7.c1.c.c.m Value[64 x 1]] }
00000089C09CC690: {[rn3_7.c2.c.sc Value[64 x 1]] }
00000089C09CC870: {[rn3_6.c2.c.m Value[64 x 1]] }
00000089C09CC9B0: {[rn3_8.c2.W Value[64 x 576]] }
00000089C09CCCD0: {[rn3_7.c1.c.c.b Value[64 x 1]] }
00000089C09CCD70: {[rn3_7.c1.c.c.sc Value[64 x 1]] }
00000089C09CCE10: {[rn3_8.c1.c.c.b Value[64 x 1]] }
00000089C09CCF50: {[rn3_7.c2.c.m Value[64 x 1]] }
00000089C09CD130: {[rn3_7.c1.c.W Value[64 x 576]] }
00000089C09CD1D0: {[rn3_6.c2.c.b Value[64 x 1]] }
00000089C09CD310: {[rn3_7.c1.c.c.isd Value[64 x 1]] }
00000089C09CD630: {[rn3_9.c2.c.m Value[64 x 1]] }
00000089C09CD6D0: {[rn3_9.c1.c.c.b Value[64 x 1]] }
00000089C09CD770: {[rn3_10.c1.c.c.b Value[64 x 1]] }
00000089C09CD8B0: {[rn3_10.c1.c.c.sc Value[64 x 1]] }
00000089C09CD9F0: {[rn3_9.c1.c.W Value[64 x 576]] }
00000089C09CDA90: {[rn3_10.c1.c.c.isd Value[64 x 1]] }
00000089C09CDB30: {[rn3_10.c1.c.W Value[64 x 576]] }
00000089C09CDC70: {[rn3_10.c2.W Value[64 x 576]] }
00000089C09CDD10: {[rn3_10.c2.c.isd Value[64 x 1]] }
00000089C09CDE50: {[rn3_11.c1.c.W Value[64 x 576]] }
00000089C09CDF90: {[rn3_9.c2.W Value[64 x 576]] }
00000089C09CE350: {[rn3_10.c2.c.b Value[64 x 1]] }
00000089C09CE8F0: {[rn3_8.c2.c.m Value[64 x 1]] }
00000089C09CEC10: {[rn3_9.c1.c.c.isd Value[64 x 1]] }
00000089C09CEDF0: {[rn3_10.c1.c.c.m Value[64 x 1]] }
00000089C09CF250: {[rn3_8.c2.c.isd Value[64 x 1]] }
00000089C09CF390: {[rn3_9.c2.c.b Value[64 x 1]] }
00000089C09CF430: {[rn3_10.c2.c.sc Value[64 x 1]] }
00000089C09CF6B0: {[rn3_10.c2.c.m Value[64 x 1]] }
00000089C09CF930: {[rn3_9.c1.c.c.sc Value[64 x 1]] }
00000089C09CF9D0: {[rn3_9.c1.c.c.m Value[64 x 1]] }
00000089C09CFC50: {[rn3_9.c2.c.sc Value[64 x 1]] }
00000089C09CFCF0: {[rn3_9.c2.c.isd Value[64 x 1]] }
00000089C09CFD90: {[rn3_11.c1.c.c.isd Value[64 x 1]] }
00000089C09D00B0: {[rn3_11.c1.c.c.b Value[64 x 1]] }
00000089C09D0150: {[rn3_11.c1.c.c.m Value[64 x 1]] }
00000089C09D0290: {[rn3_11.c2.W Value[64 x 576]] }
00000089C09D0470: {[rn3_11.c1.c.c.sc Value[64 x 1]] }
00000089C0A0D3E0: {[rn3_13.c1.c.c.b Value[64 x 1]] }
00000089C0A0D5C0: {[rn3_13.c1.c.c.sc Value[64 x 1]] }
00000089C0A0D700: {[rn3_13.c1.c.c.m Value[64 x 1]] }
00000089C0A0D7A0: {[rn3_13.c1.c.c.isd Value[64 x 1]] }
00000089C0A0DA20: {[rn3_13.c2.c.b Value[64 x 1]] }
00000089C0A0DC00: {[rn3_13.c1.c.W Value[64 x 576]] }
00000089C0A0DCA0: {[rn3_13.c2.W Value[64 x 576]] }
00000089C0A0DE80: {[rn3_12.c2.c.isd Value[64 x 1]] }
00000089C0A0DF20: {[rn3_12.c1.c.c.b Value[64 x 1]] }
00000089C0A0E4C0: {[rn3_12.c1.c.c.m Value[64 x 1]] }
00000089C0A0E560: {[rn3_12.c2.c.sc Value[64 x 1]] }
00000089C0A0E600: {[rn3_13.c2.c.sc Value[64 x 1]] }
00000089C0A0E740: {[rn3_13.c2.c.m Value[64 x 1]] }
00000089C0A0E880: {[rn3_13.c2.c.isd Value[64 x 1]] }
00000089C0A0EA60: {[rn3_12.c1.c.W Value[64 x 576]] }
00000089C0A0ED80: {[rn3_12.c2.W Value[64 x 576]] }
00000089C0A0EF60: {[rn3_12.c1.c.c.sc Value[64 x 1]] }
00000089C0A0F000: {[rn3_12.c1.c.c.isd Value[64 x 1]] }
00000089C0A0F1E0: {[rn3_11.c2.c.m Value[64 x 1]] }
00000089C0A0F280: {[rn3_11.c2.c.b Value[64 x 1]] }
00000089C0A0F320: {[rn3_11.c2.c.isd Value[64 x 1]] }
00000089C0A0F460: {[rn3_12.c2.c.m Value[64 x 1]] }
00000089C0A0F5A0: {[rn3_11.c2.c.sc Value[64 x 1]] }
00000089C0A0F960: {[rn3_12.c2.c.b Value[64 x 1]] }
00000089C0A0FBE0: {[rn3_15.c1.c.c.isd Value[64 x 1]] }
00000089C0A0FC80: {[rn3_16.c1.c.c.b Value[64 x 1]] }
00000089C0A0FE60: {[rn3_14.c2.c.b Value[64 x 1]] }
00000089C0A0FFA0: {[rn3_15.c2.c.sc Value[64 x 1]] }
00000089C0A10180: {[rn3_14.c2.c.sc Value[64 x 1]] }
00000089C0A10360: {[rn3_16.c1.c.c.m Value[64 x 1]] }
00000089C0A10540: {[rn3_14.c2.W Value[64 x 576]] }
00000089C0A105E0: {[rn3_14.c1.c.c.sc Value[64 x 1]] }
00000089C0A10680: {[rn3_15.c1.c.c.sc Value[64 x 1]] }
00000089C0A10900: {[rn3_15.c2.c.isd Value[64 x 1]] }
00000089C0A10C20: {[rn3_14.c1.c.W Value[64 x 576]] }
00000089C0A10F40: {[rn3_16.c1.c.W Value[64 x 576]] }
00000089C0A10FE0: {[rn3_16.c1.c.c.sc Value[64 x 1]] }
00000089C0A111C0: {[rn3_14.c1.c.c.b Value[64 x 1]] }
00000089C0A11300: {[rn3_15.c1.c.c.b Value[64 x 1]] }
00000089C0A113A0: {[rn3_14.c1.c.c.isd Value[64 x 1]] }
00000089C0A11440: {[rn3_15.c1.c.W Value[64 x 576]] }
00000089C0A114E0: {[rn3_14.c1.c.c.m Value[64 x 1]] }
00000089C0A11580: {[rn3_14.c2.c.m Value[64 x 1]] }
00000089C0A116C0: {[rn3_15.c1.c.c.m Value[64 x 1]] }
00000089C0A11760: {[rn3_15.c2.W Value[64 x 576]] }
00000089C0A11940: {[rn3_15.c2.c.b Value[64 x 1]] }
00000089C0A11BC0: {[rn3_14.c2.c.isd Value[64 x 1]] }
00000089C0A12020: {[rn3_15.c2.c.m Value[64 x 1]] }
00000089C0A122A0: {[rn3_18.c1.c.W Value[64 x 576]] }
00000089C0A12340: {[rn3_16.c1.c.c.isd Value[64 x 1]] }
00000089C0A123E0: {[rn3_16.c2.c.b Value[64 x 1]] }
00000089C0A12660: {[rn3_17.c2.W Value[64 x 576]] }
00000089C0A12C00: {[rn3_18.c1.c.c.isd Value[64 x 1]] }
00000089C0A12D40: {[rn3_16.c2.c.isd Value[64 x 1]] }
00000089C0A12DE0: {[rn3_18.c2.c.b Value[64 x 1]] }
00000089C0A12FC0: {[rn3_17.c2.c.b Value[64 x 1]] }
00000089C0A13060: {[rn3_17.c2.c.m Value[64 x 1]] }
00000089C0A13240: {[rn3_16.c2.c.sc Value[64 x 1]] }
00000089C0A13380: {[rn3_16.c2.W Value[64 x 576]] }
00000089C0A134C0: {[rn3_17.c2.c.isd Value[64 x 1]] }
00000089C0A137E0: {[rn3_18.c2.W Value[64 x 576]] }
00000089C0A13920: {[rn3_17.c1.c.c.b Value[64 x 1]] }
00000089C0A13BA0: {[rn3_17.c1.c.c.isd Value[64 x 1]] }
00000089C0A13EC0: {[rn3_18.c1.c.c.sc Value[64 x 1]] }
00000089C0A14000: {[rn3_17.c1.c.W Value[64 x 576]] }
00000089C0A140A0: {[rn3_18.c1.c.c.b Value[64 x 1]] }
00000089C0A14280: {[rn3_17.c2.c.sc Value[64 x 1]] }
00000089C0A14460: {[rn3_18.c1.c.c.m Value[64 x 1]] }
00000089C0A14780: {[rn3_17.c1.c.c.sc Value[64 x 1]] }
00000089C0A14820: {[rn3_17.c1.c.c.m Value[64 x 1]] }
00000089C0A148C0: {[rn3_16.c2.c.m Value[64 x 1]] }
00000089C0A14B40: {[OutputNodes.W Value[10 x 1 x 1 x 64]] }
00000089C0A14BE0: {[rn3_18.c2.c.isd Value[64 x 1]] }
00000089C0A14D20: {[rn3_18.c2.c.sc Value[64 x 1]] }
00000089C0A15040: {[rn3_18.c2.c.m Value[64 x 1]] }
00000089C0ACED50: {[OutputNodes.b Value[10]] }
00000089C5B0B800: {[rn1_15.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B0B8A0: {[rn1_18.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B0B9E0: {[rn1_17.c1.c.c.b Gradient[16 x 1]] }
00000089C5B0BA80: {[rn1_18.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_18.y Value[32 x 32 x 16 x *]] }
00000089C5B0BB20: {[rn1_14.c1.c.c.sc Gradient[16 x 1]] [rn1_14.c1.y Gradient[32 x 32 x 16 x *]] [rn1_14.y Gradient[32 x 32 x 16 x *]] [rn1_16.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_16.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B0BBC0: {[rn1_18.c2.W Gradient[16 x 144]] [rn2_1.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089C5B0BC60: {[rn1_16.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B0BDA0: {[rn1_17.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B0BE40: {[rn1_15.c2.c.sc Gradient[16 x 1]] [rn1_15.p Gradient[32 x 32 x 16 x *]] }
00000089C5B0C020: {[rn1_14.c2.c.sc Gradient[16 x 1]] [rn1_14.p Gradient[32 x 32 x 16 x *]] }
00000089C5B0C0C0: {[rn1_13.c1.c.c.sc Gradient[16 x 1]] [rn1_13.c1.y Gradient[32 x 32 x 16 x *]] [rn1_13.y Gradient[32 x 32 x 16 x *]] [rn1_15.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_15.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B0C160: {[rn1_17.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B0C200: {[rn1_17.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_17.y Value[32 x 32 x 16 x *]] }
00000089C5B0C2A0: {[rn1_14.c1.c.W Gradient[16 x 144]] [rn1_14.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_14.p Value[32 x 32 x 16 x *]] }
00000089C5B0C3E0: {[rn1_15.c2.c.b Gradient[16 x 1]] [rn1_16.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B0C520: {[rn1_16.c1.c.c.sc Gradient[16 x 1]] [rn1_16.c1.y Gradient[32 x 32 x 16 x *]] [rn1_16.y Gradient[32 x 32 x 16 x *]] [rn1_18.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_18.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B0C5C0: {[rn1_15.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B0C660: {[rn1_15.c2.W Gradient[16 x 144]] [rn1_16.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B0C700: {[rn1_14.c2.W Gradient[16 x 144]] [rn1_15.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B0C8E0: {[rn1_17.c1.c.W Gradient[16 x 144]] [rn1_17.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_17.p Value[32 x 32 x 16 x *]] }
00000089C5B0C980: {[rn1_18.c1.c.c.b Gradient[16 x 1]] }
00000089C5B0CA20: {[rn1_17.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B0CAC0: {[rn1_16.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B0CB60: {[rn1_15.c1.c.W Gradient[16 x 144]] [rn1_15.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_15.p Value[32 x 32 x 16 x *]] }
00000089C5B0CC00: {[rn1_17.c2.c.sc Gradient[16 x 1]] [rn1_17.p Gradient[32 x 32 x 16 x *]] }
00000089C5B0CD40: {[rn1_16.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B0CDE0: {[rn1_17.c2.c.b Gradient[16 x 1]] [rn1_18.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B0CE80: {[rn1_15.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_15.y Value[32 x 32 x 16 x *]] }
00000089C5B0CF20: {[rn1_15.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B0CFC0: {[rn1_18.c2.c.sc Gradient[16 x 1]] [rn1_18.p Gradient[32 x 32 x 16 x *]] }
00000089C5B0D060: {[rn1_16.c2.c.b Gradient[16 x 1]] [rn1_17.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B0D1A0: {[rn1_16.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_16.y Value[32 x 32 x 16 x *]] }
00000089C5B0D240: {[rn1_18.c2.c.b Gradient[16 x 1]] [rn2_1.c2.c.c Value[16 x 16 x 32 x *]] }
00000089C5B0D2E0: {[rn1_16.c1.c.W Gradient[16 x 144]] [rn1_16.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_16.p Value[32 x 32 x 16 x *]] }
00000089C5B0D420: {[rn2_1.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089C5B0D4C0: {[rn1_18.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B0D560: {[rn1_17.c1.c.c.sc Gradient[16 x 1]] [rn1_17.c1.y Gradient[32 x 32 x 16 x *]] [rn1_17.y Gradient[32 x 32 x 16 x *]] [rn2_1.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_1.c1.y Value[16 x 16 x 32 x *]] }
00000089C5B0D600: {[rn1_14.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_14.y Value[32 x 32 x 16 x *]] }
00000089C5B0D740: {[rn1_17.c2.W Gradient[16 x 144]] [rn1_18.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B0D7E0: {[rn2_1.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089C5B0D880: {[rn1_18.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B0D920: {[rn1_16.c2.c.sc Gradient[16 x 1]] [rn1_16.p Gradient[32 x 32 x 16 x *]] }
00000089C5B0DB00: {[rn1_14.c2.c.b Gradient[16 x 1]] [rn1_15.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B0DBA0: {[rn1_16.c2.W Gradient[16 x 144]] [rn1_17.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B0DC40: {[rn1_15.c1.c.c.sc Gradient[16 x 1]] [rn1_15.c1.y Gradient[32 x 32 x 16 x *]] [rn1_15.y Gradient[32 x 32 x 16 x *]] [rn1_17.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_17.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B0DCE0: {[rn1_18.c1.c.W Gradient[16 x 144]] [rn1_18.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_18.p Value[32 x 32 x 16 x *]] }
00000089C5B0DD80: {[rn2_1.c2.c.y Value[16 x 16 x 32 x *]] }
00000089C5B0DE20: {[rn1_15.c1.c.c.b Gradient[16 x 1]] }
00000089C5B0DEC0: {[rn1_16.c1.c.c.b Gradient[16 x 1]] }
00000089C5B13140: {[rn1_2.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B135A0: {[Err Value[1]] }
00000089C5B13640: {[conv1.c.W Gradient[16 x 27]] [rn1_1.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_1.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B136E0: {[CE Value[1]] }
00000089C5B13780: {[conv1.c.c.b Gradient[16 x 1]] [rn1_1.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B138C0: {[conv1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B13B40: {[OutputNodes.z Value[10 x *]] }
00000089C5B14040: {[conv1.c.c.c Gradient[32 x 32 x 16 x *]] [conv1.y Value[32 x 32 x 16 x *]] }
00000089C5B14220: {[rn1_1.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B14360: {[rn1_1.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B14400: {[rn1_1.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B14540: {[rn1_1.c1.c.c.b Gradient[16 x 1]] }
00000089C5B145E0: {[rn1_1.c1.c.W Gradient[16 x 144]] [rn1_1.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_1.p Value[32 x 32 x 16 x *]] }
00000089C5B14720: {[rn1_1.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_1.y Value[32 x 32 x 16 x *]] }
00000089C5B147C0: {[rn1_1.c2.W Gradient[16 x 144]] [rn1_2.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B14860: {[rn1_1.c2.c.b Gradient[16 x 1]] [rn1_2.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B14900: {[rn1_2.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B14AE0: {[rn1_2.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B14B80: {[rn1_2.c1.c.c.b Gradient[16 x 1]] }
00000089C5B14C20: {[rn1_2.c1.c.W Gradient[16 x 144]] [rn1_2.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_2.p Value[32 x 32 x 16 x *]] }
00000089C5B14CC0: {[rn1_1.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B14EA0: {[rn1_2.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_2.y Value[32 x 32 x 16 x *]] }
00000089C5B14F40: {[rn1_2.c2.W Gradient[16 x 144]] [rn1_3.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B15080: {[rn1_2.c2.c.sc Gradient[16 x 1]] [rn1_2.p Gradient[32 x 32 x 16 x *]] }
00000089C5B15260: {[conv1.c.c.sc Gradient[16 x 1]] [conv1.y Gradient[32 x 32 x 16 x *]] [rn1_2.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_2.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B15620: {[conv1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B156C0: {[rn1_1.c2.c.sc Gradient[16 x 1]] [rn1_1.p Gradient[32 x 32 x 16 x *]] }
00000089C5B15760: {[conv1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B15800: {[rn1_5.c1.c.c.b Gradient[16 x 1]] }
00000089C5B158A0: {[rn1_3.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_3.y Value[32 x 32 x 16 x *]] }
00000089C5B15940: {[rn1_2.c1.c.c.sc Gradient[16 x 1]] [rn1_2.c1.y Gradient[32 x 32 x 16 x *]] [rn1_2.y Gradient[32 x 32 x 16 x *]] [rn1_4.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_4.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B159E0: {[rn1_3.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B15A80: {[rn1_6.c2.W Gradient[16 x 144]] [rn1_7.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B15B20: {[rn1_6.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B15BC0: {[rn1_7.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B15C60: {[rn1_4.c1.c.c.sc Gradient[16 x 1]] [rn1_4.c1.y Gradient[32 x 32 x 16 x *]] [rn1_4.y Gradient[32 x 32 x 16 x *]] [rn1_6.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_6.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B15D00: {[rn1_7.c2.W Gradient[16 x 144]] [rn1_8.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B15E40: {[rn1_3.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B15EE0: {[rn1_3.c1.c.c.b Gradient[16 x 1]] }
00000089C5B15F80: {[rn1_4.c1.c.W Gradient[16 x 144]] [rn1_4.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_4.p Value[32 x 32 x 16 x *]] }
00000089C5B160C0: {[rn1_4.c2.W Gradient[16 x 144]] [rn1_5.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B16160: {[rn1_4.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B162A0: {[rn1_4.c2.c.sc Gradient[16 x 1]] [rn1_4.p Gradient[32 x 32 x 16 x *]] }
00000089C5B163E0: {[rn1_5.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B16520: {[rn1_5.c1.c.W Gradient[16 x 144]] [rn1_5.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_5.p Value[32 x 32 x 16 x *]] }
00000089C5B16660: {[rn1_6.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B168E0: {[rn1_5.c2.c.b Gradient[16 x 1]] [rn1_6.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B16980: {[rn1_4.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_4.y Value[32 x 32 x 16 x *]] }
00000089C5B16A20: {[rn1_2.c2.c.b Gradient[16 x 1]] [rn1_3.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B16AC0: {[rn1_3.c1.c.W Gradient[16 x 144]] [rn1_3.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_3.p Value[32 x 32 x 16 x *]] }
00000089C5B16B60: {[rn1_5.c2.c.sc Gradient[16 x 1]] [rn1_5.p Gradient[32 x 32 x 16 x *]] }
00000089C5B16C00: {[rn1_6.c1.c.W Gradient[16 x 144]] [rn1_6.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_6.p Value[32 x 32 x 16 x *]] }
00000089C5B16CA0: {[rn1_3.c2.c.b Gradient[16 x 1]] [rn1_4.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B16D40: {[rn1_5.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B16DE0: {[rn1_6.c1.c.c.b Gradient[16 x 1]] }
00000089C5B16E80: {[rn1_6.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B16F20: {[rn1_3.c1.c.c.sc Gradient[16 x 1]] [rn1_3.c1.y Gradient[32 x 32 x 16 x *]] [rn1_3.y Gradient[32 x 32 x 16 x *]] [rn1_5.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_5.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B16FC0: {[rn1_6.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_6.y Value[32 x 32 x 16 x *]] }
00000089C5B17060: {[rn1_5.c1.c.c.sc Gradient[16 x 1]] [rn1_5.c1.y Gradient[32 x 32 x 16 x *]] [rn1_5.y Gradient[32 x 32 x 16 x *]] [rn1_7.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_7.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B17100: {[rn1_6.c2.c.b Gradient[16 x 1]] [rn1_7.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B171A0: {[rn1_7.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B17240: {[rn1_7.c1.c.c.b Gradient[16 x 1]] }
00000089C5B172E0: {[rn1_6.c2.c.sc Gradient[16 x 1]] [rn1_6.p Gradient[32 x 32 x 16 x *]] }
00000089C5B17380: {[rn1_4.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B17420: {[rn1_7.c1.c.W Gradient[16 x 144]] [rn1_7.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_7.p Value[32 x 32 x 16 x *]] }
00000089C5B174C0: {[rn1_3.c2.W Gradient[16 x 144]] [rn1_4.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B17560: {[rn1_4.c1.c.c.b Gradient[16 x 1]] }
00000089C5B17600: {[rn1_3.c2.c.sc Gradient[16 x 1]] [rn1_3.p Gradient[32 x 32 x 16 x *]] }
00000089C5B176A0: {[rn1_5.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B17740: {[rn1_1.c1.c.c.sc Gradient[16 x 1]] [rn1_1.c1.y Gradient[32 x 32 x 16 x *]] [rn1_1.y Gradient[32 x 32 x 16 x *]] [rn1_3.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_3.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B177E0: {[rn1_4.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B17880: {[rn1_3.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B179C0: {[rn1_5.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_5.y Value[32 x 32 x 16 x *]] }
00000089C5B17C40: {[rn1_7.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B17D80: {[rn1_7.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_7.y Value[32 x 32 x 16 x *]] }
00000089C5B17EC0: {[rn1_5.c2.W Gradient[16 x 144]] [rn1_6.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B17F60: {[rn1_4.c2.c.b Gradient[16 x 1]] [rn1_5.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B180A0: {[rn1_8.c1.c.W Gradient[16 x 144]] [rn1_8.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_8.p Value[32 x 32 x 16 x *]] }
00000089C5B181E0: {[rn1_7.c2.c.sc Gradient[16 x 1]] [rn1_7.p Gradient[32 x 32 x 16 x *]] }
00000089C5B18280: {[rn1_11.c1.c.W Gradient[16 x 144]] [rn1_11.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_11.p Value[32 x 32 x 16 x *]] }
00000089C5B18320: {[rn1_10.c2.c.b Gradient[16 x 1]] [rn1_11.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B183C0: {[rn1_10.c1.c.c.sc Gradient[16 x 1]] [rn1_10.c1.y Gradient[32 x 32 x 16 x *]] [rn1_10.y Gradient[32 x 32 x 16 x *]] [rn1_12.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_12.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B18500: {[rn1_12.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_12.y Value[32 x 32 x 16 x *]] }
00000089C5B18640: {[rn1_8.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B18780: {[rn1_9.c1.c.c.b Gradient[16 x 1]] }
00000089C5B18820: {[rn1_8.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B188C0: {[rn1_9.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_9.y Value[32 x 32 x 16 x *]] }
00000089C5B18960: {[rn1_8.c2.c.sc Gradient[16 x 1]] [rn1_8.p Gradient[32 x 32 x 16 x *]] }
00000089C5B18AA0: {[rn1_10.c1.c.c.c Value[32 x 32 x 16 x *]] [rn1_9.c2.W Gradient[16 x 144]] }
00000089C5B18B40: {[rn1_9.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B18BE0: {[rn1_10.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B18C80: {[rn1_11.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B18D20: {[rn1_11.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B18DC0: {[rn1_10.c2.c.sc Gradient[16 x 1]] [rn1_10.p Gradient[32 x 32 x 16 x *]] }
00000089C5B18E60: {[rn1_11.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_11.c1.y Value[32 x 32 x 16 x *]] [rn1_9.c1.c.c.sc Gradient[16 x 1]] [rn1_9.c1.y Gradient[32 x 32 x 16 x *]] [rn1_9.y Gradient[32 x 32 x 16 x *]] }
00000089C5B18F00: {[rn1_10.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B18FA0: {[rn1_11.c1.c.c.b Gradient[16 x 1]] }
00000089C5B19040: {[rn1_8.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B19180: {[rn1_9.c1.c.W Gradient[16 x 144]] [rn1_9.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_9.p Value[32 x 32 x 16 x *]] }
00000089C5B19220: {[rn1_6.c1.c.c.sc Gradient[16 x 1]] [rn1_6.c1.y Gradient[32 x 32 x 16 x *]] [rn1_6.y Gradient[32 x 32 x 16 x *]] [rn1_8.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_8.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B192C0: {[rn1_8.c1.c.c.b Gradient[16 x 1]] }
00000089C5B19360: {[rn1_10.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_10.y Value[32 x 32 x 16 x *]] }
00000089C5B194A0: {[rn1_7.c1.c.c.sc Gradient[16 x 1]] [rn1_7.c1.y Gradient[32 x 32 x 16 x *]] [rn1_7.y Gradient[32 x 32 x 16 x *]] [rn1_9.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_9.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B19540: {[rn1_10.c2.c.c Value[32 x 32 x 16 x *]] [rn1_9.c2.c.b Gradient[16 x 1]] }
00000089C5B195E0: {[rn1_11.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B19680: {[rn1_10.c2.W Gradient[16 x 144]] [rn1_11.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B19900: {[rn1_12.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B199A0: {[rn1_11.c2.W Gradient[16 x 144]] [rn1_12.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B19AE0: {[rn1_11.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_11.y Value[32 x 32 x 16 x *]] }
00000089C5B19B80: {[rn1_9.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B19C20: {[rn1_12.c1.c.c.b Gradient[16 x 1]] }
00000089C5B19CC0: {[rn1_8.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_8.y Value[32 x 32 x 16 x *]] }
00000089C5B19E00: {[rn1_8.c2.W Gradient[16 x 144]] [rn1_9.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B19EA0: {[rn1_9.c2.c.sc Gradient[16 x 1]] [rn1_9.p Gradient[32 x 32 x 16 x *]] }
00000089C5B19FE0: {[rn1_8.c2.c.b Gradient[16 x 1]] [rn1_9.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B1A080: {[rn1_7.c2.c.b Gradient[16 x 1]] [rn1_8.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B1A120: {[rn1_9.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B1A1C0: {[rn1_12.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B1A260: {[rn1_10.c1.c.c.b Gradient[16 x 1]] }
00000089C5B1A300: {[rn1_10.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B1A3A0: {[rn1_11.c2.c.sc Gradient[16 x 1]] [rn1_11.p Gradient[32 x 32 x 16 x *]] }
00000089C5B1A440: {[rn1_11.c2.c.b Gradient[16 x 1]] [rn1_12.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B1A4E0: {[rn1_12.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B1A580: {[rn1_12.c1.c.W Gradient[16 x 144]] [rn1_12.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_12.p Value[32 x 32 x 16 x *]] }
00000089C5B1A6C0: {[rn1_10.c1.c.W Gradient[16 x 144]] [rn1_10.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_10.p Value[32 x 32 x 16 x *]] }
00000089C5B1A760: {[rn1_10.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_10.c1.y Value[32 x 32 x 16 x *]] [rn1_8.c1.c.c.sc Gradient[16 x 1]] [rn1_8.c1.y Gradient[32 x 32 x 16 x *]] [rn1_8.y Gradient[32 x 32 x 16 x *]] }
00000089C5B1A8A0: {[rn1_13.c2.c.sc Gradient[16 x 1]] [rn1_13.p Gradient[32 x 32 x 16 x *]] }
00000089C5B1A940: {[rn1_14.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B1A9E0: {[rn1_12.c2.c.sc Gradient[16 x 1]] [rn1_12.p Gradient[32 x 32 x 16 x *]] }
00000089C5B1AA80: {[rn1_11.c1.c.c.sc Gradient[16 x 1]] [rn1_11.c1.y Gradient[32 x 32 x 16 x *]] [rn1_11.y Gradient[32 x 32 x 16 x *]] [rn1_13.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_13.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B1AB20: {[rn1_12.c2.c.b Gradient[16 x 1]] [rn1_13.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B1ABC0: {[rn1_13.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B1AC60: {[rn1_13.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_13.y Value[32 x 32 x 16 x *]] }
00000089C5B1ADA0: {[rn1_12.c2.W Gradient[16 x 144]] [rn1_13.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089C5B1AEE0: {[rn1_13.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B1AF80: {[rn1_12.c1.c.c.sc Gradient[16 x 1]] [rn1_12.c1.y Gradient[32 x 32 x 16 x *]] [rn1_12.y Gradient[32 x 32 x 16 x *]] [rn1_14.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_14.c1.y Value[32 x 32 x 16 x *]] }
00000089C5B1B020: {[rn1_13.c2.c.b Gradient[16 x 1]] [rn1_14.c2.c.c Value[32 x 32 x 16 x *]] }
00000089C5B1B0C0: {[rn1_14.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000089C5B1B160: {[rn1_14.c2.c.y Value[32 x 32 x 16 x *]] }
00000089C5B1B2A0: {[rn1_14.c1.c.c.b Gradient[16 x 1]] }
00000089C5B1B340: {[rn1_13.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000089C5B1B480: {[rn1_13.c1.c.c.b Gradient[16 x 1]] }
00000089C5B1B520: {[rn1_13.c1.c.W Gradient[16 x 144]] [rn1_13.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_13.p Value[32 x 32 x 16 x *]] }
00000089C5B1B5C0: {[rn1_13.c2.W Gradient[16 x 144]] [rn1_14.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000089CB1DA4A0: {[rn3_4.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_4.y Value[8 x 8 x 64 x *]] }
00000089CB1DA540: {[rn3_4.c2.c.b Gradient[64 x 1]] [rn3_5.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DA5E0: {[rn3_7.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_7.y Value[8 x 8 x 64 x *]] }
00000089CB1DA680: {[rn3_8.c1.c.W Gradient[64 x 576]] [rn3_8.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_8.p Value[8 x 8 x 64 x *]] }
00000089CB1DA7C0: {[rn3_8.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DA860: {[rn3_7.c1.c.c.sc Gradient[64 x 1]] [rn3_7.c1.y Gradient[8 x 8 x 64 x *]] [rn3_7.y Gradient[8 x 8 x 64 x *]] [rn3_9.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_9.c1.y Value[8 x 8 x 64 x *]] }
00000089CB1DA9A0: {[rn3_5.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DAA40: {[rn3_3.c1.c.c.sc Gradient[64 x 1]] [rn3_3.c1.y Gradient[8 x 8 x 64 x *]] [rn3_3.y Gradient[8 x 8 x 64 x *]] [rn3_5.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_5.c1.y Value[8 x 8 x 64 x *]] }
00000089CB1DAAE0: {[rn3_5.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_5.y Value[8 x 8 x 64 x *]] }
00000089CB1DAB80: {[rn3_5.c2.W Gradient[64 x 576]] [rn3_6.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DAC20: {[rn3_5.c2.c.sc Gradient[64 x 1]] [rn3_5.p Gradient[8 x 8 x 64 x *]] }
00000089CB1DAD60: {[rn3_5.c2.c.b Gradient[64 x 1]] [rn3_6.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DAE00: {[rn3_6.c2.c.sc Gradient[64 x 1]] [rn3_6.p Gradient[8 x 8 x 64 x *]] }
00000089CB1DAEA0: {[rn3_6.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_6.y Value[8 x 8 x 64 x *]] }
00000089CB1DAFE0: {[rn3_7.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB1DB080: {[rn3_7.c1.c.W Gradient[64 x 576]] [rn3_7.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_7.p Value[8 x 8 x 64 x *]] }
00000089CB1DB120: {[rn3_7.c2.W Gradient[64 x 576]] [rn3_8.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DB1C0: {[rn3_8.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DB260: {[rn3_6.c2.c.b Gradient[64 x 1]] [rn3_7.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DB300: {[rn3_7.c2.c.b Gradient[64 x 1]] [rn3_8.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DB3A0: {[rn3_5.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB1DB440: {[rn3_8.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB1DB4E0: {[rn3_7.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DB580: {[rn3_5.c1.c.c.b Gradient[64 x 1]] }
00000089CB1DB620: {[rn3_6.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DB6C0: {[rn3_5.c1.c.c.sc Gradient[64 x 1]] [rn3_5.c1.y Gradient[8 x 8 x 64 x *]] [rn3_5.y Gradient[8 x 8 x 64 x *]] [rn3_7.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_7.c1.y Value[8 x 8 x 64 x *]] }
00000089CB1DB800: {[rn3_4.c1.c.c.b Gradient[64 x 1]] }
00000089CB1DB940: {[rn3_7.c1.c.c.b Gradient[64 x 1]] }
00000089CB1DB9E0: {[rn3_6.c1.c.c.sc Gradient[64 x 1]] [rn3_6.c1.y Gradient[8 x 8 x 64 x *]] [rn3_6.y Gradient[8 x 8 x 64 x *]] [rn3_8.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_8.c1.y Value[8 x 8 x 64 x *]] }
00000089CB1DBA80: {[rn3_7.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DBBC0: {[rn3_5.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DBC60: {[rn3_8.c1.c.c.b Gradient[64 x 1]] }
00000089CB1DBD00: {[rn3_4.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB1DBDA0: {[rn3_8.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_8.y Value[8 x 8 x 64 x *]] }
00000089CB1DBE40: {[rn3_8.c2.W Gradient[64 x 576]] [rn3_9.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DBEE0: {[rn3_6.c1.c.W Gradient[64 x 576]] [rn3_6.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_6.p Value[8 x 8 x 64 x *]] }
00000089CB1DBF80: {[rn3_8.c2.c.sc Gradient[64 x 1]] [rn3_8.p Gradient[8 x 8 x 64 x *]] }
00000089CB1DC0C0: {[rn3_6.c2.W Gradient[64 x 576]] [rn3_7.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DC160: {[rn3_4.c1.c.c.sc Gradient[64 x 1]] [rn3_4.c1.y Gradient[8 x 8 x 64 x *]] [rn3_4.y Gradient[8 x 8 x 64 x *]] [rn3_6.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_6.c1.y Value[8 x 8 x 64 x *]] }
00000089CB1DC200: {[rn3_9.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DC340: {[rn3_6.c1.c.c.b Gradient[64 x 1]] }
00000089CB1DC3E0: {[rn3_5.c1.c.W Gradient[64 x 576]] [rn3_5.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_5.p Value[8 x 8 x 64 x *]] }
00000089CB1DC520: {[rn3_4.c2.W Gradient[64 x 576]] [rn3_5.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DC5C0: {[rn3_4.c1.c.W Gradient[64 x 576]] [rn3_4.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_4.p Value[8 x 8 x 64 x *]] }
00000089CB1DC660: {[rn3_4.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DC700: {[rn3_4.c2.c.sc Gradient[64 x 1]] [rn3_4.p Gradient[8 x 8 x 64 x *]] }
00000089CB1DC7A0: {[rn3_6.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB1DC840: {[rn3_6.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DC980: {[rn3_7.c2.c.sc Gradient[64 x 1]] [rn3_7.p Gradient[8 x 8 x 64 x *]] }
00000089CB1DCB60: {[rn3_13.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DCC00: {[rn3_10.c2.c.sc Gradient[64 x 1]] [rn3_10.p Gradient[8 x 8 x 64 x *]] }
00000089CB1DCCA0: {[rn3_9.c1.c.c.b Gradient[64 x 1]] }
00000089CB1DCDE0: {[rn3_12.c1.c.W Gradient[64 x 576]] [rn3_12.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_12.p Value[8 x 8 x 64 x *]] }
00000089CB1DCE80: {[rn3_13.c1.c.c.b Gradient[64 x 1]] }
00000089CB1DCF20: {[rn3_14.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DCFC0: {[rn3_13.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB1DD100: {[rn3_10.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DD1A0: {[rn3_10.c2.c.c Value[8 x 8 x 64 x *]] [rn3_9.c2.c.b Gradient[64 x 1]] }
00000089CB1DD2E0: {[rn3_10.c1.c.c.b Gradient[64 x 1]] }
00000089CB1DD380: {[rn3_10.c1.c.W Gradient[64 x 576]] [rn3_10.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_10.p Value[8 x 8 x 64 x *]] }
00000089CB1DD420: {[rn3_10.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_10.y Value[8 x 8 x 64 x *]] }
00000089CB1DD4C0: {[rn3_9.c2.c.sc Gradient[64 x 1]] [rn3_9.p Gradient[8 x 8 x 64 x *]] }
00000089CB1DD600: {[rn3_11.c2.W Gradient[64 x 576]] [rn3_12.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DD6A0: {[rn3_11.c1.c.W Gradient[64 x 576]] [rn3_11.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_11.p Value[8 x 8 x 64 x *]] }
00000089CB1DD740: {[rn3_12.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DD7E0: {[rn3_11.c2.c.b Gradient[64 x 1]] [rn3_12.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DD880: {[rn3_12.c1.c.c.b Gradient[64 x 1]] }
00000089CB1DD920: {[rn3_12.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_12.y Value[8 x 8 x 64 x *]] }
00000089CB1DD9C0: {[rn3_12.c2.c.sc Gradient[64 x 1]] [rn3_12.p Gradient[8 x 8 x 64 x *]] }
00000089CB1DDA60: {[rn3_10.c1.c.c.sc Gradient[64 x 1]] [rn3_10.c1.y Gradient[8 x 8 x 64 x *]] [rn3_10.y Gradient[8 x 8 x 64 x *]] [rn3_12.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_12.c1.y Value[8 x 8 x 64 x *]] }
00000089CB1DDB00: {[rn3_11.c1.c.c.sc Gradient[64 x 1]] [rn3_11.c1.y Gradient[8 x 8 x 64 x *]] [rn3_11.y Gradient[8 x 8 x 64 x *]] [rn3_13.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_13.c1.y Value[8 x 8 x 64 x *]] }
00000089CB1DDBA0: {[rn3_10.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_10.c1.y Value[8 x 8 x 64 x *]] [rn3_8.c1.c.c.sc Gradient[64 x 1]] [rn3_8.c1.y Gradient[8 x 8 x 64 x *]] [rn3_8.y Gradient[8 x 8 x 64 x *]] }
00000089CB1DDC40: {[rn3_12.c2.c.b Gradient[64 x 1]] [rn3_13.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DDCE0: {[rn3_11.c2.c.sc Gradient[64 x 1]] [rn3_11.p Gradient[8 x 8 x 64 x *]] }
00000089CB1DDD80: {[rn3_10.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DDE20: {[rn3_10.c2.W Gradient[64 x 576]] [rn3_11.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DE000: {[rn3_9.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DE0A0: {[rn3_11.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DE280: {[rn3_12.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB1DE320: {[rn3_13.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DE3C0: {[rn3_10.c1.c.c.c Value[8 x 8 x 64 x *]] [rn3_9.c2.W Gradient[64 x 576]] }
00000089CB1DE500: {[rn3_13.c1.c.W Gradient[64 x 576]] [rn3_13.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_13.p Value[8 x 8 x 64 x *]] }
00000089CB1DE5A0: {[rn3_13.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_13.y Value[8 x 8 x 64 x *]] }
00000089CB1DE640: {[rn3_13.c2.W Gradient[64 x 576]] [rn3_14.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DE6E0: {[rn3_11.c1.c.c.b Gradient[64 x 1]] }
00000089CB1DE780: {[rn3_13.c2.c.sc Gradient[64 x 1]] [rn3_13.p Gradient[8 x 8 x 64 x *]] }
00000089CB1DE820: {[rn3_11.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DE8C0: {[rn3_11.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_11.y Value[8 x 8 x 64 x *]] }
00000089CB1DEAA0: {[rn3_10.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB1DEC80: {[rn3_9.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB1DED20: {[rn3_9.c1.c.W Gradient[64 x 576]] [rn3_9.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_9.p Value[8 x 8 x 64 x *]] }
00000089CB1DEE60: {[rn3_8.c2.c.b Gradient[64 x 1]] [rn3_9.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DEF00: {[rn3_9.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_9.y Value[8 x 8 x 64 x *]] }
00000089CB1DEFA0: {[rn3_11.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_11.c1.y Value[8 x 8 x 64 x *]] [rn3_9.c1.c.c.sc Gradient[64 x 1]] [rn3_9.c1.y Gradient[8 x 8 x 64 x *]] [rn3_9.y Gradient[8 x 8 x 64 x *]] }
00000089CB1DF040: {[rn3_11.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB1DF180: {[rn3_10.c2.c.b Gradient[64 x 1]] [rn3_11.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DF220: {[rn3_12.c2.W Gradient[64 x 576]] [rn3_13.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB1DF2C0: {[rn3_12.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB1DF360: {[rn2_1.c1.c.W Gradient[32 x 144]] [rn2_1.c2.c.c Gradient[16 x 16 x 32 x *]] }
00000089CB1DF4A0: {[rn2_1.c2.W Gradient[32 x 288]] [rn2_2.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1DF5E0: {[rn2_3.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_3.y Value[16 x 16 x 32 x *]] }
00000089CB1DF860: {[rn2_5.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1DF900: {[rn2_5.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1DF9A0: {[rn1_18.c1.c.c.sc Gradient[16 x 1]] [rn1_18.c1.y Gradient[32 x 32 x 16 x *]] [rn1_18.y Gradient[32 x 32 x 16 x *]] }
00000089CB1DFA40: {[rn2_2.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_2.y Value[16 x 16 x 32 x *]] }
00000089CB1DFB80: {[rn2_1.c2.c.b Gradient[32 x 1]] [rn2_1.c_proj.c Gradient[16 x 16 x 32 x *]] [rn2_1.p Value[16 x 16 x 32 x *]] }
00000089CB1DFC20: {[rn2_5.c1.c.c.b Gradient[32 x 1]] }
00000089CB1DFCC0: {[rn2_5.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_5.y Value[16 x 16 x 32 x *]] }
00000089CB1DFD60: {[rn2_5.c2.W Gradient[32 x 288]] [rn2_6.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1DFE00: {[rn2_3.c2.c.sc Gradient[32 x 1]] [rn2_3.p Gradient[16 x 16 x 32 x *]] }
00000089CB1DFEA0: {[rn2_4.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_4.y Value[16 x 16 x 32 x *]] }
00000089CB1DFF40: {[rn2_4.c2.c.b Gradient[32 x 1]] [rn2_5.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1DFFE0: {[rn2_5.c2.c.sc Gradient[32 x 1]] [rn2_5.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E0080: {[rn2_2.c2.W Gradient[32 x 288]] [rn2_3.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E0120: {[rn2_5.c1.c.W Gradient[32 x 288]] [rn2_5.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_5.p Value[16 x 16 x 32 x *]] }
00000089CB1E01C0: {[rn2_2.c2.c.b Gradient[32 x 1]] [rn2_3.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E0260: {[rn2_1.c_proj.b Gradient[32 x 1]] }
00000089CB1E0300: {[rn2_2.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E03A0: {[rn2_4.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E0440: {[rn2_6.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E0580: {[rn2_1.c_proj.y Gradient[16 x 16 x 32 x *]] [rn2_2.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_2.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E06C0: {[rn2_1.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_1.y Value[16 x 16 x 32 x *]] }
00000089CB1E0760: {[rn2_2.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E0800: {[rn2_1.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E08A0: {[rn2_2.c2.c.sc Gradient[32 x 1]] [rn2_2.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E0940: {[rn2_3.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E09E0: {[rn2_3.c2.W Gradient[32 x 288]] [rn2_4.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E0A80: {[rn2_4.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E0BC0: {[rn2_3.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E0C60: {[rn2_4.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E0D00: {[rn2_4.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E0DA0: {[rn2_1.c_proj.y Value[16 x 16 x 32 x *]] }
00000089CB1E0E40: {[rn2_4.c1.c.W Gradient[32 x 288]] [rn2_4.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_4.p Value[16 x 16 x 32 x *]] }
00000089CB1E0EE0: {[rn2_2.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E1020: {[rn2_2.c1.c.W Gradient[32 x 288]] [rn2_2.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_2.p Value[16 x 16 x 32 x *]] }
00000089CB1E10C0: {[rn2_1.c2.c.sc Gradient[32 x 1]] [rn2_1.c_proj.c Value[16 x 16 x 32 x *]] }
00000089CB1E1160: {[rn2_2.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E1200: {[rn2_2.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E1340: {[rn2_1.c1.c.c.sc Gradient[32 x 1]] [rn2_1.c1.y Gradient[16 x 16 x 32 x *]] [rn2_1.y Gradient[16 x 16 x 32 x *]] [rn2_3.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_3.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E13E0: {[rn2_3.c2.c.b Gradient[32 x 1]] [rn2_4.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E1480: {[rn2_1.c_proj.sc Gradient[32 x 1]] [rn2_1.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E1520: {[rn2_4.c2.W Gradient[32 x 288]] [rn2_5.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E15C0: {[rn2_3.c1.c.W Gradient[32 x 288]] [rn2_3.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_3.p Value[16 x 16 x 32 x *]] }
00000089CB1E1660: {[rn2_2.c1.c.c.sc Gradient[32 x 1]] [rn2_2.c1.y Gradient[16 x 16 x 32 x *]] [rn2_2.y Gradient[16 x 16 x 32 x *]] [rn2_4.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_4.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E17A0: {[rn2_3.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E1840: {[rn2_3.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E18E0: {[rn2_4.c2.c.sc Gradient[32 x 1]] [rn2_4.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E1980: {[rn2_5.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E1AC0: {[rn2_3.c1.c.c.sc Gradient[32 x 1]] [rn2_3.c1.y Gradient[16 x 16 x 32 x *]] [rn2_3.y Gradient[16 x 16 x 32 x *]] [rn2_5.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_5.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E1B60: {[rn2_5.c2.c.b Gradient[32 x 1]] [rn2_6.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E1C00: {[rn2_6.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E1CA0: {[rn2_6.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_6.y Value[16 x 16 x 32 x *]] }
00000089CB1E1D40: {[rn2_8.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E1DE0: {[rn2_8.c1.c.W Gradient[32 x 288]] [rn2_8.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_8.p Value[16 x 16 x 32 x *]] }
00000089CB1E1E80: {[rn2_9.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E1FC0: {[rn2_10.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E2060: {[rn2_10.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E2100: {[rn2_10.c2.c.c Value[16 x 16 x 32 x *]] [rn2_9.c2.c.b Gradient[32 x 1]] }
00000089CB1E2240: {[rn2_7.c1.c.W Gradient[32 x 288]] [rn2_7.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_7.p Value[16 x 16 x 32 x *]] }
00000089CB1E22E0: {[rn2_10.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E2380: {[rn2_6.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E24C0: {[rn2_10.c1.c.W Gradient[32 x 288]] [rn2_10.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_10.p Value[16 x 16 x 32 x *]] }
00000089CB1E2560: {[rn2_10.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_10.y Value[16 x 16 x 32 x *]] }
00000089CB1E2600: {[rn2_8.c2.W Gradient[32 x 288]] [rn2_9.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E26A0: {[rn2_9.c1.c.W Gradient[32 x 288]] [rn2_9.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_9.p Value[16 x 16 x 32 x *]] }
00000089CB1E2740: {[rn2_10.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_10.c1.y Value[16 x 16 x 32 x *]] [rn2_8.c1.c.c.sc Gradient[32 x 1]] [rn2_8.c1.y Gradient[16 x 16 x 32 x *]] [rn2_8.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E27E0: {[rn2_10.c2.W Gradient[32 x 288]] [rn2_11.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E2880: {[rn2_7.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_7.y Value[16 x 16 x 32 x *]] }
00000089CB1E2920: {[rn2_10.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E29C0: {[rn2_6.c1.c.c.sc Gradient[32 x 1]] [rn2_6.c1.y Gradient[16 x 16 x 32 x *]] [rn2_6.y Gradient[16 x 16 x 32 x *]] [rn2_8.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_8.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E2A60: {[rn2_7.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E2B00: {[rn2_6.c2.c.b Gradient[32 x 1]] [rn2_7.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E2BA0: {[rn2_8.c2.c.b Gradient[32 x 1]] [rn2_9.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E2C40: {[rn2_10.c2.c.sc Gradient[32 x 1]] [rn2_10.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E2CE0: {[rn2_11.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E2EC0: {[rn2_6.c1.c.W Gradient[32 x 288]] [rn2_6.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_6.p Value[16 x 16 x 32 x *]] }
00000089CB1E2F60: {[rn2_7.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E30A0: {[rn2_7.c2.W Gradient[32 x 288]] [rn2_8.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E3140: {[rn2_7.c2.c.sc Gradient[32 x 1]] [rn2_7.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E31E0: {[rn2_8.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_8.y Value[16 x 16 x 32 x *]] }
00000089CB1E3280: {[rn2_8.c2.c.sc Gradient[32 x 1]] [rn2_8.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E3320: {[rn2_9.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E3460: {[rn2_9.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E35A0: {[rn2_6.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E3640: {[rn2_9.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E3820: {[rn2_7.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E38C0: {[rn2_4.c1.c.c.sc Gradient[32 x 1]] [rn2_4.c1.y Gradient[16 x 16 x 32 x *]] [rn2_4.y Gradient[16 x 16 x 32 x *]] [rn2_6.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_6.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E3960: {[rn2_5.c1.c.c.sc Gradient[32 x 1]] [rn2_5.c1.y Gradient[16 x 16 x 32 x *]] [rn2_5.y Gradient[16 x 16 x 32 x *]] [rn2_7.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_7.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E3A00: {[rn2_6.c2.c.sc Gradient[32 x 1]] [rn2_6.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E3AA0: {[rn2_8.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E3BE0: {[rn2_7.c1.c.c.sc Gradient[32 x 1]] [rn2_7.c1.y Gradient[16 x 16 x 32 x *]] [rn2_7.y Gradient[16 x 16 x 32 x *]] [rn2_9.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_9.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E3C80: {[rn2_6.c2.W Gradient[32 x 288]] [rn2_7.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E3D20: {[rn2_9.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_9.y Value[16 x 16 x 32 x *]] }
00000089CB1E3DC0: {[rn2_8.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E3F00: {[rn2_7.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E3FA0: {[rn2_7.c2.c.b Gradient[32 x 1]] [rn2_8.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E4040: {[rn2_8.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E40E0: {[rn2_10.c1.c.c.c Value[16 x 16 x 32 x *]] [rn2_9.c2.W Gradient[32 x 288]] }
00000089CB1E4180: {[rn2_9.c2.c.sc Gradient[32 x 1]] [rn2_9.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E4360: {[rn2_11.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_11.c1.y Value[16 x 16 x 32 x *]] [rn2_9.c1.c.c.sc Gradient[32 x 1]] [rn2_9.c1.y Gradient[16 x 16 x 32 x *]] [rn2_9.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E4400: {[rn2_11.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E44A0: {[rn2_11.c1.c.W Gradient[32 x 288]] [rn2_11.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_11.p Value[16 x 16 x 32 x *]] }
00000089CB1E4540: {[rn2_12.c2.c.b Gradient[32 x 1]] [rn2_13.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E4680: {[rn2_13.c2.c.b Gradient[32 x 1]] [rn2_14.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E4720: {[rn2_13.c2.c.sc Gradient[32 x 1]] [rn2_13.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E47C0: {[rn2_14.c2.W Gradient[32 x 288]] [rn2_15.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E4860: {[rn2_14.c2.c.b Gradient[32 x 1]] [rn2_15.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E49A0: {[rn2_11.c2.c.sc Gradient[32 x 1]] [rn2_11.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E4AE0: {[rn2_15.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E4CC0: {[rn2_15.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E4D60: {[rn2_15.c1.c.W Gradient[32 x 288]] [rn2_15.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_15.p Value[16 x 16 x 32 x *]] }
00000089CB1E4E00: {[rn2_13.c1.c.W Gradient[32 x 288]] [rn2_13.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_13.p Value[16 x 16 x 32 x *]] }
00000089CB1E4FE0: {[rn2_15.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_15.y Value[16 x 16 x 32 x *]] }
00000089CB1E5080: {[rn2_12.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E5120: {[rn2_15.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E5260: {[rn2_11.c2.W Gradient[32 x 288]] [rn2_12.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E5440: {[rn2_15.c2.W Gradient[32 x 288]] [rn2_16.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E54E0: {[rn2_15.c2.c.sc Gradient[32 x 1]] [rn2_15.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E5580: {[rn2_12.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E5620: {[rn2_11.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E56C0: {[rn2_11.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E5760: {[rn2_10.c1.c.c.sc Gradient[32 x 1]] [rn2_10.c1.y Gradient[16 x 16 x 32 x *]] [rn2_10.y Gradient[16 x 16 x 32 x *]] [rn2_12.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_12.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E58A0: {[rn2_12.c1.c.W Gradient[32 x 288]] [rn2_12.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_12.p Value[16 x 16 x 32 x *]] }
00000089CB1E5940: {[rn2_11.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_11.y Value[16 x 16 x 32 x *]] }
00000089CB1E59E0: {[rn2_12.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_12.y Value[16 x 16 x 32 x *]] }
00000089CB1E5A80: {[rn2_13.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E5B20: {[rn2_13.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_13.y Value[16 x 16 x 32 x *]] }
00000089CB1E5BC0: {[rn2_13.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E5C60: {[rn2_13.c2.W Gradient[32 x 288]] [rn2_14.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E5D00: {[rn2_12.c1.c.c.sc Gradient[32 x 1]] [rn2_12.c1.y Gradient[16 x 16 x 32 x *]] [rn2_12.y Gradient[16 x 16 x 32 x *]] [rn2_14.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_14.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E5DA0: {[rn2_10.c2.c.b Gradient[32 x 1]] [rn2_11.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E5E40: {[rn2_14.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E5EE0: {[rn2_12.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E5F80: {[rn2_12.c2.c.sc Gradient[32 x 1]] [rn2_12.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E6020: {[rn2_12.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E6200: {[rn2_12.c2.W Gradient[32 x 288]] [rn2_13.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E62A0: {[rn2_13.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E63E0: {[rn2_14.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E6480: {[rn2_14.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E6520: {[rn2_14.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_14.y Value[16 x 16 x 32 x *]] }
00000089CB1E65C0: {[rn2_13.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E6660: {[rn2_14.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E6700: {[rn2_11.c2.c.b Gradient[32 x 1]] [rn2_12.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E6840: {[rn2_11.c1.c.c.sc Gradient[32 x 1]] [rn2_11.c1.y Gradient[16 x 16 x 32 x *]] [rn2_11.y Gradient[16 x 16 x 32 x *]] [rn2_13.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_13.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E68E0: {[rn2_14.c1.c.W Gradient[32 x 288]] [rn2_14.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_14.p Value[16 x 16 x 32 x *]] }
00000089CB1E6980: {[rn2_14.c2.c.sc Gradient[32 x 1]] [rn2_14.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E6A20: {[rn2_15.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E6AC0: {[rn2_13.c1.c.c.sc Gradient[32 x 1]] [rn2_13.c1.y Gradient[16 x 16 x 32 x *]] [rn2_13.y Gradient[16 x 16 x 32 x *]] [rn2_15.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_15.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E6C00: {[rn2_14.c1.c.c.sc Gradient[32 x 1]] [rn2_14.c1.y Gradient[16 x 16 x 32 x *]] [rn2_14.y Gradient[16 x 16 x 32 x *]] [rn2_16.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_16.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E6D40: {[rn2_16.c1.c.c.sc Gradient[32 x 1]] [rn2_16.c1.y Gradient[16 x 16 x 32 x *]] [rn2_16.y Gradient[16 x 16 x 32 x *]] [rn2_18.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_18.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E6DE0: {[rn2_18.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E6E80: {[rn2_17.c1.c.c.sc Gradient[32 x 1]] [rn2_17.c1.y Gradient[16 x 16 x 32 x *]] [rn2_17.y Gradient[16 x 16 x 32 x *]] [rn3_1.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_1.c1.y Value[8 x 8 x 64 x *]] }
00000089CB1E6F20: {[rn2_18.c2.W Gradient[32 x 288]] [rn3_1.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB1E6FC0: {[rn3_1.c1.c.W Gradient[64 x 288]] [rn3_1.c2.c.c Gradient[8 x 8 x 64 x *]] }
00000089CB1E7060: {[rn3_1.c2.W Gradient[64 x 576]] [rn3_2.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB1E7100: {[rn3_1.c2.c.b Gradient[64 x 1]] [rn3_1.c_proj.c Gradient[8 x 8 x 64 x *]] [rn3_1.p Value[8 x 8 x 64 x *]] }
00000089CB1E71A0: {[rn2_16.c2.W Gradient[32 x 288]] [rn2_17.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E7240: {[rn2_17.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E72E0: {[rn3_1.c_proj.sc Gradient[64 x 1]] [rn3_1.p Gradient[8 x 8 x 64 x *]] }
00000089CB1E7380: {[rn2_16.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E7420: {[rn3_1.c_proj.b Gradient[64 x 1]] }
00000089CB1E74C0: {[rn2_18.c1.c.c.sc Gradient[32 x 1]] [rn2_18.c1.y Gradient[16 x 16 x 32 x *]] [rn2_18.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E7560: {[rn3_1.c_proj.y Gradient[8 x 8 x 64 x *]] [rn3_2.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_2.c1.y Value[8 x 8 x 64 x *]] }
00000089CB1E7600: {[rn2_18.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E76A0: {[rn3_1.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB1E77E0: {[rn3_2.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB1E7920: {[rn3_2.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB1E79C0: {[rn2_18.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E7A60: {[rn2_16.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_16.y Value[16 x 16 x 32 x *]] }
00000089CB1E7C40: {[rn3_2.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB1E7CE0: {[rn3_2.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB1E7D80: {[rn2_16.c2.c.sc Gradient[32 x 1]] [rn2_16.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E7E20: {[rn2_15.c2.c.b Gradient[32 x 1]] [rn2_16.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E7EC0: {[rn2_16.c2.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E8000: {[rn2_17.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E80A0: {[rn2_17.c1.c.W Gradient[32 x 288]] [rn2_17.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_17.p Value[16 x 16 x 32 x *]] }
00000089CB1E8140: {[rn2_16.c1.c.W Gradient[32 x 288]] [rn2_16.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_16.p Value[16 x 16 x 32 x *]] }
00000089CB1E8280: {[rn2_18.c1.c.W Gradient[32 x 288]] [rn2_18.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_18.p Value[16 x 16 x 32 x *]] }
00000089CB1E8320: {[rn2_18.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_18.y Value[16 x 16 x 32 x *]] }
00000089CB1E83C0: {[rn2_17.c2.c.b Gradient[32 x 1]] [rn2_18.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E8500: {[rn2_16.c1.c.c.b Gradient[32 x 1]] }
00000089CB1E8640: {[rn2_18.c2.c.b Gradient[32 x 1]] [rn3_1.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB1E86E0: {[rn2_16.c2.c.b Gradient[32 x 1]] [rn2_17.c2.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E8780: {[rn2_17.c2.W Gradient[32 x 288]] [rn2_18.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000089CB1E8820: {[rn2_17.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E88C0: {[rn2_16.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E8960: {[rn2_17.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000089CB1E8A00: {[rn2_17.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_17.y Value[16 x 16 x 32 x *]] }
00000089CB1E8AA0: {[rn2_17.c2.c.sc Gradient[32 x 1]] [rn2_17.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E8B40: {[rn3_1.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB1E8BE0: {[rn3_1.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB1E8D20: {[rn3_1.c2.c.sc Gradient[64 x 1]] [rn3_1.c_proj.c Value[8 x 8 x 64 x *]] }
00000089CB1E8DC0: {[rn2_18.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000089CB1E8E60: {[rn2_18.c2.c.sc Gradient[32 x 1]] [rn2_18.p Gradient[16 x 16 x 32 x *]] }
00000089CB1E8F00: {[rn2_15.c1.c.c.sc Gradient[32 x 1]] [rn2_15.c1.y Gradient[16 x 16 x 32 x *]] [rn2_15.y Gradient[16 x 16 x 32 x *]] [rn2_17.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_17.c1.y Value[16 x 16 x 32 x *]] }
00000089CB1E90E0: {[rn3_1.c1.c.c.b Gradient[64 x 1]] }
00000089CB1E9180: {[rn3_1.c_proj.y Value[8 x 8 x 64 x *]] }
00000089CB1E92C0: {[rn3_1.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_1.y Value[8 x 8 x 64 x *]] }
00000089CB1E9360: {[rn3_2.c1.c.c.b Gradient[64 x 1]] }
00000089CB1E9400: {[rn3_2.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_2.y Value[8 x 8 x 64 x *]] }
00000089CB1E94A0: {[rn3_1.c1.c.c.sc Gradient[64 x 1]] [rn3_1.c1.y Gradient[8 x 8 x 64 x *]] [rn3_1.y Gradient[8 x 8 x 64 x *]] [rn3_3.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_3.c1.y Value[8 x 8 x 64 x *]] }
00000089CB1E9540: {[rn3_2.c1.c.c.sc Gradient[64 x 1]] [rn3_2.c1.y Gradient[8 x 8 x 64 x *]] [rn3_2.y Gradient[8 x 8 x 64 x *]] [rn3_4.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_4.c1.y Value[8 x 8 x 64 x *]] }
00000089CB1E95E0: {[rn3_3.c2.c.b Gradient[64 x 1]] [rn3_4.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB1E9680: {[rn3_3.c1.c.c.b Gradient[64 x 1]] }
00000089CB1E97C0: {[rn3_2.c2.c.sc Gradient[64 x 1]] [rn3_2.p Gradient[8 x 8 x 64 x *]] }
00000089CB1E9860: {[rn3_3.c2.W Gradient[64 x 576]] [rn3_4.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB1E9A40: {[rn3_3.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB1E9AE0: {[rn3_3.c1.c.W Gradient[64 x 576]] [rn3_3.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_3.p Value[8 x 8 x 64 x *]] }
00000089CB1E9B80: {[rn3_2.c2.W Gradient[64 x 576]] [rn3_3.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB1E9C20: {[rn3_3.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB1E9CC0: {[rn3_2.c2.c.b Gradient[64 x 1]] [rn3_3.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB1E9D60: {[rn3_2.c1.c.W Gradient[64 x 576]] [rn3_2.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_2.p Value[8 x 8 x 64 x *]] }
00000089CB1E9EA0: {[rn3_3.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB1E9F40: {[rn3_3.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_3.y Value[8 x 8 x 64 x *]] }
00000089CB1E9FE0: {[rn3_3.c2.c.sc Gradient[64 x 1]] [rn3_3.p Gradient[8 x 8 x 64 x *]] }
00000089CB1EA080: {[rn3_4.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB20EB90: {[rn3_16.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB20EC30: {[rn3_12.c1.c.c.sc Gradient[64 x 1]] [rn3_12.c1.y Gradient[8 x 8 x 64 x *]] [rn3_12.y Gradient[8 x 8 x 64 x *]] [rn3_14.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_14.c1.y Value[8 x 8 x 64 x *]] }
00000089CB20ECD0: {[rn3_14.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB20ED70: {[rn3_14.c1.c.W Gradient[64 x 576]] [rn3_14.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_14.p Value[8 x 8 x 64 x *]] }
00000089CB20EE10: {[rn3_15.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB20EEB0: {[rn3_16.c2.c.sc Gradient[64 x 1]] [rn3_16.p Gradient[8 x 8 x 64 x *]] }
00000089CB20EFF0: {[rn3_15.c1.c.c.sc Gradient[64 x 1]] [rn3_15.c1.y Gradient[8 x 8 x 64 x *]] [rn3_15.y Gradient[8 x 8 x 64 x *]] [rn3_17.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_17.c1.y Value[8 x 8 x 64 x *]] }
00000089CB20F090: {[rn3_17.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB20F130: {[rn3_16.c1.c.W Gradient[64 x 576]] [rn3_16.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_16.p Value[8 x 8 x 64 x *]] }
00000089CB20F1D0: {[rn3_17.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB20F270: {[rn3_18.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB20F450: {[rn3_18.c1.c.c.b Gradient[64 x 1]] }
00000089CB20F4F0: {[rn3_18.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_18.y Value[8 x 8 x 64 x *]] }
00000089CB20F590: {[pool Value[1 x 1 x 64 x *]] [rn3_18.c2.c.sc Gradient[64 x 1]] [rn3_18.p Gradient[8 x 8 x 64 x *]] }
00000089CB20F630: {[rn3_14.c2.W Gradient[64 x 576]] [rn3_15.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB20F6D0: {[rn3_15.c1.c.W Gradient[64 x 576]] [rn3_15.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_15.p Value[8 x 8 x 64 x *]] }
00000089CB20F770: {[OutputNodes.t Value[10 x *]] [rn3_18.c1.c.c.sc Gradient[64 x 1]] [rn3_18.c1.y Gradient[8 x 8 x 64 x *]] [rn3_18.y Gradient[8 x 8 x 64 x *]] }
00000089CB20F8B0: {[rn3_18.c1.c.W Gradient[64 x 576]] [rn3_18.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_18.p Value[8 x 8 x 64 x *]] }
00000089CB20F950: {[rn3_16.c1.c.c.b Gradient[64 x 1]] }
00000089CB20F9F0: {[rn3_14.c1.c.c.sc Gradient[64 x 1]] [rn3_14.c1.y Gradient[8 x 8 x 64 x *]] [rn3_14.y Gradient[8 x 8 x 64 x *]] [rn3_16.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_16.c1.y Value[8 x 8 x 64 x *]] }
00000089CB20FA90: {[rn3_15.c2.c.b Gradient[64 x 1]] [rn3_16.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB20FB30: {[rn3_14.c2.c.b Gradient[64 x 1]] [rn3_15.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB20FBD0: {[rn3_17.c2.c.sc Gradient[64 x 1]] [rn3_17.p Gradient[8 x 8 x 64 x *]] }
00000089CB20FC70: {[rn3_16.c1.c.c.sc Gradient[64 x 1]] [rn3_16.c1.y Gradient[8 x 8 x 64 x *]] [rn3_16.y Gradient[8 x 8 x 64 x *]] [rn3_18.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_18.c1.y Value[8 x 8 x 64 x *]] }
00000089CB20FDB0: {[rn3_16.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB20FE50: {[rn3_14.c2.c.sc Gradient[64 x 1]] [rn3_14.p Gradient[8 x 8 x 64 x *]] }
00000089CB20FF90: {[rn3_15.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000089CB210030: {[rn3_15.c1.c.c.b Gradient[64 x 1]] }
00000089CB210170: {[rn3_14.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_14.y Value[8 x 8 x 64 x *]] }
00000089CB2102B0: {[rn3_17.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB210350: {[rn3_15.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_15.y Value[8 x 8 x 64 x *]] }
00000089CB210490: {[rn3_15.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB210530: {[rn3_15.c2.c.sc Gradient[64 x 1]] [rn3_15.p Gradient[8 x 8 x 64 x *]] }
00000089CB210670: {[rn3_16.c2.c.b Gradient[64 x 1]] [rn3_17.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB210710: {[rn3_17.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_17.y Value[8 x 8 x 64 x *]] }
00000089CB2107B0: {[rn3_13.c2.c.b Gradient[64 x 1]] [rn3_14.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB210850: {[rn3_17.c2.W Gradient[64 x 576]] [rn3_18.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB210990: {[rn3_17.c1.c.c.b Gradient[64 x 1]] }
00000089CB210AD0: {[rn3_13.c1.c.c.sc Gradient[64 x 1]] [rn3_13.c1.y Gradient[8 x 8 x 64 x *]] [rn3_13.y Gradient[8 x 8 x 64 x *]] [rn3_15.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_15.c1.y Value[8 x 8 x 64 x *]] }
00000089CB210CB0: {[rn3_16.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB210D50: {[rn3_17.c2.c.b Gradient[64 x 1]] [rn3_18.c2.c.c Value[8 x 8 x 64 x *]] }
00000089CB210DF0: {[rn3_14.c1.c.c.b Gradient[64 x 1]] }
00000089CB210F30: {[rn3_14.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB210FD0: {[rn3_18.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000089CB211070: {[rn3_18.c2.c.y Value[8 x 8 x 64 x *]] }
00000089CB211110: {[rn3_15.c2.W Gradient[64 x 576]] [rn3_16.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB2111B0: {[rn3_16.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_16.y Value[8 x 8 x 64 x *]] }
00000089CB211250: {[rn3_16.c2.W Gradient[64 x 576]] [rn3_17.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000089CB2112F0: {[rn3_17.c1.c.W Gradient[64 x 576]] [rn3_17.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_17.p Value[8 x 8 x 64 x *]] }
00000089CB2117F0: {[CE Gradient[1]] }
00000089CB211930: {[OutputNodes.b Gradient[10]] }
00000089CB2119D0: {[rn3_18.c2.c.b Gradient[64 x 1]] }
00000089CB211A70: {[OutputNodes.t Gradient[10 x *]] [rn3_17.c1.c.c.sc Gradient[64 x 1]] [rn3_17.c1.y Gradient[8 x 8 x 64 x *]] [rn3_17.y Gradient[8 x 8 x 64 x *]] }
00000089CB211B10: {[pool Gradient[1 x 1 x 64 x *]] [rn3_18.c2.W Gradient[64 x 576]] }
00000089CB212010: {[OutputNodes.W Gradient[10 x 1 x 1 x 64]] [OutputNodes.z Gradient[10 x *]] }

07/14/2016 05:26:16: No PreCompute nodes found, skipping PreCompute step.

07/14/2016 05:26:16: Starting Epoch 1: learning rate per sample = 0.006250  effective momentum = 0.900000  momentum as time constant = 151.9 samples

07/14/2016 05:26:16: Starting minibatch loop.
07/14/2016 05:26:22: Finished Epoch[ 1 of 1]: [Training] CE = 2.53670096 * 128; Err = 0.89062500 * 128; totalSamplesSeen = 128; learningRatePerSample = 0.0062500001; epochTime=6.6065s
07/14/2016 05:26:23: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714052409.636385\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56'
07/14/2016 05:26:23: CNTKCommandTrainEnd: Train

07/14/2016 05:26:23: Action "train" complete.


07/14/2016 05:26:23: ##############################################################################
07/14/2016 05:26:23: #                                                                            #
07/14/2016 05:26:23: # Action "test"                                                              #
07/14/2016 05:26:23: #                                                                            #
07/14/2016 05:26:23: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 949 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 1 x 1 x 64]
Validating --> rn3_18.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *1] -> [32 x 32 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.c.c.c = Convolution (rn1_4.c1.c.W, rn1_3.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization (rn1_4.c1.c.c.c, rn1_4.c1.c.c.sc, rn1_4.c1.c.c.b, rn1_4.c1.c.c.m, rn1_4.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.y = RectifiedLinear (rn1_4.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c2.c.c = Convolution (rn1_4.c2.W, rn1_4.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization (rn1_4.c2.c.c, rn1_4.c2.c.sc, rn1_4.c2.c.b, rn1_4.c2.c.m, rn1_4.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.p = Plus (rn1_4.c2.c.y, rn1_3.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.y = RectifiedLinear (rn1_4.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.c.c.c = Convolution (rn1_5.c1.c.W, rn1_4.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization (rn1_5.c1.c.c.c, rn1_5.c1.c.c.sc, rn1_5.c1.c.c.b, rn1_5.c1.c.c.m, rn1_5.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.y = RectifiedLinear (rn1_5.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c2.c.c = Convolution (rn1_5.c2.W, rn1_5.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization (rn1_5.c2.c.c, rn1_5.c2.c.sc, rn1_5.c2.c.b, rn1_5.c2.c.m, rn1_5.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.p = Plus (rn1_5.c2.c.y, rn1_4.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.y = RectifiedLinear (rn1_5.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.c.c.c = Convolution (rn1_6.c1.c.W, rn1_5.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization (rn1_6.c1.c.c.c, rn1_6.c1.c.c.sc, rn1_6.c1.c.c.b, rn1_6.c1.c.c.m, rn1_6.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.y = RectifiedLinear (rn1_6.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c2.c.c = Convolution (rn1_6.c2.W, rn1_6.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization (rn1_6.c2.c.c, rn1_6.c2.c.sc, rn1_6.c2.c.b, rn1_6.c2.c.m, rn1_6.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.p = Plus (rn1_6.c2.c.y, rn1_5.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.y = RectifiedLinear (rn1_6.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.c.c.c = Convolution (rn1_7.c1.c.W, rn1_6.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization (rn1_7.c1.c.c.c, rn1_7.c1.c.c.sc, rn1_7.c1.c.c.b, rn1_7.c1.c.c.m, rn1_7.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.y = RectifiedLinear (rn1_7.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c2.c.c = Convolution (rn1_7.c2.W, rn1_7.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization (rn1_7.c2.c.c, rn1_7.c2.c.sc, rn1_7.c2.c.b, rn1_7.c2.c.m, rn1_7.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.p = Plus (rn1_7.c2.c.y, rn1_6.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.y = RectifiedLinear (rn1_7.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.c.c.c = Convolution (rn1_8.c1.c.W, rn1_7.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization (rn1_8.c1.c.c.c, rn1_8.c1.c.c.sc, rn1_8.c1.c.c.b, rn1_8.c1.c.c.m, rn1_8.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.y = RectifiedLinear (rn1_8.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c2.c.c = Convolution (rn1_8.c2.W, rn1_8.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization (rn1_8.c2.c.c, rn1_8.c2.c.sc, rn1_8.c2.c.b, rn1_8.c2.c.m, rn1_8.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.p = Plus (rn1_8.c2.c.y, rn1_7.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.y = RectifiedLinear (rn1_8.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.c.c.c = Convolution (rn1_9.c1.c.W, rn1_8.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization (rn1_9.c1.c.c.c, rn1_9.c1.c.c.sc, rn1_9.c1.c.c.b, rn1_9.c1.c.c.m, rn1_9.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.y = RectifiedLinear (rn1_9.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c2.c.c = Convolution (rn1_9.c2.W, rn1_9.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization (rn1_9.c2.c.c, rn1_9.c2.c.sc, rn1_9.c2.c.b, rn1_9.c2.c.m, rn1_9.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.p = Plus (rn1_9.c2.c.y, rn1_8.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.y = RectifiedLinear (rn1_9.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.c.c.c = Convolution (rn1_10.c1.c.W, rn1_9.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization (rn1_10.c1.c.c.c, rn1_10.c1.c.c.sc, rn1_10.c1.c.c.b, rn1_10.c1.c.c.m, rn1_10.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.y = RectifiedLinear (rn1_10.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c2.c.c = Convolution (rn1_10.c2.W, rn1_10.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization (rn1_10.c2.c.c, rn1_10.c2.c.sc, rn1_10.c2.c.b, rn1_10.c2.c.m, rn1_10.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.p = Plus (rn1_10.c2.c.y, rn1_9.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.y = RectifiedLinear (rn1_10.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.c.c.c = Convolution (rn1_11.c1.c.W, rn1_10.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization (rn1_11.c1.c.c.c, rn1_11.c1.c.c.sc, rn1_11.c1.c.c.b, rn1_11.c1.c.c.m, rn1_11.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.y = RectifiedLinear (rn1_11.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c2.c.c = Convolution (rn1_11.c2.W, rn1_11.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization (rn1_11.c2.c.c, rn1_11.c2.c.sc, rn1_11.c2.c.b, rn1_11.c2.c.m, rn1_11.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.p = Plus (rn1_11.c2.c.y, rn1_10.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.y = RectifiedLinear (rn1_11.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.c.c.c = Convolution (rn1_12.c1.c.W, rn1_11.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization (rn1_12.c1.c.c.c, rn1_12.c1.c.c.sc, rn1_12.c1.c.c.b, rn1_12.c1.c.c.m, rn1_12.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.y = RectifiedLinear (rn1_12.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c2.c.c = Convolution (rn1_12.c2.W, rn1_12.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization (rn1_12.c2.c.c, rn1_12.c2.c.sc, rn1_12.c2.c.b, rn1_12.c2.c.m, rn1_12.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.p = Plus (rn1_12.c2.c.y, rn1_11.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.y = RectifiedLinear (rn1_12.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.c.c.c = Convolution (rn1_13.c1.c.W, rn1_12.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization (rn1_13.c1.c.c.c, rn1_13.c1.c.c.sc, rn1_13.c1.c.c.b, rn1_13.c1.c.c.m, rn1_13.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.y = RectifiedLinear (rn1_13.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c2.c.c = Convolution (rn1_13.c2.W, rn1_13.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization (rn1_13.c2.c.c, rn1_13.c2.c.sc, rn1_13.c2.c.b, rn1_13.c2.c.m, rn1_13.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.p = Plus (rn1_13.c2.c.y, rn1_12.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.y = RectifiedLinear (rn1_13.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.c.c.c = Convolution (rn1_14.c1.c.W, rn1_13.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization (rn1_14.c1.c.c.c, rn1_14.c1.c.c.sc, rn1_14.c1.c.c.b, rn1_14.c1.c.c.m, rn1_14.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.y = RectifiedLinear (rn1_14.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c2.c.c = Convolution (rn1_14.c2.W, rn1_14.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization (rn1_14.c2.c.c, rn1_14.c2.c.sc, rn1_14.c2.c.b, rn1_14.c2.c.m, rn1_14.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.p = Plus (rn1_14.c2.c.y, rn1_13.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.y = RectifiedLinear (rn1_14.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.c.c.c = Convolution (rn1_15.c1.c.W, rn1_14.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization (rn1_15.c1.c.c.c, rn1_15.c1.c.c.sc, rn1_15.c1.c.c.b, rn1_15.c1.c.c.m, rn1_15.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.y = RectifiedLinear (rn1_15.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c2.c.c = Convolution (rn1_15.c2.W, rn1_15.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization (rn1_15.c2.c.c, rn1_15.c2.c.sc, rn1_15.c2.c.b, rn1_15.c2.c.m, rn1_15.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.p = Plus (rn1_15.c2.c.y, rn1_14.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.y = RectifiedLinear (rn1_15.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.c.c.c = Convolution (rn1_16.c1.c.W, rn1_15.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization (rn1_16.c1.c.c.c, rn1_16.c1.c.c.sc, rn1_16.c1.c.c.b, rn1_16.c1.c.c.m, rn1_16.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.y = RectifiedLinear (rn1_16.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c2.c.c = Convolution (rn1_16.c2.W, rn1_16.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization (rn1_16.c2.c.c, rn1_16.c2.c.sc, rn1_16.c2.c.b, rn1_16.c2.c.m, rn1_16.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.p = Plus (rn1_16.c2.c.y, rn1_15.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.y = RectifiedLinear (rn1_16.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.c.c.c = Convolution (rn1_17.c1.c.W, rn1_16.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization (rn1_17.c1.c.c.c, rn1_17.c1.c.c.sc, rn1_17.c1.c.c.b, rn1_17.c1.c.c.m, rn1_17.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.y = RectifiedLinear (rn1_17.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c2.c.c = Convolution (rn1_17.c2.W, rn1_17.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization (rn1_17.c2.c.c, rn1_17.c2.c.sc, rn1_17.c2.c.b, rn1_17.c2.c.m, rn1_17.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.p = Plus (rn1_17.c2.c.y, rn1_16.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.y = RectifiedLinear (rn1_17.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.c.c.c = Convolution (rn1_18.c1.c.W, rn1_17.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization (rn1_18.c1.c.c.c, rn1_18.c1.c.c.sc, rn1_18.c1.c.c.b, rn1_18.c1.c.c.m, rn1_18.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.y = RectifiedLinear (rn1_18.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c2.c.c = Convolution (rn1_18.c2.W, rn1_18.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization (rn1_18.c2.c.c, rn1_18.c2.c.sc, rn1_18.c2.c.b, rn1_18.c2.c.m, rn1_18.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.p = Plus (rn1_18.c2.c.y, rn1_17.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.y = RectifiedLinear (rn1_18.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_18.y) : [32 x 144], [32 x 32 x 16 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_18.y) : [32 x 16], [32 x 32 x 16 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.c.c.c = Convolution (rn2_4.c1.c.W, rn2_3.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization (rn2_4.c1.c.c.c, rn2_4.c1.c.c.sc, rn2_4.c1.c.c.b, rn2_4.c1.c.c.m, rn2_4.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.y = RectifiedLinear (rn2_4.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c2.c.c = Convolution (rn2_4.c2.W, rn2_4.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization (rn2_4.c2.c.c, rn2_4.c2.c.sc, rn2_4.c2.c.b, rn2_4.c2.c.m, rn2_4.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.p = Plus (rn2_4.c2.c.y, rn2_3.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.y = RectifiedLinear (rn2_4.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.c.c.c = Convolution (rn2_5.c1.c.W, rn2_4.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization (rn2_5.c1.c.c.c, rn2_5.c1.c.c.sc, rn2_5.c1.c.c.b, rn2_5.c1.c.c.m, rn2_5.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.y = RectifiedLinear (rn2_5.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c2.c.c = Convolution (rn2_5.c2.W, rn2_5.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization (rn2_5.c2.c.c, rn2_5.c2.c.sc, rn2_5.c2.c.b, rn2_5.c2.c.m, rn2_5.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.p = Plus (rn2_5.c2.c.y, rn2_4.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.y = RectifiedLinear (rn2_5.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.c.c.c = Convolution (rn2_6.c1.c.W, rn2_5.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization (rn2_6.c1.c.c.c, rn2_6.c1.c.c.sc, rn2_6.c1.c.c.b, rn2_6.c1.c.c.m, rn2_6.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.y = RectifiedLinear (rn2_6.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c2.c.c = Convolution (rn2_6.c2.W, rn2_6.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization (rn2_6.c2.c.c, rn2_6.c2.c.sc, rn2_6.c2.c.b, rn2_6.c2.c.m, rn2_6.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.p = Plus (rn2_6.c2.c.y, rn2_5.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.y = RectifiedLinear (rn2_6.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.c.c.c = Convolution (rn2_7.c1.c.W, rn2_6.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization (rn2_7.c1.c.c.c, rn2_7.c1.c.c.sc, rn2_7.c1.c.c.b, rn2_7.c1.c.c.m, rn2_7.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.y = RectifiedLinear (rn2_7.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c2.c.c = Convolution (rn2_7.c2.W, rn2_7.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization (rn2_7.c2.c.c, rn2_7.c2.c.sc, rn2_7.c2.c.b, rn2_7.c2.c.m, rn2_7.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.p = Plus (rn2_7.c2.c.y, rn2_6.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.y = RectifiedLinear (rn2_7.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.c.c.c = Convolution (rn2_8.c1.c.W, rn2_7.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization (rn2_8.c1.c.c.c, rn2_8.c1.c.c.sc, rn2_8.c1.c.c.b, rn2_8.c1.c.c.m, rn2_8.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.y = RectifiedLinear (rn2_8.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c2.c.c = Convolution (rn2_8.c2.W, rn2_8.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization (rn2_8.c2.c.c, rn2_8.c2.c.sc, rn2_8.c2.c.b, rn2_8.c2.c.m, rn2_8.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.p = Plus (rn2_8.c2.c.y, rn2_7.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.y = RectifiedLinear (rn2_8.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.c.c.c = Convolution (rn2_9.c1.c.W, rn2_8.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization (rn2_9.c1.c.c.c, rn2_9.c1.c.c.sc, rn2_9.c1.c.c.b, rn2_9.c1.c.c.m, rn2_9.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.y = RectifiedLinear (rn2_9.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c2.c.c = Convolution (rn2_9.c2.W, rn2_9.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization (rn2_9.c2.c.c, rn2_9.c2.c.sc, rn2_9.c2.c.b, rn2_9.c2.c.m, rn2_9.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.p = Plus (rn2_9.c2.c.y, rn2_8.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.y = RectifiedLinear (rn2_9.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.c.c.c = Convolution (rn2_10.c1.c.W, rn2_9.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization (rn2_10.c1.c.c.c, rn2_10.c1.c.c.sc, rn2_10.c1.c.c.b, rn2_10.c1.c.c.m, rn2_10.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.y = RectifiedLinear (rn2_10.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c2.c.c = Convolution (rn2_10.c2.W, rn2_10.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization (rn2_10.c2.c.c, rn2_10.c2.c.sc, rn2_10.c2.c.b, rn2_10.c2.c.m, rn2_10.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.p = Plus (rn2_10.c2.c.y, rn2_9.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.y = RectifiedLinear (rn2_10.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.c.c.c = Convolution (rn2_11.c1.c.W, rn2_10.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization (rn2_11.c1.c.c.c, rn2_11.c1.c.c.sc, rn2_11.c1.c.c.b, rn2_11.c1.c.c.m, rn2_11.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.y = RectifiedLinear (rn2_11.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c2.c.c = Convolution (rn2_11.c2.W, rn2_11.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization (rn2_11.c2.c.c, rn2_11.c2.c.sc, rn2_11.c2.c.b, rn2_11.c2.c.m, rn2_11.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.p = Plus (rn2_11.c2.c.y, rn2_10.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.y = RectifiedLinear (rn2_11.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.c.c.c = Convolution (rn2_12.c1.c.W, rn2_11.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization (rn2_12.c1.c.c.c, rn2_12.c1.c.c.sc, rn2_12.c1.c.c.b, rn2_12.c1.c.c.m, rn2_12.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.y = RectifiedLinear (rn2_12.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c2.c.c = Convolution (rn2_12.c2.W, rn2_12.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization (rn2_12.c2.c.c, rn2_12.c2.c.sc, rn2_12.c2.c.b, rn2_12.c2.c.m, rn2_12.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.p = Plus (rn2_12.c2.c.y, rn2_11.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.y = RectifiedLinear (rn2_12.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.c.c.c = Convolution (rn2_13.c1.c.W, rn2_12.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization (rn2_13.c1.c.c.c, rn2_13.c1.c.c.sc, rn2_13.c1.c.c.b, rn2_13.c1.c.c.m, rn2_13.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.y = RectifiedLinear (rn2_13.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c2.c.c = Convolution (rn2_13.c2.W, rn2_13.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization (rn2_13.c2.c.c, rn2_13.c2.c.sc, rn2_13.c2.c.b, rn2_13.c2.c.m, rn2_13.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.p = Plus (rn2_13.c2.c.y, rn2_12.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.y = RectifiedLinear (rn2_13.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.c.c.c = Convolution (rn2_14.c1.c.W, rn2_13.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization (rn2_14.c1.c.c.c, rn2_14.c1.c.c.sc, rn2_14.c1.c.c.b, rn2_14.c1.c.c.m, rn2_14.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.y = RectifiedLinear (rn2_14.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c2.c.c = Convolution (rn2_14.c2.W, rn2_14.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization (rn2_14.c2.c.c, rn2_14.c2.c.sc, rn2_14.c2.c.b, rn2_14.c2.c.m, rn2_14.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.p = Plus (rn2_14.c2.c.y, rn2_13.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.y = RectifiedLinear (rn2_14.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.c.c.c = Convolution (rn2_15.c1.c.W, rn2_14.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization (rn2_15.c1.c.c.c, rn2_15.c1.c.c.sc, rn2_15.c1.c.c.b, rn2_15.c1.c.c.m, rn2_15.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.y = RectifiedLinear (rn2_15.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c2.c.c = Convolution (rn2_15.c2.W, rn2_15.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization (rn2_15.c2.c.c, rn2_15.c2.c.sc, rn2_15.c2.c.b, rn2_15.c2.c.m, rn2_15.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.p = Plus (rn2_15.c2.c.y, rn2_14.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.y = RectifiedLinear (rn2_15.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.c.c.c = Convolution (rn2_16.c1.c.W, rn2_15.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization (rn2_16.c1.c.c.c, rn2_16.c1.c.c.sc, rn2_16.c1.c.c.b, rn2_16.c1.c.c.m, rn2_16.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.y = RectifiedLinear (rn2_16.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c2.c.c = Convolution (rn2_16.c2.W, rn2_16.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization (rn2_16.c2.c.c, rn2_16.c2.c.sc, rn2_16.c2.c.b, rn2_16.c2.c.m, rn2_16.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.p = Plus (rn2_16.c2.c.y, rn2_15.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.y = RectifiedLinear (rn2_16.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.c.c.c = Convolution (rn2_17.c1.c.W, rn2_16.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization (rn2_17.c1.c.c.c, rn2_17.c1.c.c.sc, rn2_17.c1.c.c.b, rn2_17.c1.c.c.m, rn2_17.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.y = RectifiedLinear (rn2_17.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c2.c.c = Convolution (rn2_17.c2.W, rn2_17.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization (rn2_17.c2.c.c, rn2_17.c2.c.sc, rn2_17.c2.c.b, rn2_17.c2.c.m, rn2_17.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.p = Plus (rn2_17.c2.c.y, rn2_16.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.y = RectifiedLinear (rn2_17.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.c.c.c = Convolution (rn2_18.c1.c.W, rn2_17.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization (rn2_18.c1.c.c.c, rn2_18.c1.c.c.sc, rn2_18.c1.c.c.b, rn2_18.c1.c.c.m, rn2_18.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.y = RectifiedLinear (rn2_18.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c2.c.c = Convolution (rn2_18.c2.W, rn2_18.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization (rn2_18.c2.c.c, rn2_18.c2.c.sc, rn2_18.c2.c.b, rn2_18.c2.c.m, rn2_18.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.p = Plus (rn2_18.c2.c.y, rn2_17.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.y = RectifiedLinear (rn2_18.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_18.y) : [64 x 288], [16 x 16 x 32 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_18.y) : [64 x 32], [16 x 16 x 32 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.c.c.c = Convolution (rn3_4.c1.c.W, rn3_3.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization (rn3_4.c1.c.c.c, rn3_4.c1.c.c.sc, rn3_4.c1.c.c.b, rn3_4.c1.c.c.m, rn3_4.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.y = RectifiedLinear (rn3_4.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c2.c.c = Convolution (rn3_4.c2.W, rn3_4.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization (rn3_4.c2.c.c, rn3_4.c2.c.sc, rn3_4.c2.c.b, rn3_4.c2.c.m, rn3_4.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.p = Plus (rn3_4.c2.c.y, rn3_3.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.y = RectifiedLinear (rn3_4.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.c.c.c = Convolution (rn3_5.c1.c.W, rn3_4.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization (rn3_5.c1.c.c.c, rn3_5.c1.c.c.sc, rn3_5.c1.c.c.b, rn3_5.c1.c.c.m, rn3_5.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.y = RectifiedLinear (rn3_5.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c2.c.c = Convolution (rn3_5.c2.W, rn3_5.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization (rn3_5.c2.c.c, rn3_5.c2.c.sc, rn3_5.c2.c.b, rn3_5.c2.c.m, rn3_5.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.p = Plus (rn3_5.c2.c.y, rn3_4.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.y = RectifiedLinear (rn3_5.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.c.c.c = Convolution (rn3_6.c1.c.W, rn3_5.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization (rn3_6.c1.c.c.c, rn3_6.c1.c.c.sc, rn3_6.c1.c.c.b, rn3_6.c1.c.c.m, rn3_6.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.y = RectifiedLinear (rn3_6.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c2.c.c = Convolution (rn3_6.c2.W, rn3_6.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization (rn3_6.c2.c.c, rn3_6.c2.c.sc, rn3_6.c2.c.b, rn3_6.c2.c.m, rn3_6.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.p = Plus (rn3_6.c2.c.y, rn3_5.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.y = RectifiedLinear (rn3_6.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.c.c.c = Convolution (rn3_7.c1.c.W, rn3_6.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization (rn3_7.c1.c.c.c, rn3_7.c1.c.c.sc, rn3_7.c1.c.c.b, rn3_7.c1.c.c.m, rn3_7.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.y = RectifiedLinear (rn3_7.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c2.c.c = Convolution (rn3_7.c2.W, rn3_7.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization (rn3_7.c2.c.c, rn3_7.c2.c.sc, rn3_7.c2.c.b, rn3_7.c2.c.m, rn3_7.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.p = Plus (rn3_7.c2.c.y, rn3_6.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.y = RectifiedLinear (rn3_7.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.c.c.c = Convolution (rn3_8.c1.c.W, rn3_7.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization (rn3_8.c1.c.c.c, rn3_8.c1.c.c.sc, rn3_8.c1.c.c.b, rn3_8.c1.c.c.m, rn3_8.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.y = RectifiedLinear (rn3_8.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c2.c.c = Convolution (rn3_8.c2.W, rn3_8.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization (rn3_8.c2.c.c, rn3_8.c2.c.sc, rn3_8.c2.c.b, rn3_8.c2.c.m, rn3_8.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.p = Plus (rn3_8.c2.c.y, rn3_7.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.y = RectifiedLinear (rn3_8.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.c.c.c = Convolution (rn3_9.c1.c.W, rn3_8.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization (rn3_9.c1.c.c.c, rn3_9.c1.c.c.sc, rn3_9.c1.c.c.b, rn3_9.c1.c.c.m, rn3_9.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.y = RectifiedLinear (rn3_9.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c2.c.c = Convolution (rn3_9.c2.W, rn3_9.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization (rn3_9.c2.c.c, rn3_9.c2.c.sc, rn3_9.c2.c.b, rn3_9.c2.c.m, rn3_9.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.p = Plus (rn3_9.c2.c.y, rn3_8.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.y = RectifiedLinear (rn3_9.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.c.c.c = Convolution (rn3_10.c1.c.W, rn3_9.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization (rn3_10.c1.c.c.c, rn3_10.c1.c.c.sc, rn3_10.c1.c.c.b, rn3_10.c1.c.c.m, rn3_10.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.y = RectifiedLinear (rn3_10.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c2.c.c = Convolution (rn3_10.c2.W, rn3_10.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization (rn3_10.c2.c.c, rn3_10.c2.c.sc, rn3_10.c2.c.b, rn3_10.c2.c.m, rn3_10.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.p = Plus (rn3_10.c2.c.y, rn3_9.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.y = RectifiedLinear (rn3_10.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.c.c.c = Convolution (rn3_11.c1.c.W, rn3_10.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization (rn3_11.c1.c.c.c, rn3_11.c1.c.c.sc, rn3_11.c1.c.c.b, rn3_11.c1.c.c.m, rn3_11.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.y = RectifiedLinear (rn3_11.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c2.c.c = Convolution (rn3_11.c2.W, rn3_11.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization (rn3_11.c2.c.c, rn3_11.c2.c.sc, rn3_11.c2.c.b, rn3_11.c2.c.m, rn3_11.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.p = Plus (rn3_11.c2.c.y, rn3_10.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.y = RectifiedLinear (rn3_11.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.c.c.c = Convolution (rn3_12.c1.c.W, rn3_11.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization (rn3_12.c1.c.c.c, rn3_12.c1.c.c.sc, rn3_12.c1.c.c.b, rn3_12.c1.c.c.m, rn3_12.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.y = RectifiedLinear (rn3_12.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c2.c.c = Convolution (rn3_12.c2.W, rn3_12.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization (rn3_12.c2.c.c, rn3_12.c2.c.sc, rn3_12.c2.c.b, rn3_12.c2.c.m, rn3_12.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.p = Plus (rn3_12.c2.c.y, rn3_11.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.y = RectifiedLinear (rn3_12.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.c.c.c = Convolution (rn3_13.c1.c.W, rn3_12.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization (rn3_13.c1.c.c.c, rn3_13.c1.c.c.sc, rn3_13.c1.c.c.b, rn3_13.c1.c.c.m, rn3_13.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.y = RectifiedLinear (rn3_13.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c2.c.c = Convolution (rn3_13.c2.W, rn3_13.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization (rn3_13.c2.c.c, rn3_13.c2.c.sc, rn3_13.c2.c.b, rn3_13.c2.c.m, rn3_13.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.p = Plus (rn3_13.c2.c.y, rn3_12.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.y = RectifiedLinear (rn3_13.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.c.c.c = Convolution (rn3_14.c1.c.W, rn3_13.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization (rn3_14.c1.c.c.c, rn3_14.c1.c.c.sc, rn3_14.c1.c.c.b, rn3_14.c1.c.c.m, rn3_14.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.y = RectifiedLinear (rn3_14.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c2.c.c = Convolution (rn3_14.c2.W, rn3_14.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization (rn3_14.c2.c.c, rn3_14.c2.c.sc, rn3_14.c2.c.b, rn3_14.c2.c.m, rn3_14.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.p = Plus (rn3_14.c2.c.y, rn3_13.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.y = RectifiedLinear (rn3_14.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.c.c.c = Convolution (rn3_15.c1.c.W, rn3_14.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization (rn3_15.c1.c.c.c, rn3_15.c1.c.c.sc, rn3_15.c1.c.c.b, rn3_15.c1.c.c.m, rn3_15.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.y = RectifiedLinear (rn3_15.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c2.c.c = Convolution (rn3_15.c2.W, rn3_15.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization (rn3_15.c2.c.c, rn3_15.c2.c.sc, rn3_15.c2.c.b, rn3_15.c2.c.m, rn3_15.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.p = Plus (rn3_15.c2.c.y, rn3_14.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.y = RectifiedLinear (rn3_15.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.c.c.c = Convolution (rn3_16.c1.c.W, rn3_15.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization (rn3_16.c1.c.c.c, rn3_16.c1.c.c.sc, rn3_16.c1.c.c.b, rn3_16.c1.c.c.m, rn3_16.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.y = RectifiedLinear (rn3_16.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c2.c.c = Convolution (rn3_16.c2.W, rn3_16.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization (rn3_16.c2.c.c, rn3_16.c2.c.sc, rn3_16.c2.c.b, rn3_16.c2.c.m, rn3_16.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.p = Plus (rn3_16.c2.c.y, rn3_15.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.y = RectifiedLinear (rn3_16.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.c.c.c = Convolution (rn3_17.c1.c.W, rn3_16.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization (rn3_17.c1.c.c.c, rn3_17.c1.c.c.sc, rn3_17.c1.c.c.b, rn3_17.c1.c.c.m, rn3_17.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.y = RectifiedLinear (rn3_17.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c2.c.c = Convolution (rn3_17.c2.W, rn3_17.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization (rn3_17.c2.c.c, rn3_17.c2.c.sc, rn3_17.c2.c.b, rn3_17.c2.c.m, rn3_17.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.p = Plus (rn3_17.c2.c.y, rn3_16.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.y = RectifiedLinear (rn3_17.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.c.c.c = Convolution (rn3_18.c1.c.W, rn3_17.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization (rn3_18.c1.c.c.c, rn3_18.c1.c.c.sc, rn3_18.c1.c.c.b, rn3_18.c1.c.c.m, rn3_18.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.y = RectifiedLinear (rn3_18.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c2.c.c = Convolution (rn3_18.c2.W, rn3_18.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization (rn3_18.c2.c.c, rn3_18.c2.c.sc, rn3_18.c2.c.b, rn3_18.c2.c.m, rn3_18.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.p = Plus (rn3_18.c2.c.y, rn3_17.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.y = RectifiedLinear (rn3_18.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> pool = AveragePooling (rn3_18.y) : [8 x 8 x 64 x *1] -> [1 x 1 x 64 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 390 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 1 x 1 x 64]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.c.W Gradient[16 x 27]] [conv1.c.c.b Gradient[16 x 1]] [conv1.c.c.c Gradient[32 x 32 x 16 x *1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv1.c.c.sc Gradient[16 x 1]] [conv1.c.c.y Gradient[32 x 32 x 16 x *1]] [conv1.y Gradient[32 x 32 x 16 x *1]] [features Gradient[32 x 32 x 3 x *1]] [labels Gradient[10 x *1]] [pool Gradient[1 x 1 x 64 x *1]] [rn1_1.c1.c.W Gradient[16 x 144]] [rn1_1.c1.c.c.b Gradient[16 x 1]] [rn1_1.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_1.c1.c.c.isd Gradient[16 x 1]] [rn1_1.c1.c.c.m Gradient[16 x 1]] [rn1_1.c1.c.c.sc Gradient[16 x 1]] [rn1_1.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_1.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_1.c2.W Gradient[16 x 144]] [rn1_1.c2.c.b Gradient[16 x 1]] [rn1_1.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_1.c2.c.isd Gradient[16 x 1]] [rn1_1.c2.c.m Gradient[16 x 1]] [rn1_1.c2.c.sc Gradient[16 x 1]] [rn1_1.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_1.p Gradient[32 x 32 x 16 x *1]] [rn1_1.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.c.W Gradient[16 x 144]] [rn1_10.c1.c.c.b Gradient[16 x 1]] [rn1_10.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.c.c.isd Gradient[16 x 1]] [rn1_10.c1.c.c.m Gradient[16 x 1]] [rn1_10.c1.c.c.sc Gradient[16 x 1]] [rn1_10.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c2.W Gradient[16 x 144]] [rn1_10.c2.c.b Gradient[16 x 1]] [rn1_10.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_10.c2.c.isd Gradient[16 x 1]] [rn1_10.c2.c.m Gradient[16 x 1]] [rn1_10.c2.c.sc Gradient[16 x 1]] [rn1_10.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_10.p Gradient[32 x 32 x 16 x *1]] [rn1_10.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.c.W Gradient[16 x 144]] [rn1_11.c1.c.c.b Gradient[16 x 1]] [rn1_11.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.c.c.isd Gradient[16 x 1]] [rn1_11.c1.c.c.m Gradient[16 x 1]] [rn1_11.c1.c.c.sc Gradient[16 x 1]] [rn1_11.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c2.W Gradient[16 x 144]] [rn1_11.c2.c.b Gradient[16 x 1]] [rn1_11.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_11.c2.c.isd Gradient[16 x 1]] [rn1_11.c2.c.m Gradient[16 x 1]] [rn1_11.c2.c.sc Gradient[16 x 1]] [rn1_11.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_11.p Gradient[32 x 32 x 16 x *1]] [rn1_11.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.c.W Gradient[16 x 144]] [rn1_12.c1.c.c.b Gradient[16 x 1]] [rn1_12.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.c.c.isd Gradient[16 x 1]] [rn1_12.c1.c.c.m Gradient[16 x 1]] [rn1_12.c1.c.c.sc Gradient[16 x 1]] [rn1_12.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c2.W Gradient[16 x 144]] [rn1_12.c2.c.b Gradient[16 x 1]] [rn1_12.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_12.c2.c.isd Gradient[16 x 1]] [rn1_12.c2.c.m Gradient[16 x 1]] [rn1_12.c2.c.sc Gradient[16 x 1]] [rn1_12.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_12.p Gradient[32 x 32 x 16 x *1]] [rn1_12.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.c.W Gradient[16 x 144]] [rn1_13.c1.c.c.b Gradient[16 x 1]] [rn1_13.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.c.c.isd Gradient[16 x 1]] [rn1_13.c1.c.c.m Gradient[16 x 1]] [rn1_13.c1.c.c.sc Gradient[16 x 1]] [rn1_13.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c2.W Gradient[16 x 144]] [rn1_13.c2.c.b Gradient[16 x 1]] [rn1_13.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_13.c2.c.isd Gradient[16 x 1]] [rn1_13.c2.c.m Gradient[16 x 1]] [rn1_13.c2.c.sc Gradient[16 x 1]] [rn1_13.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_13.p Gradient[32 x 32 x 16 x *1]] [rn1_13.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.c.W Gradient[16 x 144]] [rn1_14.c1.c.c.b Gradient[16 x 1]] [rn1_14.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.c.c.isd Gradient[16 x 1]] [rn1_14.c1.c.c.m Gradient[16 x 1]] [rn1_14.c1.c.c.sc Gradient[16 x 1]] [rn1_14.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c2.W Gradient[16 x 144]] [rn1_14.c2.c.b Gradient[16 x 1]] [rn1_14.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_14.c2.c.isd Gradient[16 x 1]] [rn1_14.c2.c.m Gradient[16 x 1]] [rn1_14.c2.c.sc Gradient[16 x 1]] [rn1_14.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_14.p Gradient[32 x 32 x 16 x *1]] [rn1_14.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.c.W Gradient[16 x 144]] [rn1_15.c1.c.c.b Gradient[16 x 1]] [rn1_15.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.c.c.isd Gradient[16 x 1]] [rn1_15.c1.c.c.m Gradient[16 x 1]] [rn1_15.c1.c.c.sc Gradient[16 x 1]] [rn1_15.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c2.W Gradient[16 x 144]] [rn1_15.c2.c.b Gradient[16 x 1]] [rn1_15.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_15.c2.c.isd Gradient[16 x 1]] [rn1_15.c2.c.m Gradient[16 x 1]] [rn1_15.c2.c.sc Gradient[16 x 1]] [rn1_15.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_15.p Gradient[32 x 32 x 16 x *1]] [rn1_15.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.c.W Gradient[16 x 144]] [rn1_16.c1.c.c.b Gradient[16 x 1]] [rn1_16.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.c.c.isd Gradient[16 x 1]] [rn1_16.c1.c.c.m Gradient[16 x 1]] [rn1_16.c1.c.c.sc Gradient[16 x 1]] [rn1_16.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c2.W Gradient[16 x 144]] [rn1_16.c2.c.b Gradient[16 x 1]] [rn1_16.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_16.c2.c.isd Gradient[16 x 1]] [rn1_16.c2.c.m Gradient[16 x 1]] [rn1_16.c2.c.sc Gradient[16 x 1]] [rn1_16.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_16.p Gradient[32 x 32 x 16 x *1]] [rn1_16.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.c.W Gradient[16 x 144]] [rn1_17.c1.c.c.b Gradient[16 x 1]] [rn1_17.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.c.c.isd Gradient[16 x 1]] [rn1_17.c1.c.c.m Gradient[16 x 1]] [rn1_17.c1.c.c.sc Gradient[16 x 1]] [rn1_17.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c2.W Gradient[16 x 144]] [rn1_17.c2.c.b Gradient[16 x 1]] [rn1_17.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_17.c2.c.isd Gradient[16 x 1]] [rn1_17.c2.c.m Gradient[16 x 1]] [rn1_17.c2.c.sc Gradient[16 x 1]] [rn1_17.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_17.p Gradient[32 x 32 x 16 x *1]] [rn1_17.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.c.W Gradient[16 x 144]] [rn1_18.c1.c.c.b Gradient[16 x 1]] [rn1_18.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.c.c.isd Gradient[16 x 1]] [rn1_18.c1.c.c.m Gradient[16 x 1]] [rn1_18.c1.c.c.sc Gradient[16 x 1]] [rn1_18.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c2.W Gradient[16 x 144]] [rn1_18.c2.c.b Gradient[16 x 1]] [rn1_18.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_18.c2.c.isd Gradient[16 x 1]] [rn1_18.c2.c.m Gradient[16 x 1]] [rn1_18.c2.c.sc Gradient[16 x 1]] [rn1_18.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_18.p Gradient[32 x 32 x 16 x *1]] [rn1_18.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.c.W Gradient[16 x 144]] [rn1_2.c1.c.c.b Gradient[16 x 1]] [rn1_2.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.c.c.isd Gradient[16 x 1]] [rn1_2.c1.c.c.m Gradient[16 x 1]] [rn1_2.c1.c.c.sc Gradient[16 x 1]] [rn1_2.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c2.W Gradient[16 x 144]] [rn1_2.c2.c.b Gradient[16 x 1]] [rn1_2.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_2.c2.c.isd Gradient[16 x 1]] [rn1_2.c2.c.m Gradient[16 x 1]] [rn1_2.c2.c.sc Gradient[16 x 1]] [rn1_2.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_2.p Gradient[32 x 32 x 16 x *1]] [rn1_2.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.c.W Gradient[16 x 144]] [rn1_3.c1.c.c.b Gradient[16 x 1]] [rn1_3.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.c.c.isd Gradient[16 x 1]] [rn1_3.c1.c.c.m Gradient[16 x 1]] [rn1_3.c1.c.c.sc Gradient[16 x 1]] [rn1_3.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c2.W Gradient[16 x 144]] [rn1_3.c2.c.b Gradient[16 x 1]] [rn1_3.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_3.c2.c.isd Gradient[16 x 1]] [rn1_3.c2.c.m Gradient[16 x 1]] [rn1_3.c2.c.sc Gradient[16 x 1]] [rn1_3.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_3.p Gradient[32 x 32 x 16 x *1]] [rn1_3.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.c.W Gradient[16 x 144]] [rn1_4.c1.c.c.b Gradient[16 x 1]] [rn1_4.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.c.c.isd Gradient[16 x 1]] [rn1_4.c1.c.c.m Gradient[16 x 1]] [rn1_4.c1.c.c.sc Gradient[16 x 1]] [rn1_4.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c2.W Gradient[16 x 144]] [rn1_4.c2.c.b Gradient[16 x 1]] [rn1_4.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_4.c2.c.isd Gradient[16 x 1]] [rn1_4.c2.c.m Gradient[16 x 1]] [rn1_4.c2.c.sc Gradient[16 x 1]] [rn1_4.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_4.p Gradient[32 x 32 x 16 x *1]] [rn1_4.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.c.W Gradient[16 x 144]] [rn1_5.c1.c.c.b Gradient[16 x 1]] [rn1_5.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.c.c.isd Gradient[16 x 1]] [rn1_5.c1.c.c.m Gradient[16 x 1]] [rn1_5.c1.c.c.sc Gradient[16 x 1]] [rn1_5.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c2.W Gradient[16 x 144]] [rn1_5.c2.c.b Gradient[16 x 1]] [rn1_5.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_5.c2.c.isd Gradient[16 x 1]] [rn1_5.c2.c.m Gradient[16 x 1]] [rn1_5.c2.c.sc Gradient[16 x 1]] [rn1_5.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_5.p Gradient[32 x 32 x 16 x *1]] [rn1_5.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.c.W Gradient[16 x 144]] [rn1_6.c1.c.c.b Gradient[16 x 1]] [rn1_6.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.c.c.isd Gradient[16 x 1]] [rn1_6.c1.c.c.m Gradient[16 x 1]] [rn1_6.c1.c.c.sc Gradient[16 x 1]] [rn1_6.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c2.W Gradient[16 x 144]] [rn1_6.c2.c.b Gradient[16 x 1]] [rn1_6.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_6.c2.c.isd Gradient[16 x 1]] [rn1_6.c2.c.m Gradient[16 x 1]] [rn1_6.c2.c.sc Gradient[16 x 1]] [rn1_6.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_6.p Gradient[32 x 32 x 16 x *1]] [rn1_6.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.c.W Gradient[16 x 144]] [rn1_7.c1.c.c.b Gradient[16 x 1]] [rn1_7.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.c.c.isd Gradient[16 x 1]] [rn1_7.c1.c.c.m Gradient[16 x 1]] [rn1_7.c1.c.c.sc Gradient[16 x 1]] [rn1_7.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c2.W Gradient[16 x 144]] [rn1_7.c2.c.b Gradient[16 x 1]] [rn1_7.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_7.c2.c.isd Gradient[16 x 1]] [rn1_7.c2.c.m Gradient[16 x 1]] [rn1_7.c2.c.sc Gradient[16 x 1]] [rn1_7.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_7.p Gradient[32 x 32 x 16 x *1]] [rn1_7.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.c.W Gradient[16 x 144]] [rn1_8.c1.c.c.b Gradient[16 x 1]] [rn1_8.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.c.c.isd Gradient[16 x 1]] [rn1_8.c1.c.c.m Gradient[16 x 1]] [rn1_8.c1.c.c.sc Gradient[16 x 1]] [rn1_8.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c2.W Gradient[16 x 144]] [rn1_8.c2.c.b Gradient[16 x 1]] [rn1_8.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_8.c2.c.isd Gradient[16 x 1]] [rn1_8.c2.c.m Gradient[16 x 1]] [rn1_8.c2.c.sc Gradient[16 x 1]] [rn1_8.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_8.p Gradient[32 x 32 x 16 x *1]] [rn1_8.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.c.W Gradient[16 x 144]] [rn1_9.c1.c.c.b Gradient[16 x 1]] [rn1_9.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.c.c.isd Gradient[16 x 1]] [rn1_9.c1.c.c.m Gradient[16 x 1]] [rn1_9.c1.c.c.sc Gradient[16 x 1]] [rn1_9.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c2.W Gradient[16 x 144]] [rn1_9.c2.c.b Gradient[16 x 1]] [rn1_9.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_9.c2.c.isd Gradient[16 x 1]] [rn1_9.c2.c.m Gradient[16 x 1]] [rn1_9.c2.c.sc Gradient[16 x 1]] [rn1_9.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_9.p Gradient[32 x 32 x 16 x *1]] [rn1_9.y Gradient[32 x 32 x 16 x *1]] [rn2_1.c1.c.W Gradient[32 x 144]] [rn2_1.c1.c.c.b Gradient[32 x 1]] [rn2_1.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c1.c.c.isd Gradient[32 x 1]] [rn2_1.c1.c.c.m Gradient[32 x 1]] [rn2_1.c1.c.c.sc Gradient[32 x 1]] [rn2_1.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c2.W Gradient[32 x 288]] [rn2_1.c2.c.b Gradient[32 x 1]] [rn2_1.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c2.c.isd Gradient[32 x 1]] [rn2_1.c2.c.m Gradient[32 x 1]] [rn2_1.c2.c.sc Gradient[32 x 1]] [rn2_1.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c_proj.b Gradient[32 x 1]] [rn2_1.c_proj.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c_proj.isd Gradient[32 x 1]] [rn2_1.c_proj.m Gradient[32 x 1]] [rn2_1.c_proj.sc Gradient[32 x 1]] [rn2_1.c_proj.y Gradient[16 x 16 x 32 x *1]] [rn2_1.p Gradient[16 x 16 x 32 x *1]] [rn2_1.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.c.W Gradient[32 x 288]] [rn2_10.c1.c.c.b Gradient[32 x 1]] [rn2_10.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.c.c.isd Gradient[32 x 1]] [rn2_10.c1.c.c.m Gradient[32 x 1]] [rn2_10.c1.c.c.sc Gradient[32 x 1]] [rn2_10.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c2.W Gradient[32 x 288]] [rn2_10.c2.c.b Gradient[32 x 1]] [rn2_10.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_10.c2.c.isd Gradient[32 x 1]] [rn2_10.c2.c.m Gradient[32 x 1]] [rn2_10.c2.c.sc Gradient[32 x 1]] [rn2_10.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_10.p Gradient[16 x 16 x 32 x *1]] [rn2_10.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.c.W Gradient[32 x 288]] [rn2_11.c1.c.c.b Gradient[32 x 1]] [rn2_11.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.c.c.isd Gradient[32 x 1]] [rn2_11.c1.c.c.m Gradient[32 x 1]] [rn2_11.c1.c.c.sc Gradient[32 x 1]] [rn2_11.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c2.W Gradient[32 x 288]] [rn2_11.c2.c.b Gradient[32 x 1]] [rn2_11.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_11.c2.c.isd Gradient[32 x 1]] [rn2_11.c2.c.m Gradient[32 x 1]] [rn2_11.c2.c.sc Gradient[32 x 1]] [rn2_11.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_11.p Gradient[16 x 16 x 32 x *1]] [rn2_11.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.c.W Gradient[32 x 288]] [rn2_12.c1.c.c.b Gradient[32 x 1]] [rn2_12.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.c.c.isd Gradient[32 x 1]] [rn2_12.c1.c.c.m Gradient[32 x 1]] [rn2_12.c1.c.c.sc Gradient[32 x 1]] [rn2_12.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c2.W Gradient[32 x 288]] [rn2_12.c2.c.b Gradient[32 x 1]] [rn2_12.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_12.c2.c.isd Gradient[32 x 1]] [rn2_12.c2.c.m Gradient[32 x 1]] [rn2_12.c2.c.sc Gradient[32 x 1]] [rn2_12.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_12.p Gradient[16 x 16 x 32 x *1]] [rn2_12.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.c.W Gradient[32 x 288]] [rn2_13.c1.c.c.b Gradient[32 x 1]] [rn2_13.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.c.c.isd Gradient[32 x 1]] [rn2_13.c1.c.c.m Gradient[32 x 1]] [rn2_13.c1.c.c.sc Gradient[32 x 1]] [rn2_13.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c2.W Gradient[32 x 288]] [rn2_13.c2.c.b Gradient[32 x 1]] [rn2_13.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_13.c2.c.isd Gradient[32 x 1]] [rn2_13.c2.c.m Gradient[32 x 1]] [rn2_13.c2.c.sc Gradient[32 x 1]] [rn2_13.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_13.p Gradient[16 x 16 x 32 x *1]] [rn2_13.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.c.W Gradient[32 x 288]] [rn2_14.c1.c.c.b Gradient[32 x 1]] [rn2_14.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.c.c.isd Gradient[32 x 1]] [rn2_14.c1.c.c.m Gradient[32 x 1]] [rn2_14.c1.c.c.sc Gradient[32 x 1]] [rn2_14.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c2.W Gradient[32 x 288]] [rn2_14.c2.c.b Gradient[32 x 1]] [rn2_14.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_14.c2.c.isd Gradient[32 x 1]] [rn2_14.c2.c.m Gradient[32 x 1]] [rn2_14.c2.c.sc Gradient[32 x 1]] [rn2_14.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_14.p Gradient[16 x 16 x 32 x *1]] [rn2_14.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.c.W Gradient[32 x 288]] [rn2_15.c1.c.c.b Gradient[32 x 1]] [rn2_15.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.c.c.isd Gradient[32 x 1]] [rn2_15.c1.c.c.m Gradient[32 x 1]] [rn2_15.c1.c.c.sc Gradient[32 x 1]] [rn2_15.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c2.W Gradient[32 x 288]] [rn2_15.c2.c.b Gradient[32 x 1]] [rn2_15.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_15.c2.c.isd Gradient[32 x 1]] [rn2_15.c2.c.m Gradient[32 x 1]] [rn2_15.c2.c.sc Gradient[32 x 1]] [rn2_15.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_15.p Gradient[16 x 16 x 32 x *1]] [rn2_15.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.c.W Gradient[32 x 288]] [rn2_16.c1.c.c.b Gradient[32 x 1]] [rn2_16.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.c.c.isd Gradient[32 x 1]] [rn2_16.c1.c.c.m Gradient[32 x 1]] [rn2_16.c1.c.c.sc Gradient[32 x 1]] [rn2_16.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c2.W Gradient[32 x 288]] [rn2_16.c2.c.b Gradient[32 x 1]] [rn2_16.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_16.c2.c.isd Gradient[32 x 1]] [rn2_16.c2.c.m Gradient[32 x 1]] [rn2_16.c2.c.sc Gradient[32 x 1]] [rn2_16.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_16.p Gradient[16 x 16 x 32 x *1]] [rn2_16.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.c.W Gradient[32 x 288]] [rn2_17.c1.c.c.b Gradient[32 x 1]] [rn2_17.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.c.c.isd Gradient[32 x 1]] [rn2_17.c1.c.c.m Gradient[32 x 1]] [rn2_17.c1.c.c.sc Gradient[32 x 1]] [rn2_17.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c2.W Gradient[32 x 288]] [rn2_17.c2.c.b Gradient[32 x 1]] [rn2_17.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_17.c2.c.isd Gradient[32 x 1]] [rn2_17.c2.c.m Gradient[32 x 1]] [rn2_17.c2.c.sc Gradient[32 x 1]] [rn2_17.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_17.p Gradient[16 x 16 x 32 x *1]] [rn2_17.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.c.W Gradient[32 x 288]] [rn2_18.c1.c.c.b Gradient[32 x 1]] [rn2_18.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.c.c.isd Gradient[32 x 1]] [rn2_18.c1.c.c.m Gradient[32 x 1]] [rn2_18.c1.c.c.sc Gradient[32 x 1]] [rn2_18.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c2.W Gradient[32 x 288]] [rn2_18.c2.c.b Gradient[32 x 1]] [rn2_18.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_18.c2.c.isd Gradient[32 x 1]] [rn2_18.c2.c.m Gradient[32 x 1]] [rn2_18.c2.c.sc Gradient[32 x 1]] [rn2_18.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_18.p Gradient[16 x 16 x 32 x *1]] [rn2_18.y Gradient[16 x 16 x 32 x *1]] [rn2_1_Wproj Gradient[32 x 16]] [rn2_2.c1.c.W Gradient[32 x 288]] [rn2_2.c1.c.c.b Gradient[32 x 1]] [rn2_2.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_2.c1.c.c.isd Gradient[32 x 1]] [rn2_2.c1.c.c.m Gradient[32 x 1]] [rn2_2.c1.c.c.sc Gradient[32 x 1]] [rn2_2.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_2.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_2.c2.W Gradient[32 x 288]] [rn2_2.c2.c.b Gradient[32 x 1]] [rn2_2.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_2.c2.c.isd Gradient[32 x 1]] [rn2_2.c2.c.m Gradient[32 x 1]] [rn2_2.c2.c.sc Gradient[32 x 1]] [rn2_2.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_2.p Gradient[16 x 16 x 32 x *1]] [rn2_2.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.c.W Gradient[32 x 288]] [rn2_3.c1.c.c.b Gradient[32 x 1]] [rn2_3.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.c.c.isd Gradient[32 x 1]] [rn2_3.c1.c.c.m Gradient[32 x 1]] [rn2_3.c1.c.c.sc Gradient[32 x 1]] [rn2_3.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c2.W Gradient[32 x 288]] [rn2_3.c2.c.b Gradient[32 x 1]] [rn2_3.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_3.c2.c.isd Gradient[32 x 1]] [rn2_3.c2.c.m Gradient[32 x 1]] [rn2_3.c2.c.sc Gradient[32 x 1]] [rn2_3.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_3.p Gradient[16 x 16 x 32 x *1]] [rn2_3.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.c.W Gradient[32 x 288]] [rn2_4.c1.c.c.b Gradient[32 x 1]] [rn2_4.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.c.c.isd Gradient[32 x 1]] [rn2_4.c1.c.c.m Gradient[32 x 1]] [rn2_4.c1.c.c.sc Gradient[32 x 1]] [rn2_4.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c2.W Gradient[32 x 288]] [rn2_4.c2.c.b Gradient[32 x 1]] [rn2_4.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_4.c2.c.isd Gradient[32 x 1]] [rn2_4.c2.c.m Gradient[32 x 1]] [rn2_4.c2.c.sc Gradient[32 x 1]] [rn2_4.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_4.p Gradient[16 x 16 x 32 x *1]] [rn2_4.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.c.W Gradient[32 x 288]] [rn2_5.c1.c.c.b Gradient[32 x 1]] [rn2_5.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.c.c.isd Gradient[32 x 1]] [rn2_5.c1.c.c.m Gradient[32 x 1]] [rn2_5.c1.c.c.sc Gradient[32 x 1]] [rn2_5.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c2.W Gradient[32 x 288]] [rn2_5.c2.c.b Gradient[32 x 1]] [rn2_5.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_5.c2.c.isd Gradient[32 x 1]] [rn2_5.c2.c.m Gradient[32 x 1]] [rn2_5.c2.c.sc Gradient[32 x 1]] [rn2_5.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_5.p Gradient[16 x 16 x 32 x *1]] [rn2_5.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.c.W Gradient[32 x 288]] [rn2_6.c1.c.c.b Gradient[32 x 1]] [rn2_6.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.c.c.isd Gradient[32 x 1]] [rn2_6.c1.c.c.m Gradient[32 x 1]] [rn2_6.c1.c.c.sc Gradient[32 x 1]] [rn2_6.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c2.W Gradient[32 x 288]] [rn2_6.c2.c.b Gradient[32 x 1]] [rn2_6.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_6.c2.c.isd Gradient[32 x 1]] [rn2_6.c2.c.m Gradient[32 x 1]] [rn2_6.c2.c.sc Gradient[32 x 1]] [rn2_6.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_6.p Gradient[16 x 16 x 32 x *1]] [rn2_6.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.c.W Gradient[32 x 288]] [rn2_7.c1.c.c.b Gradient[32 x 1]] [rn2_7.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.c.c.isd Gradient[32 x 1]] [rn2_7.c1.c.c.m Gradient[32 x 1]] [rn2_7.c1.c.c.sc Gradient[32 x 1]] [rn2_7.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c2.W Gradient[32 x 288]] [rn2_7.c2.c.b Gradient[32 x 1]] [rn2_7.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_7.c2.c.isd Gradient[32 x 1]] [rn2_7.c2.c.m Gradient[32 x 1]] [rn2_7.c2.c.sc Gradient[32 x 1]] [rn2_7.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_7.p Gradient[16 x 16 x 32 x *1]] [rn2_7.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.c.W Gradient[32 x 288]] [rn2_8.c1.c.c.b Gradient[32 x 1]] [rn2_8.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.c.c.isd Gradient[32 x 1]] [rn2_8.c1.c.c.m Gradient[32 x 1]] [rn2_8.c1.c.c.sc Gradient[32 x 1]] [rn2_8.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c2.W Gradient[32 x 288]] [rn2_8.c2.c.b Gradient[32 x 1]] [rn2_8.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_8.c2.c.isd Gradient[32 x 1]] [rn2_8.c2.c.m Gradient[32 x 1]] [rn2_8.c2.c.sc Gradient[32 x 1]] [rn2_8.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_8.p Gradient[16 x 16 x 32 x *1]] [rn2_8.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.c.W Gradient[32 x 288]] [rn2_9.c1.c.c.b Gradient[32 x 1]] [rn2_9.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.c.c.isd Gradient[32 x 1]] [rn2_9.c1.c.c.m Gradient[32 x 1]] [rn2_9.c1.c.c.sc Gradient[32 x 1]] [rn2_9.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c2.W Gradient[32 x 288]] [rn2_9.c2.c.b Gradient[32 x 1]] [rn2_9.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_9.c2.c.isd Gradient[32 x 1]] [rn2_9.c2.c.m Gradient[32 x 1]] [rn2_9.c2.c.sc Gradient[32 x 1]] [rn2_9.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_9.p Gradient[16 x 16 x 32 x *1]] [rn2_9.y Gradient[16 x 16 x 32 x *1]] [rn3_1.c1.c.W Gradient[64 x 288]] [rn3_1.c1.c.c.b Gradient[64 x 1]] [rn3_1.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c1.c.c.isd Gradient[64 x 1]] [rn3_1.c1.c.c.m Gradient[64 x 1]] [rn3_1.c1.c.c.sc Gradient[64 x 1]] [rn3_1.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c2.W Gradient[64 x 576]] [rn3_1.c2.c.b Gradient[64 x 1]] [rn3_1.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c2.c.isd Gradient[64 x 1]] [rn3_1.c2.c.m Gradient[64 x 1]] [rn3_1.c2.c.sc Gradient[64 x 1]] [rn3_1.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c_proj.b Gradient[64 x 1]] [rn3_1.c_proj.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c_proj.isd Gradient[64 x 1]] [rn3_1.c_proj.m Gradient[64 x 1]] [rn3_1.c_proj.sc Gradient[64 x 1]] [rn3_1.c_proj.y Gradient[8 x 8 x 64 x *1]] [rn3_1.p Gradient[8 x 8 x 64 x *1]] [rn3_1.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.c.W Gradient[64 x 576]] [rn3_10.c1.c.c.b Gradient[64 x 1]] [rn3_10.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.c.c.isd Gradient[64 x 1]] [rn3_10.c1.c.c.m Gradient[64 x 1]] [rn3_10.c1.c.c.sc Gradient[64 x 1]] [rn3_10.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c2.W Gradient[64 x 576]] [rn3_10.c2.c.b Gradient[64 x 1]] [rn3_10.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_10.c2.c.isd Gradient[64 x 1]] [rn3_10.c2.c.m Gradient[64 x 1]] [rn3_10.c2.c.sc Gradient[64 x 1]] [rn3_10.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_10.p Gradient[8 x 8 x 64 x *1]] [rn3_10.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.c.W Gradient[64 x 576]] [rn3_11.c1.c.c.b Gradient[64 x 1]] [rn3_11.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.c.c.isd Gradient[64 x 1]] [rn3_11.c1.c.c.m Gradient[64 x 1]] [rn3_11.c1.c.c.sc Gradient[64 x 1]] [rn3_11.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c2.W Gradient[64 x 576]] [rn3_11.c2.c.b Gradient[64 x 1]] [rn3_11.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_11.c2.c.isd Gradient[64 x 1]] [rn3_11.c2.c.m Gradient[64 x 1]] [rn3_11.c2.c.sc Gradient[64 x 1]] [rn3_11.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_11.p Gradient[8 x 8 x 64 x *1]] [rn3_11.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.c.W Gradient[64 x 576]] [rn3_12.c1.c.c.b Gradient[64 x 1]] [rn3_12.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.c.c.isd Gradient[64 x 1]] [rn3_12.c1.c.c.m Gradient[64 x 1]] [rn3_12.c1.c.c.sc Gradient[64 x 1]] [rn3_12.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c2.W Gradient[64 x 576]] [rn3_12.c2.c.b Gradient[64 x 1]] [rn3_12.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_12.c2.c.isd Gradient[64 x 1]] [rn3_12.c2.c.m Gradient[64 x 1]] [rn3_12.c2.c.sc Gradient[64 x 1]] [rn3_12.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_12.p Gradient[8 x 8 x 64 x *1]] [rn3_12.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.c.W Gradient[64 x 576]] [rn3_13.c1.c.c.b Gradient[64 x 1]] [rn3_13.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.c.c.isd Gradient[64 x 1]] [rn3_13.c1.c.c.m Gradient[64 x 1]] [rn3_13.c1.c.c.sc Gradient[64 x 1]] [rn3_13.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c2.W Gradient[64 x 576]] [rn3_13.c2.c.b Gradient[64 x 1]] [rn3_13.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_13.c2.c.isd Gradient[64 x 1]] [rn3_13.c2.c.m Gradient[64 x 1]] [rn3_13.c2.c.sc Gradient[64 x 1]] [rn3_13.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_13.p Gradient[8 x 8 x 64 x *1]] [rn3_13.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.c.W Gradient[64 x 576]] [rn3_14.c1.c.c.b Gradient[64 x 1]] [rn3_14.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.c.c.isd Gradient[64 x 1]] [rn3_14.c1.c.c.m Gradient[64 x 1]] [rn3_14.c1.c.c.sc Gradient[64 x 1]] [rn3_14.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c2.W Gradient[64 x 576]] [rn3_14.c2.c.b Gradient[64 x 1]] [rn3_14.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_14.c2.c.isd Gradient[64 x 1]] [rn3_14.c2.c.m Gradient[64 x 1]] [rn3_14.c2.c.sc Gradient[64 x 1]] [rn3_14.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_14.p Gradient[8 x 8 x 64 x *1]] [rn3_14.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.c.W Gradient[64 x 576]] [rn3_15.c1.c.c.b Gradient[64 x 1]] [rn3_15.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.c.c.isd Gradient[64 x 1]] [rn3_15.c1.c.c.m Gradient[64 x 1]] [rn3_15.c1.c.c.sc Gradient[64 x 1]] [rn3_15.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c2.W Gradient[64 x 576]] [rn3_15.c2.c.b Gradient[64 x 1]] [rn3_15.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_15.c2.c.isd Gradient[64 x 1]] [rn3_15.c2.c.m Gradient[64 x 1]] [rn3_15.c2.c.sc Gradient[64 x 1]] [rn3_15.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_15.p Gradient[8 x 8 x 64 x *1]] [rn3_15.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.c.W Gradient[64 x 576]] [rn3_16.c1.c.c.b Gradient[64 x 1]] [rn3_16.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.c.c.isd Gradient[64 x 1]] [rn3_16.c1.c.c.m Gradient[64 x 1]] [rn3_16.c1.c.c.sc Gradient[64 x 1]] [rn3_16.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c2.W Gradient[64 x 576]] [rn3_16.c2.c.b Gradient[64 x 1]] [rn3_16.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_16.c2.c.isd Gradient[64 x 1]] [rn3_16.c2.c.m Gradient[64 x 1]] [rn3_16.c2.c.sc Gradient[64 x 1]] [rn3_16.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_16.p Gradient[8 x 8 x 64 x *1]] [rn3_16.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.c.W Gradient[64 x 576]] [rn3_17.c1.c.c.b Gradient[64 x 1]] [rn3_17.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.c.c.isd Gradient[64 x 1]] [rn3_17.c1.c.c.m Gradient[64 x 1]] [rn3_17.c1.c.c.sc Gradient[64 x 1]] [rn3_17.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c2.W Gradient[64 x 576]] [rn3_17.c2.c.b Gradient[64 x 1]] [rn3_17.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_17.c2.c.isd Gradient[64 x 1]] [rn3_17.c2.c.m Gradient[64 x 1]] [rn3_17.c2.c.sc Gradient[64 x 1]] [rn3_17.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_17.p Gradient[8 x 8 x 64 x *1]] [rn3_17.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.c.W Gradient[64 x 576]] [rn3_18.c1.c.c.b Gradient[64 x 1]] [rn3_18.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.c.c.isd Gradient[64 x 1]] [rn3_18.c1.c.c.m Gradient[64 x 1]] [rn3_18.c1.c.c.sc Gradient[64 x 1]] [rn3_18.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c2.W Gradient[64 x 576]] [rn3_18.c2.c.b Gradient[64 x 1]] [rn3_18.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_18.c2.c.isd Gradient[64 x 1]] [rn3_18.c2.c.m Gradient[64 x 1]] [rn3_18.c2.c.sc Gradient[64 x 1]] [rn3_18.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_18.p Gradient[8 x 8 x 64 x *1]] [rn3_18.y Gradient[8 x 8 x 64 x *1]] [rn3_1_Wproj Gradient[64 x 32]] [rn3_2.c1.c.W Gradient[64 x 576]] [rn3_2.c1.c.c.b Gradient[64 x 1]] [rn3_2.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_2.c1.c.c.isd Gradient[64 x 1]] [rn3_2.c1.c.c.m Gradient[64 x 1]] [rn3_2.c1.c.c.sc Gradient[64 x 1]] [rn3_2.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_2.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_2.c2.W Gradient[64 x 576]] [rn3_2.c2.c.b Gradient[64 x 1]] [rn3_2.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_2.c2.c.isd Gradient[64 x 1]] [rn3_2.c2.c.m Gradient[64 x 1]] [rn3_2.c2.c.sc Gradient[64 x 1]] [rn3_2.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_2.p Gradient[8 x 8 x 64 x *1]] [rn3_2.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.c.W Gradient[64 x 576]] [rn3_3.c1.c.c.b Gradient[64 x 1]] [rn3_3.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.c.c.isd Gradient[64 x 1]] [rn3_3.c1.c.c.m Gradient[64 x 1]] [rn3_3.c1.c.c.sc Gradient[64 x 1]] [rn3_3.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c2.W Gradient[64 x 576]] [rn3_3.c2.c.b Gradient[64 x 1]] [rn3_3.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_3.c2.c.isd Gradient[64 x 1]] [rn3_3.c2.c.m Gradient[64 x 1]] [rn3_3.c2.c.sc Gradient[64 x 1]] [rn3_3.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_3.p Gradient[8 x 8 x 64 x *1]] [rn3_3.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.c.W Gradient[64 x 576]] [rn3_4.c1.c.c.b Gradient[64 x 1]] [rn3_4.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.c.c.isd Gradient[64 x 1]] [rn3_4.c1.c.c.m Gradient[64 x 1]] [rn3_4.c1.c.c.sc Gradient[64 x 1]] [rn3_4.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c2.W Gradient[64 x 576]] [rn3_4.c2.c.b Gradient[64 x 1]] [rn3_4.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_4.c2.c.isd Gradient[64 x 1]] [rn3_4.c2.c.m Gradient[64 x 1]] [rn3_4.c2.c.sc Gradient[64 x 1]] [rn3_4.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_4.p Gradient[8 x 8 x 64 x *1]] [rn3_4.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.c.W Gradient[64 x 576]] [rn3_5.c1.c.c.b Gradient[64 x 1]] [rn3_5.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.c.c.isd Gradient[64 x 1]] [rn3_5.c1.c.c.m Gradient[64 x 1]] [rn3_5.c1.c.c.sc Gradient[64 x 1]] [rn3_5.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c2.W Gradient[64 x 576]] [rn3_5.c2.c.b Gradient[64 x 1]] [rn3_5.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_5.c2.c.isd Gradient[64 x 1]] [rn3_5.c2.c.m Gradient[64 x 1]] [rn3_5.c2.c.sc Gradient[64 x 1]] [rn3_5.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_5.p Gradient[8 x 8 x 64 x *1]] [rn3_5.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.c.W Gradient[64 x 576]] [rn3_6.c1.c.c.b Gradient[64 x 1]] [rn3_6.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.c.c.isd Gradient[64 x 1]] [rn3_6.c1.c.c.m Gradient[64 x 1]] [rn3_6.c1.c.c.sc Gradient[64 x 1]] [rn3_6.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c2.W Gradient[64 x 576]] [rn3_6.c2.c.b Gradient[64 x 1]] [rn3_6.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_6.c2.c.isd Gradient[64 x 1]] [rn3_6.c2.c.m Gradient[64 x 1]] [rn3_6.c2.c.sc Gradient[64 x 1]] [rn3_6.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_6.p Gradient[8 x 8 x 64 x *1]] [rn3_6.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.c.W Gradient[64 x 576]] [rn3_7.c1.c.c.b Gradient[64 x 1]] [rn3_7.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.c.c.isd Gradient[64 x 1]] [rn3_7.c1.c.c.m Gradient[64 x 1]] [rn3_7.c1.c.c.sc Gradient[64 x 1]] [rn3_7.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c2.W Gradient[64 x 576]] [rn3_7.c2.c.b Gradient[64 x 1]] [rn3_7.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_7.c2.c.isd Gradient[64 x 1]] [rn3_7.c2.c.m Gradient[64 x 1]] [rn3_7.c2.c.sc Gradient[64 x 1]] [rn3_7.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_7.p Gradient[8 x 8 x 64 x *1]] [rn3_7.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.c.W Gradient[64 x 576]] [rn3_8.c1.c.c.b Gradient[64 x 1]] [rn3_8.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.c.c.isd Gradient[64 x 1]] [rn3_8.c1.c.c.m Gradient[64 x 1]] [rn3_8.c1.c.c.sc Gradient[64 x 1]] [rn3_8.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c2.W Gradient[64 x 576]] [rn3_8.c2.c.b Gradient[64 x 1]] [rn3_8.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_8.c2.c.isd Gradient[64 x 1]] [rn3_8.c2.c.m Gradient[64 x 1]] [rn3_8.c2.c.sc Gradient[64 x 1]] [rn3_8.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_8.p Gradient[8 x 8 x 64 x *1]] [rn3_8.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.c.W Gradient[64 x 576]] [rn3_9.c1.c.c.b Gradient[64 x 1]] [rn3_9.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.c.c.isd Gradient[64 x 1]] [rn3_9.c1.c.c.m Gradient[64 x 1]] [rn3_9.c1.c.c.sc Gradient[64 x 1]] [rn3_9.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c2.W Gradient[64 x 576]] [rn3_9.c2.c.b Gradient[64 x 1]] [rn3_9.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_9.c2.c.isd Gradient[64 x 1]] [rn3_9.c2.c.m Gradient[64 x 1]] [rn3_9.c2.c.sc Gradient[64 x 1]] [rn3_9.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_9.p Gradient[8 x 8 x 64 x *1]] [rn3_9.y Gradient[8 x 8 x 64 x *1]] }
00000089A3A609C0: {[rn2_14.c1.c.c.isd Value[32 x 1]] }
00000089A9CD4A00: {[rn2_10.p Value[16 x 16 x 32 x *1]] }
00000089A9CD4AA0: {[rn2_10.y Value[16 x 16 x 32 x *1]] }
00000089A9CD4B40: {[rn2_6.y Value[16 x 16 x 32 x *1]] }
00000089A9CD4BE0: {[rn2_9.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CD4C80: {[rn2_7.y Value[16 x 16 x 32 x *1]] }
00000089A9CD4DC0: {[rn2_8.c1.y Value[16 x 16 x 32 x *1]] }
00000089A9CD4E60: {[rn2_11.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CD4FA0: {[rn2_11.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CD5040: {[rn2_6.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CD5180: {[rn2_9.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CD54A0: {[rn2_10.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CD5680: {[rn2_8.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CD5720: {[rn2_8.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CD5860: {[rn2_9.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CD5900: {[rn2_7.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CD59A0: {[rn2_7.p Value[16 x 16 x 32 x *1]] }
00000089A9CD5A40: {[rn2_8.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CD5B80: {[rn2_7.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CD5C20: {[rn2_7.c1.y Value[16 x 16 x 32 x *1]] }
00000089A9CD5E00: {[rn2_9.c1.y Value[16 x 16 x 32 x *1]] }
00000089A9CD5EA0: {[rn2_9.y Value[16 x 16 x 32 x *1]] }
00000089A9CD6080: {[rn2_10.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CD61C0: {[rn2_8.p Value[16 x 16 x 32 x *1]] }
00000089A9CD63A0: {[rn2_6.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CD64E0: {[rn2_8.y Value[16 x 16 x 32 x *1]] }
00000089A9CD6620: {[rn2_7.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CD66C0: {[rn2_7.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CD6760: {[rn2_9.p Value[16 x 16 x 32 x *1]] }
00000089A9CD6800: {[rn2_6.p Value[16 x 16 x 32 x *1]] }
00000089A9CD6940: {[rn2_6.c1.y Value[16 x 16 x 32 x *1]] }
00000089A9CD6A80: {[rn2_8.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CD6BC0: {[rn2_10.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CD6C60: {[rn2_10.c1.y Value[16 x 16 x 32 x *1]] }
00000089A9CD6EE0: {[rn2_9.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CD70C0: {[rn2_10.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CD7340: {[rn1_1.p Value[32 x 32 x 16 x *1]] }
00000089A9CD7480: {[rn3_9.c2.c.m Value[64 x 1]] }
00000089A9CD75C0: {[rn3_9.c1.c.c.sc Value[64 x 1]] }
00000089A9CD77A0: {[rn1_1.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CD78E0: {[rn1_2.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CD7980: {[rn1_2.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CD7B60: {[rn1_3.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CD7DE0: {[rn1_2.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CD7F20: {[CE Value[1]] }
00000089A9CD8100: {[rn3_9.c1.c.c.m Value[64 x 1]] }
00000089A9CD8240: {[conv1.y Value[32 x 32 x 16 x *1]] }
00000089A9CD8380: {[rn1_1.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CD8420: {[rn3_9.c2.W Value[64 x 576]] }
00000089A9CD8560: {[rn3_9.c2.c.b Value[64 x 1]] }
00000089A9CD8740: {[rn3_9.c1.c.W Value[64 x 576]] }
00000089A9CD8920: {[rn3_9.c2.c.isd Value[64 x 1]] }
00000089A9CD8A60: {[rn1_1.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CD8C40: {[rn1_1.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CD8E20: {[rn3_9.c2.c.sc Value[64 x 1]] }
00000089A9CD8EC0: {[rn1_2.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CD9000: {[rn1_2.p Value[32 x 32 x 16 x *1]] }
00000089A9CD90A0: {[conv1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CD9140: {[conv1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CD91E0: {[rn1_2.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CD93C0: {[rn1_2.y Value[32 x 32 x 16 x *1]] }
00000089A9CD95A0: {[rn1_1.y Value[32 x 32 x 16 x *1]] }
00000089A9CD9640: {[rn3_9.c1.c.c.isd Value[64 x 1]] }
00000089A9CD9820: {[Err Value[1]] }
00000089A9CD98C0: {[rn1_1.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CD9A00: {[rn1_6.p Value[32 x 32 x 16 x *1]] }
00000089A9CD9BE0: {[rn1_4.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CD9C80: {[rn1_4.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CD9D20: {[rn1_6.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CD9E60: {[rn1_4.p Value[32 x 32 x 16 x *1]] }
00000089A9CD9F00: {[rn1_5.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDA0E0: {[rn1_3.p Value[32 x 32 x 16 x *1]] }
00000089A9CDA220: {[rn1_4.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDA2C0: {[rn1_5.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CDA4A0: {[rn1_7.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CDA5E0: {[rn1_4.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDA680: {[rn1_3.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDA720: {[rn1_5.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDA7C0: {[rn1_4.y Value[32 x 32 x 16 x *1]] }
00000089A9CDA900: {[rn1_5.p Value[32 x 32 x 16 x *1]] }
00000089A9CDA9A0: {[rn1_5.y Value[32 x 32 x 16 x *1]] }
00000089A9CDAA40: {[rn1_6.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CDAAE0: {[rn1_6.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDAB80: {[rn1_6.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDAC20: {[rn1_3.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDACC0: {[rn1_6.y Value[32 x 32 x 16 x *1]] }
00000089A9CDAD60: {[rn1_7.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDAF40: {[rn1_7.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDB080: {[rn1_6.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDB260: {[rn1_7.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDB6C0: {[rn1_7.p Value[32 x 32 x 16 x *1]] }
00000089A9CDB760: {[rn1_7.y Value[32 x 32 x 16 x *1]] }
00000089A9CDB800: {[rn1_8.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDB8A0: {[rn1_5.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDB940: {[rn1_5.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDBC60: {[rn1_3.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDBD00: {[rn1_7.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDBDA0: {[rn1_4.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDBE40: {[rn1_3.y Value[32 x 32 x 16 x *1]] }
00000089A9CDC020: {[rn1_3.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CDC200: {[rn1_12.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CDC2A0: {[rn1_12.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDC340: {[rn1_8.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CDC3E0: {[rn1_10.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDC5C0: {[rn1_12.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDC700: {[rn1_12.p Value[32 x 32 x 16 x *1]] }
00000089A9CDC7A0: {[rn1_12.y Value[32 x 32 x 16 x *1]] }
00000089A9CDC8E0: {[rn1_8.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDCAC0: {[rn1_8.p Value[32 x 32 x 16 x *1]] }
00000089A9CDCB60: {[rn1_11.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDCC00: {[rn1_9.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDCCA0: {[rn1_10.y Value[32 x 32 x 16 x *1]] }
00000089A9CDCD40: {[rn1_8.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDCDE0: {[rn1_10.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDCE80: {[rn1_10.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CDCFC0: {[rn1_11.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDD100: {[rn1_9.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CDD2E0: {[rn1_9.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDD380: {[rn1_9.y Value[32 x 32 x 16 x *1]] }
00000089A9CDD420: {[rn1_9.p Value[32 x 32 x 16 x *1]] }
00000089A9CDD4C0: {[rn1_10.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDD560: {[rn1_10.p Value[32 x 32 x 16 x *1]] }
00000089A9CDD7E0: {[rn1_11.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDD880: {[rn1_11.y Value[32 x 32 x 16 x *1]] }
00000089A9CDDBA0: {[rn1_10.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDDCE0: {[rn1_12.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDDEC0: {[rn1_11.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CDE280: {[rn1_9.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDE320: {[rn1_8.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDE460: {[rn1_9.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDE5A0: {[rn1_11.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDE780: {[rn1_8.y Value[32 x 32 x 16 x *1]] }
00000089A9CDE820: {[rn1_11.p Value[32 x 32 x 16 x *1]] }
00000089A9CDE8C0: {[rn1_12.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDEBE0: {[rn1_15.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDED20: {[rn1_17.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDEDC0: {[rn1_17.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDEFA0: {[rn1_17.p Value[32 x 32 x 16 x *1]] }
00000089A9CDF040: {[rn1_15.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDF0E0: {[rn1_13.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDF180: {[rn1_13.y Value[32 x 32 x 16 x *1]] }
00000089A9CDF220: {[rn1_13.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CDF360: {[rn1_15.p Value[32 x 32 x 16 x *1]] }
00000089A9CDF400: {[rn1_14.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDF5E0: {[rn1_14.p Value[32 x 32 x 16 x *1]] }
00000089A9CDF720: {[rn1_13.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDF7C0: {[rn1_16.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDF860: {[rn1_16.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDF9A0: {[rn1_14.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CDFAE0: {[rn1_14.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CDFEA0: {[rn1_15.y Value[32 x 32 x 16 x *1]] }
00000089A9CDFF40: {[rn1_16.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CDFFE0: {[rn1_16.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CE01C0: {[rn1_17.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CE03A0: {[rn1_15.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CE0440: {[rn1_15.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CE04E0: {[rn1_17.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CE0580: {[rn1_17.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CE08A0: {[rn1_15.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CE0940: {[rn1_14.y Value[32 x 32 x 16 x *1]] }
00000089A9CE09E0: {[rn1_14.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CE0A80: {[rn1_13.p Value[32 x 32 x 16 x *1]] }
00000089A9CE0B20: {[rn1_13.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CE0D00: {[rn1_16.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CE0E40: {[rn1_13.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CE0EE0: {[rn1_14.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CE10C0: {[rn1_16.p Value[32 x 32 x 16 x *1]] }
00000089A9CE1160: {[rn1_16.y Value[32 x 32 x 16 x *1]] }
00000089A9CE1340: {[rn1_18.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CE13E0: {[rn2_2.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CE1520: {[rn2_4.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CE17A0: {[rn2_4.c1.y Value[16 x 16 x 32 x *1]] }
00000089A9CE18E0: {[rn1_17.y Value[32 x 32 x 16 x *1]] }
00000089A9CE1980: {[rn1_18.p Value[32 x 32 x 16 x *1]] }
00000089A9CE1AC0: {[rn1_18.c2.c.y Value[32 x 32 x 16 x *1]] }
00000089A9CE1B60: {[rn2_2.c1.y Value[16 x 16 x 32 x *1]] }
00000089A9CE1C00: {[rn1_18.y Value[32 x 32 x 16 x *1]] }
00000089A9CE2060: {[rn2_3.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CE2100: {[rn2_1.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CE22E0: {[rn2_1.c1.y Value[16 x 16 x 32 x *1]] }
00000089A9CE2420: {[rn2_1.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CE24C0: {[rn2_1.p Value[16 x 16 x 32 x *1]] }
00000089A9CE2600: {[rn1_18.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CE26A0: {[rn2_2.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CE2740: {[rn2_2.y Value[16 x 16 x 32 x *1]] }
00000089A9CE27E0: {[rn2_3.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CE2920: {[rn2_3.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CE2A60: {[rn2_3.p Value[16 x 16 x 32 x *1]] }
00000089A9CE2B00: {[rn2_1.c_proj.y Value[16 x 16 x 32 x *1]] }
00000089A9CE2C40: {[rn2_2.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CE2CE0: {[rn2_3.y Value[16 x 16 x 32 x *1]] }
00000089A9CE2D80: {[rn2_4.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CE2E20: {[rn2_2.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CE2F60: {[rn1_18.c2.c.c Value[32 x 32 x 16 x *1]] }
00000089A9CE3000: {[rn2_1.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CE30A0: {[rn2_1.y Value[16 x 16 x 32 x *1]] }
00000089A9CE3140: {[rn2_1.c_proj.c Value[16 x 16 x 32 x *1]] }
00000089A9CE3320: {[rn1_18.c1.y Value[32 x 32 x 16 x *1]] }
00000089A9CE33C0: {[rn2_1.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CE35A0: {[rn2_2.p Value[16 x 16 x 32 x *1]] }
00000089A9CE38C0: {[rn2_3.c1.y Value[16 x 16 x 32 x *1]] }
00000089A9CE3960: {[rn2_3.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CE3BE0: {[rn2_5.p Value[16 x 16 x 32 x *1]] }
00000089A9CE3C80: {[rn2_4.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CE3D20: {[rn2_5.c1.y Value[16 x 16 x 32 x *1]] }
00000089A9CE3DC0: {[rn2_4.p Value[16 x 16 x 32 x *1]] }
00000089A9CE3FA0: {[rn2_5.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CE4040: {[rn2_5.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CE40E0: {[rn2_5.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CE42C0: {[rn2_5.y Value[16 x 16 x 32 x *1]] }
00000089A9CE4360: {[rn2_6.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CE44A0: {[rn2_6.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CE4540: {[rn2_5.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089A9CE4720: {[rn2_4.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089A9CE47C0: {[rn2_4.y Value[16 x 16 x 32 x *1]] }
00000089B5D620B0: {[rn3_8.c2.W Value[64 x 576]] }
00000089B5D62150: {[rn3_7.c2.c.sc Value[64 x 1]] }
00000089B5D62290: {[rn3_8.c2.c.m Value[64 x 1]] }
00000089B5D62650: {[rn3_7.c1.c.c.isd Value[64 x 1]] }
00000089B5D62830: {[rn3_9.c1.c.c.b Value[64 x 1]] }
00000089B5D62B50: {[rn3_6.c2.c.sc Value[64 x 1]] }
00000089B5D62C90: {[rn3_7.c2.c.m Value[64 x 1]] }
00000089B5D62E70: {[rn3_6.c2.c.m Value[64 x 1]] }
00000089B5D63050: {[rn3_7.c1.c.c.sc Value[64 x 1]] }
00000089B5D630F0: {[rn3_7.c1.c.c.b Value[64 x 1]] }
00000089B5D63190: {[rn3_7.c1.c.c.m Value[64 x 1]] }
00000089B5D632D0: {[rn3_8.c1.c.c.m Value[64 x 1]] }
00000089B5D63370: {[rn3_8.c1.c.c.sc Value[64 x 1]] }
00000089B5D635F0: {[rn3_7.c2.c.isd Value[64 x 1]] }
00000089B5D63690: {[rn3_7.c2.W Value[64 x 576]] }
00000089B5D637D0: {[rn3_8.c1.c.c.isd Value[64 x 1]] }
00000089B5D63870: {[rn3_8.c1.c.c.b Value[64 x 1]] }
00000089B5D63910: {[rn3_8.c1.c.W Value[64 x 576]] }
00000089B5D63A50: {[rn3_7.c1.c.W Value[64 x 576]] }
00000089B5D63B90: {[rn3_8.c2.c.b Value[64 x 1]] }
00000089B5D63D70: {[rn3_8.c2.c.isd Value[64 x 1]] }
00000089B5D63EB0: {[rn3_7.c2.c.b Value[64 x 1]] }
00000089B5D643B0: {[rn3_8.c2.c.sc Value[64 x 1]] }
00000089B5D64450: {[rn3_6.c2.W Value[64 x 576]] }
00000089B5D648B0: {[rn3_12.c1.c.c.sc Value[64 x 1]] }
00000089B5D64950: {[rn3_12.c2.c.m Value[64 x 1]] }
00000089B5D649F0: {[rn3_12.c1.c.c.isd Value[64 x 1]] }
00000089B5D64C70: {[rn3_11.c2.W Value[64 x 576]] }
00000089B5D64DB0: {[rn3_13.c1.c.c.b Value[64 x 1]] }
00000089B5D64F90: {[rn3_12.c1.c.W Value[64 x 576]] }
00000089B5D650D0: {[rn3_13.c1.c.c.m Value[64 x 1]] }
00000089B5D652B0: {[rn3_11.c1.c.c.isd Value[64 x 1]] }
00000089B5D65350: {[rn3_11.c1.c.c.m Value[64 x 1]] }
00000089B5D653F0: {[rn3_11.c2.c.sc Value[64 x 1]] }
00000089B5D655D0: {[rn3_12.c1.c.c.m Value[64 x 1]] }
00000089B5D65670: {[rn3_12.c2.c.b Value[64 x 1]] }
00000089B5D657B0: {[rn3_12.c2.c.isd Value[64 x 1]] }
00000089B5D658F0: {[rn3_12.c2.c.sc Value[64 x 1]] }
00000089B5D65990: {[rn3_11.c1.c.c.sc Value[64 x 1]] }
00000089B5D65A30: {[rn3_11.c1.c.W Value[64 x 576]] }
00000089B5D65D50: {[rn3_12.c1.c.c.b Value[64 x 1]] }
00000089B5D65E90: {[rn3_11.c2.c.m Value[64 x 1]] }
00000089B5D65FD0: {[rn3_12.c2.W Value[64 x 576]] }
00000089B5D661B0: {[rn3_13.c1.c.c.isd Value[64 x 1]] }
00000089B5D66390: {[rn3_13.c1.c.c.sc Value[64 x 1]] }
00000089B5D66430: {[rn3_11.c1.c.c.b Value[64 x 1]] }
00000089B5D664D0: {[rn3_11.c2.c.b Value[64 x 1]] }
00000089B5D66C50: {[rn3_11.c2.c.isd Value[64 x 1]] }
00000089B5D67330: {[rn3_13.c2.c.b Value[64 x 1]] }
00000089B5D67470: {[rn3_15.c1.c.c.b Value[64 x 1]] }
00000089B5D67650: {[rn3_13.c1.c.W Value[64 x 576]] }
00000089B5D678D0: {[rn3_13.c2.c.m Value[64 x 1]] }
00000089B5D67970: {[rn3_14.c1.c.c.b Value[64 x 1]] }
00000089B5D67B50: {[rn3_13.c2.W Value[64 x 576]] }
00000089B5D67D30: {[rn3_14.c1.c.c.m Value[64 x 1]] }
00000089B5D67E70: {[rn3_14.c2.c.b Value[64 x 1]] }
00000089B5D68230: {[rn3_14.c2.c.isd Value[64 x 1]] }
00000089B5D68370: {[rn3_15.c1.c.c.m Value[64 x 1]] }
00000089B5D68410: {[rn3_13.c2.c.isd Value[64 x 1]] }
00000089B5D684B0: {[rn3_15.c1.c.c.isd Value[64 x 1]] }
00000089B5D68730: {[rn3_14.c2.c.sc Value[64 x 1]] }
00000089B5D68A50: {[rn3_15.c2.c.b Value[64 x 1]] }
00000089B5D68B90: {[rn3_14.c2.c.m Value[64 x 1]] }
00000089B5D68D70: {[rn3_15.c2.c.isd Value[64 x 1]] }
00000089B5D68E10: {[rn3_13.c2.c.sc Value[64 x 1]] }
00000089B5D68FF0: {[rn3_14.c1.c.c.isd Value[64 x 1]] }
00000089B5D69130: {[rn3_14.c1.c.W Value[64 x 576]] }
00000089B5D691D0: {[rn3_14.c2.W Value[64 x 576]] }
00000089B5D69310: {[rn3_15.c1.c.W Value[64 x 576]] }
00000089B5D694F0: {[rn3_14.c1.c.c.sc Value[64 x 1]] }
00000089B5D69630: {[rn3_15.c1.c.c.sc Value[64 x 1]] }
00000089B5D69810: {[rn3_15.c2.c.m Value[64 x 1]] }
00000089B5D698B0: {[rn3_17.c1.c.c.b Value[64 x 1]] }
00000089B5D69C70: {[rn3_16.c1.c.W Value[64 x 576]] }
00000089B5D69DB0: {[rn3_17.c1.c.c.isd Value[64 x 1]] }
00000089B5D69E50: {[rn3_17.c1.c.W Value[64 x 576]] }
00000089B5D69EF0: {[rn3_16.c1.c.c.isd Value[64 x 1]] }
00000089B5D6A210: {[rn3_16.c2.c.b Value[64 x 1]] }
00000089B5D6A350: {[rn3_15.c2.W Value[64 x 576]] }
00000089B5D6A490: {[rn3_15.c2.c.sc Value[64 x 1]] }
00000089B5D6A7B0: {[rn3_16.c2.W Value[64 x 576]] }
00000089B5D6A8F0: {[rn3_16.c2.c.sc Value[64 x 1]] }
00000089B5D6ACB0: {[rn3_16.c1.c.c.m Value[64 x 1]] }
00000089B5D6AD50: {[rn3_16.c2.c.isd Value[64 x 1]] }
00000089B5D6ADF0: {[rn3_17.c1.c.c.sc Value[64 x 1]] }
00000089B5D6B110: {[rn3_17.c1.c.c.m Value[64 x 1]] }
00000089B5D6B250: {[rn3_17.c2.c.isd Value[64 x 1]] }
00000089B5D6B2F0: {[rn3_17.c2.c.m Value[64 x 1]] }
00000089B5D6B430: {[rn3_17.c2.c.sc Value[64 x 1]] }
00000089B5D6B610: {[rn3_17.c2.W Value[64 x 576]] }
00000089B5D6B750: {[rn3_17.c2.c.b Value[64 x 1]] }
00000089B5D6BB10: {[rn3_16.c2.c.m Value[64 x 1]] }
00000089B5D6BBB0: {[rn3_18.c1.c.c.b Value[64 x 1]] }
00000089B5D6BC50: {[rn3_16.c1.c.c.b Value[64 x 1]] }
00000089B5D6C010: {[rn3_16.c1.c.c.sc Value[64 x 1]] }
00000089B5D6C0B0: {[rn3_18.c2.W Value[64 x 576]] }
00000089B5D6C150: {[rn3_3.c1.c.W Value[64 x 576]] }
00000089B5D6C1F0: {[rn3_18.c1.c.c.sc Value[64 x 1]] }
00000089B5D6C290: {[rn3_18.c2.c.sc Value[64 x 1]] }
00000089B5D6C790: {[rn3_18.c1.c.W Value[64 x 576]] }
00000089B5D6C830: {[rn3_3.c1.c.c.m Value[64 x 1]] }
00000089B5D6C8D0: {[rn3_18.c2.c.isd Value[64 x 1]] }
00000089B5D6C970: {[rn3_18.c2.c.b Value[64 x 1]] }
00000089B5D6CA10: {[rn3_1_Wproj Value[64 x 32]] }
00000089B5D6CC90: {[rn3_2.c2.c.m Value[64 x 1]] }
00000089B5D6CE70: {[rn3_2.c1.c.c.sc Value[64 x 1]] }
00000089B5D6D0F0: {[rn3_2.c1.c.c.m Value[64 x 1]] }
00000089B5D6D370: {[rn3_2.c1.c.c.isd Value[64 x 1]] }
00000089B5D6D550: {[rn3_18.c1.c.c.m Value[64 x 1]] }
00000089B5D6D5F0: {[rn3_2.c2.c.b Value[64 x 1]] }
00000089B5D6D870: {[rn3_18.c1.c.c.isd Value[64 x 1]] }
00000089B5D6D910: {[rn3_2.c2.W Value[64 x 576]] }
00000089B5D6DAF0: {[rn3_3.c1.c.c.b Value[64 x 1]] }
00000089B5D6DD70: {[rn3_3.c1.c.c.isd Value[64 x 1]] }
00000089B5D6DEB0: {[rn3_2.c1.c.c.b Value[64 x 1]] }
00000089B5D6DFF0: {[rn3_2.c2.c.isd Value[64 x 1]] }
00000089B5D6E130: {[rn3_18.c2.c.m Value[64 x 1]] }
00000089B5D6E1D0: {[rn3_2.c1.c.W Value[64 x 576]] }
00000089B5D6E270: {[rn3_3.c1.c.c.sc Value[64 x 1]] }
00000089B5D6E4F0: {[rn3_2.c2.c.sc Value[64 x 1]] }
00000089B5D6E950: {[rn3_4.c1.c.c.isd Value[64 x 1]] }
00000089B5D6EB30: {[rn3_5.c1.c.c.sc Value[64 x 1]] }
00000089B5D6ED10: {[rn3_5.c1.c.W Value[64 x 576]] }
00000089B5D6EF90: {[rn3_3.c2.c.sc Value[64 x 1]] }
00000089B5D6F0D0: {[rn3_5.c2.c.sc Value[64 x 1]] }
00000089B5D6F170: {[rn3_3.c2.c.b Value[64 x 1]] }
00000089B5D6F210: {[rn3_4.c1.c.c.b Value[64 x 1]] }
00000089B5D6F350: {[rn3_4.c2.c.sc Value[64 x 1]] }
00000089B5D6F490: {[rn3_4.c2.c.b Value[64 x 1]] }
00000089B5D6F530: {[rn3_4.c2.W Value[64 x 576]] }
00000089B5D6FA30: {[rn3_5.c1.c.c.m Value[64 x 1]] }
00000089B5D6FFD0: {[rn3_5.c2.c.isd Value[64 x 1]] }
00000089B5D701B0: {[rn3_4.c2.c.isd Value[64 x 1]] }
00000089B5D702F0: {[rn3_5.c1.c.c.b Value[64 x 1]] }
00000089B5D704D0: {[rn3_3.c2.c.isd Value[64 x 1]] }
00000089B5D706B0: {[rn3_5.c2.c.m Value[64 x 1]] }
00000089B5D70750: {[rn3_3.c2.c.m Value[64 x 1]] }
00000089B5D70890: {[rn3_3.c2.W Value[64 x 576]] }
00000089B5D70930: {[rn3_4.c1.c.c.sc Value[64 x 1]] }
00000089B5D709D0: {[rn3_4.c1.c.W Value[64 x 576]] }
00000089B5D70BB0: {[rn3_4.c2.c.m Value[64 x 1]] }
00000089B5D70CF0: {[rn3_4.c1.c.c.m Value[64 x 1]] }
00000089B5D70D90: {[rn3_5.c1.c.c.isd Value[64 x 1]] }
00000089B5D70F70: {[rn3_5.c2.c.b Value[64 x 1]] }
00000089B5D71150: {[rn3_6.c1.c.c.sc Value[64 x 1]] }
00000089B5D71290: {[rn3_5.c2.W Value[64 x 576]] }
00000089B5D715B0: {[rn3_6.c1.c.c.m Value[64 x 1]] }
00000089B5D71650: {[rn3_6.c1.c.W Value[64 x 576]] }
00000089B5D718D0: {[rn3_6.c1.c.c.b Value[64 x 1]] }
00000089B5D71970: {[rn3_6.c1.c.c.isd Value[64 x 1]] }
00000089B5D71C90: {[rn3_6.c2.c.isd Value[64 x 1]] }
00000089B5D71F10: {[rn3_6.c2.c.b Value[64 x 1]] }
00000089B65912A0: {[rn2_14.c1.c.c.sc Value[32 x 1]] }
00000089B708C0B0: {[rn2_13.c1.c.c.isd Value[32 x 1]] }
00000089B708C1F0: {[rn2_12.c2.W Value[32 x 288]] }
00000089B708C290: {[rn2_13.c1.c.c.b Value[32 x 1]] }
00000089B708C470: {[rn2_13.c2.c.b Value[32 x 1]] }
00000089B708C6F0: {[rn2_13.c1.c.W Value[32 x 288]] }
00000089B708C8D0: {[rn2_13.c2.c.m Value[32 x 1]] }
00000089B708CB50: {[rn2_13.c2.c.sc Value[32 x 1]] }
00000089B708CFB0: {[rn2_12.c2.c.m Value[32 x 1]] }
00000089B708D370: {[rn2_13.c1.c.c.m Value[32 x 1]] }
00000089B708D410: {[rn2_13.c1.c.c.sc Value[32 x 1]] }
00000089B708D5F0: {[rn2_13.c2.c.isd Value[32 x 1]] }
00000089B708D870: {[rn2_12.c2.c.sc Value[32 x 1]] }
00000089B8940C20: {[rn2_14.c1.c.c.m Value[32 x 1]] }
00000089C0A17120: {[rn2_8.c1.c.W Value[32 x 288]] }
00000089C0A171C0: {[rn2_8.c2.c.m Value[32 x 1]] }
00000089C0A17300: {[rn2_9.c2.c.b Value[32 x 1]] }
00000089C0A173A0: {[rn2_9.c2.W Value[32 x 288]] }
00000089C0A174E0: {[rn2_8.c1.c.c.m Value[32 x 1]] }
00000089C0A178A0: {[rn2_8.c1.c.c.isd Value[32 x 1]] }
00000089C0A17BC0: {[rn2_8.c2.W Value[32 x 288]] }
00000089C0A17EE0: {[rn2_9.c1.c.c.isd Value[32 x 1]] }
00000089C0A180C0: {[rn2_9.c1.c.W Value[32 x 288]] }
00000089C0A183E0: {[rn2_8.c1.c.c.sc Value[32 x 1]] }
00000089C0A18480: {[rn2_8.c2.c.sc Value[32 x 1]] }
00000089C0A187A0: {[rn2_8.c2.c.b Value[32 x 1]] }
00000089C0A18AC0: {[rn2_7.c2.c.m Value[32 x 1]] }
00000089C0A18B60: {[rn2_9.c1.c.c.sc Value[32 x 1]] }
00000089C0A18CA0: {[rn2_9.c2.c.isd Value[32 x 1]] }
00000089C0A18E80: {[rn2_9.c1.c.c.b Value[32 x 1]] }
00000089C0A18FC0: {[rn2_9.c2.c.sc Value[32 x 1]] }
00000089C0A19100: {[rn2_8.c1.c.c.b Value[32 x 1]] }
00000089C0A191A0: {[rn2_7.c2.c.sc Value[32 x 1]] }
00000089C0A192E0: {[rn2_8.c2.c.isd Value[32 x 1]] }
00000089C0A194C0: {[rn2_9.c1.c.c.m Value[32 x 1]] }
00000089C0A196A0: {[rn2_9.c2.c.m Value[32 x 1]] }
00000089C0A197E0: {[rn2_7.c2.W Value[32 x 288]] }
00000089C0A19920: {[rn3_10.c1.c.W Value[64 x 576]] }
00000089C0A199C0: {[rn3_1.c_proj.b Value[64 x 1]] }
00000089C0A19A60: {[rn3_10.c1.c.c.m Value[64 x 1]] }
00000089C0A19B00: {[rn3_1.c2.c.isd Value[64 x 1]] }
00000089C0A19BA0: {[rn3_1.c2.c.sc Value[64 x 1]] }
00000089C0A19CE0: {[rn3_1.c2.c.m Value[64 x 1]] }
00000089C0A19D80: {[rn3_1.c_proj.isd Value[64 x 1]] }
00000089C0A19F60: {[rn3_10.c2.c.b Value[64 x 1]] }
00000089C0A1A140: {[rn3_10.c2.c.m Value[64 x 1]] }
00000089C0A1A1E0: {[rn3_1.c_proj.sc Value[64 x 1]] }
00000089C0A1A500: {[rn3_10.c1.c.c.sc Value[64 x 1]] }
00000089C0A1A6E0: {[rn3_10.c2.c.sc Value[64 x 1]] }
00000089C0A1A820: {[rn3_1.c1.c.W Value[64 x 288]] }
00000089C0A1A8C0: {[rn3_10.c2.W Value[64 x 576]] }
00000089C0A1AAA0: {[rn3_1.c_proj.m Value[64 x 1]] }
00000089C0A1ADC0: {[rn3_10.c1.c.c.isd Value[64 x 1]] }
00000089C0A1B400: {[rn3_10.c2.c.isd Value[64 x 1]] }
00000089C0A1B7C0: {[rn3_1.c1.c.c.b Value[64 x 1]] }
00000089C0A1B860: {[rn3_1.c2.c.b Value[64 x 1]] }
00000089C0A1B900: {[rn3_1.c1.c.c.m Value[64 x 1]] }
00000089C0A1B9A0: {[rn3_1.c1.c.c.sc Value[64 x 1]] }
00000089C0A1BC20: {[rn3_1.c2.W Value[64 x 576]] }
00000089C0A1BCC0: {[rn3_1.c1.c.c.isd Value[64 x 1]] }
00000089C0A1BEA0: {[rn3_10.c1.c.c.b Value[64 x 1]] }
00000089C0A1C260: {[rn2_5.c1.c.c.b Value[32 x 1]] }
00000089C0A1C440: {[rn2_5.c2.c.isd Value[32 x 1]] }
00000089C0A1C580: {[rn2_5.c1.c.c.m Value[32 x 1]] }
00000089C0A1C620: {[rn2_6.c1.c.c.m Value[32 x 1]] }
00000089C0A1C760: {[rn2_5.c2.W Value[32 x 288]] }
00000089C0A1C800: {[rn2_5.c1.c.c.sc Value[32 x 1]] }
00000089C0A1C8A0: {[rn2_5.c2.c.b Value[32 x 1]] }
00000089C0A1CEE0: {[rn2_5.c1.c.c.isd Value[32 x 1]] }
00000089C0A1CF80: {[rn2_6.c2.c.b Value[32 x 1]] }
00000089C0A1D020: {[rn2_4.c2.W Value[32 x 288]] }
00000089C0A1D2A0: {[rn2_6.c1.c.c.sc Value[32 x 1]] }
00000089C0A1D3E0: {[rn2_5.c2.c.sc Value[32 x 1]] }
00000089C0A1D520: {[rn2_6.c1.c.c.isd Value[32 x 1]] }
00000089C0A1D660: {[rn2_6.c1.c.c.b Value[32 x 1]] }
00000089C0A1D8E0: {[rn2_6.c1.c.W Value[32 x 288]] }
00000089C0A1DAC0: {[rn2_6.c2.c.m Value[32 x 1]] }
00000089C0A1DDE0: {[rn2_6.c2.c.isd Value[32 x 1]] }
00000089C0A1DF20: {[rn2_6.c2.W Value[32 x 288]] }
00000089C0A1DFC0: {[rn2_6.c2.c.sc Value[32 x 1]] }
00000089C0A1E240: {[rn2_7.c1.c.c.b Value[32 x 1]] }
00000089C0A1E380: {[rn2_5.c1.c.W Value[32 x 288]] }
00000089C0A1E600: {[rn2_5.c2.c.m Value[32 x 1]] }
00000089C0A1E740: {[rn2_7.c1.c.c.isd Value[32 x 1]] }
00000089C0A1E880: {[rn2_7.c2.c.b Value[32 x 1]] }
00000089C0A1EA60: {[rn2_7.c1.c.c.sc Value[32 x 1]] }
00000089C0A1EB00: {[rn2_7.c1.c.W Value[32 x 288]] }
00000089C0A1EBA0: {[rn2_7.c2.c.isd Value[32 x 1]] }
00000089C0A1EF60: {[rn2_7.c1.c.c.m Value[32 x 1]] }
00000089C0ACFE30: {[rn2_13.c2.W Value[32 x 288]] }
00000089C0AD05B0: {[rn2_14.c1.c.c.b Value[32 x 1]] }
00000089C0AEDC90: {[rn2_2.c2.W Value[32 x 288]] }
00000089C0AEDD30: {[rn2_3.c1.c.c.isd Value[32 x 1]] }
00000089C0AEDDD0: {[rn2_3.c2.c.isd Value[32 x 1]] }
00000089C0AEDE70: {[rn2_3.c1.c.c.b Value[32 x 1]] }
00000089C0AEE050: {[rn2_3.c1.c.c.m Value[32 x 1]] }
00000089C0AEE0F0: {[rn2_4.c1.c.c.m Value[32 x 1]] }
00000089C0AEE190: {[rn2_2.c2.c.sc Value[32 x 1]] }
00000089C0AEE2D0: {[rn2_3.c2.c.b Value[32 x 1]] }
00000089C0AEE370: {[rn2_4.c2.c.b Value[32 x 1]] }
00000089C0AEE5F0: {[rn2_4.c1.c.c.b Value[32 x 1]] }
00000089C0AEE7D0: {[rn2_2.c2.c.m Value[32 x 1]] }
00000089C0AEE910: {[rn2_3.c1.c.c.sc Value[32 x 1]] }
00000089C0AEEA50: {[rn2_3.c2.c.sc Value[32 x 1]] }
00000089C0AEEB90: {[rn2_3.c2.c.m Value[32 x 1]] }
00000089C0AEED70: {[rn2_2.c2.c.isd Value[32 x 1]] }
00000089C0AEEEB0: {[rn2_4.c1.c.c.isd Value[32 x 1]] }
00000089C0AEEF50: {[rn2_3.c2.W Value[32 x 288]] }
00000089C0AEEFF0: {[rn2_4.c2.c.isd Value[32 x 1]] }
00000089C0AEF270: {[rn2_3.c1.c.W Value[32 x 288]] }
00000089C0AEF4F0: {[rn2_4.c1.c.c.sc Value[32 x 1]] }
00000089C0AEF950: {[rn2_4.c2.c.m Value[32 x 1]] }
00000089C0AEFB30: {[rn2_4.c1.c.W Value[32 x 288]] }
00000089C0AEFC70: {[rn2_2.c2.c.b Value[32 x 1]] }
00000089C0AEFE50: {[rn2_4.c2.c.sc Value[32 x 1]] }
00000089C0AF0210: {[rn2_16.c1.c.c.sc Value[32 x 1]] }
00000089C0AF02B0: {[rn2_16.c2.c.m Value[32 x 1]] }
00000089C0AF0350: {[rn2_14.c2.c.isd Value[32 x 1]] }
00000089C0AF05D0: {[rn2_14.c2.c.sc Value[32 x 1]] }
00000089C0AF0670: {[rn2_14.c1.c.W Value[32 x 288]] }
00000089C0AF0990: {[rn2_15.c2.c.m Value[32 x 1]] }
00000089C0AF0A30: {[rn2_15.c1.c.c.sc Value[32 x 1]] }
00000089C0AF0AD0: {[rn2_15.c1.c.c.b Value[32 x 1]] }
00000089C0AF0B70: {[rn2_15.c1.c.c.isd Value[32 x 1]] }
00000089C0AF1110: {[rn2_15.c2.c.b Value[32 x 1]] }
00000089C0AF11B0: {[rn2_16.c1.c.c.b Value[32 x 1]] }
00000089C0AF12F0: {[rn2_16.c1.c.c.isd Value[32 x 1]] }
00000089C0AF14D0: {[rn2_16.c1.c.c.m Value[32 x 1]] }
00000089C0AF16B0: {[rn2_16.c2.c.b Value[32 x 1]] }
00000089C0AF1890: {[rn2_16.c2.c.isd Value[32 x 1]] }
00000089C0AF1930: {[rn2_15.c2.c.sc Value[32 x 1]] }
00000089C0AF1A70: {[rn2_15.c2.W Value[32 x 288]] }
00000089C0AF1BB0: {[rn2_14.c2.W Value[32 x 288]] }
00000089C0AF1D90: {[rn2_14.c2.c.m Value[32 x 1]] }
00000089C0AF2010: {[rn2_15.c1.c.c.m Value[32 x 1]] }
00000089C0AF21F0: {[rn2_15.c2.c.isd Value[32 x 1]] }
00000089C0AF2290: {[rn2_15.c1.c.W Value[32 x 288]] }
00000089C0AF2650: {[rn2_16.c1.c.W Value[32 x 288]] }
00000089C0AF26F0: {[rn2_14.c2.c.b Value[32 x 1]] }
00000089C0AF2830: {[rn2_18.c1.c.c.sc Value[32 x 1]] }
00000089C0AF28D0: {[rn2_17.c1.c.c.sc Value[32 x 1]] }
00000089C0AF2A10: {[rn2_18.c1.c.W Value[32 x 288]] }
00000089C0AF2AB0: {[rn2_18.c2.c.b Value[32 x 1]] }
00000089C0AF2F10: {[rn2_18.c2.W Value[32 x 288]] }
00000089C0AF30F0: {[rn2_1_Wproj Value[32 x 16]] }
00000089C0AF32D0: {[rn2_17.c1.c.c.m Value[32 x 1]] }
00000089C0AF3550: {[rn2_18.c1.c.c.isd Value[32 x 1]] }
00000089C0AF3690: {[rn2_18.c1.c.c.m Value[32 x 1]] }
00000089C0AF3730: {[rn2_18.c2.c.isd Value[32 x 1]] }
00000089C0AF37D0: {[rn2_18.c2.c.m Value[32 x 1]] }
00000089C0AF3870: {[rn2_18.c2.c.sc Value[32 x 1]] }
00000089C0AF3C30: {[rn2_17.c2.c.b Value[32 x 1]] }
00000089C0AF3D70: {[rn2_17.c2.c.m Value[32 x 1]] }
00000089C0AF41D0: {[rn2_16.c2.c.sc Value[32 x 1]] }
00000089C0AF4270: {[rn2_17.c1.c.c.b Value[32 x 1]] }
00000089C0AF4630: {[rn2_17.c1.c.W Value[32 x 288]] }
00000089C0AF4770: {[rn2_17.c1.c.c.isd Value[32 x 1]] }
00000089C0AF4810: {[rn2_17.c2.c.isd Value[32 x 1]] }
00000089C0AF4950: {[rn2_17.c2.c.sc Value[32 x 1]] }
00000089C0AF49F0: {[rn2_17.c2.W Value[32 x 288]] }
00000089C0AF4B30: {[rn2_16.c2.W Value[32 x 288]] }
00000089C0AF4DB0: {[rn2_18.c1.c.c.b Value[32 x 1]] }
00000089C0AF4F90: {[rn2_2.c1.c.c.isd Value[32 x 1]] }
00000089C0AF50D0: {[rn2_2.c1.c.c.b Value[32 x 1]] }
00000089C0AF5170: {[rn2_2.c1.c.c.sc Value[32 x 1]] }
00000089C0AF53F0: {[rn2_2.c1.c.c.m Value[32 x 1]] }
00000089C0AF55D0: {[rn2_2.c1.c.W Value[32 x 288]] }
00000089C5B0B9E0: {[rn2_12.c2.c.isd Value[32 x 1]] }
00000089C5B0BDA0: {[rn2_12.c1.c.W Value[32 x 288]] }
00000089C5B0BF80: {[rn2_11.c2.c.m Value[32 x 1]] }
00000089C5B0C020: {[rn2_10.c1.c.W Value[32 x 288]] }
00000089C5B0C0C0: {[rn2_11.c1.c.c.b Value[32 x 1]] }
00000089C5B0C2A0: {[rn2_11.c2.c.isd Value[32 x 1]] }
00000089C5B0C340: {[rn2_11.c1.c.c.isd Value[32 x 1]] }
00000089C5B0C3E0: {[rn2_10.c2.c.isd Value[32 x 1]] }
00000089C5B0C520: {[rn2_12.c1.c.c.b Value[32 x 1]] }
00000089C5B0C660: {[rn2_11.c1.c.c.sc Value[32 x 1]] }
00000089C5B0C7A0: {[rn2_10.c2.c.b Value[32 x 1]] }
00000089C5B0C980: {[rn2_10.c2.c.m Value[32 x 1]] }
00000089C5B0CA20: {[rn2_10.c2.c.sc Value[32 x 1]] }
00000089C5B0CCA0: {[rn2_10.c2.W Value[32 x 288]] }
00000089C5B0CF20: {[rn2_11.c1.c.W Value[32 x 288]] }
00000089C5B0D240: {[rn2_11.c2.c.sc Value[32 x 1]] }
00000089C5B0D420: {[rn2_12.c1.c.c.isd Value[32 x 1]] }
00000089C5B0D560: {[rn2_12.c1.c.c.m Value[32 x 1]] }
00000089C5B0D6A0: {[rn2_12.c1.c.c.sc Value[32 x 1]] }
00000089C5B0D7E0: {[rn2_11.c2.W Value[32 x 288]] }
00000089C5B0D880: {[rn2_11.c2.c.b Value[32 x 1]] }
00000089C5B0DBA0: {[rn2_11.c1.c.c.m Value[32 x 1]] }
00000089C5B0DF60: {[rn2_12.c2.c.b Value[32 x 1]] }
00000089C5B13140: {[rn1_5.c1.c.c.isd Value[16 x 1]] }
00000089C5B135A0: {[rn1_5.c1.c.c.b Value[16 x 1]] }
00000089C5B13780: {[rn1_6.c1.c.c.b Value[16 x 1]] }
00000089C5B138C0: {[rn1_4.c2.c.sc Value[16 x 1]] }
00000089C5B13B40: {[rn1_5.c2.c.b Value[16 x 1]] }
00000089C5B13BE0: {[rn1_4.c2.c.m Value[16 x 1]] }
00000089C5B14400: {[rn1_5.c1.c.c.sc Value[16 x 1]] }
00000089C5B144A0: {[rn1_5.c1.c.c.m Value[16 x 1]] }
00000089C5B14540: {[rn1_5.c1.c.W Value[16 x 144]] }
00000089C5B14720: {[rn1_5.c2.c.isd Value[16 x 1]] }
00000089C5B14860: {[rn1_5.c2.c.m Value[16 x 1]] }
00000089C5B149A0: {[rn1_5.c2.c.sc Value[16 x 1]] }
00000089C5B15620: {[rn1_4.c2.W Value[16 x 144]] }
00000089C5B15760: {[rn1_5.c2.W Value[16 x 144]] }
00000089C5B15940: {[rn1_8.c1.c.c.m Value[16 x 1]] }
00000089C5B15A80: {[rn1_6.c2.c.b Value[16 x 1]] }
00000089C5B15BC0: {[rn1_8.c1.c.c.sc Value[16 x 1]] }
00000089C5B15D00: {[rn1_7.c1.c.c.b Value[16 x 1]] }
00000089C5B15E40: {[rn1_8.c1.c.W Value[16 x 144]] }
00000089C5B162A0: {[rn1_7.c2.c.b Value[16 x 1]] }
00000089C5B16700: {[rn1_6.c1.c.W Value[16 x 144]] }
00000089C5B167A0: {[rn1_6.c1.c.c.m Value[16 x 1]] }
00000089C5B16A20: {[rn1_6.c1.c.c.sc Value[16 x 1]] }
00000089C5B16B60: {[rn1_6.c2.c.sc Value[16 x 1]] }
00000089C5B16DE0: {[rn1_7.c2.c.m Value[16 x 1]] }
00000089C5B16F20: {[rn1_7.c2.c.sc Value[16 x 1]] }
00000089C5B16FC0: {[rn1_6.c2.c.m Value[16 x 1]] }
00000089C5B17060: {[rn1_7.c1.c.c.m Value[16 x 1]] }
00000089C5B17100: {[rn1_7.c1.c.c.sc Value[16 x 1]] }
00000089C5B171A0: {[rn1_7.c2.c.isd Value[16 x 1]] }
00000089C5B174C0: {[rn1_8.c1.c.c.b Value[16 x 1]] }
00000089C5B17600: {[rn1_8.c1.c.c.isd Value[16 x 1]] }
00000089C5B177E0: {[rn1_6.c2.W Value[16 x 144]] }
00000089C5B179C0: {[rn1_7.c1.c.c.isd Value[16 x 1]] }
00000089C5B17BA0: {[rn1_6.c1.c.c.isd Value[16 x 1]] }
00000089C5B17CE0: {[rn1_6.c2.c.isd Value[16 x 1]] }
00000089C5B17D80: {[rn1_7.c2.W Value[16 x 144]] }
00000089C5B17EC0: {[rn1_7.c1.c.W Value[16 x 144]] }
00000089C5B180A0: {[rn2_1.c1.c.c.b Value[32 x 1]] }
00000089C5B18140: {[rn2_1.c1.c.c.m Value[32 x 1]] }
00000089C5B18280: {[rn1_9.c2.W Value[16 x 144]] }
00000089C5B183C0: {[rn1_9.c2.c.m Value[16 x 1]] }
00000089C5B18640: {[rn2_1.c1.c.c.isd Value[32 x 1]] }
00000089C5B18780: {[rn2_1.c2.c.sc Value[32 x 1]] }
00000089C5B18DC0: {[rn2_1.c1.c.c.sc Value[32 x 1]] }
00000089C5B18F00: {[rn2_1.c1.c.W Value[32 x 144]] }
00000089C5B18FA0: {[rn1_9.c2.c.b Value[16 x 1]] }
00000089C5B19040: {[rn1_9.c1.c.c.b Value[16 x 1]] }
00000089C5B190E0: {[rn1_9.c1.c.c.m Value[16 x 1]] }
00000089C5B19180: {[rn2_1.c2.c.m Value[32 x 1]] }
00000089C5B192C0: {[rn1_8.c2.c.b Value[16 x 1]] }
00000089C5B19540: {[rn1_8.c2.c.m Value[16 x 1]] }
00000089C5B19680: {[rn1_9.c2.c.sc Value[16 x 1]] }
00000089C5B197C0: {[rn2_1.c2.c.b Value[32 x 1]] }
00000089C5B19AE0: {[rn1_9.c1.c.c.sc Value[16 x 1]] }
00000089C5B19C20: {[rn1_9.c1.c.W Value[16 x 144]] }
00000089C5B19D60: {[rn2_1.c2.c.isd Value[32 x 1]] }
00000089C5B19EA0: {[rn1_9.c2.c.isd Value[16 x 1]] }
00000089C5B1A080: {[rn1_8.c2.c.isd Value[16 x 1]] }
00000089C5B1A1C0: {[rn1_8.c2.c.sc Value[16 x 1]] }
00000089C5B1A260: {[rn1_8.c2.W Value[16 x 144]] }
00000089C5B1A3A0: {[rn1_9.c1.c.c.isd Value[16 x 1]] }
00000089C5B1A800: {[rn2_10.c1.c.c.isd Value[32 x 1]] }
00000089C5B1A940: {[rn2_10.c1.c.c.m Value[32 x 1]] }
00000089C5B1AA80: {[rn2_10.c1.c.c.sc Value[32 x 1]] }
00000089C5B1AB20: {[rn2_1.c_proj.m Value[32 x 1]] }
00000089C5B1ADA0: {[rn2_1.c_proj.b Value[32 x 1]] }
00000089C5B1B020: {[rn2_1.c2.W Value[32 x 288]] }
00000089C5B1B200: {[rn2_1.c_proj.sc Value[32 x 1]] }
00000089C5B1B480: {[rn2_1.c_proj.isd Value[32 x 1]] }
00000089C5B1B5C0: {[rn2_10.c1.c.c.b Value[32 x 1]] }
00000089CB1B40B0: {[rn1_16.c2.c.sc Value[16 x 1]] }
00000089CB1B4150: {[rn1_15.c2.c.b Value[16 x 1]] }
00000089CB1B4330: {[rn1_14.c2.c.b Value[16 x 1]] }
00000089CB1B43D0: {[rn1_15.c1.c.c.sc Value[16 x 1]] }
00000089CB1B4470: {[rn1_15.c1.c.c.b Value[16 x 1]] }
00000089CB1B45B0: {[rn1_15.c1.c.c.isd Value[16 x 1]] }
00000089CB1B48D0: {[rn1_14.c2.c.sc Value[16 x 1]] }
00000089CB1B4970: {[rn1_16.c2.c.b Value[16 x 1]] }
00000089CB1B4BF0: {[rn1_14.c2.W Value[16 x 144]] }
00000089CB1B4E70: {[rn1_15.c1.c.W Value[16 x 144]] }
00000089CB1B4FB0: {[rn1_15.c2.c.sc Value[16 x 1]] }
00000089CB1B50F0: {[rn1_15.c2.c.m Value[16 x 1]] }
00000089CB1B5910: {[rn1_16.c1.c.c.sc Value[16 x 1]] }
00000089CB1B5AF0: {[rn1_15.c1.c.c.m Value[16 x 1]] }
00000089CB1B5C30: {[rn1_16.c1.c.W Value[16 x 144]] }
00000089CB1B5E10: {[rn1_16.c1.c.c.isd Value[16 x 1]] }
00000089CB1B5EB0: {[rn1_15.c2.c.isd Value[16 x 1]] }
00000089CB1B5F50: {[rn1_16.c1.c.c.b Value[16 x 1]] }
00000089CB1B6090: {[rn1_16.c2.c.isd Value[16 x 1]] }
00000089CB1B61D0: {[rn1_15.c2.W Value[16 x 144]] }
00000089CB1B63B0: {[rn1_16.c1.c.c.m Value[16 x 1]] }
00000089CB1B6450: {[rn1_14.c2.c.isd Value[16 x 1]] }
00000089CB1B6590: {[rn1_14.c2.c.m Value[16 x 1]] }
00000089CB1B6770: {[rn1_16.c2.c.m Value[16 x 1]] }
00000089CB1B6A90: {[rn1_17.c2.W Value[16 x 144]] }
00000089CB1B6B30: {[rn1_18.c1.c.c.sc Value[16 x 1]] }
00000089CB1B6D10: {[rn1_17.c1.c.W Value[16 x 144]] }
00000089CB1B6EF0: {[rn1_18.c1.c.c.m Value[16 x 1]] }
00000089CB1B7030: {[rn1_17.c1.c.c.sc Value[16 x 1]] }
00000089CB1B70D0: {[rn1_17.c2.c.isd Value[16 x 1]] }
00000089CB1B7210: {[rn1_2.c1.c.c.b Value[16 x 1]] }
00000089CB1B7350: {[rn1_17.c1.c.c.isd Value[16 x 1]] }
00000089CB1B73F0: {[rn1_18.c1.c.c.b Value[16 x 1]] }
00000089CB1B7710: {[rn1_18.c1.c.c.isd Value[16 x 1]] }
00000089CB1B77B0: {[rn1_18.c2.c.isd Value[16 x 1]] }
00000089CB1B7A30: {[rn1_17.c2.c.sc Value[16 x 1]] }
00000089CB1B7AD0: {[rn1_17.c2.c.b Value[16 x 1]] }
00000089CB1B7D50: {[rn1_18.c2.c.b Value[16 x 1]] }
00000089CB1B7F30: {[rn1_2.c1.c.c.isd Value[16 x 1]] }
00000089CB1B8250: {[rn1_17.c1.c.c.m Value[16 x 1]] }
00000089CB1B82F0: {[rn1_17.c2.c.m Value[16 x 1]] }
00000089CB1B8570: {[rn1_18.c2.c.m Value[16 x 1]] }
00000089CB1B8890: {[rn1_18.c2.c.sc Value[16 x 1]] }
00000089CB1B8930: {[rn1_18.c2.W Value[16 x 144]] }
00000089CB1B89D0: {[rn1_18.c1.c.W Value[16 x 144]] }
00000089CB1B8B10: {[rn1_17.c1.c.c.b Value[16 x 1]] }
00000089CB1B8CF0: {[rn1_16.c2.W Value[16 x 144]] }
00000089CB1B9150: {[rn1_4.c1.c.c.b Value[16 x 1]] }
00000089CB1B9330: {[rn1_2.c1.c.W Value[16 x 144]] }
00000089CB1B93D0: {[rn1_2.c2.c.sc Value[16 x 1]] }
00000089CB1B9470: {[rn1_3.c2.W Value[16 x 144]] }
00000089CB1B9650: {[rn1_3.c1.c.c.m Value[16 x 1]] }
00000089CB1B96F0: {[rn1_4.c1.c.W Value[16 x 144]] }
00000089CB1B9970: {[rn1_3.c1.c.c.isd Value[16 x 1]] }
00000089CB1B9A10: {[rn1_4.c2.c.b Value[16 x 1]] }
00000089CB1B9AB0: {[rn1_3.c2.c.m Value[16 x 1]] }
00000089CB1B9D30: {[rn1_2.c2.c.isd Value[16 x 1]] }
00000089CB1B9DD0: {[rn1_2.c2.c.b Value[16 x 1]] }
00000089CB1B9F10: {[rn1_3.c1.c.c.sc Value[16 x 1]] }
00000089CB1BA050: {[rn1_3.c2.c.b Value[16 x 1]] }
00000089CB1BA230: {[rn1_4.c1.c.c.isd Value[16 x 1]] }
00000089CB1BA2D0: {[rn1_4.c1.c.c.sc Value[16 x 1]] }
00000089CB1BA4B0: {[rn1_3.c1.c.c.b Value[16 x 1]] }
00000089CB1BA5F0: {[rn1_4.c1.c.c.m Value[16 x 1]] }
00000089CB1BA690: {[rn1_2.c2.W Value[16 x 144]] }
00000089CB1BA730: {[rn1_2.c1.c.c.sc Value[16 x 1]] }
00000089CB1BA870: {[rn1_2.c2.c.m Value[16 x 1]] }
00000089CB1BAAF0: {[rn1_2.c1.c.c.m Value[16 x 1]] }
00000089CB1BAE10: {[rn1_3.c1.c.W Value[16 x 144]] }
00000089CB1BAEB0: {[rn1_3.c2.c.sc Value[16 x 1]] }
00000089CB1BB270: {[rn1_3.c2.c.isd Value[16 x 1]] }
00000089CB1BD430: {[rn1_4.c2.c.isd Value[16 x 1]] }
00000089CB1BE290: {[rn1_1.c1.c.c.isd Value[16 x 1]] }
00000089CB1BE3D0: {[rn1_1.c2.c.isd Value[16 x 1]] }
00000089CB1BE470: {[rn1_10.c1.c.c.m Value[16 x 1]] }
00000089CB1BE6F0: {[rn1_1.c1.c.W Value[16 x 144]] }
00000089CB1BE790: {[rn1_1.c2.c.sc Value[16 x 1]] }
00000089CB1BEAB0: {[conv1.c.c.b Value[16 x 1]] }
00000089CB1BEB50: {[conv1.c.c.isd Value[16 x 1]] }
00000089CB1BEE70: {[conv1.c.c.m Value[16 x 1]] }
00000089CB1BEFB0: {[conv1.c.c.sc Value[16 x 1]] }
00000089CB1BF050: {[conv1.c.W Value[16 x 27]] }
00000089CB1BF0F0: {[labels Value[10 x *1]] }
00000089CB1BF2D0: {[features Value[32 x 32 x 3 x *1]] }
00000089CB1BF370: {[OutputNodes.W Value[10 x 1 x 1 x 64]] }
00000089CB1BF4B0: {[OutputNodes.b Value[10]] }
00000089CB1BF5F0: {[rn1_1.c1.c.c.m Value[16 x 1]] }
00000089CB1BF690: {[rn1_1.c1.c.c.sc Value[16 x 1]] }
00000089CB1BFFF0: {[rn1_1.c2.W Value[16 x 144]] }
00000089CB1C03B0: {[rn1_1.c2.c.b Value[16 x 1]] }
00000089CB1C0590: {[rn1_1.c1.c.c.b Value[16 x 1]] }
00000089CB1C0630: {[rn1_10.c1.c.c.b Value[16 x 1]] }
00000089CB1C06D0: {[rn1_10.c1.c.c.isd Value[16 x 1]] }
00000089CB1C0770: {[rn1_1.c2.c.m Value[16 x 1]] }
00000089CB1C0A90: {[rn1_11.c2.W Value[16 x 144]] }
00000089CB1C0B30: {[rn1_10.c2.c.isd Value[16 x 1]] }
00000089CB1C0C70: {[rn1_10.c2.c.sc Value[16 x 1]] }
00000089CB1C0E50: {[rn1_11.c1.c.c.sc Value[16 x 1]] }
00000089CB1C0EF0: {[rn1_11.c2.c.m Value[16 x 1]] }
00000089CB1C10D0: {[rn1_12.c1.c.c.sc Value[16 x 1]] }
00000089CB1C12B0: {[rn1_10.c1.c.W Value[16 x 144]] }
00000089CB1C1490: {[rn1_10.c2.W Value[16 x 144]] }
00000089CB1C15D0: {[rn1_10.c2.c.b Value[16 x 1]] }
00000089CB1C1670: {[rn1_11.c1.c.c.b Value[16 x 1]] }
00000089CB1C1AD0: {[rn1_11.c1.c.c.isd Value[16 x 1]] }
00000089CB1C1D50: {[rn1_11.c1.c.c.m Value[16 x 1]] }
00000089CB1C2390: {[rn1_12.c1.c.c.isd Value[16 x 1]] }
00000089CB1C24D0: {[rn1_10.c2.c.m Value[16 x 1]] }
00000089CB1C2570: {[rn1_11.c2.c.b Value[16 x 1]] }
00000089CB1C2610: {[rn1_12.c1.c.c.m Value[16 x 1]] }
00000089CB1C26B0: {[rn1_11.c2.c.sc Value[16 x 1]] }
00000089CB1C2890: {[rn1_11.c1.c.W Value[16 x 144]] }
00000089CB1C29D0: {[rn1_12.c1.c.W Value[16 x 144]] }
00000089CB1C2C50: {[rn1_10.c1.c.c.sc Value[16 x 1]] }
00000089CB1C2D90: {[rn1_11.c2.c.isd Value[16 x 1]] }
00000089CB1C2E30: {[rn1_12.c1.c.c.b Value[16 x 1]] }
00000089CB1C3010: {[rn1_12.c2.c.b Value[16 x 1]] }
00000089CB1C3150: {[rn1_12.c2.c.sc Value[16 x 1]] }
00000089CB1C3290: {[rn1_13.c2.c.sc Value[16 x 1]] }
00000089CB1C33D0: {[rn1_14.c1.c.c.m Value[16 x 1]] }
00000089CB1C3470: {[rn1_14.c1.c.c.sc Value[16 x 1]] }
00000089CB1C35B0: {[rn1_14.c1.c.W Value[16 x 144]] }
00000089CB1C3A10: {[rn1_12.c2.c.m Value[16 x 1]] }
00000089CB1C3B50: {[rn1_13.c1.c.W Value[16 x 144]] }
00000089CB1C3BF0: {[rn1_12.c2.c.isd Value[16 x 1]] }
00000089CB1C3D30: {[rn1_13.c2.c.m Value[16 x 1]] }
00000089CB1C3FB0: {[rn1_13.c2.c.b Value[16 x 1]] }
00000089CB1C4050: {[rn1_13.c2.c.isd Value[16 x 1]] }
00000089CB1C40F0: {[rn1_13.c1.c.c.sc Value[16 x 1]] }
00000089CB1C45F0: {[rn1_13.c1.c.c.isd Value[16 x 1]] }
00000089CB1C4690: {[rn1_14.c1.c.c.b Value[16 x 1]] }
00000089CB1C47D0: {[rn1_14.c1.c.c.isd Value[16 x 1]] }
00000089CB1C4870: {[rn1_12.c2.W Value[16 x 144]] }
00000089CB1C4A50: {[rn1_13.c1.c.c.b Value[16 x 1]] }
00000089CB1C4AF0: {[rn1_13.c1.c.c.m Value[16 x 1]] }
00000089CB1C4EB0: {[rn1_13.c2.W Value[16 x 144]] }
00000089F129B200: {[rn3_10.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F129B2A0: {[rn3_11.c1.y Value[8 x 8 x 64 x *1]] }
00000089F129B340: {[rn3_11.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F129B3E0: {[rn3_12.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F129B5C0: {[rn3_9.p Value[8 x 8 x 64 x *1]] }
00000089F129B8E0: {[rn3_10.y Value[8 x 8 x 64 x *1]] }
00000089F129BA20: {[rn3_12.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F129BB60: {[rn3_10.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F129BC00: {[rn3_11.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F129BCA0: {[rn3_11.p Value[8 x 8 x 64 x *1]] }
00000089F129BDE0: {[rn3_12.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F129BE80: {[rn3_12.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F129BF20: {[rn3_12.p Value[8 x 8 x 64 x *1]] }
00000089F129BFC0: {[rn3_13.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F129C100: {[rn3_13.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F129C2E0: {[rn3_10.p Value[8 x 8 x 64 x *1]] }
00000089F129C420: {[rn3_12.c1.y Value[8 x 8 x 64 x *1]] }
00000089F129C4C0: {[rn3_12.y Value[8 x 8 x 64 x *1]] }
00000089F129C560: {[rn3_13.c1.y Value[8 x 8 x 64 x *1]] }
00000089F129C6A0: {[rn3_13.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F129C920: {[rn3_13.p Value[8 x 8 x 64 x *1]] }
00000089F129CA60: {[rn3_13.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F129CB00: {[rn3_13.y Value[8 x 8 x 64 x *1]] }
00000089F129CBA0: {[rn3_14.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F129CCE0: {[rn3_11.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F129CD80: {[rn3_14.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F129CF60: {[rn3_9.y Value[8 x 8 x 64 x *1]] }
00000089F129D0A0: {[rn3_9.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F129D140: {[rn3_10.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F129D320: {[rn3_9.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F129D3C0: {[rn3_10.c1.y Value[8 x 8 x 64 x *1]] }
00000089F129D500: {[rn3_11.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F129D6E0: {[rn3_10.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F129D780: {[rn3_11.y Value[8 x 8 x 64 x *1]] }
00000089F129D960: {[rn3_17.p Value[8 x 8 x 64 x *1]] }
00000089F129DA00: {[rn3_14.y Value[8 x 8 x 64 x *1]] }
00000089F129DB40: {[rn3_16.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F129DBE0: {[rn3_16.p Value[8 x 8 x 64 x *1]] }
00000089F129DC80: {[rn3_15.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F129DD20: {[rn3_16.y Value[8 x 8 x 64 x *1]] }
00000089F129DF00: {[rn3_15.c1.y Value[8 x 8 x 64 x *1]] }
00000089F129DFA0: {[rn3_15.y Value[8 x 8 x 64 x *1]] }
00000089F129E040: {[rn3_14.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F129E2C0: {[rn3_14.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F129E400: {[rn3_15.p Value[8 x 8 x 64 x *1]] }
00000089F129E680: {[rn3_17.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F129E720: {[rn3_17.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F129E7C0: {[rn3_17.y Value[8 x 8 x 64 x *1]] }
00000089F129E860: {[rn3_18.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F129E900: {[rn3_18.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F129EA40: {[rn3_15.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F129ED60: {[rn3_18.c1.y Value[8 x 8 x 64 x *1]] }
00000089F129EE00: {[rn3_18.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F129EEA0: {[rn3_18.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F129EFE0: {[rn3_16.c1.y Value[8 x 8 x 64 x *1]] }
00000089F129F1C0: {[rn3_17.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F129F300: {[rn3_18.p Value[8 x 8 x 64 x *1]] }
00000089F129F3A0: {[rn3_18.y Value[8 x 8 x 64 x *1]] }
00000089F129F440: {[pool Value[1 x 1 x 64 x *1]] }
00000089F129F580: {[OutputNodes.t Value[10 x *1]] }
00000089F129F620: {[OutputNodes.z Value[10 x *1]] }
00000089F129F760: {[rn3_14.p Value[8 x 8 x 64 x *1]] }
00000089F129F940: {[rn3_16.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F129F9E0: {[rn3_16.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F129FB20: {[rn3_14.c1.y Value[8 x 8 x 64 x *1]] }
00000089F129FD00: {[rn3_16.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F129FE40: {[rn3_17.c1.y Value[8 x 8 x 64 x *1]] }
00000089F129FEE0: {[rn3_15.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F129FF80: {[rn3_17.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A0020: {[rn3_15.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A2960: {[rn2_14.p Value[16 x 16 x 32 x *1]] }
00000089F12A2B40: {[rn2_12.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A2BE0: {[rn2_15.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A2C80: {[rn2_14.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A2FA0: {[rn2_11.c1.y Value[16 x 16 x 32 x *1]] }
00000089F12A3040: {[rn2_13.c1.y Value[16 x 16 x 32 x *1]] }
00000089F12A3220: {[rn2_14.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A3400: {[rn2_13.p Value[16 x 16 x 32 x *1]] }
00000089F12A34A0: {[rn2_12.y Value[16 x 16 x 32 x *1]] }
00000089F12A35E0: {[rn2_14.c1.y Value[16 x 16 x 32 x *1]] }
00000089F12A37C0: {[rn2_11.p Value[16 x 16 x 32 x *1]] }
00000089F12A3860: {[rn2_11.y Value[16 x 16 x 32 x *1]] }
00000089F12A3900: {[rn2_12.c1.y Value[16 x 16 x 32 x *1]] }
00000089F12A39A0: {[rn2_12.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A3A40: {[rn2_12.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A3C20: {[rn2_14.y Value[16 x 16 x 32 x *1]] }
00000089F12A3E00: {[rn2_15.c1.y Value[16 x 16 x 32 x *1]] }
00000089F12A3EA0: {[rn2_15.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A3F40: {[rn2_12.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A4120: {[rn2_15.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A4440: {[rn2_15.p Value[16 x 16 x 32 x *1]] }
00000089F12A44E0: {[rn2_15.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A4580: {[rn2_15.y Value[16 x 16 x 32 x *1]] }
00000089F12A4620: {[rn2_16.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A4760: {[rn2_11.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A4800: {[rn2_11.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A48A0: {[rn2_13.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A49E0: {[rn2_13.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A4A80: {[rn2_14.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A4B20: {[rn2_13.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A4C60: {[rn2_12.p Value[16 x 16 x 32 x *1]] }
00000089F12A4DA0: {[rn2_13.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A4F80: {[rn2_14.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A5020: {[rn2_13.y Value[16 x 16 x 32 x *1]] }
00000089F12A52A0: {[rn2_18.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A5480: {[rn3_1.c1.y Value[8 x 8 x 64 x *1]] }
00000089F12A5520: {[rn3_1.c_proj.y Value[8 x 8 x 64 x *1]] }
00000089F12A55C0: {[rn2_17.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A5660: {[rn2_17.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A5700: {[rn2_18.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A58E0: {[rn2_16.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A5980: {[rn3_1.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A5AC0: {[rn2_18.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A5B60: {[rn2_18.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A5CA0: {[rn2_17.p Value[16 x 16 x 32 x *1]] }
00000089F12A5D40: {[rn2_17.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A5E80: {[rn3_1.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A6060: {[rn2_16.p Value[16 x 16 x 32 x *1]] }
00000089F12A61A0: {[rn2_16.y Value[16 x 16 x 32 x *1]] }
00000089F12A6380: {[rn3_1.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F12A6420: {[rn3_1.c_proj.c Value[8 x 8 x 64 x *1]] }
00000089F12A64C0: {[rn2_16.c2.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A6560: {[rn3_1.p Value[8 x 8 x 64 x *1]] }
00000089F12A6600: {[rn3_1.y Value[8 x 8 x 64 x *1]] }
00000089F12A66A0: {[rn3_2.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F12A6740: {[rn2_17.c1.y Value[16 x 16 x 32 x *1]] }
00000089F12A6920: {[rn3_2.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A69C0: {[rn2_16.c2.c.c Value[16 x 16 x 32 x *1]] }
00000089F12A6A60: {[rn2_17.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000089F12A6C40: {[rn3_2.c1.y Value[8 x 8 x 64 x *1]] }
00000089F12A6D80: {[rn3_2.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F12A6EC0: {[rn3_2.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A6F60: {[rn2_16.c1.y Value[16 x 16 x 32 x *1]] }
00000089F12A70A0: {[rn2_17.y Value[16 x 16 x 32 x *1]] }
00000089F12A73C0: {[rn3_1.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F12A75A0: {[rn2_18.c1.y Value[16 x 16 x 32 x *1]] }
00000089F12A7780: {[rn2_18.y Value[16 x 16 x 32 x *1]] }
00000089F12A7820: {[rn2_18.p Value[16 x 16 x 32 x *1]] }
00000089F12A7A00: {[rn3_4.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A7BE0: {[rn3_6.c1.y Value[8 x 8 x 64 x *1]] }
00000089F12A7C80: {[rn3_5.p Value[8 x 8 x 64 x *1]] }
00000089F12A7D20: {[rn3_6.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F12A7E60: {[rn3_3.y Value[8 x 8 x 64 x *1]] }
00000089F12A7F00: {[rn3_4.y Value[8 x 8 x 64 x *1]] }
00000089F12A80E0: {[rn3_5.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A8180: {[rn3_6.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F12A8220: {[rn3_6.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A82C0: {[rn3_4.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F12A8360: {[rn3_4.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A8540: {[rn3_3.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F12A89A0: {[rn3_3.c1.y Value[8 x 8 x 64 x *1]] }
00000089F12A8A40: {[rn3_4.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F12A8AE0: {[rn3_5.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A8B80: {[rn3_5.y Value[8 x 8 x 64 x *1]] }
00000089F12A8E00: {[rn3_6.p Value[8 x 8 x 64 x *1]] }
00000089F12A8EA0: {[rn3_6.y Value[8 x 8 x 64 x *1]] }
00000089F12A8F40: {[rn3_3.p Value[8 x 8 x 64 x *1]] }
00000089F12A8FE0: {[rn3_6.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A9080: {[rn3_7.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F12A91C0: {[rn3_2.y Value[8 x 8 x 64 x *1]] }
00000089F12A9260: {[rn3_3.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A9300: {[rn3_7.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A9580: {[rn3_7.c1.y Value[8 x 8 x 64 x *1]] }
00000089F12A9620: {[rn3_7.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F12A9760: {[rn3_2.p Value[8 x 8 x 64 x *1]] }
00000089F12A9800: {[rn3_3.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F12A98A0: {[rn3_4.c1.y Value[8 x 8 x 64 x *1]] }
00000089F12A99E0: {[rn3_5.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F12A9BC0: {[rn3_5.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F12A9D00: {[rn3_3.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F12A9DA0: {[rn3_4.p Value[8 x 8 x 64 x *1]] }
00000089F12A9F80: {[rn3_5.c1.y Value[8 x 8 x 64 x *1]] }
00000089F12AA160: {[rn3_8.c2.c.c Value[8 x 8 x 64 x *1]] }
00000089F12AA200: {[rn3_9.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F12AA2A0: {[rn3_8.p Value[8 x 8 x 64 x *1]] }
00000089F12AA3E0: {[rn3_9.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F12AA520: {[rn3_8.c1.y Value[8 x 8 x 64 x *1]] }
00000089F12AA5C0: {[rn3_9.c1.y Value[8 x 8 x 64 x *1]] }
00000089F12AA660: {[rn3_8.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000089F12AA840: {[rn3_8.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000089F12AAA20: {[rn3_7.p Value[8 x 8 x 64 x *1]] }
00000089F12AAB60: {[rn3_8.y Value[8 x 8 x 64 x *1]] }
00000089F12AACA0: {[rn3_7.y Value[8 x 8 x 64 x *1]] }
00000089F12AAE80: {[rn3_7.c2.c.y Value[8 x 8 x 64 x *1]] }
00000089F12AAF20: {[rn3_8.c2.c.y Value[8 x 8 x 64 x *1]] }

07/14/2016 05:26:32: Minibatch[1-200]: Err = 0.89781250 * 3200; CE = 2.30259312 * 3200
07/14/2016 05:26:36: Minibatch[201-400]: Err = 0.90156250 * 3200; CE = 2.30250527 * 3200
07/14/2016 05:26:41: Minibatch[401-600]: Err = 0.90000000 * 3200; CE = 2.30265102 * 3200
07/14/2016 05:26:42: Minibatch[601-625]: Err = 0.90500000 * 400; CE = 2.30296920 * 400
07/14/2016 05:26:42: Final Results: Minibatch[1-625]: Err = 0.90000000 * 10000; CE = 2.30259858 * 10000; perplexity = 10.00013487

07/14/2016 05:26:42: Action "test" complete.

07/14/2016 05:26:42: __COMPLETED__