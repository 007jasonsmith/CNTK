CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3565 @ 3.20GHz
    Hardware threads: 8
    Total Memory: 12580436 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config/LSTM-NDL.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu DeviceId=0 timestamping=true speechTrain=[SGD=[maxEpochs=1]] speechTrain=[SGD=[epochSize=64]] parallelTrain=false
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 05:09:58
		Last modified date: Wed Jul 13 07:57:26 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by svcphil on DPHAIM-22
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
07/14/2016 05:43:07: -------------------------------------------------------------------
07/14/2016 05:43:07: Build info: 

07/14/2016 05:43:07: 		Built time: Jul 14 2016 05:09:58
07/14/2016 05:43:07: 		Last modified date: Wed Jul 13 07:57:26 2016
07/14/2016 05:43:07: 		Build type: Release
07/14/2016 05:43:07: 		Build target: GPU
07/14/2016 05:43:07: 		With 1bit-SGD: no
07/14/2016 05:43:07: 		Math lib: mkl
07/14/2016 05:43:07: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
07/14/2016 05:43:07: 		CUB_PATH: C:\src\cub-1.4.1
07/14/2016 05:43:07: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
07/14/2016 05:43:07: 		Build Branch: HEAD
07/14/2016 05:43:07: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 05:43:07: 		Built by svcphil on DPHAIM-22
07/14/2016 05:43:07: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
07/14/2016 05:43:07: -------------------------------------------------------------------
07/14/2016 05:43:07: -------------------------------------------------------------------
07/14/2016 05:43:07: GPU info:

07/14/2016 05:43:07: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
07/14/2016 05:43:07: -------------------------------------------------------------------

07/14/2016 05:43:07: Running on cntk-muc01 at 2016/07/14 05:43:07
07/14/2016 05:43:07: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config/LSTM-NDL.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu  DeviceId=0  timestamping=true  speechTrain=[SGD=[maxEpochs=1]]  speechTrain=[SGD=[epochSize=64]]  parallelTrain=false



07/14/2016 05:43:07: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:43:07: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
deviceId = -1
command = speechTrain
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/cntkSpeechLSTM.dnn"
parallelTrain = true
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    nbrUttsIneachRecurrentIter = 16
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/lstmp-3layer-opt.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 16
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu
DeviceId=0
timestamping=true
speechTrain=[SGD=[maxEpochs=1]]
speechTrain=[SGD=[epochSize=64]]
parallelTrain=false

07/14/2016 05:43:07: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:43:07: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:43:07: RootDir = ".."
ConfigDir = "../Config"
DataDir = "../Data"
OutputDir = "../Output"
ModelDir = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu/Models"
deviceId = -1
command = speechTrain
precision = "float"
traceLevel = 1
modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu/Models/cntkSpeechLSTM.dnn"
parallelTrain = true
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    nbrUttsIneachRecurrentIter = 16
    NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config/lstmp-3layer-opt.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 16
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu
DeviceId=0
timestamping=true
speechTrain=[SGD=[maxEpochs=1]]
speechTrain=[SGD=[epochSize=64]]
parallelTrain=false

07/14/2016 05:43:07: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:43:07: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: LSTM-NDL.cntk:command=speechTrain
configparameters: LSTM-NDL.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config
configparameters: LSTM-NDL.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
configparameters: LSTM-NDL.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
configparameters: LSTM-NDL.cntk:deviceId=0
configparameters: LSTM-NDL.cntk:frameMode=false
configparameters: LSTM-NDL.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu/Models
configparameters: LSTM-NDL.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu/Models/cntkSpeechLSTM.dnn
configparameters: LSTM-NDL.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu
configparameters: LSTM-NDL.cntk:parallelTrain=false
configparameters: LSTM-NDL.cntk:precision=float
configparameters: LSTM-NDL.cntk:RootDir=..
configparameters: LSTM-NDL.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu
configparameters: LSTM-NDL.cntk:speechTrain=[
    action = "train"
    nbrUttsIneachRecurrentIter = 16
    NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config/lstmp-3layer-opt.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 16
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
] [SGD=[maxEpochs=1]] [SGD=[epochSize=64]]

configparameters: LSTM-NDL.cntk:timestamping=true
configparameters: LSTM-NDL.cntk:traceLevel=1
configparameters: LSTM-NDL.cntk:truncated=true
07/14/2016 05:43:07: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 05:43:07: Commands: speechTrain
07/14/2016 05:43:07: Precision = "float"
07/14/2016 05:43:07: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu/Models/cntkSpeechLSTM.dnn
07/14/2016 05:43:07: CNTKCommandTrainInfo: speechTrain : 1
07/14/2016 05:43:07: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 1

07/14/2016 05:43:07: ##############################################################################
07/14/2016 05:43:07: #                                                                            #
07/14/2016 05:43:07: # Action "train"                                                             #
07/14/2016 05:43:07: #                                                                            #
07/14/2016 05:43:07: ##############################################################################

07/14/2016 05:43:07: CNTKCommandTrainBegin: speechTrain
NDLBuilder Using GPU 0
reading script file C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.scp ... 948 entries
total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/state.list
htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/14/2016 05:43:07: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

6 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	featNorm.xMean = Mean()
	featNorm.xStdDev = InvStdDev()
	logPrior.prior = Mean()
	scaledLogLikelihood = Minus()

Loop[0] --> Loop_LSTMoutput1.output -> 24 nodes

	LSTMoutput1.dh	LSTMoutput1.whh	LSTMoutput1.wxxpbpwhh
	LSTMoutput1.G4	LSTMoutput1.G3	LSTMoutput1.dc
	LSTMoutput1.Wcfdc	LSTMoutput1.unnamed151	LSTMoutput1.ft
	LSTMoutput1.bft	LSTMoutput1.G1	LSTMoutput1.Wcidc
	LSTMoutput1.unnamed149	LSTMoutput1.it	LSTMoutput1.G2
	LSTMoutput1.unnamed150	LSTMoutput1.bit	LSTMoutput1.ct
	LSTMoutput1.Wcoct	LSTMoutput1.unnamed152	LSTMoutput1.ot
	LSTMoutput1.unnamed153	LSTMoutput1.mt	LSTMoutput1.output

Loop[1] --> Loop_LSTMoutput2.output -> 24 nodes

	LSTMoutput2.dh	LSTMoutput2.whh	LSTMoutput2.wxxpbpwhh
	LSTMoutput2.G4	LSTMoutput2.G3	LSTMoutput2.dc
	LSTMoutput2.Wcfdc	LSTMoutput2.unnamed159	LSTMoutput2.ft
	LSTMoutput2.bft	LSTMoutput2.G1	LSTMoutput2.Wcidc
	LSTMoutput2.unnamed157	LSTMoutput2.it	LSTMoutput2.G2
	LSTMoutput2.unnamed158	LSTMoutput2.bit	LSTMoutput2.ct
	LSTMoutput2.Wcoct	LSTMoutput2.unnamed160	LSTMoutput2.ot
	LSTMoutput2.unnamed161	LSTMoutput2.mt	LSTMoutput2.output

Loop[2] --> Loop_LSTMoutput3.output -> 24 nodes

	LSTMoutput3.dh	LSTMoutput3.whh	LSTMoutput3.wxxpbpwhh
	LSTMoutput3.G4	LSTMoutput3.G3	LSTMoutput3.dc
	LSTMoutput3.Wcfdc	LSTMoutput3.unnamed167	LSTMoutput3.ft
	LSTMoutput3.bft	LSTMoutput3.G1	LSTMoutput3.Wcidc
	LSTMoutput3.unnamed165	LSTMoutput3.it	LSTMoutput3.G2
	LSTMoutput3.unnamed166	LSTMoutput3.bit	LSTMoutput3.ct
	LSTMoutput3.Wcoct	LSTMoutput3.unnamed168	LSTMoutput3.ot
	LSTMoutput3.unnamed169	LSTMoutput3.mt	LSTMoutput3.output

Validating network. 113 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W = LearnableParameter() :  -> [132 x 512]
Validating --> LSTMoutput3.Wmr = LearnableParameter() :  -> [512 x 1024]
Validating --> LSTMoutput3.wx = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput2.Wmr = LearnableParameter() :  -> [512 x 1024]
Validating --> LSTMoutput2.wx = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput1.Wmr = LearnableParameter() :  -> [512 x 1024]
Validating --> LSTMoutput1.wx = LearnableParameter() :  -> [4096 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> featNorm.xMean = Mean (features) : [363 x *] -> [363]
Validating --> featNorm.xStdDev = InvStdDev (features) : [363 x *] -> [363]
Validating --> featNorm.xNorm = PerDimMeanVarNormalization (features, featNorm.xMean, featNorm.xStdDev) : [363 x *], [363], [363] -> [363 x *]
Validating --> LSTMoutput1.wxx = Times (LSTMoutput1.wx, featNorm.xNorm) : [4096 x 363], [363 x *] -> [4096 x *]
Validating --> LSTMoutput1.b = LearnableParameter() :  -> [4096 x 1]
Validating --> LSTMoutput1.wxxpb = Plus (LSTMoutput1.wxx, LSTMoutput1.b) : [4096 x *], [4096 x 1] -> [4096 x 1 x *]
Validating --> LSTMoutput1.Wh = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput1.Wco = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput1.Wcf = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput1.Wci = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput1.whh = Times (LSTMoutput1.Wh, LSTMoutput1.dh) : [4096 x 512], [512] -> [4096]
Validating --> LSTMoutput1.wxxpbpwhh = Plus (LSTMoutput1.wxxpb, LSTMoutput1.whh) : [4096 x 1 x *], [4096] -> [4096 x 1 x *]
Validating --> LSTMoutput1.G4 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.G3 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcfdc = DiagTimes (LSTMoutput1.Wcf, LSTMoutput1.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput1.unnamed151 = Plus (LSTMoutput1.G3, LSTMoutput1.Wcfdc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput1.ft = Sigmoid (LSTMoutput1.unnamed151) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.bft = ElementTimes (LSTMoutput1.ft, LSTMoutput1.dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput1.G1 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcidc = DiagTimes (LSTMoutput1.Wci, LSTMoutput1.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput1.unnamed149 = Plus (LSTMoutput1.G1, LSTMoutput1.Wcidc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput1.it = Sigmoid (LSTMoutput1.unnamed149) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.G2 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.unnamed150 = Tanh (LSTMoutput1.G2) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.bit = ElementTimes (LSTMoutput1.it, LSTMoutput1.unnamed150) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.ct = Plus (LSTMoutput1.bft, LSTMoutput1.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcoct = DiagTimes (LSTMoutput1.Wco, LSTMoutput1.ct) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.unnamed152 = Plus (LSTMoutput1.G4, LSTMoutput1.Wcoct) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.ot = Sigmoid (LSTMoutput1.unnamed152) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.unnamed153 = Tanh (LSTMoutput1.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.mt = ElementTimes (LSTMoutput1.ot, LSTMoutput1.unnamed153) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.output = Times (LSTMoutput1.Wmr, LSTMoutput1.mt) : [512 x 1024], [1024 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput2.wxx = Times (LSTMoutput2.wx, LSTMoutput1.output) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput2.b = LearnableParameter() :  -> [4096 x 1]
Validating --> LSTMoutput2.wxxpb = Plus (LSTMoutput2.wxx, LSTMoutput2.b) : [4096 x 1 x *], [4096 x 1] -> [4096 x 1 x *]
Validating --> LSTMoutput2.Wh = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput2.Wco = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput2.Wcf = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput2.Wci = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput2.whh = Times (LSTMoutput2.Wh, LSTMoutput2.dh) : [4096 x 512], [512] -> [4096]
Validating --> LSTMoutput2.wxxpbpwhh = Plus (LSTMoutput2.wxxpb, LSTMoutput2.whh) : [4096 x 1 x *], [4096] -> [4096 x 1 x *]
Validating --> LSTMoutput2.G4 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.G3 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcfdc = DiagTimes (LSTMoutput2.Wcf, LSTMoutput2.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput2.unnamed159 = Plus (LSTMoutput2.G3, LSTMoutput2.Wcfdc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput2.ft = Sigmoid (LSTMoutput2.unnamed159) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.bft = ElementTimes (LSTMoutput2.ft, LSTMoutput2.dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput2.G1 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcidc = DiagTimes (LSTMoutput2.Wci, LSTMoutput2.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput2.unnamed157 = Plus (LSTMoutput2.G1, LSTMoutput2.Wcidc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput2.it = Sigmoid (LSTMoutput2.unnamed157) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.G2 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.unnamed158 = Tanh (LSTMoutput2.G2) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.bit = ElementTimes (LSTMoutput2.it, LSTMoutput2.unnamed158) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.ct = Plus (LSTMoutput2.bft, LSTMoutput2.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcoct = DiagTimes (LSTMoutput2.Wco, LSTMoutput2.ct) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.unnamed160 = Plus (LSTMoutput2.G4, LSTMoutput2.Wcoct) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.ot = Sigmoid (LSTMoutput2.unnamed160) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.unnamed161 = Tanh (LSTMoutput2.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.mt = ElementTimes (LSTMoutput2.ot, LSTMoutput2.unnamed161) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.output = Times (LSTMoutput2.Wmr, LSTMoutput2.mt) : [512 x 1024], [1024 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput3.wxx = Times (LSTMoutput3.wx, LSTMoutput2.output) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput3.b = LearnableParameter() :  -> [4096 x 1]
Validating --> LSTMoutput3.wxxpb = Plus (LSTMoutput3.wxx, LSTMoutput3.b) : [4096 x 1 x *], [4096 x 1] -> [4096 x 1 x *]
Validating --> LSTMoutput3.Wh = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput3.Wco = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput3.Wcf = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput3.Wci = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput3.whh = Times (LSTMoutput3.Wh, LSTMoutput3.dh) : [4096 x 512], [512] -> [4096]
Validating --> LSTMoutput3.wxxpbpwhh = Plus (LSTMoutput3.wxxpb, LSTMoutput3.whh) : [4096 x 1 x *], [4096] -> [4096 x 1 x *]
Validating --> LSTMoutput3.G4 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.G3 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcfdc = DiagTimes (LSTMoutput3.Wcf, LSTMoutput3.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput3.unnamed167 = Plus (LSTMoutput3.G3, LSTMoutput3.Wcfdc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput3.ft = Sigmoid (LSTMoutput3.unnamed167) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.bft = ElementTimes (LSTMoutput3.ft, LSTMoutput3.dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput3.G1 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcidc = DiagTimes (LSTMoutput3.Wci, LSTMoutput3.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput3.unnamed165 = Plus (LSTMoutput3.G1, LSTMoutput3.Wcidc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput3.it = Sigmoid (LSTMoutput3.unnamed165) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.G2 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.unnamed166 = Tanh (LSTMoutput3.G2) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.bit = ElementTimes (LSTMoutput3.it, LSTMoutput3.unnamed166) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.ct = Plus (LSTMoutput3.bft, LSTMoutput3.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcoct = DiagTimes (LSTMoutput3.Wco, LSTMoutput3.ct) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.unnamed168 = Plus (LSTMoutput3.G4, LSTMoutput3.Wcoct) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.ot = Sigmoid (LSTMoutput3.unnamed168) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.unnamed169 = Tanh (LSTMoutput3.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.mt = ElementTimes (LSTMoutput3.ot, LSTMoutput3.unnamed169) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.output = Times (LSTMoutput3.Wmr, LSTMoutput3.mt) : [512 x 1024], [1024 x 1 x *] -> [512 x 1 x *]
Validating --> unnamed174 = Times (W, LSTMoutput3.output) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> b = LearnableParameter() :  -> [132 x 1]
Validating --> LSTMoutputW = Plus (unnamed174, b) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]
Validating --> logPrior.prior = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior.logPrior = Log (logPrior.prior) : [132] -> [132]
Validating --> scaledLogLikelihood = Minus (LSTMoutputW, logPrior.logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 88 nodes to process in pass 2.

Validating --> LSTMoutput1.dh = PastValue (LSTMoutput1.output) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput1.whh = Times (LSTMoutput1.Wh, LSTMoutput1.dh) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput1.dc = PastValue (LSTMoutput1.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcfdc = DiagTimes (LSTMoutput1.Wcf, LSTMoutput1.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcidc = DiagTimes (LSTMoutput1.Wci, LSTMoutput1.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.dh = PastValue (LSTMoutput2.output) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput2.whh = Times (LSTMoutput2.Wh, LSTMoutput2.dh) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput2.dc = PastValue (LSTMoutput2.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcfdc = DiagTimes (LSTMoutput2.Wcf, LSTMoutput2.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcidc = DiagTimes (LSTMoutput2.Wci, LSTMoutput2.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.dh = PastValue (LSTMoutput3.output) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput3.whh = Times (LSTMoutput3.Wh, LSTMoutput3.dh) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput3.dc = PastValue (LSTMoutput3.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcfdc = DiagTimes (LSTMoutput3.Wcf, LSTMoutput3.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcidc = DiagTimes (LSTMoutput3.Wci, LSTMoutput3.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]

Validating network. 15 nodes to process in pass 3.


Validating network, final pass.



29 out of 113 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 05:43:08: Created model with 113 nodes on GPU 0.

07/14/2016 05:43:08: Training criterion node(s):
07/14/2016 05:43:08: 	ce = CrossEntropyWithSoftmax

07/14/2016 05:43:08: Evaluation criterion node(s):

07/14/2016 05:43:08: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[err Gradient[1]] [featNorm.xMean Gradient[363]] [featNorm.xNorm Gradient[363 x *]] [featNorm.xStdDev Gradient[363]] [features Gradient[363 x *]] [labels Gradient[132 x *]] [logPrior.logPrior Gradient[132]] [logPrior.prior Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
00000011134A4910: {[features Value[363 x *]] }
000000112150FAE0: {[featNorm.xStdDev Value[363]] }
0000001121510620: {[LSTMoutput1.b Value[4096 x 1]] }
0000001121510760: {[LSTMoutput1.Wh Value[4096 x 512]] }
0000001121510A80: {[LSTMoutput1.Wci Value[1024]] }
0000001121510C60: {[LSTMoutput1.Wcf Value[1024]] }
0000001121510D00: {[featNorm.xMean Value[363]] }
0000001121510E40: {[LSTMoutput1.Wco Value[1024]] }
0000001121510F80: {[LSTMoutput1.dh Value[512 x 1 x *]] [LSTMoutput1.wxx Gradient[4096 x *]] }
0000001121511160: {[labels Value[132 x *]] }
0000001121511480: {[LSTMoutput1.wx Value[4096 x 363]] }
00000011278A8FD0: {[LSTMoutput2.b Value[4096 x 1]] }
00000011278A9430: {[LSTMoutput1.dc Value[1024 x 1 x *]] }
00000011278A96B0: {[LSTMoutput2.Wci Value[1024]] }
00000011278A9750: {[LSTMoutput2.Wcf Value[1024]] }
00000011278A9B10: {[LSTMoutput1.mt Gradient[1024 x 1 x *]] [LSTMoutput2.dh Value[512 x 1 x *]] [LSTMoutput2.wxx Gradient[4096 x 1 x *]] }
00000011278AA650: {[LSTMoutput1.Wmr Value[512 x 1024]] }
00000011278AA790: {[LSTMoutput1.Wco Gradient[1024]] [LSTMoutput2.dc Value[1024 x 1 x *]] }
00000011278AA830: {[LSTMoutput2.Wh Value[4096 x 512]] }
00000011278AAA10: {[LSTMoutput2.Wco Value[1024]] }
00000011278AADD0: {[LSTMoutput2.wx Value[4096 x 512]] }
00000011278B75A0: {[LSTMoutput2.Wco Gradient[1024]] [LSTMoutput3.dc Value[1024 x 1 x *]] }
00000011278B7960: {[LSTMoutput2.Wmr Value[512 x 1024]] }
00000011278B7DC0: {[LSTMoutput3.wx Value[4096 x 512]] }
00000011278B8900: {[LSTMoutput3.b Value[4096 x 1]] }
00000011278B89A0: {[LSTMoutput3.Wco Value[1024]] }
00000011278B8CC0: {[LSTMoutput3.Wci Value[1024]] }
00000011278B8D60: {[LSTMoutput3.Wcf Value[1024]] }
00000011278B8E00: {[LSTMoutput2.mt Gradient[1024 x 1 x *]] [LSTMoutput3.dh Value[512 x 1 x *]] [LSTMoutput3.wxx Gradient[4096 x 1 x *]] }
00000011278B8EA0: {[LSTMoutput3.Wh Value[4096 x 512]] }
00000011278BF400: {[W Value[132 x 512]] }
00000011278BF540: {[b Value[132 x 1]] }
00000011278BFFE0: {[err Value[1]] }
00000011278C0080: {[scaledLogLikelihood Value[132 x 1 x *]] }
00000011278C0120: {[ce Value[1]] }
00000011278C04E0: {[logPrior.logPrior Value[132]] }
00000011278C0580: {[featNorm.xNorm Value[363 x *]] }
00000011278C0620: {[LSTMoutput1.wxx Value[4096 x *]] }
00000011278C0A80: {[LSTMoutput3.Wmr Value[512 x 1024]] }
00000011278C0EE0: {[logPrior.prior Value[132]] }
0000001127D9E370: {[LSTMoutput2.output Value[512 x 1 x *]] }
0000001127D9E410: {[LSTMoutput1.wxxpbpwhh Value[4096 x 1 x *]] }
0000001127D9E4B0: {[LSTMoutput1.Wcidc Value[1024 x 1 x *]] }
0000001127D9E550: {[LSTMoutput1.ot Gradient[1024 x 1 x *]] [LSTMoutput2.whh Value[4096 x 1 x *]] }
0000001127D9E5F0: {[LSTMoutput2.Wcoct Value[1024 x 1 x *]] }
0000001127D9E690: {[LSTMoutput2.Wmr Gradient[512 x 1024]] [LSTMoutput3.wxx Value[4096 x 1 x *]] }
0000001127D9E730: {[LSTMoutput3.wx Gradient[4096 x 512]] [LSTMoutput3.wxxpb Value[4096 x 1 x *]] }
0000001127D9E7D0: {[LSTMoutput2.ot Gradient[1024 x 1 x *]] [LSTMoutput3.whh Value[4096 x 1 x *]] }
0000001127D9E870: {[LSTMoutput1.bft Value[1024 x 1 x *]] }
0000001127D9E910: {[LSTMoutput1.wxxpbpwhh Gradient[4096 x 1 x *]] [LSTMoutput2.unnamed159 Value[1024 x 1 x *]] }
0000001127D9E9B0: {[LSTMoutput1.wx Gradient[4096 x 363]] [LSTMoutput1.wxxpb Value[4096 x 1 x *]] }
0000001127D9EA50: {[LSTMoutput2.ot Value[1024 x 1 x *]] }
0000001127D9EAF0: {[LSTMoutput1.ct Value[1024 x 1 x *]] }
0000001127D9EB90: {[LSTMoutput1.mt Value[1024 x 1 x *]] }
0000001127D9EC30: {[LSTMoutput2.wx Gradient[4096 x 512]] [LSTMoutput2.wxxpb Value[4096 x 1 x *]] }
0000001127D9ECD0: {[LSTMoutput1.G4 Gradient[1024 x 1 x *]] [LSTMoutput2.G4 Value[1024 x 1 x *]] }
0000001127D9ED70: {[LSTMoutput1.Wci Gradient[1024]] [LSTMoutput2.G1 Value[1024 x 1 x *]] }
0000001127D9EE10: {[LSTMoutput1.unnamed150 Value[1024 x 1 x *]] }
0000001127D9EEB0: {[LSTMoutput1.G1 Gradient[1024 x 1 x *]] [LSTMoutput2.ft Value[1024 x 1 x *]] }
0000001127D9EF50: {[LSTMoutput1.unnamed151 Value[1024 x 1 x *]] }
0000001127D9EFF0: {[LSTMoutput1.G3 Value[1024 x 1 x *]] }
0000001127D9F090: {[LSTMoutput1.unnamed149 Value[1024 x 1 x *]] }
0000001127D9F130: {[LSTMoutput2.bft Value[1024 x 1 x *]] }
0000001127D9F1D0: {[LSTMoutput1.G2 Value[1024 x 1 x *]] }
0000001127D9F270: {[LSTMoutput1.G3 Gradient[1024 x 1 x *]] [LSTMoutput2.Wcidc Value[1024 x 1 x *]] }
0000001127D9F310: {[LSTMoutput1.Wcf Gradient[1024]] [LSTMoutput2.it Value[1024 x 1 x *]] }
0000001127D9F3B0: {[LSTMoutput1.unnamed152 Value[1024 x 1 x *]] }
0000001127D9F450: {[LSTMoutput2.G3 Value[1024 x 1 x *]] }
0000001127D9F4F0: {[LSTMoutput1.b Gradient[4096 x 1]] [LSTMoutput1.dh Gradient[512 x 1 x *]] [LSTMoutput2.unnamed158 Value[1024 x 1 x *]] }
0000001127D9F590: {[LSTMoutput1.G1 Value[1024 x 1 x *]] }
0000001127D9F630: {[LSTMoutput1.Wcfdc Value[1024 x 1 x *]] }
0000001127D9F6D0: {[LSTMoutput1.it Value[1024 x 1 x *]] }
0000001127D9F770: {[LSTMoutput1.output Value[512 x 1 x *]] }
0000001127D9F810: {[LSTMoutput1.unnamed153 Value[1024 x 1 x *]] }
0000001127D9F8B0: {[LSTMoutput1.Wmr Gradient[512 x 1024]] [LSTMoutput2.wxx Value[4096 x 1 x *]] }
0000001127D9F950: {[LSTMoutput1.unnamed150 Gradient[1024 x 1 x *]] [LSTMoutput2.Wcfdc Value[1024 x 1 x *]] }
0000001127D9F9F0: {[LSTMoutput1.ft Value[1024 x 1 x *]] }
0000001127D9FA90: {[LSTMoutput2.unnamed157 Value[1024 x 1 x *]] }
0000001127D9FB30: {[LSTMoutput2.bit Value[1024 x 1 x *]] }
0000001127D9FBD0: {[LSTMoutput2.ct Value[1024 x 1 x *]] }
0000001127D9FC70: {[LSTMoutput2.unnamed160 Value[1024 x 1 x *]] }
0000001127D9FD10: {[LSTMoutput1.G4 Value[1024 x 1 x *]] }
0000001127D9FDB0: {[LSTMoutput1.whh Value[4096 x 1 x *]] }
0000001127D9FE50: {[LSTMoutput1.Wcoct Value[1024 x 1 x *]] }
0000001127D9FEF0: {[LSTMoutput1.whh Gradient[4096 x 1 x *]] [LSTMoutput2.G2 Value[1024 x 1 x *]] }
0000001127D9FF90: {[LSTMoutput2.unnamed161 Value[1024 x 1 x *]] }
0000001127DA0030: {[LSTMoutput2.mt Value[1024 x 1 x *]] }
0000001127DA00D0: {[LSTMoutput1.ot Value[1024 x 1 x *]] }
0000001127DA0170: {[LSTMoutput1.bit Value[1024 x 1 x *]] }
0000001127DA0210: {[LSTMoutput1.ct Gradient[1024 x 1 x *]] [LSTMoutput2.wxxpbpwhh Value[4096 x 1 x *]] }
0000001127DA8460: {[LSTMoutput1.dc Gradient[1024 x 1 x *]] [LSTMoutput2.G1 Gradient[1024 x 1 x *]] [LSTMoutput3.ft Value[1024 x 1 x *]] }
0000001127DA8500: {[LSTMoutput3.output Gradient[512 x 1 x *]] [LSTMoutputW Gradient[132 x 1 x *]] }
0000001127DA85A0: {[LSTMoutput2.ct Gradient[1024 x 1 x *]] [LSTMoutput3.wxxpbpwhh Value[4096 x 1 x *]] }
0000001127DA8640: {[LSTMoutput3.ct Gradient[1024 x 1 x *]] }
0000001127DA86E0: {[LSTMoutput2.Wcoct Gradient[1024 x 1 x *]] [LSTMoutput3.G4 Gradient[1024 x 1 x *]] }
0000001127DA8780: {[LSTMoutput3.mt Value[1024 x 1 x *]] }
0000001127DA8820: {[LSTMoutput3.Wcoct Gradient[1024 x 1 x *]] }
0000001127DA88C0: {[LSTMoutput1.it Gradient[1024 x 1 x *]] [LSTMoutput3.unnamed165 Value[1024 x 1 x *]] }
0000001127DA8B40: {[LSTMoutput1.ft Gradient[1024 x 1 x *]] [LSTMoutput3.bft Gradient[1024 x 1 x *]] }
0000001127DA8BE0: {[LSTMoutput3.bit Gradient[1024 x 1 x *]] }
0000001127DA8C80: {[LSTMoutput1.output Gradient[512 x 1 x *]] [LSTMoutput2.wxxpb Gradient[4096 x 1 x *]] [LSTMoutput3.it Gradient[1024 x 1 x *]] }
0000001127DA8D20: {[LSTMoutput3.unnamed166 Gradient[1024 x 1 x *]] }
0000001127DA8DC0: {[LSTMoutput2.Wh Gradient[4096 x 512]] [LSTMoutput3.G2 Gradient[1024 x 1 x *]] }
0000001127DA8E60: {[b Gradient[132 x 1]] }
0000001127DA8F00: {[LSTMoutput2.unnamed160 Gradient[1024 x 1 x *]] [LSTMoutput3.wxxpbpwhh Gradient[4096 x 1 x *]] }
0000001127DA8FA0: {[LSTMoutputW Value[132 x 1 x *]] [W Gradient[132 x 512]] }
0000001127DA9040: {[LSTMoutput1.bit Gradient[1024 x 1 x *]] [LSTMoutput3.unnamed165 Gradient[1024 x 1 x *]] }
0000001127DA90E0: {[LSTMoutput1.bft Gradient[1024 x 1 x *]] [LSTMoutput2.dc Gradient[1024 x 1 x *]] [LSTMoutput3.G1 Gradient[1024 x 1 x *]] }
0000001127DA9180: {[LSTMoutput3.Wco Gradient[1024]] }
0000001127DA9220: {[LSTMoutput1.Wcoct Gradient[1024 x 1 x *]] [LSTMoutput2.G4 Gradient[1024 x 1 x *]] [LSTMoutput3.G4 Value[1024 x 1 x *]] }
0000001127DA92C0: {[LSTMoutput2.b Gradient[4096 x 1]] [LSTMoutput2.dh Gradient[512 x 1 x *]] [LSTMoutput3.unnamed166 Value[1024 x 1 x *]] }
0000001127DA9360: {[LSTMoutput3.ot Value[1024 x 1 x *]] }
0000001127DA9400: {[LSTMoutput1.G2 Gradient[1024 x 1 x *]] [LSTMoutput2.Wcfdc Gradient[1024 x 1 x *]] [LSTMoutput3.Wcidc Gradient[1024 x 1 x *]] }
0000001127DA94A0: {[LSTMoutput1.unnamed151 Gradient[1024 x 1 x *]] [LSTMoutput3.bft Value[1024 x 1 x *]] }
0000001127DA9540: {[LSTMoutput1.unnamed152 Gradient[1024 x 1 x *]] [LSTMoutput2.wxxpbpwhh Gradient[4096 x 1 x *]] [LSTMoutput3.unnamed167 Value[1024 x 1 x *]] }
0000001127DA95E0: {[LSTMoutput1.unnamed153 Gradient[1024 x 1 x *]] [LSTMoutput2.whh Gradient[4096 x 1 x *]] [LSTMoutput3.G2 Value[1024 x 1 x *]] }
0000001127DA9680: {[ce Gradient[1]] }
0000001127DA9720: {[LSTMoutput3.Wcoct Value[1024 x 1 x *]] }
0000001127DA9860: {[LSTMoutput2.Wcf Gradient[1024]] [LSTMoutput3.it Value[1024 x 1 x *]] }
0000001127DA9900: {[LSTMoutput3.output Value[512 x 1 x *]] }
0000001127DA99A0: {[LSTMoutput3.unnamed169 Gradient[1024 x 1 x *]] }
0000001127DA9A40: {[LSTMoutput3.G3 Value[1024 x 1 x *]] }
0000001127DA9AE0: {[LSTMoutput2.G3 Gradient[1024 x 1 x *]] [LSTMoutput3.Wcidc Value[1024 x 1 x *]] }
0000001127DA9B80: {[LSTMoutput3.unnamed168 Value[1024 x 1 x *]] }
0000001127DA9C20: {[LSTMoutput3.ct Value[1024 x 1 x *]] }
0000001127DA9CC0: {[LSTMoutput3.unnamed169 Value[1024 x 1 x *]] }
0000001127DA9EA0: {[LSTMoutput3.mt Gradient[1024 x 1 x *]] [unnamed174 Gradient[132 x 1 x *]] }
0000001127DA9F40: {[LSTMoutput2.unnamed158 Gradient[1024 x 1 x *]] [LSTMoutput3.Wcfdc Value[1024 x 1 x *]] }
0000001127DA9FE0: {[LSTMoutput2.Wci Gradient[1024]] [LSTMoutput3.G1 Value[1024 x 1 x *]] }
0000001127DAA080: {[LSTMoutput3.bit Value[1024 x 1 x *]] }
0000001127DAA120: {[LSTMoutput3.ot Gradient[1024 x 1 x *]] }
0000001127DAA1C0: {[LSTMoutput3.unnamed168 Gradient[1024 x 1 x *]] }
0000001127DAA260: {[LSTMoutput3.Wmr Gradient[512 x 1024]] [unnamed174 Value[132 x 1 x *]] }
0000001127DAC8F0: {[LSTMoutput2.bft Gradient[1024 x 1 x *]] [LSTMoutput3.dc Gradient[1024 x 1 x *]] }
0000001127DAD250: {[LSTMoutput3.Wci Gradient[1024]] }
0000001127DAD390: {[LSTMoutput1.Wcidc Gradient[1024 x 1 x *]] [LSTMoutput2.ft Gradient[1024 x 1 x *]] }
0000001127DAD750: {[LSTMoutput2.output Gradient[512 x 1 x *]] [LSTMoutput3.wxxpb Gradient[4096 x 1 x *]] }
0000001127DADBB0: {[LSTMoutput1.Wh Gradient[4096 x 512]] [LSTMoutput2.G2 Gradient[1024 x 1 x *]] [LSTMoutput3.Wcfdc Gradient[1024 x 1 x *]] }
0000001127DADC50: {[LSTMoutput1.unnamed149 Gradient[1024 x 1 x *]] [LSTMoutput2.unnamed159 Gradient[1024 x 1 x *]] }
0000001127DAE010: {[LSTMoutput2.unnamed157 Gradient[1024 x 1 x *]] [LSTMoutput3.unnamed167 Gradient[1024 x 1 x *]] }
0000001127DAE0B0: {[LSTMoutput1.wxxpb Gradient[4096 x 1 x *]] [LSTMoutput2.it Gradient[1024 x 1 x *]] }
0000001127DAE150: {[LSTMoutput3.Wh Gradient[4096 x 512]] }
0000001127DAE3D0: {[LSTMoutput2.unnamed161 Gradient[1024 x 1 x *]] [LSTMoutput3.whh Gradient[4096 x 1 x *]] }
0000001127DAE470: {[LSTMoutput1.Wcfdc Gradient[1024 x 1 x *]] [LSTMoutput2.Wcidc Gradient[1024 x 1 x *]] [LSTMoutput3.ft Gradient[1024 x 1 x *]] }
0000001127DAE510: {[LSTMoutput3.G3 Gradient[1024 x 1 x *]] }
0000001127DAE5B0: {[LSTMoutput3.b Gradient[4096 x 1]] [LSTMoutput3.dh Gradient[512 x 1 x *]] }
0000001127DAEA10: {[LSTMoutput3.Wcf Gradient[1024]] }
0000001127DAEAB0: {[LSTMoutput2.bit Gradient[1024 x 1 x *]] }


07/14/2016 05:43:08: Precomputing --> 3 PreCompute nodes found.

07/14/2016 05:43:08: 	featNorm.xMean = Mean()
07/14/2016 05:43:08: 	featNorm.xStdDev = InvStdDev()
07/14/2016 05:43:08: 	logPrior.prior = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/14/2016 05:43:10: Precomputing --> Completed.


07/14/2016 05:43:10: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..64] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

07/14/2016 05:43:10: Starting minibatch loop.
07/14/2016 05:43:12:  Epoch[ 1 of 1]-Minibatch[   1-  10, 250.00%]: ce = 4.87486229 * 160; err = 0.93125000 * 160; time = 1.2780s; samplesPerSecond = 125.2
07/14/2016 05:43:13:  Epoch[ 1 of 1]-Minibatch[  11-  20, 500.00%]: ce = 4.86032641 * 148; err = 0.88513514 * 148; time = 1.1674s; samplesPerSecond = 126.8
07/14/2016 05:43:13: Finished Epoch[ 1 of 1]: [Training] ce = 4.86787751 * 308; err = 0.90909091 * 308; totalSamplesSeen = 308; learningRatePerSample = 0.001953125; epochTime=2.44835s
07/14/2016 05:43:14: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054158.266270\Examples\Speech\AN4_LSTM@release_gpu/Models/cntkSpeechLSTM.dnn'
07/14/2016 05:43:15: CNTKCommandTrainEnd: speechTrain

07/14/2016 05:43:15: Action "train" complete.

07/14/2016 05:43:15: __COMPLETED__