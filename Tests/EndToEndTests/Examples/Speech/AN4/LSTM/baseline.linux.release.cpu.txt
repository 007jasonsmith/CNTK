CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Speech/AN4/LSTM/../../../../../../Examples/Speech/AN4/Config/LSTM-NDL.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data RunDir=/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Speech/AN4/LSTM/../../../../../../Examples/Speech/AN4/Config OutputDir=/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu DeviceId=-1 timestamping=true speechTrain=[SGD=[maxEpochs=1]] speechTrain=[SGD=[epochSize=64]] parallelTrain=false
-------------------------------------------------------------------
Build info: 

		Built time: Jul 13 2016 15:58:36
		Last modified date: Wed Jul 13 15:14:47 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 539ab7467b022b4ffa087721bcf20d18485c8d0d
		Built by philly on adf92da755f9
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data
07/13/2016 16:48:19: -------------------------------------------------------------------
07/13/2016 16:48:19: Build info: 

07/13/2016 16:48:19: 		Built time: Jul 13 2016 15:58:36
07/13/2016 16:48:19: 		Last modified date: Wed Jul 13 15:14:47 2016
07/13/2016 16:48:19: 		Build type: release
07/13/2016 16:48:19: 		Build target: GPU
07/13/2016 16:48:19: 		With 1bit-SGD: yes
07/13/2016 16:48:19: 		Math lib: mkl
07/13/2016 16:48:19: 		CUDA_PATH: /usr/local/cuda-7.5
07/13/2016 16:48:19: 		CUB_PATH: /usr/local/cub-1.4.1
07/13/2016 16:48:19: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/13/2016 16:48:19: 		Build Branch: HEAD
07/13/2016 16:48:19: 		Build SHA1: 539ab7467b022b4ffa087721bcf20d18485c8d0d
07/13/2016 16:48:19: 		Built by philly on adf92da755f9
07/13/2016 16:48:19: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
07/13/2016 16:48:19: -------------------------------------------------------------------
07/13/2016 16:48:20: -------------------------------------------------------------------
07/13/2016 16:48:20: GPU info:

07/13/2016 16:48:20: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 16:48:20: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 16:48:20: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 16:48:20: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 16:48:20: -------------------------------------------------------------------

07/13/2016 16:48:20: Running on localhost at 2016/07/13 16:48:20
07/13/2016 16:48:20: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Speech/AN4/LSTM/../../../../../../Examples/Speech/AN4/Config/LSTM-NDL.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data  RunDir=/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Speech/AN4/LSTM/../../../../../../Examples/Speech/AN4/Config  OutputDir=/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu  DeviceId=-1  timestamping=true  speechTrain=[SGD=[maxEpochs=1]]  speechTrain=[SGD=[epochSize=64]]  parallelTrain=false



07/13/2016 16:48:20: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/13/2016 16:48:20: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
deviceId = -1
command = speechTrain
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/cntkSpeechLSTM.dnn"
parallelTrain = true
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    nbrUttsIneachRecurrentIter = 16
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/lstmp-3layer-opt.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 16
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data
RunDir=/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Speech/AN4/LSTM/../../../../../../Examples/Speech/AN4/Config
OutputDir=/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu
DeviceId=-1
timestamping=true
speechTrain=[SGD=[maxEpochs=1]]
speechTrain=[SGD=[epochSize=64]]
parallelTrain=false

07/13/2016 16:48:20: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/13/2016 16:48:20: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/13/2016 16:48:20: RootDir = ".."
ConfigDir = "../Config"
DataDir = "../Data"
OutputDir = "../Output"
ModelDir = "/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu/Models"
deviceId = -1
command = speechTrain
precision = "float"
traceLevel = 1
modelPath = "/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu/Models/cntkSpeechLSTM.dnn"
parallelTrain = true
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    nbrUttsIneachRecurrentIter = 16
    NDLNetworkBuilder = [
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Speech/AN4/LSTM/../../../../../../Examples/Speech/AN4/Config/lstmp-3layer-opt.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 16
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data/glob_0000.mlf"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data
RunDir=/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Speech/AN4/LSTM/../../../../../../Examples/Speech/AN4/Config
OutputDir=/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu
DeviceId=-1
timestamping=true
speechTrain=[SGD=[maxEpochs=1]]
speechTrain=[SGD=[epochSize=64]]
parallelTrain=false

07/13/2016 16:48:20: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/13/2016 16:48:20: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: LSTM-NDL.cntk:command=speechTrain
configparameters: LSTM-NDL.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Speech/AN4/LSTM/../../../../../../Examples/Speech/AN4/Config
configparameters: LSTM-NDL.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data
configparameters: LSTM-NDL.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data
configparameters: LSTM-NDL.cntk:deviceId=-1
configparameters: LSTM-NDL.cntk:frameMode=false
configparameters: LSTM-NDL.cntk:ModelDir=/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu/Models
configparameters: LSTM-NDL.cntk:modelPath=/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu/Models/cntkSpeechLSTM.dnn
configparameters: LSTM-NDL.cntk:OutputDir=/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu
configparameters: LSTM-NDL.cntk:parallelTrain=false
configparameters: LSTM-NDL.cntk:precision=float
configparameters: LSTM-NDL.cntk:RootDir=..
configparameters: LSTM-NDL.cntk:RunDir=/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu
configparameters: LSTM-NDL.cntk:speechTrain=[
    action = "train"
    nbrUttsIneachRecurrentIter = 16
    NDLNetworkBuilder = [
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Speech/AN4/LSTM/../../../../../../Examples/Speech/AN4/Config/lstmp-3layer-opt.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 16
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data/glob_0000.mlf"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
] [SGD=[maxEpochs=1]] [SGD=[epochSize=64]]

configparameters: LSTM-NDL.cntk:timestamping=true
configparameters: LSTM-NDL.cntk:traceLevel=1
configparameters: LSTM-NDL.cntk:truncated=true
07/13/2016 16:48:20: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/13/2016 16:48:20: Commands: speechTrain
07/13/2016 16:48:20: Precision = "float"
07/13/2016 16:48:20: CNTKModelPath: /tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu/Models/cntkSpeechLSTM.dnn
07/13/2016 16:48:20: CNTKCommandTrainInfo: speechTrain : 1
07/13/2016 16:48:20: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 1

07/13/2016 16:48:20: ##############################################################################
07/13/2016 16:48:20: #                                                                            #
07/13/2016 16:48:20: # Action "train"                                                             #
07/13/2016 16:48:20: #                                                                            #
07/13/2016 16:48:20: ##############################################################################

07/13/2016 16:48:20: CNTKCommandTrainBegin: speechTrain
NDLBuilder Using CPU
reading script file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data/glob_0000.scp ... 948 entries
total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data/state.list
htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Speech/AN4/Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/13/2016 16:48:20: Creating virgin network.

Post-processing network...

6 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	featNorm.xMean = Mean()
	featNorm.xStdDev = InvStdDev()
	logPrior.prior = Mean()
	scaledLogLikelihood = Minus()

Loop[0] --> Loop_LSTMoutput1.output -> 24 nodes

	LSTMoutput1.dh	LSTMoutput1.whh	LSTMoutput1.wxxpbpwhh
	LSTMoutput1.G4	LSTMoutput1.G3	LSTMoutput1.dc
	LSTMoutput1.Wcfdc	LSTMoutput1.unnamed151	LSTMoutput1.ft
	LSTMoutput1.bft	LSTMoutput1.G1	LSTMoutput1.Wcidc
	LSTMoutput1.unnamed149	LSTMoutput1.it	LSTMoutput1.G2
	LSTMoutput1.unnamed150	LSTMoutput1.bit	LSTMoutput1.ct
	LSTMoutput1.Wcoct	LSTMoutput1.unnamed152	LSTMoutput1.ot
	LSTMoutput1.unnamed153	LSTMoutput1.mt	LSTMoutput1.output

Loop[1] --> Loop_LSTMoutput2.output -> 24 nodes

	LSTMoutput2.dh	LSTMoutput2.whh	LSTMoutput2.wxxpbpwhh
	LSTMoutput2.G4	LSTMoutput2.G3	LSTMoutput2.dc
	LSTMoutput2.Wcfdc	LSTMoutput2.unnamed159	LSTMoutput2.ft
	LSTMoutput2.bft	LSTMoutput2.G1	LSTMoutput2.Wcidc
	LSTMoutput2.unnamed157	LSTMoutput2.it	LSTMoutput2.G2
	LSTMoutput2.unnamed158	LSTMoutput2.bit	LSTMoutput2.ct
	LSTMoutput2.Wcoct	LSTMoutput2.unnamed160	LSTMoutput2.ot
	LSTMoutput2.unnamed161	LSTMoutput2.mt	LSTMoutput2.output

Loop[2] --> Loop_LSTMoutput3.output -> 24 nodes

	LSTMoutput3.dh	LSTMoutput3.whh	LSTMoutput3.wxxpbpwhh
	LSTMoutput3.G4	LSTMoutput3.G3	LSTMoutput3.dc
	LSTMoutput3.Wcfdc	LSTMoutput3.unnamed167	LSTMoutput3.ft
	LSTMoutput3.bft	LSTMoutput3.G1	LSTMoutput3.Wcidc
	LSTMoutput3.unnamed165	LSTMoutput3.it	LSTMoutput3.G2
	LSTMoutput3.unnamed166	LSTMoutput3.bit	LSTMoutput3.ct
	LSTMoutput3.Wcoct	LSTMoutput3.unnamed168	LSTMoutput3.ot
	LSTMoutput3.unnamed169	LSTMoutput3.mt	LSTMoutput3.output

Validating network. 113 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W = LearnableParameter() :  -> [132 x 512]
Validating --> LSTMoutput3.Wmr = LearnableParameter() :  -> [512 x 1024]
Validating --> LSTMoutput3.wx = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput2.Wmr = LearnableParameter() :  -> [512 x 1024]
Validating --> LSTMoutput2.wx = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput1.Wmr = LearnableParameter() :  -> [512 x 1024]
Validating --> LSTMoutput1.wx = LearnableParameter() :  -> [4096 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> featNorm.xMean = Mean (features) : [363 x *] -> [363]
Validating --> featNorm.xStdDev = InvStdDev (features) : [363 x *] -> [363]
Validating --> featNorm.xNorm = PerDimMeanVarNormalization (features, featNorm.xMean, featNorm.xStdDev) : [363 x *], [363], [363] -> [363 x *]
Validating --> LSTMoutput1.wxx = Times (LSTMoutput1.wx, featNorm.xNorm) : [4096 x 363], [363 x *] -> [4096 x *]
Validating --> LSTMoutput1.b = LearnableParameter() :  -> [4096 x 1]
Validating --> LSTMoutput1.wxxpb = Plus (LSTMoutput1.wxx, LSTMoutput1.b) : [4096 x *], [4096 x 1] -> [4096 x 1 x *]
Validating --> LSTMoutput1.Wh = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput1.Wco = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput1.Wcf = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput1.Wci = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput1.whh = Times (LSTMoutput1.Wh, LSTMoutput1.dh) : [4096 x 512], [512] -> [4096]
Validating --> LSTMoutput1.wxxpbpwhh = Plus (LSTMoutput1.wxxpb, LSTMoutput1.whh) : [4096 x 1 x *], [4096] -> [4096 x 1 x *]
Validating --> LSTMoutput1.G4 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.G3 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcfdc = DiagTimes (LSTMoutput1.Wcf, LSTMoutput1.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput1.unnamed151 = Plus (LSTMoutput1.G3, LSTMoutput1.Wcfdc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput1.ft = Sigmoid (LSTMoutput1.unnamed151) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.bft = ElementTimes (LSTMoutput1.ft, LSTMoutput1.dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput1.G1 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcidc = DiagTimes (LSTMoutput1.Wci, LSTMoutput1.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput1.unnamed149 = Plus (LSTMoutput1.G1, LSTMoutput1.Wcidc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput1.it = Sigmoid (LSTMoutput1.unnamed149) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.G2 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.unnamed150 = Tanh (LSTMoutput1.G2) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.bit = ElementTimes (LSTMoutput1.it, LSTMoutput1.unnamed150) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.ct = Plus (LSTMoutput1.bft, LSTMoutput1.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcoct = DiagTimes (LSTMoutput1.Wco, LSTMoutput1.ct) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.unnamed152 = Plus (LSTMoutput1.G4, LSTMoutput1.Wcoct) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.ot = Sigmoid (LSTMoutput1.unnamed152) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.unnamed153 = Tanh (LSTMoutput1.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.mt = ElementTimes (LSTMoutput1.ot, LSTMoutput1.unnamed153) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.output = Times (LSTMoutput1.Wmr, LSTMoutput1.mt) : [512 x 1024], [1024 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput2.wxx = Times (LSTMoutput2.wx, LSTMoutput1.output) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput2.b = LearnableParameter() :  -> [4096 x 1]
Validating --> LSTMoutput2.wxxpb = Plus (LSTMoutput2.wxx, LSTMoutput2.b) : [4096 x 1 x *], [4096 x 1] -> [4096 x 1 x *]
Validating --> LSTMoutput2.Wh = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput2.Wco = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput2.Wcf = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput2.Wci = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput2.whh = Times (LSTMoutput2.Wh, LSTMoutput2.dh) : [4096 x 512], [512] -> [4096]
Validating --> LSTMoutput2.wxxpbpwhh = Plus (LSTMoutput2.wxxpb, LSTMoutput2.whh) : [4096 x 1 x *], [4096] -> [4096 x 1 x *]
Validating --> LSTMoutput2.G4 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.G3 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcfdc = DiagTimes (LSTMoutput2.Wcf, LSTMoutput2.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput2.unnamed159 = Plus (LSTMoutput2.G3, LSTMoutput2.Wcfdc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput2.ft = Sigmoid (LSTMoutput2.unnamed159) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.bft = ElementTimes (LSTMoutput2.ft, LSTMoutput2.dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput2.G1 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcidc = DiagTimes (LSTMoutput2.Wci, LSTMoutput2.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput2.unnamed157 = Plus (LSTMoutput2.G1, LSTMoutput2.Wcidc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput2.it = Sigmoid (LSTMoutput2.unnamed157) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.G2 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.unnamed158 = Tanh (LSTMoutput2.G2) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.bit = ElementTimes (LSTMoutput2.it, LSTMoutput2.unnamed158) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.ct = Plus (LSTMoutput2.bft, LSTMoutput2.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcoct = DiagTimes (LSTMoutput2.Wco, LSTMoutput2.ct) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.unnamed160 = Plus (LSTMoutput2.G4, LSTMoutput2.Wcoct) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.ot = Sigmoid (LSTMoutput2.unnamed160) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.unnamed161 = Tanh (LSTMoutput2.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.mt = ElementTimes (LSTMoutput2.ot, LSTMoutput2.unnamed161) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.output = Times (LSTMoutput2.Wmr, LSTMoutput2.mt) : [512 x 1024], [1024 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput3.wxx = Times (LSTMoutput3.wx, LSTMoutput2.output) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput3.b = LearnableParameter() :  -> [4096 x 1]
Validating --> LSTMoutput3.wxxpb = Plus (LSTMoutput3.wxx, LSTMoutput3.b) : [4096 x 1 x *], [4096 x 1] -> [4096 x 1 x *]
Validating --> LSTMoutput3.Wh = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput3.Wco = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput3.Wcf = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput3.Wci = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput3.whh = Times (LSTMoutput3.Wh, LSTMoutput3.dh) : [4096 x 512], [512] -> [4096]
Validating --> LSTMoutput3.wxxpbpwhh = Plus (LSTMoutput3.wxxpb, LSTMoutput3.whh) : [4096 x 1 x *], [4096] -> [4096 x 1 x *]
Validating --> LSTMoutput3.G4 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.G3 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcfdc = DiagTimes (LSTMoutput3.Wcf, LSTMoutput3.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput3.unnamed167 = Plus (LSTMoutput3.G3, LSTMoutput3.Wcfdc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput3.ft = Sigmoid (LSTMoutput3.unnamed167) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.bft = ElementTimes (LSTMoutput3.ft, LSTMoutput3.dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput3.G1 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcidc = DiagTimes (LSTMoutput3.Wci, LSTMoutput3.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput3.unnamed165 = Plus (LSTMoutput3.G1, LSTMoutput3.Wcidc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput3.it = Sigmoid (LSTMoutput3.unnamed165) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.G2 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.unnamed166 = Tanh (LSTMoutput3.G2) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.bit = ElementTimes (LSTMoutput3.it, LSTMoutput3.unnamed166) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.ct = Plus (LSTMoutput3.bft, LSTMoutput3.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcoct = DiagTimes (LSTMoutput3.Wco, LSTMoutput3.ct) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.unnamed168 = Plus (LSTMoutput3.G4, LSTMoutput3.Wcoct) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.ot = Sigmoid (LSTMoutput3.unnamed168) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.unnamed169 = Tanh (LSTMoutput3.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.mt = ElementTimes (LSTMoutput3.ot, LSTMoutput3.unnamed169) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.output = Times (LSTMoutput3.Wmr, LSTMoutput3.mt) : [512 x 1024], [1024 x 1 x *] -> [512 x 1 x *]
Validating --> unnamed174 = Times (W, LSTMoutput3.output) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> b = LearnableParameter() :  -> [132 x 1]
Validating --> LSTMoutputW = Plus (unnamed174, b) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]
Validating --> logPrior.prior = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior.logPrior = Log (logPrior.prior) : [132] -> [132]
Validating --> scaledLogLikelihood = Minus (LSTMoutputW, logPrior.logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 88 nodes to process in pass 2.

Validating --> LSTMoutput1.dh = PastValue (LSTMoutput1.output) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput1.whh = Times (LSTMoutput1.Wh, LSTMoutput1.dh) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput1.dc = PastValue (LSTMoutput1.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcfdc = DiagTimes (LSTMoutput1.Wcf, LSTMoutput1.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcidc = DiagTimes (LSTMoutput1.Wci, LSTMoutput1.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.dh = PastValue (LSTMoutput2.output) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput2.whh = Times (LSTMoutput2.Wh, LSTMoutput2.dh) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput2.dc = PastValue (LSTMoutput2.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcfdc = DiagTimes (LSTMoutput2.Wcf, LSTMoutput2.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcidc = DiagTimes (LSTMoutput2.Wci, LSTMoutput2.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.dh = PastValue (LSTMoutput3.output) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput3.whh = Times (LSTMoutput3.Wh, LSTMoutput3.dh) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput3.dc = PastValue (LSTMoutput3.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcfdc = DiagTimes (LSTMoutput3.Wcf, LSTMoutput3.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcidc = DiagTimes (LSTMoutput3.Wci, LSTMoutput3.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]

Validating network. 15 nodes to process in pass 3.


Validating network, final pass.



29 out of 113 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/13/2016 16:48:21: Created model with 113 nodes on CPU.

07/13/2016 16:48:21: Training criterion node(s):
07/13/2016 16:48:21: 	ce = CrossEntropyWithSoftmax

07/13/2016 16:48:21: Evaluation criterion node(s):

07/13/2016 16:48:21: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[err Gradient[1]] [featNorm.xMean Gradient[363]] [featNorm.xNorm Gradient[363 x *]] [featNorm.xStdDev Gradient[363]] [features Gradient[363 x *]] [labels Gradient[132 x *]] [logPrior.logPrior Gradient[132]] [logPrior.prior Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
0x7fb4d65e3778: {[labels Value[132 x *]] }
0x7fb4d6706fa8: {[err Value[1]] }
0x7fb4d6707108: {[scaledLogLikelihood Value[132 x 1 x *]] }
0x7fb4d671d048: {[featNorm.xStdDev Value[363]] }
0x7fb4d671d878: {[LSTMoutput1.wx Value[4096 x 363]] }
0x7fb4d671deb8: {[LSTMoutput1.b Value[4096 x 1]] }
0x7fb4d6729c08: {[LSTMoutput1.Wh Value[4096 x 512]] }
0x7fb4d672a0a8: {[LSTMoutput1.Wci Value[1024]] }
0x7fb4d677f718: {[LSTMoutput2.Wcf Value[1024]] }
0x7fb4d677fc08: {[LSTMoutput2.Wco Value[1024]] }
0x7fb4d67c6798: {[LSTMoutput1.wxx Value[4096 x *]] }
0x7fb4d67c7048: {[featNorm.xNorm Value[363 x *]] }
0x7fb4d67c7118: {[LSTMoutput1.whh Value[4096 x 1 x *]] }
0x7fb4d67c7278: {[LSTMoutput1.wxxpbpwhh Value[4096 x 1 x *]] }
0x7fb4d67c7438: {[LSTMoutput1.G4 Value[1024 x 1 x *]] }
0x7fb4d67c75f8: {[LSTMoutput1.G3 Value[1024 x 1 x *]] }
0x7fb4d67c7bd8: {[LSTMoutput1.Wcfdc Value[1024 x 1 x *]] }
0x7fb4d67c7d98: {[LSTMoutput1.unnamed151 Value[1024 x 1 x *]] }
0x7fb4d67c7f58: {[LSTMoutput1.ft Value[1024 x 1 x *]] }
0x7fb4d67c8118: {[LSTMoutput1.bft Value[1024 x 1 x *]] }
0x7fb4d67dfc28: {[LSTMoutput1.Wcf Value[1024]] }
0x7fb4d67e00c8: {[LSTMoutput1.Wco Value[1024]] }
0x7fb4d67e0578: {[LSTMoutput1.dh Value[512 x 1 x *]] [LSTMoutput1.wxx Gradient[4096 x *]] }
0x7fb4d67e09d8: {[LSTMoutput3.Wci Value[1024]] }
0x7fb4d67e1e78: {[LSTMoutput3.Wcf Value[1024]] }
0x7fb4d67e2368: {[LSTMoutput3.Wco Value[1024]] }
0x7fb4d67e25e8: {[LSTMoutput2.mt Gradient[1024 x 1 x *]] [LSTMoutput3.dh Value[512 x 1 x *]] [LSTMoutput3.wxx Gradient[4096 x 1 x *]] }
0x7fb4d67e2a88: {[LSTMoutput2.Wco Gradient[1024]] [LSTMoutput3.dc Value[1024 x 1 x *]] }
0x7fb4d67e4178: {[LSTMoutput1.Wmr Value[512 x 1024]] }
0x7fb4d67e4938: {[LSTMoutput2.wx Value[4096 x 512]] }
0x7fb4d67e4d78: {[LSTMoutput2.b Value[4096 x 1]] }
0x7fb4d67e51a8: {[LSTMoutput2.Wh Value[4096 x 512]] }
0x7fb4d67e5438: {[LSTMoutput2.Wci Value[1024]] }
0x7fb4d67f4bd8: {[logPrior.logPrior Value[132]] }
0x7fb4d67f5f48: {[LSTMoutput3.ot Gradient[1024 x 1 x *]] }
0x7fb4d67f6108: {[LSTMoutput3.unnamed169 Gradient[1024 x 1 x *]] }
0x7fb4d67f62c8: {[LSTMoutput3.ct Gradient[1024 x 1 x *]] }
0x7fb4d67f6488: {[LSTMoutput3.unnamed168 Gradient[1024 x 1 x *]] }
0x7fb4d67f6648: {[LSTMoutput2.Wcoct Gradient[1024 x 1 x *]] [LSTMoutput3.G4 Gradient[1024 x 1 x *]] }
0x7fb4d67f6808: {[LSTMoutput3.Wcoct Gradient[1024 x 1 x *]] }
0x7fb4d67f6d48: {[LSTMoutput3.Wco Gradient[1024]] }
0x7fb4d67f6f08: {[LSTMoutput1.ft Gradient[1024 x 1 x *]] [LSTMoutput3.bft Gradient[1024 x 1 x *]] }
0x7fb4d67f70c8: {[LSTMoutput3.bit Gradient[1024 x 1 x *]] }
0x7fb4d67f7288: {[LSTMoutput1.output Gradient[512 x 1 x *]] [LSTMoutput2.wxxpb Gradient[4096 x 1 x *]] [LSTMoutput3.it Gradient[1024 x 1 x *]] }
0x7fb4d67f7448: {[LSTMoutput3.unnamed166 Gradient[1024 x 1 x *]] }
0x7fb4d67f7608: {[LSTMoutput2.Wh Gradient[4096 x 512]] [LSTMoutput3.G2 Gradient[1024 x 1 x *]] }
0x7fb4d67f77c8: {[LSTMoutput2.unnamed160 Gradient[1024 x 1 x *]] [LSTMoutput3.wxxpbpwhh Gradient[4096 x 1 x *]] }
0x7fb4d67f7988: {[LSTMoutput1.bit Gradient[1024 x 1 x *]] [LSTMoutput3.unnamed165 Gradient[1024 x 1 x *]] }
0x7fb4d67f7b48: {[LSTMoutput1.bft Gradient[1024 x 1 x *]] [LSTMoutput2.dc Gradient[1024 x 1 x *]] [LSTMoutput3.G1 Gradient[1024 x 1 x *]] }
0x7fb4d67f7d08: {[LSTMoutput1.G2 Gradient[1024 x 1 x *]] [LSTMoutput2.Wcfdc Gradient[1024 x 1 x *]] [LSTMoutput3.Wcidc Gradient[1024 x 1 x *]] }
0x7fb4d67f7ec8: {[LSTMoutput1.unnamed149 Gradient[1024 x 1 x *]] [LSTMoutput2.unnamed159 Gradient[1024 x 1 x *]] }
0x7fb4d67f8088: {[LSTMoutput1.Wcidc Gradient[1024 x 1 x *]] [LSTMoutput2.ft Gradient[1024 x 1 x *]] }
0x7fb4d67f8248: {[LSTMoutput3.Wci Gradient[1024]] }
0x7fb4d67f8408: {[LSTMoutput2.bft Gradient[1024 x 1 x *]] [LSTMoutput3.dc Gradient[1024 x 1 x *]] }
0x7fb4d67f85c8: {[LSTMoutput1.Wcfdc Gradient[1024 x 1 x *]] [LSTMoutput2.Wcidc Gradient[1024 x 1 x *]] [LSTMoutput3.ft Gradient[1024 x 1 x *]] }
0x7fb4d67f8788: {[LSTMoutput2.unnamed157 Gradient[1024 x 1 x *]] [LSTMoutput3.unnamed167 Gradient[1024 x 1 x *]] }
0x7fb4d67f8948: {[LSTMoutput3.G3 Gradient[1024 x 1 x *]] }
0x7fb4d67f8b08: {[LSTMoutput1.Wh Gradient[4096 x 512]] [LSTMoutput2.G2 Gradient[1024 x 1 x *]] [LSTMoutput3.Wcfdc Gradient[1024 x 1 x *]] }
0x7fb4d67f8cc8: {[LSTMoutput1.wxxpb Gradient[4096 x 1 x *]] [LSTMoutput2.it Gradient[1024 x 1 x *]] }
0x7fb4d67f8e88: {[LSTMoutput2.bit Gradient[1024 x 1 x *]] }
0x7fb4d67fa018: {[LSTMoutput3.Wcf Gradient[1024]] }
0x7fb4d67fa1d8: {[LSTMoutput2.output Gradient[512 x 1 x *]] [LSTMoutput3.wxxpb Gradient[4096 x 1 x *]] }
0x7fb4d67fa398: {[LSTMoutput2.unnamed161 Gradient[1024 x 1 x *]] [LSTMoutput3.whh Gradient[4096 x 1 x *]] }
0x7fb4d67fa558: {[LSTMoutput3.Wh Gradient[4096 x 512]] }
0x7fb4d67fa718: {[LSTMoutput3.b Gradient[4096 x 1]] [LSTMoutput3.dh Gradient[512 x 1 x *]] }
0x7fb4d67fece8: {[features Value[363 x *]] }
0x7fb4d69f70a8: {[LSTMoutput1.G1 Value[1024 x 1 x *]] }
0x7fb4d69f7268: {[LSTMoutput1.Wcidc Value[1024 x 1 x *]] }
0x7fb4d69f7428: {[LSTMoutput1.unnamed149 Value[1024 x 1 x *]] }
0x7fb4d69f75e8: {[LSTMoutput1.it Value[1024 x 1 x *]] }
0x7fb4d69f77a8: {[LSTMoutput1.G2 Value[1024 x 1 x *]] }
0x7fb4d69f7968: {[LSTMoutput1.unnamed150 Value[1024 x 1 x *]] }
0x7fb4d69f7b28: {[LSTMoutput1.bit Value[1024 x 1 x *]] }
0x7fb4d69f7ce8: {[LSTMoutput1.ct Value[1024 x 1 x *]] }
0x7fb4d69f7ea8: {[LSTMoutput1.Wcoct Value[1024 x 1 x *]] }
0x7fb4d69f8068: {[LSTMoutput1.unnamed152 Value[1024 x 1 x *]] }
0x7fb4d69f8228: {[LSTMoutput1.ot Value[1024 x 1 x *]] }
0x7fb4d69f83e8: {[LSTMoutput1.unnamed153 Value[1024 x 1 x *]] }
0x7fb4d69f85a8: {[LSTMoutput1.mt Value[1024 x 1 x *]] }
0x7fb4d69f8768: {[LSTMoutput1.output Value[512 x 1 x *]] }
0x7fb4d69f8928: {[LSTMoutput1.Wmr Gradient[512 x 1024]] [LSTMoutput2.wxx Value[4096 x 1 x *]] }
0x7fb4d69f8ae8: {[LSTMoutput2.wx Gradient[4096 x 512]] [LSTMoutput2.wxxpb Value[4096 x 1 x *]] }
0x7fb4d69f8ca8: {[LSTMoutput1.ot Gradient[1024 x 1 x *]] [LSTMoutput2.whh Value[4096 x 1 x *]] }
0x7fb4d69f8e68: {[LSTMoutput1.ct Gradient[1024 x 1 x *]] [LSTMoutput2.wxxpbpwhh Value[4096 x 1 x *]] }
0x7fb4d69f9028: {[LSTMoutput1.G4 Gradient[1024 x 1 x *]] [LSTMoutput2.G4 Value[1024 x 1 x *]] }
0x7fb4d69f91e8: {[LSTMoutput2.G3 Value[1024 x 1 x *]] }
0x7fb4da50a7d8: {[LSTMoutput1.mt Gradient[1024 x 1 x *]] [LSTMoutput2.dh Value[512 x 1 x *]] [LSTMoutput2.wxx Gradient[4096 x 1 x *]] }
0x7fb4da50af28: {[LSTMoutput1.Wco Gradient[1024]] [LSTMoutput2.dc Value[1024 x 1 x *]] }
0x7fb4da51a5a8: {[LSTMoutput1.wx Gradient[4096 x 363]] [LSTMoutput1.wxxpb Value[4096 x 1 x *]] }
0x7fb4da51df38: {[ce Value[1]] }
0x7fb4da51f9f8: {[LSTMoutput1.dc Gradient[1024 x 1 x *]] [LSTMoutput2.G1 Gradient[1024 x 1 x *]] [LSTMoutput3.ft Value[1024 x 1 x *]] }
0x7fb4da51fb58: {[LSTMoutput1.unnamed151 Gradient[1024 x 1 x *]] [LSTMoutput3.bft Value[1024 x 1 x *]] }
0x7fb4da51fd18: {[LSTMoutput2.Wci Gradient[1024]] [LSTMoutput3.G1 Value[1024 x 1 x *]] }
0x7fb4da51fed8: {[LSTMoutput2.G3 Gradient[1024 x 1 x *]] [LSTMoutput3.Wcidc Value[1024 x 1 x *]] }
0x7fb4da520098: {[LSTMoutput1.it Gradient[1024 x 1 x *]] [LSTMoutput3.unnamed165 Value[1024 x 1 x *]] }
0x7fb4da520258: {[LSTMoutput2.Wcf Gradient[1024]] [LSTMoutput3.it Value[1024 x 1 x *]] }
0x7fb4da520418: {[LSTMoutput1.unnamed153 Gradient[1024 x 1 x *]] [LSTMoutput2.whh Gradient[4096 x 1 x *]] [LSTMoutput3.G2 Value[1024 x 1 x *]] }
0x7fb4da5205d8: {[LSTMoutput2.b Gradient[4096 x 1]] [LSTMoutput2.dh Gradient[512 x 1 x *]] [LSTMoutput3.unnamed166 Value[1024 x 1 x *]] }
0x7fb4da520798: {[LSTMoutput3.bit Value[1024 x 1 x *]] }
0x7fb4da520958: {[LSTMoutput3.ct Value[1024 x 1 x *]] }
0x7fb4da520b18: {[LSTMoutput3.Wcoct Value[1024 x 1 x *]] }
0x7fb4da520cd8: {[LSTMoutput3.unnamed168 Value[1024 x 1 x *]] }
0x7fb4da520e98: {[LSTMoutput3.ot Value[1024 x 1 x *]] }
0x7fb4da521058: {[LSTMoutput3.unnamed169 Value[1024 x 1 x *]] }
0x7fb4da521218: {[LSTMoutput3.mt Value[1024 x 1 x *]] }
0x7fb4da5213d8: {[LSTMoutput3.output Value[512 x 1 x *]] }
0x7fb4da521598: {[LSTMoutput3.Wmr Gradient[512 x 1024]] [unnamed174 Value[132 x 1 x *]] }
0x7fb4da521758: {[LSTMoutputW Value[132 x 1 x *]] [W Gradient[132 x 512]] }
0x7fb4da522238: {[ce Gradient[1]] }
0x7fb4da5223f8: {[LSTMoutput3.output Gradient[512 x 1 x *]] [LSTMoutputW Gradient[132 x 1 x *]] }
0x7fb4da5225b8: {[LSTMoutput3.mt Gradient[1024 x 1 x *]] [unnamed174 Gradient[132 x 1 x *]] }
0x7fb4da522778: {[b Gradient[132 x 1]] }
0x7fb4da5df5a8: {[LSTMoutput2.Wmr Value[512 x 1024]] }
0x7fb4da5dfd98: {[LSTMoutput3.wx Value[4096 x 512]] }
0x7fb4da5e01d8: {[LSTMoutput3.b Value[4096 x 1]] }
0x7fb4da5e0598: {[LSTMoutput3.Wh Value[4096 x 512]] }
0x7fb4da5e0b48: {[featNorm.xMean Value[363]] }
0x7fb4da5f4a88: {[LSTMoutput3.Wmr Value[512 x 1024]] }
0x7fb4da5f5198: {[W Value[132 x 512]] }
0x7fb4da5f55b8: {[b Value[132 x 1]] }
0x7fb4da5f6118: {[logPrior.prior Value[132]] }
0x7fb4da5f84e8: {[LSTMoutput1.dc Value[1024 x 1 x *]] }
0x7fb4da5faa58: {[LSTMoutput1.unnamed150 Gradient[1024 x 1 x *]] [LSTMoutput2.Wcfdc Value[1024 x 1 x *]] }
0x7fb4da5fac18: {[LSTMoutput1.wxxpbpwhh Gradient[4096 x 1 x *]] [LSTMoutput2.unnamed159 Value[1024 x 1 x *]] }
0x7fb4da5fadd8: {[LSTMoutput1.G1 Gradient[1024 x 1 x *]] [LSTMoutput2.ft Value[1024 x 1 x *]] }
0x7fb4da5faf98: {[LSTMoutput2.bft Value[1024 x 1 x *]] }
0x7fb4da5fb158: {[LSTMoutput1.Wci Gradient[1024]] [LSTMoutput2.G1 Value[1024 x 1 x *]] }
0x7fb4da5fb318: {[LSTMoutput1.G3 Gradient[1024 x 1 x *]] [LSTMoutput2.Wcidc Value[1024 x 1 x *]] }
0x7fb4da5fb4d8: {[LSTMoutput2.unnamed157 Value[1024 x 1 x *]] }
0x7fb4da5fb698: {[LSTMoutput1.Wcf Gradient[1024]] [LSTMoutput2.it Value[1024 x 1 x *]] }
0x7fb4da5fb858: {[LSTMoutput1.whh Gradient[4096 x 1 x *]] [LSTMoutput2.G2 Value[1024 x 1 x *]] }
0x7fb4da5fba18: {[LSTMoutput1.b Gradient[4096 x 1]] [LSTMoutput1.dh Gradient[512 x 1 x *]] [LSTMoutput2.unnamed158 Value[1024 x 1 x *]] }
0x7fb4da5fbbd8: {[LSTMoutput2.bit Value[1024 x 1 x *]] }
0x7fb4da5fbd98: {[LSTMoutput2.ct Value[1024 x 1 x *]] }
0x7fb4da5fbf58: {[LSTMoutput2.Wcoct Value[1024 x 1 x *]] }
0x7fb4da5fc118: {[LSTMoutput2.unnamed160 Value[1024 x 1 x *]] }
0x7fb4da5fc2d8: {[LSTMoutput2.ot Value[1024 x 1 x *]] }
0x7fb4da5fc498: {[LSTMoutput2.unnamed161 Value[1024 x 1 x *]] }
0x7fb4da5fc658: {[LSTMoutput2.mt Value[1024 x 1 x *]] }
0x7fb4da5fc818: {[LSTMoutput2.output Value[512 x 1 x *]] }
0x7fb4da5fc9d8: {[LSTMoutput2.Wmr Gradient[512 x 1024]] [LSTMoutput3.wxx Value[4096 x 1 x *]] }
0x7fb4da5fcb98: {[LSTMoutput3.wx Gradient[4096 x 512]] [LSTMoutput3.wxxpb Value[4096 x 1 x *]] }
0x7fb4da5fcd58: {[LSTMoutput2.ot Gradient[1024 x 1 x *]] [LSTMoutput3.whh Value[4096 x 1 x *]] }
0x7fb4da5fcf18: {[LSTMoutput2.ct Gradient[1024 x 1 x *]] [LSTMoutput3.wxxpbpwhh Value[4096 x 1 x *]] }
0x7fb4da5fd0d8: {[LSTMoutput1.Wcoct Gradient[1024 x 1 x *]] [LSTMoutput2.G4 Gradient[1024 x 1 x *]] [LSTMoutput3.G4 Value[1024 x 1 x *]] }
0x7fb4da5fd298: {[LSTMoutput3.G3 Value[1024 x 1 x *]] }
0x7fb4da5fd458: {[LSTMoutput2.unnamed158 Gradient[1024 x 1 x *]] [LSTMoutput3.Wcfdc Value[1024 x 1 x *]] }
0x7fb4da5fd618: {[LSTMoutput1.unnamed152 Gradient[1024 x 1 x *]] [LSTMoutput2.wxxpbpwhh Gradient[4096 x 1 x *]] [LSTMoutput3.unnamed167 Value[1024 x 1 x *]] }


07/13/2016 16:48:21: Precomputing --> 3 PreCompute nodes found.

07/13/2016 16:48:21: 	featNorm.xMean = Mean()
07/13/2016 16:48:21: 	featNorm.xStdDev = InvStdDev()
07/13/2016 16:48:21: 	logPrior.prior = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/13/2016 16:48:22: Precomputing --> Completed.


07/13/2016 16:48:23: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..64] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

07/13/2016 16:48:23: Starting minibatch loop.
07/13/2016 16:48:26:  Epoch[ 1 of 1]-Minibatch[   1-  10, 250.00%]: ce = 4.85914192 * 160; err = 0.76875000 * 160; time = 3.5169s; samplesPerSecond = 45.5
07/13/2016 16:48:29:  Epoch[ 1 of 1]-Minibatch[  11-  20, 500.00%]: ce = 4.87872353 * 160; err = 0.99375000 * 160; time = 3.0930s; samplesPerSecond = 51.7
07/13/2016 16:48:30: Finished Epoch[ 1 of 1]: [Training] ce = 4.86608992 * 348; err = 0.89080460 * 348; totalSamplesSeen = 348; learningRatePerSample = 0.001953125; epochTime=7.17867s
07/13/2016 16:48:30: SGD: Saving checkpoint model '/tmp/cntk-test-20160713164803.281225/Examples/Speech/AN4_LSTM@release_cpu/Models/cntkSpeechLSTM.dnn'
07/13/2016 16:48:31: CNTKCommandTrainEnd: speechTrain

07/13/2016 16:48:31: Action "train" complete.

07/13/2016 16:48:31: __COMPLETED__