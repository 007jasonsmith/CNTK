CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264173120 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Text/PennTreebank/RNN/../../../../../../Examples/Text/PennTreebank/Config/rnn.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data RunDir=/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Text/PennTreebank/RNN/../../../../../../Examples/Text/PennTreebank/Config OutputDir=/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu DeviceId=0 timestamping=true initOnCPUOnly=true command=writeWordAndClassInfo:train:test train=[SGD=[maxEpochs=3]] train=[epochSize=2048]] test=[SGD=[maxEpochs=3]] train=[epochSize=2048]]
-------------------------------------------------------------------
Build info: 

		Built time: Jul 13 2016 12:01:30
		Last modified date: Tue Jul 12 04:28:35 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 50bb4c8afbc87c14548a5b5f315a064186a5cb5f
		Built by philly on 2bc22072e267
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data
07/13/2016 13:12:53: -------------------------------------------------------------------
07/13/2016 13:12:53: Build info: 

07/13/2016 13:12:53: 		Built time: Jul 13 2016 12:01:30
07/13/2016 13:12:53: 		Last modified date: Tue Jul 12 04:28:35 2016
07/13/2016 13:12:53: 		Build type: release
07/13/2016 13:12:53: 		Build target: GPU
07/13/2016 13:12:53: 		With 1bit-SGD: no
07/13/2016 13:12:53: 		Math lib: mkl
07/13/2016 13:12:53: 		CUDA_PATH: /usr/local/cuda-7.5
07/13/2016 13:12:53: 		CUB_PATH: /usr/local/cub-1.4.1
07/13/2016 13:12:53: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/13/2016 13:12:53: 		Build Branch: HEAD
07/13/2016 13:12:53: 		Build SHA1: 50bb4c8afbc87c14548a5b5f315a064186a5cb5f
07/13/2016 13:12:53: 		Built by philly on 2bc22072e267
07/13/2016 13:12:53: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
07/13/2016 13:12:53: -------------------------------------------------------------------
07/13/2016 13:12:54: -------------------------------------------------------------------
07/13/2016 13:12:54: GPU info:

07/13/2016 13:12:54: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 13:12:54: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 13:12:54: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 13:12:54: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 13:12:54: -------------------------------------------------------------------

07/13/2016 13:12:54: Running on localhost at 2016/07/13 13:12:54
07/13/2016 13:12:54: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Text/PennTreebank/RNN/../../../../../../Examples/Text/PennTreebank/Config/rnn.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data  RunDir=/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Text/PennTreebank/RNN/../../../../../../Examples/Text/PennTreebank/Config  OutputDir=/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu  DeviceId=0  timestamping=true  initOnCPUOnly=true  command=writeWordAndClassInfo:train:test  train=[SGD=[maxEpochs=3]]  train=[epochSize=2048]]  test=[SGD=[maxEpochs=3]]  train=[epochSize=2048]]



07/13/2016 13:12:54: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/13/2016 13:12:54: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = "auto"
command = writeWordAndClassInfo:train:test:write
precision  = "float"
traceLevel = 1
modelPath  = "$ModelDir$/rnn.dnn"
numCPUThreads = 1
confVocabSize = 10000
confClassSize = 50
trainFile = "ptb.train.txt"
validFile = "ptb.valid.txt"
testFile  = "ptb.test.txt"
writeWordAndClassInfo = [
    action = "writeWordAndClass"
    inputFile = "$DataDir$/$trainFile$"
    beginSequence = "</s>"
    endSequence   = "</s>"
    outputVocabFile = "$ModelDir$/vocab.txt"
    outputWord2Cls  = "$ModelDir$/word2cls.txt"
    outputCls2Index = "$ModelDir$/cls2idx.txt"
    vocabSize = "$confVocabSize$"
    nbrClass = "$confClassSize$"
    cutoff = 0
    printValues = true
]
train = [
    action = "train"
    traceLevel = 1
epochSize = 0               
    SimpleNetworkBuilder = [
rnnType = "CLASSLSTM"   
recurrentLayer = 1      
        trainingCriterion = "classCrossEntropyWithSoftmax"
        evalCriterion     = "classCrossEntropyWithSoftmax"
        initValueScale = 6.0
        uniformInit = true
        layerSizes = "$confVocabSize$:150:200:10000"
defaultHiddenActivity = 0.1 
        addPrior = false
        addDropoutNodes = false
        applyMeanVarNorm = false
lookupTableOrder = 1        
        vocabSize = "$confVocabSize$"
        nbrClass  = "$confClassSize$"
    ]
    SGD = [
        minibatchSize = 128:256:512
        learningRatesPerSample = 0.1
        momentumPerMB = 0
        gradientClippingWithTruncation = true
        clippingThresholdPerSample = 15.0
        maxEpochs = 16
        numMBsToShowResult = 100
        gradUpdateType = "none"
        loadBestModel = true
        dropoutRate = 0.0
        AutoAdjust = [
            autoAdjustLR = "adjustAfterEpoch"
            reduceLearnRateIfImproveLessThan = 0.001
            continueReduce = false
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            numMiniBatch4LRSearch = 100
            numPrevLearnRates = 5
            numBestSearchEpoch = 1
        ]
    ]
    reader = [
        readerType = "LMSequenceReader"
randomize = "none"              
nbruttsineachrecurrentiter = 0  
cacheBlockSize = 2000000        
        wordclass = "$ModelDir$/vocab.txt"
        wfile = "$OutputDir$/sequenceSentence.bin"
        wsize = 256
        wrecords = 1000
        windowSize = "$confVocabSize$"
        file = "$DataDir$/$trainFile$"
        features = [
            dim = 0
            sectionType = "data"
        ]
        labelIn = [
            dim = 1
            labelType = "Category"
            beginSequence = "</s>"
            endSequence = "</s>"
            labelDim = "$confVocabSize$"
            labelMappingFile = "$OutputDir$/sentenceLabels.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 11                
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 11
                sectionType = "categoryLabels"
            ]
        ]
        labels = [
            dim = 1
            labelType = "NextWord"
            beginSequence = "O"
            endSequence = "O"
            labelDim = "$confVocabSize$"
            labelMappingFile = "$OutputDir$/sentenceLabels.out.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 3
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 3
                sectionType = categoryLabels
            ]
        ]
    ]
    cvReader = [
        readerType = "LMSequenceReader"
        randomize = "none"
nbruttsineachrecurrentiter = 0  
cacheBlockSize = 2000000        
        wordclass = "$ModelDir$/vocab.txt"
        wfile = "$OutputDir$/sequenceSentence.valid.bin"
        wsize = 256
        wrecords = 1000
        windowSize = "$confVocabSize$"
        file = "$DataDir$/$validFile$"
        features = [
            dim = 0
            sectionType = "data"
        ]
        labelIn = [
            dim = 1
            labelDim = "$confVocabSize$"
            labelMappingFile = "$OutputDir$/sentenceLabels.out.txt"
            labelType = "Category"
            beginSequence = "</s>"
            endSequence = "</s>"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 11
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 11
                sectionType = "categoryLabels"
            ]
        ]
        labels = [
            dim = 1
            labelType = "NextWord"
            beginSequence = "O"
            endSequence = "O"
            labelDim = "$confVocabSize$"
            labelMappingFile = "$OutputDir$/sentenceLabels.out.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 3
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 3
                sectionType = "categoryLabels"
            ]
        ]
    ]
]
test = [
    action = "eval"
minibatchSize = 8192                
    traceLevel = 1
    epochSize = 0
    reader = [
        readerType = "LMSequenceReader"
        randomize = "none"
nbruttsineachrecurrentiter = 0  
cacheBlockSize = 2000000        
        wordclass = "$ModelDir$/vocab.txt"
        wfile = "$OutputDir$/sequenceSentence.bin"
        wsize = 256
        wrecords = 1000
        windowSize = "$confVocabSize$"
        file = "$DataDir$/$testFile$"
        features = [
            dim = 0
            sectionType = "data"
        ]
        labelIn = [
            dim = 1
            labelDim = "$confVocabSize$"
            labelMappingFile = "$OutputDir$/sentenceLabels.txt"
            labelType = "Category"
            beginSequence = "</s>"
            endSequence = "</s>"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 11
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 11
                sectionType = "categoryLabels"
            ]
        ]
        labels = [
            dim = 1
            labelType = "NextWord"
            beginSequence = "O"
            endSequence = "O"
            labelDim = "$confVocabSize$"
            labelMappingFile = "$OutputDir$/sentenceLabels.out.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 3
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 3
                sectionType = "categoryLabels"
            ]
        ]
    ]
]
write = [
    action = "write"
    outputPath = "$OutputDir$/Write"
outputNodeNames = TrainNodeClassBasedCrossEntropy 
    format = [
sequencePrologue = "log P(W)="    
        type = "real"
    ]
minibatchSize = 8192                
    traceLevel = 1
    epochSize = 0
    reader = [
        readerType = "LMSequenceReader"
randomize = "none"              
nbruttsineachrecurrentiter = 1  
cacheBlockSize = 1              
        wordclass = "$ModelDir$/vocab.txt"
        wfile = "$OutputDir$/sequenceSentence.bin"
        wsize = 256
        wrecords = 1000
        windowSize = "$confVocabSize$"
        file = "$DataDir$/$testFile$"
        features = [
            dim = 0
            sectionType = "data"
        ]
        labelIn = [
            dim = 1
            labelDim = "$confVocabSize$"
            labelMappingFile = "$OutputDir$/sentenceLabels.txt"
            labelType = "Category"
            beginSequence = "</s>"
            endSequence = "</s>"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 11
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 11
                sectionType = "categoryLabels"
            ]
        ]
        labels = [
            dim = 1
            labelType = "NextWord"
            beginSequence = "O"
            endSequence = "O"
            labelDim = "$confVocabSize$"
            labelMappingFile = "$OutputDir$/sentenceLabels.out.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 3
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 3
                sectionType = "categoryLabels"
            ]
        ]
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data
RunDir=/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Text/PennTreebank/RNN/../../../../../../Examples/Text/PennTreebank/Config
OutputDir=/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu
DeviceId=0
timestamping=true
initOnCPUOnly=true
command=writeWordAndClassInfo:train:test
train=[SGD=[maxEpochs=3]]
train=[epochSize=2048]]
test=[SGD=[maxEpochs=3]]
train=[epochSize=2048]]

07/13/2016 13:12:54: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/13/2016 13:12:54: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/13/2016 13:12:54: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models"
deviceId = "auto"
command = writeWordAndClassInfo:train:test:write
precision  = "float"
traceLevel = 1
modelPath  = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/rnn.dnn"
numCPUThreads = 1
confVocabSize = 10000
confClassSize = 50
trainFile = "ptb.train.txt"
validFile = "ptb.valid.txt"
testFile  = "ptb.test.txt"
writeWordAndClassInfo = [
    action = "writeWordAndClass"
    inputFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data/ptb.train.txt"
    beginSequence = "</s>"
    endSequence   = "</s>"
    outputVocabFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/vocab.txt"
    outputWord2Cls  = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/word2cls.txt"
    outputCls2Index = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/cls2idx.txt"
    vocabSize = "10000"
    nbrClass = "50"
    cutoff = 0
    printValues = true
]
train = [
    action = "train"
    traceLevel = 1
epochSize = 0               
    SimpleNetworkBuilder = [
rnnType = "CLASSLSTM"   
recurrentLayer = 1      
        trainingCriterion = "classCrossEntropyWithSoftmax"
        evalCriterion     = "classCrossEntropyWithSoftmax"
        initValueScale = 6.0
        uniformInit = true
        layerSizes = "10000:150:200:10000"
defaultHiddenActivity = 0.1 
        addPrior = false
        addDropoutNodes = false
        applyMeanVarNorm = false
lookupTableOrder = 1        
        vocabSize = "10000"
        nbrClass  = "50"
    ]
    SGD = [
        minibatchSize = 128:256:512
        learningRatesPerSample = 0.1
        momentumPerMB = 0
        gradientClippingWithTruncation = true
        clippingThresholdPerSample = 15.0
        maxEpochs = 16
        numMBsToShowResult = 100
        gradUpdateType = "none"
        loadBestModel = true
        dropoutRate = 0.0
        AutoAdjust = [
            autoAdjustLR = "adjustAfterEpoch"
            reduceLearnRateIfImproveLessThan = 0.001
            continueReduce = false
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            numMiniBatch4LRSearch = 100
            numPrevLearnRates = 5
            numBestSearchEpoch = 1
        ]
    ]
    reader = [
        readerType = "LMSequenceReader"
randomize = "none"              
nbruttsineachrecurrentiter = 0  
cacheBlockSize = 2000000        
        wordclass = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/vocab.txt"
        wfile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sequenceSentence.bin"
        wsize = 256
        wrecords = 1000
        windowSize = "10000"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data/ptb.train.txt"
        features = [
            dim = 0
            sectionType = "data"
        ]
        labelIn = [
            dim = 1
            labelType = "Category"
            beginSequence = "</s>"
            endSequence = "</s>"
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 11                
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 11
                sectionType = "categoryLabels"
            ]
        ]
        labels = [
            dim = 1
            labelType = "NextWord"
            beginSequence = "O"
            endSequence = "O"
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.out.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 3
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 3
                sectionType = categoryLabels
            ]
        ]
    ]
    cvReader = [
        readerType = "LMSequenceReader"
        randomize = "none"
nbruttsineachrecurrentiter = 0  
cacheBlockSize = 2000000        
        wordclass = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/vocab.txt"
        wfile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sequenceSentence.valid.bin"
        wsize = 256
        wrecords = 1000
        windowSize = "10000"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data/ptb.valid.txt"
        features = [
            dim = 0
            sectionType = "data"
        ]
        labelIn = [
            dim = 1
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.out.txt"
            labelType = "Category"
            beginSequence = "</s>"
            endSequence = "</s>"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 11
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 11
                sectionType = "categoryLabels"
            ]
        ]
        labels = [
            dim = 1
            labelType = "NextWord"
            beginSequence = "O"
            endSequence = "O"
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.out.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 3
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 3
                sectionType = "categoryLabels"
            ]
        ]
    ]
]
test = [
    action = "eval"
minibatchSize = 8192                
    traceLevel = 1
    epochSize = 0
    reader = [
        readerType = "LMSequenceReader"
        randomize = "none"
nbruttsineachrecurrentiter = 0  
cacheBlockSize = 2000000        
        wordclass = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/vocab.txt"
        wfile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sequenceSentence.bin"
        wsize = 256
        wrecords = 1000
        windowSize = "10000"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data/ptb.test.txt"
        features = [
            dim = 0
            sectionType = "data"
        ]
        labelIn = [
            dim = 1
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.txt"
            labelType = "Category"
            beginSequence = "</s>"
            endSequence = "</s>"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 11
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 11
                sectionType = "categoryLabels"
            ]
        ]
        labels = [
            dim = 1
            labelType = "NextWord"
            beginSequence = "O"
            endSequence = "O"
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.out.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 3
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 3
                sectionType = "categoryLabels"
            ]
        ]
    ]
]
write = [
    action = "write"
    outputPath = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Write"
outputNodeNames = TrainNodeClassBasedCrossEntropy 
    format = [
sequencePrologue = "log P(W)="    
        type = "real"
    ]
minibatchSize = 8192                
    traceLevel = 1
    epochSize = 0
    reader = [
        readerType = "LMSequenceReader"
randomize = "none"              
nbruttsineachrecurrentiter = 1  
cacheBlockSize = 1              
        wordclass = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/vocab.txt"
        wfile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sequenceSentence.bin"
        wsize = 256
        wrecords = 1000
        windowSize = "10000"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data/ptb.test.txt"
        features = [
            dim = 0
            sectionType = "data"
        ]
        labelIn = [
            dim = 1
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.txt"
            labelType = "Category"
            beginSequence = "</s>"
            endSequence = "</s>"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 11
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 11
                sectionType = "categoryLabels"
            ]
        ]
        labels = [
            dim = 1
            labelType = "NextWord"
            beginSequence = "O"
            endSequence = "O"
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.out.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 3
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 3
                sectionType = "categoryLabels"
            ]
        ]
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data
RunDir=/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Text/PennTreebank/RNN/../../../../../../Examples/Text/PennTreebank/Config
OutputDir=/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu
DeviceId=0
timestamping=true
initOnCPUOnly=true
command=writeWordAndClassInfo:train:test
train=[SGD=[maxEpochs=3]]
train=[epochSize=2048]]
test=[SGD=[maxEpochs=3]]
train=[epochSize=2048]]

07/13/2016 13:12:54: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/13/2016 13:12:54: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: rnn.cntk:]=true
configparameters: rnn.cntk:command=writeWordAndClassInfo:train:test
configparameters: rnn.cntk:confClassSize=50
configparameters: rnn.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Text/PennTreebank/RNN/../../../../../../Examples/Text/PennTreebank/Config
configparameters: rnn.cntk:confVocabSize=10000
configparameters: rnn.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data
configparameters: rnn.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data
configparameters: rnn.cntk:deviceId=0
configparameters: rnn.cntk:initOnCPUOnly=true
configparameters: rnn.cntk:ModelDir=/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models
configparameters: rnn.cntk:modelPath=/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/rnn.dnn
configparameters: rnn.cntk:numCPUThreads=1
configparameters: rnn.cntk:OutputDir=/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu
configparameters: rnn.cntk:precision=float
configparameters: rnn.cntk:RootDir=..
configparameters: rnn.cntk:RunDir=/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu
configparameters: rnn.cntk:test=[
    action = "eval"
minibatchSize = 8192                
    traceLevel = 1
    epochSize = 0
    reader = [
        readerType = "LMSequenceReader"
        randomize = "none"
nbruttsineachrecurrentiter = 0  
cacheBlockSize = 2000000        
        wordclass = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/vocab.txt"
        wfile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sequenceSentence.bin"
        wsize = 256
        wrecords = 1000
        windowSize = "10000"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data/ptb.test.txt"
        features = [
            dim = 0
            sectionType = "data"
        ]
        labelIn = [
            dim = 1
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.txt"
            labelType = "Category"
            beginSequence = "</s>"
            endSequence = "</s>"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 11
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 11
                sectionType = "categoryLabels"
            ]
        ]
        labels = [
            dim = 1
            labelType = "NextWord"
            beginSequence = "O"
            endSequence = "O"
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.out.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 3
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 3
                sectionType = "categoryLabels"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: rnn.cntk:testFile=ptb.test.txt
configparameters: rnn.cntk:timestamping=true
configparameters: rnn.cntk:traceLevel=1
configparameters: rnn.cntk:train=[
    action = "train"
    traceLevel = 1
epochSize = 0               
    SimpleNetworkBuilder = [
rnnType = "CLASSLSTM"   
recurrentLayer = 1      
        trainingCriterion = "classCrossEntropyWithSoftmax"
        evalCriterion     = "classCrossEntropyWithSoftmax"
        initValueScale = 6.0
        uniformInit = true
        layerSizes = "10000:150:200:10000"
defaultHiddenActivity = 0.1 
        addPrior = false
        addDropoutNodes = false
        applyMeanVarNorm = false
lookupTableOrder = 1        
        vocabSize = "10000"
        nbrClass  = "50"
    ]
    SGD = [
        minibatchSize = 128:256:512
        learningRatesPerSample = 0.1
        momentumPerMB = 0
        gradientClippingWithTruncation = true
        clippingThresholdPerSample = 15.0
        maxEpochs = 16
        numMBsToShowResult = 100
        gradUpdateType = "none"
        loadBestModel = true
        dropoutRate = 0.0
        AutoAdjust = [
            autoAdjustLR = "adjustAfterEpoch"
            reduceLearnRateIfImproveLessThan = 0.001
            continueReduce = false
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            numMiniBatch4LRSearch = 100
            numPrevLearnRates = 5
            numBestSearchEpoch = 1
        ]
    ]
    reader = [
        readerType = "LMSequenceReader"
randomize = "none"              
nbruttsineachrecurrentiter = 0  
cacheBlockSize = 2000000        
        wordclass = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/vocab.txt"
        wfile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sequenceSentence.bin"
        wsize = 256
        wrecords = 1000
        windowSize = "10000"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data/ptb.train.txt"
        features = [
            dim = 0
            sectionType = "data"
        ]
        labelIn = [
            dim = 1
            labelType = "Category"
            beginSequence = "</s>"
            endSequence = "</s>"
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 11                
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 11
                sectionType = "categoryLabels"
            ]
        ]
        labels = [
            dim = 1
            labelType = "NextWord"
            beginSequence = "O"
            endSequence = "O"
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.out.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 3
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 3
                sectionType = categoryLabels
            ]
        ]
    ]
    cvReader = [
        readerType = "LMSequenceReader"
        randomize = "none"
nbruttsineachrecurrentiter = 0  
cacheBlockSize = 2000000        
        wordclass = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/vocab.txt"
        wfile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sequenceSentence.valid.bin"
        wsize = 256
        wrecords = 1000
        windowSize = "10000"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data/ptb.valid.txt"
        features = [
            dim = 0
            sectionType = "data"
        ]
        labelIn = [
            dim = 1
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.out.txt"
            labelType = "Category"
            beginSequence = "</s>"
            endSequence = "</s>"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 11
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 11
                sectionType = "categoryLabels"
            ]
        ]
        labels = [
            dim = 1
            labelType = "NextWord"
            beginSequence = "O"
            endSequence = "O"
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.out.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 3
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 3
                sectionType = "categoryLabels"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]] [epochSize=2048] [epochSize=2048]

configparameters: rnn.cntk:trainFile=ptb.train.txt
configparameters: rnn.cntk:validFile=ptb.valid.txt
configparameters: rnn.cntk:write=[
    action = "write"
    outputPath = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Write"
outputNodeNames = TrainNodeClassBasedCrossEntropy 
    format = [
sequencePrologue = "log P(W)="    
        type = "real"
    ]
minibatchSize = 8192                
    traceLevel = 1
    epochSize = 0
    reader = [
        readerType = "LMSequenceReader"
randomize = "none"              
nbruttsineachrecurrentiter = 1  
cacheBlockSize = 1              
        wordclass = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/vocab.txt"
        wfile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sequenceSentence.bin"
        wsize = 256
        wrecords = 1000
        windowSize = "10000"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data/ptb.test.txt"
        features = [
            dim = 0
            sectionType = "data"
        ]
        labelIn = [
            dim = 1
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.txt"
            labelType = "Category"
            beginSequence = "</s>"
            endSequence = "</s>"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 11
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 11
                sectionType = "categoryLabels"
            ]
        ]
        labels = [
            dim = 1
            labelType = "NextWord"
            beginSequence = "O"
            endSequence = "O"
            labelDim = "10000"
            labelMappingFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.out.txt"
            elementSize = 4
            sectionType = "labels"
            mapping = [
                wrecords = 3
                elementSize = 10
                sectionType = "labelMapping"
            ]
            category = [
                dim = 3
                sectionType = "categoryLabels"
            ]
        ]
    ]
]

configparameters: rnn.cntk:writeWordAndClassInfo=[
    action = "writeWordAndClass"
    inputFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data/ptb.train.txt"
    beginSequence = "</s>"
    endSequence   = "</s>"
    outputVocabFile = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/vocab.txt"
    outputWord2Cls  = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/word2cls.txt"
    outputCls2Index = "/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/cls2idx.txt"
    vocabSize = "10000"
    nbrClass = "50"
    cutoff = 0
    printValues = true
]

07/13/2016 13:12:54: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/13/2016 13:12:54: Commands: writeWordAndClassInfo train test
07/13/2016 13:12:54: Precision = "float"
07/13/2016 13:12:54: Using 1 CPU threads.
07/13/2016 13:12:54: CNTKModelPath: /tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/rnn.dnn
07/13/2016 13:12:54: CNTKCommandTrainInfo: train : 3
07/13/2016 13:12:54: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/13/2016 13:12:54: ##############################################################################
07/13/2016 13:12:54: #                                                                            #
07/13/2016 13:12:54: # Action "writeWordAndClass"                                                 #
07/13/2016 13:12:54: #                                                                            #
07/13/2016 13:12:54: ##############################################################################

Vocabulary file    --> /tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/vocab.txt
Word-to-class map  --> /tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/word2cls.txt
Class-to-index map --> /tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/cls2idx.txt

Reading input file inputFile: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Text/PennTreebank/Data/ptb.train.txt
Vocabulary size 10000.
Created vocabulary file with 10000 entries.
Created word-to-class map with 10000 entries.
Created class-to-index map with 50 entries.

07/13/2016 13:12:55: Action "writeWordAndClass" complete.


07/13/2016 13:12:55: ##############################################################################
07/13/2016 13:12:55: #                                                                            #
07/13/2016 13:12:55: # Action "train"                                                             #
07/13/2016 13:12:55: #                                                                            #
07/13/2016 13:12:55: ##############################################################################

07/13/2016 13:12:55: CNTKCommandTrainBegin: train
SimpleNetworkBuilder Using GPU 0
LMSequenceReader: Label mapping will be created internally on the fly because the labelMappingFile was not found: /tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.txt
LMSequenceReader: Label mapping will be created internally on the fly because the labelMappingFile was not found: /tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.out.txt
LMSequenceReader: Label mapping will be created internally on the fly because the labelMappingFile was not found: /tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.out.txt
LMSequenceReader: Label mapping will be created internally on the fly because the labelMappingFile was not found: /tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.out.txt

07/13/2016 13:12:55: Creating virgin network.
SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	PosteriorProb = Softmax()
	TrainNodeClassBasedCrossEntropy = ClassBasedCrossEntropyWithSoftmax()
	outputs = TransposeTimes()

Loop[0] --> Loop_AutoName37 -> 31 nodes

	AutoName2	AutoName30	AutoName33
	AutoName1	AutoName21	AutoName24
	AutoName5	AutoName20	AutoName25
	AutoName26	AutoName6	AutoName27
	AutoName0	AutoName8	AutoName11
	AutoName4	AutoName7	AutoName12
	AutoName13	AutoName3	AutoName14
	AutoName15	AutoName17	AutoName18
	AutoName19	AutoName28	AutoName29
	AutoName34	AutoName35	AutoName36
	AutoName37

Validating network. 63 nodes to process in pass 1.

Validating --> W2 = LearnableParameter() :  -> [200 x 10000]
Validating --> WXO0 = LearnableParameter() :  -> [200 x 150]
Validating --> E0 = LearnableParameter() :  -> [150 x 10000]
Validating --> features = SparseInputValue() :  -> [10000 x *]
Validating --> LookupTable = LookupTable (E0, features) : [150 x 10000], [10000 x *] -> [150 x *]
Validating --> AutoName31 = Times (WXO0, LookupTable) : [200 x 150], [150 x *] -> [200 x *]
Validating --> bo0 = LearnableParameter() :  -> [200 x 1]
Validating --> AutoName32 = Plus (AutoName31, bo0) : [200 x *], [200 x 1] -> [200 x 1 x *]
Validating --> WHO0 = LearnableParameter() :  -> [200 x 200]
Validating --> WCO0 = LearnableParameter() :  -> [200 x 1]
Validating --> WXF0 = LearnableParameter() :  -> [200 x 150]
Validating --> AutoName22 = Times (WXF0, LookupTable) : [200 x 150], [150 x *] -> [200 x *]
Validating --> bf0 = LearnableParameter() :  -> [200 x 1]
Validating --> AutoName23 = Plus (AutoName22, bf0) : [200 x *], [200 x 1] -> [200 x 1 x *]
Validating --> WHF0 = LearnableParameter() :  -> [200 x 200]
Validating --> WCF0 = LearnableParameter() :  -> [200 x 1]
Validating --> WXI0 = LearnableParameter() :  -> [200 x 150]
Validating --> AutoName9 = Times (WXI0, LookupTable) : [200 x 150], [150 x *] -> [200 x *]
Validating --> bi0 = LearnableParameter() :  -> [200 x 1]
Validating --> AutoName10 = Plus (AutoName9, bi0) : [200 x *], [200 x 1] -> [200 x 1 x *]
Validating --> WHI0 = LearnableParameter() :  -> [200 x 200]
Validating --> WCI0 = LearnableParameter() :  -> [200 x 1]
Validating --> WXC0 = LearnableParameter() :  -> [200 x 150]
Validating --> AutoName16 = Times (WXC0, LookupTable) : [200 x 150], [150 x *] -> [200 x *]
Validating --> WHC0 = LearnableParameter() :  -> [200 x 200]
Validating --> bc0 = LearnableParameter() :  -> [200 x 1]
Validating --> AutoName30 = Times (WHO0, AutoName2) : [200 x 200], [200] -> [200]
Validating --> AutoName33 = Plus (AutoName32, AutoName30) : [200 x 1 x *], [200] -> [200 x 1 x *]
Validating --> AutoName21 = Times (WHF0, AutoName1) : [200 x 200], [200] -> [200]
Validating --> AutoName24 = Plus (AutoName23, AutoName21) : [200 x 1 x *], [200] -> [200 x 1 x *]
Validating --> AutoName20 = DiagTimes (WCF0, AutoName5) : [200 x 1], [200] -> [200]
Validating --> AutoName25 = Plus (AutoName24, AutoName20) : [200 x 1 x *], [200] -> [200 x 1 x *]
Validating --> AutoName26 = Sigmoid (AutoName25) : [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName27 = ElementTimes (AutoName26, AutoName6) : [200 x 1 x *], [200] -> [200 x 1 x *]
Validating --> AutoName8 = Times (WHI0, AutoName0) : [200 x 200], [200] -> [200]
Validating --> AutoName11 = Plus (AutoName10, AutoName8) : [200 x 1 x *], [200] -> [200 x 1 x *]
Validating --> AutoName7 = DiagTimes (WCI0, AutoName4) : [200 x 1], [200] -> [200]
Validating --> AutoName12 = Plus (AutoName11, AutoName7) : [200 x 1 x *], [200] -> [200 x 1 x *]
Validating --> AutoName13 = Sigmoid (AutoName12) : [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName14 = Times (WHC0, AutoName3) : [200 x 200], [200] -> [200]
Validating --> AutoName15 = Plus (AutoName14, bc0) : [200], [200 x 1] -> [200 x 1]
Validating --> AutoName17 = Plus (AutoName16, AutoName15) : [200 x *], [200 x 1] -> [200 x 1 x *]
Validating --> AutoName18 = Tanh (AutoName17) : [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName19 = ElementTimes (AutoName13, AutoName18) : [200 x 1 x *], [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName28 = Plus (AutoName27, AutoName19) : [200 x 1 x *], [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName29 = DiagTimes (WCO0, AutoName28) : [200 x 1], [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName34 = Plus (AutoName33, AutoName29) : [200 x 1 x *], [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName35 = Sigmoid (AutoName34) : [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName36 = Tanh (AutoName28) : [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName37 = ElementTimes (AutoName35, AutoName36) : [200 x 1 x *], [200 x 1 x *] -> [200 x 1 x *]
Validating --> outputs = TransposeTimes (W2, AutoName37) : [200 x 10000], [200 x 1 x *] -> [10000 x 1 x *]
Validating --> PosteriorProb = Softmax (outputs) : [10000 x 1 x *] -> [10000 x 1 x *]
Validating --> labels = InputValue() :  -> [4 x *]
Validating --> WeightForClassPostProb = LearnableParameter() :  -> [50 x 200]
Validating --> ClassPostProb = Times (WeightForClassPostProb, AutoName37) : [50 x 200], [200 x 1 x *] -> [50 x 1 x *]
Validating --> TrainNodeClassBasedCrossEntropy = ClassBasedCrossEntropyWithSoftmax (labels, AutoName37, W2, ClassPostProb) : [4 x *], [200 x 1 x *], [200 x 10000], [50 x 1 x *] -> [1]

Validating network. 43 nodes to process in pass 2.

Validating --> AutoName2 = PastValue (AutoName37) : [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName30 = Times (WHO0, AutoName2) : [200 x 200], [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName1 = PastValue (AutoName37) : [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName21 = Times (WHF0, AutoName1) : [200 x 200], [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName5 = PastValue (AutoName28) : [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName20 = DiagTimes (WCF0, AutoName5) : [200 x 1], [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName6 = PastValue (AutoName28) : [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName0 = PastValue (AutoName37) : [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName8 = Times (WHI0, AutoName0) : [200 x 200], [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName4 = PastValue (AutoName28) : [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName7 = DiagTimes (WCI0, AutoName4) : [200 x 1], [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName3 = PastValue (AutoName37) : [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName14 = Times (WHC0, AutoName3) : [200 x 200], [200 x 1 x *] -> [200 x 1 x *]
Validating --> AutoName15 = Plus (AutoName14, bc0) : [200 x 1 x *], [200 x 1] -> [200 x 1 x *]

Validating network. 14 nodes to process in pass 3.


Validating network, final pass.



19 out of 63 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/13/2016 13:12:55: Created model with 63 nodes on GPU 0.

07/13/2016 13:12:55: Training criterion node(s):
07/13/2016 13:12:55: 	TrainNodeClassBasedCrossEntropy = ClassBasedCrossEntropyWithSoftmax


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[PosteriorProb Gradient[10000 x 1 x *]] [PosteriorProb Value[10000 x 1 x *]] [features Gradient[10000 x *]] [labels Gradient[4 x *]] [outputs Gradient[10000 x 1 x *]] }
0x7f091ff93a28: {[WXO0 Value[200 x 150]] }
0x7f091ffa59c8: {[WXI0 Value[200 x 150]] }
0x7f091ffa6bd8: {[WXF0 Value[200 x 150]] }
0x7f0921c634e8: {[WXC0 Value[200 x 150]] }
0x7f0921c63e58: {[bo0 Value[200 x 1]] }
0x7f0921c64cb8: {[bc0 Value[200 x 1]] }
0x7f0921c65628: {[bi0 Value[200 x 1]] }
0x7f0921c65f98: {[bf0 Value[200 x 1]] }
0x7f0921c66948: {[WHI0 Value[200 x 200]] }
0x7f0921c67488: {[WCI0 Value[200 x 1]] }
0x7f0921c67dd8: {[WHF0 Value[200 x 200]] }
0x7f0921c68cb8: {[WCF0 Value[200 x 1]] }
0x7f0921c69668: {[WHO0 Value[200 x 200]] }
0x7f0921c6a018: {[WCO0 Value[200 x 1]] }
0x7f0921c6a9c8: {[WHC0 Value[200 x 200]] }
0x7f0921c6b598: {[AutoName0 Value[200 x 1 x *]] }
0x7f0921c6bcf8: {[AutoName1 Value[200 x 1 x *]] }
0x7f0921c6c348: {[AutoName2 Value[200 x 1 x *]] [WXC0 Gradient[200 x 150]] }
0x7f0921c6caa8: {[AutoName3 Value[200 x 1 x *]] }
0x7f0921c6d0b8: {[AutoName4 Value[200 x 1 x *]] }
0x7f0921c6d818: {[AutoName5 Value[200 x 1 x *]] }
0x7f0921c6de68: {[AutoName6 Value[200 x 1 x *]] }
0x7f0921c741b8: {[W2 Value[200 x 10000]] }
0x7f0921c74fd8: {[labels Value[4 x *]] }
0x7f0921c75cb8: {[WeightForClassPostProb Value[50 x 200]] }
0x7f0921c7ae18: {[outputs Value[10000 x 1 x *]] }
0x7f0921c7ccc8: {[TrainNodeClassBasedCrossEntropy Value[1]] }
0x7f0921c82aa8: {[LookupTable Value[150 x *]] }
0x7f0921c82e48: {[AutoName31 Value[200 x *]] [E0 Gradient[150 x 10000]] }
0x7f0921c836b8: {[AutoName22 Value[200 x *]] [AutoName31 Gradient[200 x *]] }
0x7f0921c83878: {[AutoName23 Value[200 x 1 x *]] [WXF0 Gradient[200 x 150]] }
0x7f0921c83978: {[AutoName22 Gradient[200 x *]] [AutoName9 Value[200 x *]] [bo0 Gradient[200 x 1]] }
0x7f0921c83f58: {[AutoName32 Value[200 x 1 x *]] [WXO0 Gradient[200 x 150]] }
0x7f0921c846f8: {[AutoName10 Value[200 x 1 x *]] [WXI0 Gradient[200 x 150]] }
0x7f0921c848b8: {[AutoName16 Value[200 x *]] [AutoName9 Gradient[200 x *]] [bf0 Gradient[200 x 1]] }
0x7f0921c84a78: {[AutoName30 Value[200 x 1 x *]] }
0x7f0921c84c38: {[AutoName33 Value[200 x 1 x *]] }
0x7f0921c84df8: {[AutoName21 Value[200 x 1 x *]] }
0x7f0921c84fb8: {[AutoName24 Value[200 x 1 x *]] }
0x7f0921c85178: {[AutoName20 Value[200 x 1 x *]] }
0x7f0921c85338: {[AutoName25 Value[200 x 1 x *]] }
0x7f0921c854f8: {[AutoName26 Value[200 x 1 x *]] }
0x7f0921c856b8: {[AutoName27 Value[200 x 1 x *]] }
0x7f0921c85878: {[AutoName8 Value[200 x 1 x *]] }
0x7f0921c85a38: {[AutoName11 Value[200 x 1 x *]] }
0x7f0921c85bf8: {[AutoName7 Value[200 x 1 x *]] }
0x7f0921c85db8: {[AutoName12 Value[200 x 1 x *]] }
0x7f0921c85f78: {[AutoName13 Value[200 x 1 x *]] }
0x7f0921c86138: {[AutoName14 Value[200 x 1 x *]] }
0x7f0921c862f8: {[AutoName15 Value[200 x 1 x *]] }
0x7f0921c864b8: {[AutoName17 Value[200 x 1 x *]] }
0x7f0921c86678: {[AutoName18 Value[200 x 1 x *]] }
0x7f0921c86838: {[AutoName19 Value[200 x 1 x *]] }
0x7f0921c869f8: {[AutoName28 Value[200 x 1 x *]] }
0x7f0921c86bb8: {[AutoName29 Value[200 x 1 x *]] }
0x7f0921c86d78: {[AutoName34 Value[200 x 1 x *]] }
0x7f0921c86f38: {[AutoName35 Value[200 x 1 x *]] }
0x7f0921c870f8: {[AutoName36 Value[200 x 1 x *]] }
0x7f0921c872b8: {[AutoName37 Value[200 x 1 x *]] }
0x7f0921c87478: {[AutoName35 Gradient[200 x 1 x *]] [ClassPostProb Value[50 x 1 x *]] }
0x7f0921c87638: {[TrainNodeClassBasedCrossEntropy Gradient[1]] }
0x7f0921c877f8: {[AutoName37 Gradient[200 x 1 x *]] }
0x7f0921c879b8: {[W2 Gradient[200 x 10000]] }
0x7f0921c87b78: {[AutoName36 Gradient[200 x 1 x *]] [ClassPostProb Gradient[50 x 1 x *]] }
0x7f0921c87d38: {[WeightForClassPostProb Gradient[50 x 200]] }
0x7f0921c87ef8: {[AutoName28 Gradient[200 x 1 x *]] }
0x7f0921c880b8: {[AutoName34 Gradient[200 x 1 x *]] }
0x7f0921c88278: {[AutoName33 Gradient[200 x 1 x *]] }
0x7f0921c88438: {[AutoName29 Gradient[200 x 1 x *]] }
0x7f0921c88978: {[WCO0 Gradient[200 x 1]] }
0x7f0921c88b38: {[AutoName27 Gradient[200 x 1 x *]] }
0x7f0921c88cf8: {[AutoName19 Gradient[200 x 1 x *]] }
0x7f0921c88eb8: {[AutoName13 Gradient[200 x 1 x *]] }
0x7f0921c89078: {[AutoName18 Gradient[200 x 1 x *]] }
0x7f0921c89238: {[AutoName17 Gradient[200 x 1 x *]] }
0x7f0921c893f8: {[AutoName16 Gradient[200 x *]] [bi0 Gradient[200 x 1]] }
0x7f0921c895b8: {[AutoName15 Gradient[200 x 1 x *]] }
0x7f0921c89778: {[AutoName14 Gradient[200 x 1 x *]] }
0x7f0921c89938: {[bc0 Gradient[200 x 1]] }
0x7f0921c89af8: {[WHC0 Gradient[200 x 200]] }
0x7f0921c89cb8: {[AutoName3 Gradient[200 x 1 x *]] }
0x7f0921c89e78: {[AutoName12 Gradient[200 x 1 x *]] }
0x7f0921c8a038: {[AutoName11 Gradient[200 x 1 x *]] }
0x7f0921c8a1f8: {[AutoName7 Gradient[200 x 1 x *]] }
0x7f0921c8a738: {[WCI0 Gradient[200 x 1]] }
0x7f0921c8a8f8: {[AutoName4 Gradient[200 x 1 x *]] }
0x7f0921c8aab8: {[AutoName10 Gradient[200 x 1 x *]] }
0x7f0921c8ac78: {[AutoName8 Gradient[200 x 1 x *]] }
0x7f0921c8ae38: {[WHI0 Gradient[200 x 200]] }
0x7f0921c8aff8: {[AutoName0 Gradient[200 x 1 x *]] }
0x7f0921c8b1b8: {[AutoName26 Gradient[200 x 1 x *]] }
0x7f0921c8b378: {[AutoName6 Gradient[200 x 1 x *]] }
0x7f0921c8b538: {[AutoName25 Gradient[200 x 1 x *]] }
0x7f0921c8b6f8: {[AutoName24 Gradient[200 x 1 x *]] }
0x7f0921c8b8b8: {[AutoName20 Gradient[200 x 1 x *]] }
0x7f0921c8bdf8: {[WCF0 Gradient[200 x 1]] }
0x7f0921c8bfb8: {[AutoName5 Gradient[200 x 1 x *]] }
0x7f0921c8c178: {[AutoName23 Gradient[200 x 1 x *]] }
0x7f0921c8c338: {[AutoName21 Gradient[200 x 1 x *]] }
0x7f0921c8c4f8: {[WHF0 Gradient[200 x 200]] }
0x7f0921c8c6b8: {[AutoName1 Gradient[200 x 1 x *]] }
0x7f0921c8c878: {[AutoName32 Gradient[200 x 1 x *]] }
0x7f0921c8ca38: {[AutoName30 Gradient[200 x 1 x *]] }
0x7f0921c8cbf8: {[WHO0 Gradient[200 x 200]] }
0x7f0921c8cdb8: {[AutoName2 Gradient[200 x 1 x *]] [LookupTable Gradient[150 x *]] }
0x7f092252c708: {[E0 Value[150 x 10000]] }
0x7f0928ec2b68: {[features Value[10000 x *]] }

07/13/2016 13:12:55: No PreCompute nodes found, skipping PreCompute step.

07/13/2016 13:12:55: Starting Epoch 1: learning rate per sample = 0.100000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

07/13/2016 13:12:55: Starting minibatch loop.
LMSequenceReader: Reading epoch data... 42068 sequences read.
WARNING: The same matrix with dim [4, 108] has been transferred between different devices for 20 times.
07/13/2016 13:12:56: Finished Epoch[ 1 of 3]: [Training] TrainNodeClassBasedCrossEntropy = 6.83569558 * 2087; totalSamplesSeen = 2087; learningRatePerSample = 0.1; epochTime=0.942151s
LMSequenceReader: Reading epoch data... 3370 sequences read.
LMSequenceReader: Reading epoch data... 0 sequences read.
07/13/2016 13:13:09: Final Results: Minibatch[1-704]: TrainNodeClassBasedCrossEntropy = 6.53922960 * 73760; perplexity = 691.75344333
07/13/2016 13:13:09: Finished Epoch[ 1 of 3]: [Validate] TrainNodeClassBasedCrossEntropy = 6.53922960 * 73760
07/13/2016 13:13:09: SGD: Saving checkpoint model '/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/rnn.dnn.1'

07/13/2016 13:13:09: Starting Epoch 2: learning rate per sample = 0.100000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

07/13/2016 13:13:09: Starting minibatch loop.
LMSequenceReader: Reading epoch data... 42068 sequences read.
07/13/2016 13:13:10: Finished Epoch[ 2 of 3]: [Training] TrainNodeClassBasedCrossEntropy = 6.62606961 * 2099; totalSamplesSeen = 4186; learningRatePerSample = 0.1; epochTime=0.680918s
LMSequenceReader: Reading epoch data... 3370 sequences read.
LMSequenceReader: Reading epoch data... 0 sequences read.
07/13/2016 13:13:19: Final Results: Minibatch[1-353]: TrainNodeClassBasedCrossEntropy = 6.50626328 * 73760; perplexity = 669.32067504
07/13/2016 13:13:19: Finished Epoch[ 2 of 3]: [Validate] TrainNodeClassBasedCrossEntropy = 6.50626328 * 73760
07/13/2016 13:13:20: SGD: Saving checkpoint model '/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/rnn.dnn.2'

07/13/2016 13:13:20: Starting Epoch 3: learning rate per sample = 0.100000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

07/13/2016 13:13:20: Starting minibatch loop.
LMSequenceReader: Reading epoch data... 42068 sequences read.
07/13/2016 13:13:20: Finished Epoch[ 3 of 3]: [Training] TrainNodeClassBasedCrossEntropy = 8.07635637 * 2276; totalSamplesSeen = 6462; learningRatePerSample = 0.1; epochTime=0.648928s
LMSequenceReader: Reading epoch data... 3370 sequences read.
LMSequenceReader: Reading epoch data... 0 sequences read.
07/13/2016 13:13:29: Final Results: Minibatch[1-193]: TrainNodeClassBasedCrossEntropy = 9.02988845 * 73760; perplexity = 8348.92822611
07/13/2016 13:13:29: Finished Epoch[ 3 of 3]: [Validate] TrainNodeClassBasedCrossEntropy = 9.02988845 * 73760
07/13/2016 13:13:29: Loading (rolling back to) previous model with best training-criterion value: /tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/rnn.dnn.2.
07/13/2016 13:13:29: learnRatePerSample reduced to 0.050000001
07/13/2016 13:13:29: SGD: revoke back to and update checkpoint file for epoch 2

07/13/2016 13:13:29: Starting Epoch 3: learning rate per sample = 0.050000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

07/13/2016 13:13:29: Starting minibatch loop.
LMSequenceReader: Reading epoch data... 42068 sequences read.
07/13/2016 13:13:30: Finished Epoch[ 3 of 3]: [Training] TrainNodeClassBasedCrossEntropy = 6.35577811 * 2276; totalSamplesSeen = 6462; learningRatePerSample = 0.050000001; epochTime=0.601128s
LMSequenceReader: Reading epoch data... 3370 sequences read.
LMSequenceReader: Reading epoch data... 0 sequences read.
07/13/2016 13:13:38: Final Results: Minibatch[1-193]: TrainNodeClassBasedCrossEntropy = 6.42683453 * 73760; perplexity = 618.21391254
07/13/2016 13:13:38: Finished Epoch[ 3 of 3]: [Validate] TrainNodeClassBasedCrossEntropy = 6.42683453 * 73760
07/13/2016 13:13:38: SGD: Saving checkpoint model '/tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/Models/rnn.dnn'
07/13/2016 13:13:39: CNTKCommandTrainEnd: train

07/13/2016 13:13:39: Action "train" complete.


07/13/2016 13:13:39: ##############################################################################
07/13/2016 13:13:39: #                                                                            #
07/13/2016 13:13:39: # Action "eval"                                                              #
07/13/2016 13:13:39: #                                                                            #
07/13/2016 13:13:39: ##############################################################################

LMSequenceReader: Label mapping will be created internally on the fly because the labelMappingFile was not found: /tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.txt
LMSequenceReader: Label mapping will be created internally on the fly because the labelMappingFile was not found: /tmp/cntk-test-20160713122019.252341/Examples/Text/PennTreebank_RNN@release_gpu/sentenceLabels.out.txt

Post-processing network...

3 roots:
	PosteriorProb = Softmax()
	TrainNodeClassBasedCrossEntropy = ClassBasedCrossEntropyWithSoftmax()
	outputs = TransposeTimes()

Loop[0] --> Loop_AutoName37 -> 31 nodes

	AutoName2	AutoName30	AutoName33
	AutoName1	AutoName21	AutoName24
	AutoName5	AutoName20	AutoName25
	AutoName26	AutoName6	AutoName27
	AutoName0	AutoName8	AutoName11
	AutoName4	AutoName7	AutoName12
	AutoName13	AutoName3	AutoName14
	AutoName15	AutoName17	AutoName18
	AutoName19	AutoName28	AutoName29
	AutoName34	AutoName35	AutoName36
	AutoName37

Validating network. 63 nodes to process in pass 1.

Validating --> W2 = LearnableParameter() :  -> [200 x 10000]
Validating --> WXO0 = LearnableParameter() :  -> [200 x 150]
Validating --> E0 = LearnableParameter() :  -> [150 x 10000]
Validating --> features = SparseInputValue() :  -> [10000 x *1]
Validating --> LookupTable = LookupTable (E0, features) : [150 x 10000], [10000 x *1] -> [150 x *1]
Validating --> AutoName31 = Times (WXO0, LookupTable) : [200 x 150], [150 x *1] -> [200 x *1]
Validating --> bo0 = LearnableParameter() :  -> [200 x 1]
Validating --> AutoName32 = Plus (AutoName31, bo0) : [200 x *1], [200 x 1] -> [200 x 1 x *1]
Validating --> WHO0 = LearnableParameter() :  -> [200 x 200]
Validating --> WCO0 = LearnableParameter() :  -> [200 x 1]
Validating --> WXF0 = LearnableParameter() :  -> [200 x 150]
Validating --> AutoName22 = Times (WXF0, LookupTable) : [200 x 150], [150 x *1] -> [200 x *1]
Validating --> bf0 = LearnableParameter() :  -> [200 x 1]
Validating --> AutoName23 = Plus (AutoName22, bf0) : [200 x *1], [200 x 1] -> [200 x 1 x *1]
Validating --> WHF0 = LearnableParameter() :  -> [200 x 200]
Validating --> WCF0 = LearnableParameter() :  -> [200 x 1]
Validating --> WXI0 = LearnableParameter() :  -> [200 x 150]
Validating --> AutoName9 = Times (WXI0, LookupTable) : [200 x 150], [150 x *1] -> [200 x *1]
Validating --> bi0 = LearnableParameter() :  -> [200 x 1]
Validating --> AutoName10 = Plus (AutoName9, bi0) : [200 x *1], [200 x 1] -> [200 x 1 x *1]
Validating --> WHI0 = LearnableParameter() :  -> [200 x 200]
Validating --> WCI0 = LearnableParameter() :  -> [200 x 1]
Validating --> WXC0 = LearnableParameter() :  -> [200 x 150]
Validating --> AutoName16 = Times (WXC0, LookupTable) : [200 x 150], [150 x *1] -> [200 x *1]
Validating --> WHC0 = LearnableParameter() :  -> [200 x 200]
Validating --> bc0 = LearnableParameter() :  -> [200 x 1]
Validating --> AutoName30 = Times (WHO0, AutoName2) : [200 x 200], [200 x 1] -> [200 x 1]
Validating --> AutoName33 = Plus (AutoName32, AutoName30) : [200 x 1 x *1], [200 x 1] -> [200 x 1 x *1]
Validating --> AutoName21 = Times (WHF0, AutoName1) : [200 x 200], [200 x 1] -> [200 x 1]
Validating --> AutoName24 = Plus (AutoName23, AutoName21) : [200 x 1 x *1], [200 x 1] -> [200 x 1 x *1]
Validating --> AutoName20 = DiagTimes (WCF0, AutoName5) : [200 x 1], [200 x 1] -> [200 x 1]
Validating --> AutoName25 = Plus (AutoName24, AutoName20) : [200 x 1 x *1], [200 x 1] -> [200 x 1 x *1]
Validating --> AutoName26 = Sigmoid (AutoName25) : [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName27 = ElementTimes (AutoName26, AutoName6) : [200 x 1 x *1], [200 x 1] -> [200 x 1 x *1]
Validating --> AutoName8 = Times (WHI0, AutoName0) : [200 x 200], [200 x 1] -> [200 x 1]
Validating --> AutoName11 = Plus (AutoName10, AutoName8) : [200 x 1 x *1], [200 x 1] -> [200 x 1 x *1]
Validating --> AutoName7 = DiagTimes (WCI0, AutoName4) : [200 x 1], [200 x 1] -> [200 x 1]
Validating --> AutoName12 = Plus (AutoName11, AutoName7) : [200 x 1 x *1], [200 x 1] -> [200 x 1 x *1]
Validating --> AutoName13 = Sigmoid (AutoName12) : [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName14 = Times (WHC0, AutoName3) : [200 x 200], [200 x 1] -> [200 x 1]
Validating --> AutoName15 = Plus (AutoName14, bc0) : [200 x 1], [200 x 1] -> [200 x 1]
Validating --> AutoName17 = Plus (AutoName16, AutoName15) : [200 x *1], [200 x 1] -> [200 x 1 x *1]
Validating --> AutoName18 = Tanh (AutoName17) : [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName19 = ElementTimes (AutoName13, AutoName18) : [200 x 1 x *1], [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName28 = Plus (AutoName27, AutoName19) : [200 x 1 x *1], [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName29 = DiagTimes (WCO0, AutoName28) : [200 x 1], [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName34 = Plus (AutoName33, AutoName29) : [200 x 1 x *1], [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName35 = Sigmoid (AutoName34) : [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName36 = Tanh (AutoName28) : [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName37 = ElementTimes (AutoName35, AutoName36) : [200 x 1 x *1], [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> outputs = TransposeTimes (W2, AutoName37) : [200 x 10000], [200 x 1 x *1] -> [10000 x 1 x *1]
Validating --> PosteriorProb = Softmax (outputs) : [10000 x 1 x *1] -> [10000 x 1 x *1]
Validating --> labels = InputValue() :  -> [4 x *1]
Validating --> WeightForClassPostProb = LearnableParameter() :  -> [50 x 200]
Validating --> ClassPostProb = Times (WeightForClassPostProb, AutoName37) : [50 x 200], [200 x 1 x *1] -> [50 x 1 x *1]
Validating --> TrainNodeClassBasedCrossEntropy = ClassBasedCrossEntropyWithSoftmax (labels, AutoName37, W2, ClassPostProb) : [4 x *1], [200 x 1 x *1], [200 x 10000], [50 x 1 x *1] -> [1]

Validating network. 43 nodes to process in pass 2.

Validating --> AutoName2 = PastValue (AutoName37) : [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName30 = Times (WHO0, AutoName2) : [200 x 200], [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName1 = PastValue (AutoName37) : [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName21 = Times (WHF0, AutoName1) : [200 x 200], [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName5 = PastValue (AutoName28) : [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName20 = DiagTimes (WCF0, AutoName5) : [200 x 1], [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName6 = PastValue (AutoName28) : [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName0 = PastValue (AutoName37) : [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName8 = Times (WHI0, AutoName0) : [200 x 200], [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName4 = PastValue (AutoName28) : [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName7 = DiagTimes (WCI0, AutoName4) : [200 x 1], [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName3 = PastValue (AutoName37) : [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName14 = Times (WHC0, AutoName3) : [200 x 200], [200 x 1 x *1] -> [200 x 1 x *1]
Validating --> AutoName15 = Plus (AutoName14, bc0) : [200 x 1 x *1], [200 x 1] -> [200 x 1 x *1]

Validating network. 14 nodes to process in pass 3.


Validating network, final pass.



19 out of 63 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[AutoName0 Gradient[200 x 1 x *1]] [AutoName1 Gradient[200 x 1 x *1]] [AutoName10 Gradient[200 x 1 x *1]] [AutoName11 Gradient[200 x 1 x *1]] [AutoName12 Gradient[200 x 1 x *1]] [AutoName13 Gradient[200 x 1 x *1]] [AutoName14 Gradient[200 x 1 x *1]] [AutoName15 Gradient[200 x 1 x *1]] [AutoName16 Gradient[200 x *1]] [AutoName17 Gradient[200 x 1 x *1]] [AutoName18 Gradient[200 x 1 x *1]] [AutoName19 Gradient[200 x 1 x *1]] [AutoName2 Gradient[200 x 1 x *1]] [AutoName20 Gradient[200 x 1 x *1]] [AutoName21 Gradient[200 x 1 x *1]] [AutoName22 Gradient[200 x *1]] [AutoName23 Gradient[200 x 1 x *1]] [AutoName24 Gradient[200 x 1 x *1]] [AutoName25 Gradient[200 x 1 x *1]] [AutoName26 Gradient[200 x 1 x *1]] [AutoName27 Gradient[200 x 1 x *1]] [AutoName28 Gradient[200 x 1 x *1]] [AutoName29 Gradient[200 x 1 x *1]] [AutoName3 Gradient[200 x 1 x *1]] [AutoName30 Gradient[200 x 1 x *1]] [AutoName31 Gradient[200 x *1]] [AutoName32 Gradient[200 x 1 x *1]] [AutoName33 Gradient[200 x 1 x *1]] [AutoName34 Gradient[200 x 1 x *1]] [AutoName35 Gradient[200 x 1 x *1]] [AutoName36 Gradient[200 x 1 x *1]] [AutoName37 Gradient[200 x 1 x *1]] [AutoName4 Gradient[200 x 1 x *1]] [AutoName5 Gradient[200 x 1 x *1]] [AutoName6 Gradient[200 x 1 x *1]] [AutoName7 Gradient[200 x 1 x *1]] [AutoName8 Gradient[200 x 1 x *1]] [AutoName9 Gradient[200 x *1]] [ClassPostProb Gradient[50 x 1 x *1]] [E0 Gradient[150 x 10000]] [LookupTable Gradient[150 x *1]] [PosteriorProb Gradient[10000 x 1 x *1]] [PosteriorProb Value[10000 x 1 x *1]] [TrainNodeClassBasedCrossEntropy Gradient[1]] [W2 Gradient[200 x 10000]] [WCF0 Gradient[200 x 1]] [WCI0 Gradient[200 x 1]] [WCO0 Gradient[200 x 1]] [WHC0 Gradient[200 x 200]] [WHF0 Gradient[200 x 200]] [WHI0 Gradient[200 x 200]] [WHO0 Gradient[200 x 200]] [WXC0 Gradient[200 x 150]] [WXF0 Gradient[200 x 150]] [WXI0 Gradient[200 x 150]] [WXO0 Gradient[200 x 150]] [WeightForClassPostProb Gradient[50 x 200]] [bc0 Gradient[200 x 1]] [bf0 Gradient[200 x 1]] [bi0 Gradient[200 x 1]] [bo0 Gradient[200 x 1]] [features Gradient[10000 x *1]] [labels Gradient[4 x *1]] [outputs Gradient[10000 x 1 x *1]] [outputs Value[10000 x 1 x *1]] }
0x7f091a06aff8: {[features Value[10000 x *1]] }
0x7f091a66e1e8: {[WXF0 Value[200 x 150]] }
0x7f091ab06d48: {[WXI0 Value[200 x 150]] }
0x7f091af4be08: {[E0 Value[150 x 10000]] }
0x7f091afe11c8: {[WXO0 Value[200 x 150]] }
0x7f091b3f0918: {[bo0 Value[200 x 1]] }
0x7f091b918508: {[WHF0 Value[200 x 200]] }
0x7f091b9dbf18: {[WHI0 Value[200 x 200]] }
0x7f091b9dc0d8: {[WHO0 Value[200 x 200]] }
0x7f091bbe7528: {[WHC0 Value[200 x 200]] }
0x7f091c541f78: {[bc0 Value[200 x 1]] }
0x7f091c5cfdd8: {[bi0 Value[200 x 1]] }
0x7f091c5d3c28: {[bf0 Value[200 x 1]] }
0x7f091c9580b8: {[TrainNodeClassBasedCrossEntropy Value[1]] }
0x7f091cbb00f8: {[AutoName5 Value[200 x 1 x *1]] }
0x7f091cbece88: {[AutoName6 Value[200 x 1 x *1]] }
0x7f091cd00e08: {[AutoName4 Value[200 x 1 x *1]] }
0x7f091d71f1d8: {[WCI0 Value[200 x 1]] }
0x7f091d71f398: {[WeightForClassPostProb Value[50 x 200]] }
0x7f091d71f6a8: {[WCO0 Value[200 x 1]] }
0x7f091dfd4b38: {[WXC0 Value[200 x 150]] }
0x7f091dffbb08: {[AutoName2 Value[200 x 1 x *1]] }
0x7f091e5ac158: {[WCF0 Value[200 x 1]] }
0x7f091efeb288: {[AutoName37 Value[200 x 1 x *1]] }
0x7f091efeb448: {[ClassPostProb Value[50 x 1 x *1]] }
0x7f091f1522b8: {[AutoName19 Value[200 x 1 x *1]] }
0x7f091f152478: {[AutoName28 Value[200 x 1 x *1]] }
0x7f091f152638: {[AutoName29 Value[200 x 1 x *1]] }
0x7f091f16cdf8: {[AutoName34 Value[200 x 1 x *1]] }
0x7f091f16cfb8: {[AutoName35 Value[200 x 1 x *1]] }
0x7f091f16d178: {[AutoName36 Value[200 x 1 x *1]] }
0x7f091f521c48: {[AutoName31 Value[200 x *1]] }
0x7f091f521ce8: {[AutoName22 Value[200 x *1]] }
0x7f091f52c3f8: {[AutoName3 Value[200 x 1 x *1]] }
0x7f091f54f6f8: {[AutoName15 Value[200 x 1 x *1]] }
0x7f091f54f8b8: {[AutoName17 Value[200 x 1 x *1]] }
0x7f091f54fa78: {[AutoName18 Value[200 x 1 x *1]] }
0x7f091f5543e8: {[AutoName0 Value[200 x 1 x *1]] }
0x7f091f587118: {[W2 Value[200 x 10000]] }
0x7f091f700e88: {[AutoName12 Value[200 x 1 x *1]] }
0x7f091f701048: {[AutoName13 Value[200 x 1 x *1]] }
0x7f091f701208: {[AutoName14 Value[200 x 1 x *1]] }
0x7f091f75f4b8: {[AutoName21 Value[200 x 1 x *1]] }
0x7f091f75f678: {[AutoName24 Value[200 x 1 x *1]] }
0x7f091f75f838: {[AutoName20 Value[200 x 1 x *1]] }
0x7f091f905fc8: {[AutoName32 Value[200 x 1 x *1]] }
0x7f091f91e618: {[AutoName23 Value[200 x 1 x *1]] }
0x7f091f91e7d8: {[AutoName9 Value[200 x *1]] }
0x7f091f91e998: {[AutoName10 Value[200 x 1 x *1]] }
0x7f091f9664d8: {[AutoName16 Value[200 x *1]] }
0x7f091f9666d8: {[AutoName30 Value[200 x 1 x *1]] }
0x7f091f966898: {[AutoName33 Value[200 x 1 x *1]] }
0x7f091f9a1338: {[AutoName25 Value[200 x 1 x *1]] }
0x7f091f9a14f8: {[AutoName26 Value[200 x 1 x *1]] }
0x7f091f9a16b8: {[AutoName27 Value[200 x 1 x *1]] }
0x7f091f9a8818: {[AutoName8 Value[200 x 1 x *1]] }
0x7f091f9a89d8: {[AutoName11 Value[200 x 1 x *1]] }
0x7f091f9a8b98: {[AutoName7 Value[200 x 1 x *1]] }
0x7f0921c651b8: {[labels Value[4 x *1]] }
0x7f0921cebc08: {[LookupTable Value[150 x *1]] }
0x7f0928ec3568: {[AutoName1 Value[200 x 1 x *1]] }

LMSequenceReader: Reading epoch data... 3760 sequences read.
WARNING: The same matrix with dim [4, 1872] has been transferred between different devices for 20 times.
LMSequenceReader: Reading epoch data... 0 sequences read.
07/13/2016 13:13:47: Minibatch[1-60]: TrainNodeClassBasedCrossEntropy = 6.37286543 * 82402
07/13/2016 13:13:47: Final Results: Minibatch[1-60]: TrainNodeClassBasedCrossEntropy = 6.37286543 * 82402; perplexity = 585.73380414

07/13/2016 13:13:47: Action "eval" complete.

07/13/2016 13:13:47: __COMPLETED__