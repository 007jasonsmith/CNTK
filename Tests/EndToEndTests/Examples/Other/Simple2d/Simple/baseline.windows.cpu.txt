CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3530 @ 2.80GHz
    Hardware threads: 4
    Total Memory: 12580404 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release_CpuOnly/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config/Simple.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu DeviceId=-1 timestamping=true Simple_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 05:08:14
		Last modified date: Fri Jul  8 10:29:45 2016
		Build type: Release
		Build target: CPU-only
		With 1bit-SGD: no
		Math lib: mkl
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by svcphil on LIANA-09-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
07/14/2016 05:49:24: -------------------------------------------------------------------
07/14/2016 05:49:24: Build info: 

07/14/2016 05:49:24: 		Built time: Jul 14 2016 05:08:14
07/14/2016 05:49:24: 		Last modified date: Fri Jul  8 10:29:45 2016
07/14/2016 05:49:24: 		Build type: Release
07/14/2016 05:49:24: 		Build target: CPU-only
07/14/2016 05:49:24: 		With 1bit-SGD: no
07/14/2016 05:49:24: 		Math lib: mkl
07/14/2016 05:49:24: 		Build Branch: HEAD
07/14/2016 05:49:24: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 05:49:24: 		Built by svcphil on LIANA-09-w
07/14/2016 05:49:24: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
07/14/2016 05:49:24: -------------------------------------------------------------------

07/14/2016 05:49:24: Running on cntk-muc00 at 2016/07/14 05:49:24
07/14/2016 05:49:24: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release_CpuOnly\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config/Simple.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu  DeviceId=-1  timestamping=true  Simple_Demo_Train=[SGD=[maxEpochs=3]]



07/14/2016 05:49:24: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:49:24: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = -1
command = Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/simple.dnn"
outputNodeNames = ScaledLogLikelihood
Simple_Demo_Train = [
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Test = [
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "$OutputDir$/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "$DataDir$/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu
DeviceId=-1
timestamping=true
Simple_Demo_Train=[SGD=[maxEpochs=3]]

07/14/2016 05:49:24: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:49:24: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:49:24: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu/Models"
deviceId = -1
command = Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
precision = "float"
traceLevel = 1
modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu/Models/simple.dnn"
outputNodeNames = ScaledLogLikelihood
Simple_Demo_Train = [
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Test = [
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu
DeviceId=-1
timestamping=true
Simple_Demo_Train=[SGD=[maxEpochs=3]]

07/14/2016 05:49:24: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:49:24: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Simple.cntk:command=Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
configparameters: Simple.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
configparameters: Simple.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
configparameters: Simple.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
configparameters: Simple.cntk:deviceId=-1
configparameters: Simple.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu/Models
configparameters: Simple.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu/Models/simple.dnn
configparameters: Simple.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu
configparameters: Simple.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Simple.cntk:precision=float
configparameters: Simple.cntk:RootDir=..
configparameters: Simple.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu
configparameters: Simple.cntk:Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]

configparameters: Simple.cntk:Simple_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Simple.cntk:Simple_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Simple.cntk:timestamping=true
configparameters: Simple.cntk:traceLevel=1
07/14/2016 05:49:24: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 05:49:24: Commands: Simple_Demo_Train Simple_Demo_Test Simple_Demo_Output
07/14/2016 05:49:24: Precision = "float"
07/14/2016 05:49:24: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu/Models/simple.dnn
07/14/2016 05:49:24: CNTKCommandTrainInfo: Simple_Demo_Train : 3
07/14/2016 05:49:24: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/14/2016 05:49:24: ##############################################################################
07/14/2016 05:49:24: #                                                                            #
07/14/2016 05:49:24: # Action "train"                                                             #
07/14/2016 05:49:24: #                                                                            #
07/14/2016 05:49:24: ##############################################################################

07/14/2016 05:49:24: CNTKCommandTrainBegin: Simple_Demo_Train
SimpleNetworkBuilder Using CPU

07/14/2016 05:49:25: Creating virgin network.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 05:49:25: Created model with 25 nodes on CPU.

07/14/2016 05:49:25: Training criterion node(s):
07/14/2016 05:49:25: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

07/14/2016 05:49:25: Evaluation criterion node(s):

07/14/2016 05:49:25: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *]] [PosteriorProb Value[2 x 1 x *]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *]] [features Gradient[2 x *]] [labels Gradient[2 x *]] }
000000B0F02BCB00: {[InvStdOfFeatures Value[2]] }
000000B0F02C0CA0: {[features Value[2 x *]] }
000000B0F02CB210: {[W2 Value[2 x 50]] }
000000B0F02CB2B0: {[B0 Value[50 x 1]] }
000000B0F02CB490: {[W1 Value[50 x 50]] }
000000B0F02CBA30: {[B1 Value[50 x 1]] }
000000B0F02CBD50: {[B2 Value[2 x 1]] }
000000B0F02CBE90: {[W0 Value[50 x 2]] }
000000B0F02E83F0: {[MeanOfFeatures Value[2]] }
000000B0F02FC830: {[B0 Gradient[50 x 1]] [H1 Gradient[50 x 1 x *]] [W1*H1+B1 Gradient[50 x 1 x *]] [W2*H1 Value[2 x 1 x *]] }
000000B0F02FC970: {[labels Value[2 x *]] }
000000B0F02FCA10: {[W0*features+B0 Gradient[50 x 1 x *]] [W1*H1 Value[50 x 1 x *]] }
000000B0F02FCBF0: {[B2 Gradient[2 x 1]] }
000000B0F02FCD30: {[EvalErrorPrediction Value[1]] }
000000B0F02FCFB0: {[Prior Value[2]] }
000000B0F02FD050: {[ScaledLogLikelihood Value[2 x 1 x *]] }
000000B0F02FD190: {[W0*features Value[50 x *]] }
000000B0F02FD2D0: {[H2 Value[50 x 1 x *]] [W1*H1 Gradient[50 x 1 x *]] }
000000B0F02FD4B0: {[CrossEntropyWithSoftmax Value[1]] }
000000B0F02FD690: {[LogOfPrior Value[2]] }
000000B0F02FD910: {[MVNormalizedFeatures Value[2 x *]] }
000000B0F02FD9B0: {[W0 Gradient[50 x 2]] [W0*features+B0 Value[50 x 1 x *]] }
000000B0F02FDAF0: {[W1 Gradient[50 x 50]] [W1*H1+B1 Value[50 x 1 x *]] }
000000B0F02FDB90: {[CrossEntropyWithSoftmax Gradient[1]] }
000000B0F02FDD70: {[B1 Gradient[50 x 1]] [H2 Gradient[50 x 1 x *]] [HLast Gradient[2 x 1 x *]] }
000000B0F02FE310: {[HLast Value[2 x 1 x *]] [W2 Gradient[2 x 50]] }
000000B0F02FE3B0: {[H1 Value[50 x 1 x *]] [W0*features Gradient[50 x *]] }
000000B0F02FE4F0: {[W2*H1 Gradient[2 x 1 x *]] }


07/14/2016 05:49:25: Precomputing --> 3 PreCompute nodes found.

07/14/2016 05:49:25: 	MeanOfFeatures = Mean()
07/14/2016 05:49:25: 	InvStdOfFeatures = InvStdDev()
07/14/2016 05:49:25: 	Prior = Mean()
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

07/14/2016 05:49:25: Precomputing --> Completed.


07/14/2016 05:49:25: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

07/14/2016 05:49:25: Starting minibatch loop.
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[   1-  10]: CrossEntropyWithSoftmax = 0.70512000 * 250; EvalErrorPrediction = 0.55200000 * 250; time = 0.1660s; samplesPerSecond = 1506.4
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[  11-  20]: CrossEntropyWithSoftmax = 0.69754907 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0072s; samplesPerSecond = 34693.3
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[  21-  30]: CrossEntropyWithSoftmax = 0.71056921 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0073s; samplesPerSecond = 34027.5
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[  31-  40]: CrossEntropyWithSoftmax = 0.72951099 * 250; EvalErrorPrediction = 0.56000000 * 250; time = 0.0073s; samplesPerSecond = 34406.8
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[  41-  50]: CrossEntropyWithSoftmax = 0.70946655 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0074s; samplesPerSecond = 33852.4
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[  51-  60]: CrossEntropyWithSoftmax = 0.72656787 * 250; EvalErrorPrediction = 0.54400000 * 250; time = 0.0073s; samplesPerSecond = 34055.3
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[  61-  70]: CrossEntropyWithSoftmax = 0.69337402 * 250; EvalErrorPrediction = 0.43200000 * 250; time = 0.0073s; samplesPerSecond = 34378.4
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[  71-  80]: CrossEntropyWithSoftmax = 0.73605176 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0073s; samplesPerSecond = 34111.1
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[  81-  90]: CrossEntropyWithSoftmax = 0.71453125 * 250; EvalErrorPrediction = 0.51200000 * 250; time = 0.0073s; samplesPerSecond = 34218.5
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[  91- 100]: CrossEntropyWithSoftmax = 0.75191992 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0073s; samplesPerSecond = 34335.9
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: CrossEntropyWithSoftmax = 0.75975146 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0073s; samplesPerSecond = 34478.0
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: CrossEntropyWithSoftmax = 0.73172168 * 250; EvalErrorPrediction = 0.50800000 * 250; time = 0.0073s; samplesPerSecond = 34387.9
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: CrossEntropyWithSoftmax = 0.76840820 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0073s; samplesPerSecond = 34237.2
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: CrossEntropyWithSoftmax = 0.70464844 * 250; EvalErrorPrediction = 0.46800000 * 250; time = 0.0073s; samplesPerSecond = 34373.7
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: CrossEntropyWithSoftmax = 0.70557227 * 250; EvalErrorPrediction = 0.46400000 * 250; time = 0.0073s; samplesPerSecond = 34307.7
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: CrossEntropyWithSoftmax = 0.72711816 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0073s; samplesPerSecond = 34059.9
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: CrossEntropyWithSoftmax = 0.70076660 * 250; EvalErrorPrediction = 0.45600000 * 250; time = 0.0073s; samplesPerSecond = 34013.6
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: CrossEntropyWithSoftmax = 0.69409766 * 250; EvalErrorPrediction = 0.49600000 * 250; time = 0.0073s; samplesPerSecond = 34190.4
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: CrossEntropyWithSoftmax = 0.69139941 * 250; EvalErrorPrediction = 0.46800000 * 250; time = 0.0073s; samplesPerSecond = 34232.5
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: CrossEntropyWithSoftmax = 0.73361719 * 250; EvalErrorPrediction = 0.55200000 * 250; time = 0.0072s; samplesPerSecond = 34497.0
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: CrossEntropyWithSoftmax = 0.72225879 * 250; EvalErrorPrediction = 0.46800000 * 250; time = 0.0073s; samplesPerSecond = 34139.0
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: CrossEntropyWithSoftmax = 0.70356348 * 250; EvalErrorPrediction = 0.45600000 * 250; time = 0.0073s; samplesPerSecond = 34260.7
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: CrossEntropyWithSoftmax = 0.69928516 * 250; EvalErrorPrediction = 0.46400000 * 250; time = 0.0072s; samplesPerSecond = 34487.5
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: CrossEntropyWithSoftmax = 0.72361133 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0072s; samplesPerSecond = 34501.8
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: CrossEntropyWithSoftmax = 0.69871875 * 250; EvalErrorPrediction = 0.51200000 * 250; time = 0.0073s; samplesPerSecond = 34195.0
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: CrossEntropyWithSoftmax = 0.69114844 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0073s; samplesPerSecond = 34218.5
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: CrossEntropyWithSoftmax = 0.68648047 * 250; EvalErrorPrediction = 0.45600000 * 250; time = 0.0073s; samplesPerSecond = 34307.7
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: CrossEntropyWithSoftmax = 0.69657227 * 250; EvalErrorPrediction = 0.46400000 * 250; time = 0.0073s; samplesPerSecond = 34204.4
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: CrossEntropyWithSoftmax = 0.71585547 * 250; EvalErrorPrediction = 0.45200000 * 250; time = 0.0073s; samplesPerSecond = 34157.7
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: CrossEntropyWithSoftmax = 0.69730664 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0074s; samplesPerSecond = 33958.2
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: CrossEntropyWithSoftmax = 0.70432422 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0073s; samplesPerSecond = 34069.2
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: CrossEntropyWithSoftmax = 0.69991797 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0073s; samplesPerSecond = 34345.4
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: CrossEntropyWithSoftmax = 0.68696875 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0073s; samplesPerSecond = 34373.7
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: CrossEntropyWithSoftmax = 0.67331445 * 250; EvalErrorPrediction = 0.37200000 * 250; time = 0.0072s; samplesPerSecond = 34506.6
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: CrossEntropyWithSoftmax = 0.65711328 * 250; EvalErrorPrediction = 0.43200000 * 250; time = 0.0073s; samplesPerSecond = 34270.0
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: CrossEntropyWithSoftmax = 0.64534375 * 250; EvalErrorPrediction = 0.44800000 * 250; time = 0.0073s; samplesPerSecond = 34148.3
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: CrossEntropyWithSoftmax = 0.61021875 * 250; EvalErrorPrediction = 0.36400000 * 250; time = 0.0073s; samplesPerSecond = 34260.7
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: CrossEntropyWithSoftmax = 0.54191016 * 250; EvalErrorPrediction = 0.10800000 * 250; time = 0.0075s; samplesPerSecond = 33422.5
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: CrossEntropyWithSoftmax = 0.45624414 * 250; EvalErrorPrediction = 0.10800000 * 250; time = 0.0073s; samplesPerSecond = 34270.0
07/14/2016 05:49:25:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: CrossEntropyWithSoftmax = 0.37636133 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0088s; samplesPerSecond = 28325.4
07/14/2016 05:49:25: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 0.68695698 * 10000; EvalErrorPrediction = 0.45550000 * 10000; totalSamplesSeen = 10000; learningRatePerSample = 0.02; epochTime=0.45953s
07/14/2016 05:49:25: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu/Models/simple.dnn.1'

07/14/2016 05:49:25: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 1: frames [10000..20000] (first sequence at sample 10000), data subset 0 of 1

07/14/2016 05:49:25: Starting minibatch loop.
07/14/2016 05:49:25:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.28579095 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0075s; samplesPerSecond = 33337.8
07/14/2016 05:49:25:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.27768622 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0085s; samplesPerSecond = 29505.5
07/14/2016 05:49:25:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.23309796 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0073s; samplesPerSecond = 34069.2
07/14/2016 05:49:25:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.20937579 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0073s; samplesPerSecond = 34345.4
07/14/2016 05:49:25:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.20192053 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0073s; samplesPerSecond = 34298.3
07/14/2016 05:49:25:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.21303992 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0073s; samplesPerSecond = 34199.7
07/14/2016 05:49:25:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.17823340 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0073s; samplesPerSecond = 34303.0
07/14/2016 05:49:25:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.18892688 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0073s; samplesPerSecond = 34397.4
07/14/2016 05:49:25:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.14161328 * 250; EvalErrorPrediction = 0.04000000 * 250; time = 0.0072s; samplesPerSecond = 34582.9
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.15813562 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0083s; samplesPerSecond = 30145.9
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.21082471 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0073s; samplesPerSecond = 34213.8
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.16117041 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0072s; samplesPerSecond = 34511.3
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.15665234 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0072s; samplesPerSecond = 34760.8
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.13067773 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0073s; samplesPerSecond = 34162.3
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.16602710 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0073s; samplesPerSecond = 34397.4
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.14975708 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0073s; samplesPerSecond = 34148.3
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.22351709 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0073s; samplesPerSecond = 34478.0
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.18010449 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0072s; samplesPerSecond = 34804.4
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.15341577 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0072s; samplesPerSecond = 34578.1
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.17195337 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0072s; samplesPerSecond = 34688.5
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.15546069 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0072s; samplesPerSecond = 34611.7
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.16008301 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0072s; samplesPerSecond = 34698.1
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.15944043 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0073s; samplesPerSecond = 34274.7
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.15336865 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0072s; samplesPerSecond = 34506.6
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.14822266 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0074s; samplesPerSecond = 33875.3
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.14999512 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0074s; samplesPerSecond = 33944.3
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.15481982 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0073s; samplesPerSecond = 34143.7
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.17656738 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0073s; samplesPerSecond = 34321.8
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.22373242 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0073s; samplesPerSecond = 34354.8
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.16403711 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0072s; samplesPerSecond = 34511.3
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.17322168 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0075s; samplesPerSecond = 33271.2
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.13165430 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0077s; samplesPerSecond = 32607.3
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.14016992 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0074s; samplesPerSecond = 33806.6
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.18369678 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0073s; samplesPerSecond = 34087.8
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.15161035 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0074s; samplesPerSecond = 33779.2
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.18919824 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0074s; samplesPerSecond = 33879.9
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.17374023 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0074s; samplesPerSecond = 33925.9
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.15033740 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0074s; samplesPerSecond = 33651.9
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.12107568 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0075s; samplesPerSecond = 33409.1
07/14/2016 05:49:26:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.15386328 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0087s; samplesPerSecond = 28578.0
07/14/2016 05:49:26: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 0.17515540 * 10000; EvalErrorPrediction = 0.07440000 * 10000; totalSamplesSeen = 20000; learningRatePerSample = 0.0080000004; epochTime=0.297806s
07/14/2016 05:49:26: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu/Models/simple.dnn.2'

07/14/2016 05:49:26: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 2: frames [20000..30000] (first sequence at sample 20000), data subset 0 of 1

07/14/2016 05:49:26: Starting minibatch loop.
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.10671189 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0074s; samplesPerSecond = 33958.2
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.17609264 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0085s; samplesPerSecond = 29561.3
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.14152701 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0073s; samplesPerSecond = 34307.7
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.16348047 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0073s; samplesPerSecond = 34478.0
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.11764551 * 250; EvalErrorPrediction = 0.04000000 * 250; time = 0.0072s; samplesPerSecond = 34582.9
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.16246954 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0073s; samplesPerSecond = 34378.4
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.16140143 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0073s; samplesPerSecond = 34397.4
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.19747632 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0072s; samplesPerSecond = 34554.3
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.20041321 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0073s; samplesPerSecond = 34120.4
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.13657080 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0072s; samplesPerSecond = 34520.9
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.20124377 * 250; EvalErrorPrediction = 0.10800000 * 250; time = 0.0073s; samplesPerSecond = 34416.3
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.17898120 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0075s; samplesPerSecond = 33548.0
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.16037830 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0072s; samplesPerSecond = 34559.0
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.16276050 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0072s; samplesPerSecond = 34587.7
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.19882275 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0072s; samplesPerSecond = 34606.9
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.10263354 * 250; EvalErrorPrediction = 0.04000000 * 250; time = 0.0072s; samplesPerSecond = 34497.0
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.17038770 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0072s; samplesPerSecond = 34506.6
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.16624731 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0072s; samplesPerSecond = 34549.5
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.12664160 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0072s; samplesPerSecond = 34630.8
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.11944995 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0072s; samplesPerSecond = 34582.9
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.12949756 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0072s; samplesPerSecond = 34717.4
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.18147778 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0072s; samplesPerSecond = 34930.8
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.13172412 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0072s; samplesPerSecond = 34563.8
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.19600269 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0074s; samplesPerSecond = 33602.2
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.15840479 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0073s; samplesPerSecond = 34097.1
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.11888281 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0073s; samplesPerSecond = 34435.3
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.13710742 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0072s; samplesPerSecond = 34770.5
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.20026318 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0072s; samplesPerSecond = 34606.9
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.18824951 * 250; EvalErrorPrediction = 0.10800000 * 250; time = 0.0073s; samplesPerSecond = 34354.8
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.16653223 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0072s; samplesPerSecond = 34664.4
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.11935254 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0073s; samplesPerSecond = 34373.7
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.16085449 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0072s; samplesPerSecond = 34592.5
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.16112646 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0072s; samplesPerSecond = 34688.5
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.12345313 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0072s; samplesPerSecond = 34516.1
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.13502686 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0072s; samplesPerSecond = 34683.7
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.20874756 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0072s; samplesPerSecond = 34501.8
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.16650537 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0073s; samplesPerSecond = 34340.7
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.14995703 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0073s; samplesPerSecond = 34430.5
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.16497070 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0073s; samplesPerSecond = 34482.8
07/14/2016 05:49:26:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.16843018 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0086s; samplesPerSecond = 29036.0
07/14/2016 05:49:26: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 0.15794755 * 10000; EvalErrorPrediction = 0.07480000 * 10000; totalSamplesSeen = 30000; learningRatePerSample = 0.0080000004; epochTime=0.294294s
07/14/2016 05:49:26: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu/Models/simple.dnn'
07/14/2016 05:49:26: CNTKCommandTrainEnd: Simple_Demo_Train

07/14/2016 05:49:26: Action "train" complete.


07/14/2016 05:49:26: ##############################################################################
07/14/2016 05:49:26: #                                                                            #
07/14/2016 05:49:26: # Action "test"                                                              #
07/14/2016 05:49:26: #                                                                            #
07/14/2016 05:49:26: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [EvalErrorPrediction Gradient[1]] [H1 Gradient[50 x 1 x *1]] [H2 Gradient[50 x 1 x *1]] [HLast Gradient[2 x 1 x *1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *1]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *1]] [PosteriorProb Value[2 x 1 x *1]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *1]] [ScaledLogLikelihood Value[2 x 1 x *1]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *1]] [W0*features+B0 Gradient[50 x 1 x *1]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *1]] [W1*H1+B1 Gradient[50 x 1 x *1]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *1]] [features Gradient[2 x *1]] [labels Gradient[2 x *1]] }
000000B0F02FC970: {[InvStdOfFeatures Value[2]] }
000000B0F02FCD30: {[labels Value[2 x *1]] }
000000B0F02FD050: {[W0 Value[50 x 2]] }
000000B0F02FD190: {[W2 Value[2 x 50]] }
000000B0F02FD5F0: {[W1 Value[50 x 50]] }
000000B0F02FD7D0: {[B0 Value[50 x 1]] }
000000B0F02FDA50: {[B2 Value[2 x 1]] }
000000B0F02FDB90: {[MeanOfFeatures Value[2]] }
000000B0F02FDCD0: {[Prior Value[2]] }
000000B0F02FDFF0: {[features Value[2 x *1]] }
000000B0F02FE310: {[B1 Value[50 x 1]] }
000000B0F8F877F0: {[LogOfPrior Value[2]] }
000000B0F8F87A70: {[W1*H1+B1 Value[50 x 1 x *1]] }
000000B0F8F87B10: {[H1 Value[50 x 1 x *1]] }
000000B0F8F880B0: {[EvalErrorPrediction Value[1]] }
000000B0F8F885B0: {[W1*H1 Value[50 x 1 x *1]] }
000000B0F8F88A10: {[W0*features Value[50 x *1]] }
000000B0F8F88AB0: {[HLast Value[2 x 1 x *1]] }
000000B0F8F88BF0: {[MVNormalizedFeatures Value[2 x *1]] }
000000B0F8F89050: {[W0*features+B0 Value[50 x 1 x *1]] }
000000B0F8F890F0: {[W2*H1 Value[2 x 1 x *1]] }
000000B0F8F89230: {[H2 Value[50 x 1 x *1]] }
000000B0F8F894B0: {[CrossEntropyWithSoftmax Value[1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..603] (first sequence at sample 0), data subset 0 of 1
07/14/2016 05:49:26: Minibatch[1-1]: EvalErrorPrediction = 0.05638474 * 603; CrossEntropyWithSoftmax = 0.12474990 * 603
07/14/2016 05:49:26: Final Results: Minibatch[1-1]: EvalErrorPrediction = 0.05638474 * 603; CrossEntropyWithSoftmax = 0.12474990 * 603; perplexity = 1.13286509

07/14/2016 05:49:26: Action "test" complete.


07/14/2016 05:49:26: ##############################################################################
07/14/2016 05:49:26: #                                                                            #
07/14/2016 05:49:26: # Action "write"                                                             #
07/14/2016 05:49:26: #                                                                            #
07/14/2016 05:49:26: ##############################################################################


Post-processing network...

8 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()
	labels = InputValue()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *2]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *2]
Validating --> MeanOfFeatures = Mean (features) : [2 x *2] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *2] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *2], [2], [2] -> [2 x *2]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *2] -> [50 x *2]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *2], [50 x 1] -> [50 x 1 x *2]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *2], [50 x 1] -> [50 x 1 x *2]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *2] -> [2 x 1 x *2]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *2], [2 x 1] -> [2 x 1 x *2]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *2], [2 x 1 x *2] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *2], [2 x 1 x *2] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *2] -> [2 x 1 x *2]
Validating --> Prior = Mean (labels) : [2 x *2] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *2], [2] -> [2 x 1 x *2]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [CrossEntropyWithSoftmax Value[1]] [EvalErrorPrediction Gradient[1]] [EvalErrorPrediction Value[1]] [H1 Gradient[50 x 1 x *2]] [H2 Gradient[50 x 1 x *2]] [HLast Gradient[2 x 1 x *2]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *2]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *2]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *2]] [ScaledLogLikelihood Value[2 x 1 x *2]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *2]] [W0*features+B0 Gradient[50 x 1 x *2]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *2]] [W1*H1+B1 Gradient[50 x 1 x *2]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *2]] [features Gradient[2 x *2]] [labels Gradient[2 x *2]] }
000000B0F02FC970: {[labels Value[2 x *2]] }
000000B0F02FCA10: {[InvStdOfFeatures Value[2]] }
000000B0F02FCC90: {[W0 Value[50 x 2]] }
000000B0F02FD2D0: {[B0 Value[50 x 1]] }
000000B0F02FD4B0: {[features Value[2 x *2]] }
000000B0F02FD5F0: {[B2 Value[2 x 1]] }
000000B0F02FD7D0: {[MeanOfFeatures Value[2]] }
000000B0F02FD870: {[W1 Value[50 x 50]] }
000000B0F02FDA50: {[B1 Value[50 x 1]] }
000000B0F02FDB90: {[W2 Value[2 x 50]] }
000000B0F02FDF50: {[Prior Value[2]] }
000000B0F03262A0: {[H2 Value[50 x 1 x *2]] }
000000B0F03263E0: {[MVNormalizedFeatures Value[2 x *2]] }
000000B0F0326520: {[W1*H1 Value[50 x 1 x *2]] }
000000B0F03265C0: {[W0*features+B0 Value[50 x 1 x *2]] }
000000B0F0326CA0: {[HLast Value[2 x 1 x *2]] }
000000B0F0327060: {[W1*H1+B1 Value[50 x 1 x *2]] }
000000B0F03276A0: {[LogOfPrior Value[2]] }
000000B0F0327740: {[PosteriorProb Value[2 x 1 x *2]] }
000000B0F0327CE0: {[W0*features Value[50 x *2]] }
000000B0F0327D80: {[W2*H1 Value[2 x 1 x *2]] }
000000B0F0327EC0: {[H1 Value[50 x 1 x *2]] }

Minibatch[0]: ActualMBSize = 603
Written to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054921.211616\Examples\Other\Simple2d_Simple@release_cpu/SimpleOutput*
Total Samples Evaluated = 603

07/14/2016 05:49:26: Action "write" complete.

07/14/2016 05:49:26: __COMPLETED__