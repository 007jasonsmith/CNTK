CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config/Multigpu.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data RunDir=/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config OutputDir=/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu DeviceId=-1 timestamping=true Multigpu_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Jul 13 2016 15:58:36
		Last modified date: Wed Jul 13 15:14:47 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 539ab7467b022b4ffa087721bcf20d18485c8d0d
		Built by philly on adf92da755f9
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 1 nodes pinging each other
ping [requestnodes (before change)]: all 1 nodes responded
requestnodes [MPIWrapper]: using 1 out of 1 MPI nodes (1 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 1 nodes pinging each other
ping [requestnodes (after change)]: all 1 nodes responded
mpihelper: only one MPI process: MPI operation will be boring
ping [mpihelper]: 1 nodes pinging each other
ping [mpihelper]: all 1 nodes responded
07/13/2016 16:48:08: -------------------------------------------------------------------
07/13/2016 16:48:08: Build info: 

07/13/2016 16:48:08: 		Built time: Jul 13 2016 15:58:36
07/13/2016 16:48:08: 		Last modified date: Wed Jul 13 15:14:47 2016
07/13/2016 16:48:08: 		Build type: release
07/13/2016 16:48:08: 		Build target: GPU
07/13/2016 16:48:08: 		With 1bit-SGD: yes
07/13/2016 16:48:08: 		Math lib: mkl
07/13/2016 16:48:08: 		CUDA_PATH: /usr/local/cuda-7.5
07/13/2016 16:48:08: 		CUB_PATH: /usr/local/cub-1.4.1
07/13/2016 16:48:08: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/13/2016 16:48:08: 		Build Branch: HEAD
07/13/2016 16:48:08: 		Build SHA1: 539ab7467b022b4ffa087721bcf20d18485c8d0d
07/13/2016 16:48:08: 		Built by philly on adf92da755f9
07/13/2016 16:48:08: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
07/13/2016 16:48:08: -------------------------------------------------------------------
07/13/2016 16:48:09: -------------------------------------------------------------------
07/13/2016 16:48:09: GPU info:

07/13/2016 16:48:09: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 16:48:09: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 16:48:09: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 16:48:09: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 16:48:09: -------------------------------------------------------------------

07/13/2016 16:48:09: Running on localhost at 2016/07/13 16:48:09
07/13/2016 16:48:09: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config/Multigpu.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  RunDir=/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config  OutputDir=/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu  DeviceId=-1  timestamping=true  Multigpu_Demo_Train=[SGD=[maxEpochs=3]]



07/13/2016 16:48:09: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/13/2016 16:48:09: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "$OutputDir$/MultigpuOutput"    
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu
DeviceId=-1
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

07/13/2016 16:48:09: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/13/2016 16:48:09: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/13/2016 16:48:09: RootDir = ".."
ConfigDir = "../Config"
DataDir = "../Data"
OutputDir = "../Output"
ModelDir = "/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu/MultigpuOutput"    
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu
DeviceId=-1
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

07/13/2016 16:48:09: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/13/2016 16:48:09: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Multigpu.cntk:command=Multigpu_Demo_Train:Multigpu_Demo_Test
configparameters: Multigpu.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
configparameters: Multigpu.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Multigpu.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Multigpu.cntk:deviceId=-1
configparameters: Multigpu.cntk:ModelDir=/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu/Models
configparameters: Multigpu.cntk:modelPath=/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn
configparameters: Multigpu.cntk:Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu/MultigpuOutput"    
]

configparameters: Multigpu.cntk:Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Multigpu.cntk:Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Multigpu.cntk:OutputDir=/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu
configparameters: Multigpu.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Multigpu.cntk:parallelTrain=true
configparameters: Multigpu.cntk:precision=float
configparameters: Multigpu.cntk:RootDir=..
configparameters: Multigpu.cntk:RunDir=/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu
configparameters: Multigpu.cntk:timestamping=true
configparameters: Multigpu.cntk:traceLevel=1
07/13/2016 16:48:09: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/13/2016 16:48:09: Commands: Multigpu_Demo_Train Multigpu_Demo_Test
07/13/2016 16:48:09: Precision = "float"
07/13/2016 16:48:09: CNTKModelPath: /tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn
07/13/2016 16:48:09: CNTKCommandTrainInfo: Multigpu_Demo_Train : 3
07/13/2016 16:48:09: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/13/2016 16:48:09: ##############################################################################
07/13/2016 16:48:09: #                                                                            #
07/13/2016 16:48:09: # Action "train"                                                             #
07/13/2016 16:48:09: #                                                                            #
07/13/2016 16:48:09: ##############################################################################

07/13/2016 16:48:09: CNTKCommandTrainBegin: Multigpu_Demo_Train
SimpleNetworkBuilder Using CPU

07/13/2016 16:48:09: Creating virgin network.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/13/2016 16:48:09: Created model with 25 nodes on CPU.

07/13/2016 16:48:09: Training criterion node(s):
07/13/2016 16:48:09: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

07/13/2016 16:48:09: Evaluation criterion node(s):

07/13/2016 16:48:09: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *]] [PosteriorProb Value[2 x 1 x *]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *]] [features Gradient[2 x *]] [labels Gradient[2 x *]] }
0x3383e98: {[features Value[2 x *]] }
0x33a7c68: {[MeanOfFeatures Value[2]] }
0x33a8738: {[InvStdOfFeatures Value[2]] }
0x33a96e8: {[W0 Value[50 x 2]] }
0x33a9cd8: {[B0 Value[50 x 1]] }
0x33aac18: {[W1 Value[50 x 50]] }
0x33ad758: {[B1 Value[50 x 1]] }
0x33ae618: {[W2 Value[2 x 50]] }
0x33aebd8: {[B2 Value[2 x 1]] }
0x33af6a8: {[labels Value[2 x *]] }
0x33b0418: {[Prior Value[2]] }
0x33b5af8: {[EvalErrorPrediction Value[1]] }
0x33b5c58: {[ScaledLogLikelihood Value[2 x 1 x *]] }
0x33b5e18: {[CrossEntropyWithSoftmax Value[1]] }
0x33b6428: {[W0 Gradient[50 x 2]] [W0*features+B0 Value[50 x 1 x *]] }
0x33b6618: {[LogOfPrior Value[2]] }
0x33b80c8: {[MVNormalizedFeatures Value[2 x *]] }
0x33b87c8: {[W0*features Value[50 x *]] }
0x33b89d8: {[H1 Value[50 x 1 x *]] [W0*features Gradient[50 x *]] }
0x33b8b98: {[W0*features+B0 Gradient[50 x 1 x *]] [W1*H1 Value[50 x 1 x *]] }
0x33b8d58: {[W1 Gradient[50 x 50]] [W1*H1+B1 Value[50 x 1 x *]] }
0x33b8f18: {[H2 Value[50 x 1 x *]] [W1*H1 Gradient[50 x 1 x *]] }
0x33b90d8: {[B0 Gradient[50 x 1]] [H1 Gradient[50 x 1 x *]] [W1*H1+B1 Gradient[50 x 1 x *]] [W2*H1 Value[2 x 1 x *]] }
0x33b9298: {[HLast Value[2 x 1 x *]] [W2 Gradient[2 x 50]] }
0x33b9dc8: {[CrossEntropyWithSoftmax Gradient[1]] }
0x33b9f88: {[B1 Gradient[50 x 1]] [H2 Gradient[50 x 1 x *]] [HLast Gradient[2 x 1 x *]] }
0x33ba148: {[W2*H1 Gradient[2 x 1 x *]] }
0x33ba308: {[B2 Gradient[2 x 1]] }


07/13/2016 16:48:09: Precomputing --> 3 PreCompute nodes found.

07/13/2016 16:48:09: 	MeanOfFeatures = Mean()
07/13/2016 16:48:09: 	InvStdOfFeatures = InvStdDev()
07/13/2016 16:48:09: 	Prior = Mean()
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

07/13/2016 16:48:09: Precomputing --> Completed.


07/13/2016 16:48:09: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

07/13/2016 16:48:09: Starting minibatch loop.
07/13/2016 16:48:09:  Epoch[ 1 of 3]-Minibatch[   1-  10]: CrossEntropyWithSoftmax = 0.69966248 * 250; EvalErrorPrediction = 0.51200000 * 250; time = 0.0213s; samplesPerSecond = 11764.2
07/13/2016 16:48:09:  Epoch[ 1 of 3]-Minibatch[  11-  20]: CrossEntropyWithSoftmax = 0.70639648 * 250; EvalErrorPrediction = 0.49600000 * 250; time = 0.0100s; samplesPerSecond = 25055.1
07/13/2016 16:48:09:  Epoch[ 1 of 3]-Minibatch[  21-  30]: CrossEntropyWithSoftmax = 0.70470251 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0163s; samplesPerSecond = 15311.1
07/13/2016 16:48:09:  Epoch[ 1 of 3]-Minibatch[  31-  40]: CrossEntropyWithSoftmax = 0.69813501 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0164s; samplesPerSecond = 15272.8
07/13/2016 16:48:09:  Epoch[ 1 of 3]-Minibatch[  41-  50]: CrossEntropyWithSoftmax = 0.73551416 * 250; EvalErrorPrediction = 0.57600000 * 250; time = 0.0162s; samplesPerSecond = 15385.6
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[  51-  60]: CrossEntropyWithSoftmax = 0.72432324 * 250; EvalErrorPrediction = 0.50800000 * 250; time = 0.0131s; samplesPerSecond = 19149.8
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[  61-  70]: CrossEntropyWithSoftmax = 0.73327588 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0230s; samplesPerSecond = 10862.5
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[  71-  80]: CrossEntropyWithSoftmax = 0.70092627 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0179s; samplesPerSecond = 13992.3
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[  81-  90]: CrossEntropyWithSoftmax = 0.72354980 * 250; EvalErrorPrediction = 0.46000000 * 250; time = 0.0136s; samplesPerSecond = 18405.4
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[  91- 100]: CrossEntropyWithSoftmax = 0.72148096 * 250; EvalErrorPrediction = 0.52000000 * 250; time = 0.0239s; samplesPerSecond = 10481.3
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: CrossEntropyWithSoftmax = 0.69814941 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0228s; samplesPerSecond = 10973.1
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: CrossEntropyWithSoftmax = 0.70699121 * 250; EvalErrorPrediction = 0.54800000 * 250; time = 0.0163s; samplesPerSecond = 15361.9
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: CrossEntropyWithSoftmax = 0.69898437 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0132s; samplesPerSecond = 18992.6
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: CrossEntropyWithSoftmax = 0.71712695 * 250; EvalErrorPrediction = 0.54000000 * 250; time = 0.0294s; samplesPerSecond = 8514.4
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: CrossEntropyWithSoftmax = 0.69470703 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0203s; samplesPerSecond = 12332.3
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: CrossEntropyWithSoftmax = 0.71375879 * 250; EvalErrorPrediction = 0.51200000 * 250; time = 0.0133s; samplesPerSecond = 18865.1
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: CrossEntropyWithSoftmax = 0.70381641 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0233s; samplesPerSecond = 10752.2
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: CrossEntropyWithSoftmax = 0.71748633 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0165s; samplesPerSecond = 15163.5
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: CrossEntropyWithSoftmax = 0.71863281 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0164s; samplesPerSecond = 15239.3
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: CrossEntropyWithSoftmax = 0.70715234 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0174s; samplesPerSecond = 14404.2
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: CrossEntropyWithSoftmax = 0.70401074 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0287s; samplesPerSecond = 8719.9
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: CrossEntropyWithSoftmax = 0.70599414 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0167s; samplesPerSecond = 14940.5
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: CrossEntropyWithSoftmax = 0.69628711 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0170s; samplesPerSecond = 14716.3
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: CrossEntropyWithSoftmax = 0.75920898 * 250; EvalErrorPrediction = 0.51200000 * 250; time = 0.0165s; samplesPerSecond = 15117.6
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: CrossEntropyWithSoftmax = 0.70542578 * 250; EvalErrorPrediction = 0.43600000 * 250; time = 0.0144s; samplesPerSecond = 17392.5
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: CrossEntropyWithSoftmax = 0.70643945 * 250; EvalErrorPrediction = 0.46400000 * 250; time = 0.0235s; samplesPerSecond = 10639.7
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: CrossEntropyWithSoftmax = 0.72481641 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0101s; samplesPerSecond = 24701.1
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: CrossEntropyWithSoftmax = 0.71133594 * 250; EvalErrorPrediction = 0.55600000 * 250; time = 0.0160s; samplesPerSecond = 15599.7
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: CrossEntropyWithSoftmax = 0.68605664 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0164s; samplesPerSecond = 15213.3
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: CrossEntropyWithSoftmax = 0.69535352 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0133s; samplesPerSecond = 18829.6
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: CrossEntropyWithSoftmax = 0.68741797 * 250; EvalErrorPrediction = 0.45200000 * 250; time = 0.0165s; samplesPerSecond = 15192.0
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: CrossEntropyWithSoftmax = 0.67916406 * 250; EvalErrorPrediction = 0.46000000 * 250; time = 0.0166s; samplesPerSecond = 15090.2
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: CrossEntropyWithSoftmax = 0.67841992 * 250; EvalErrorPrediction = 0.44800000 * 250; time = 0.0165s; samplesPerSecond = 15106.7
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: CrossEntropyWithSoftmax = 0.68038477 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0180s; samplesPerSecond = 13851.2
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: CrossEntropyWithSoftmax = 0.61937109 * 250; EvalErrorPrediction = 0.30400000 * 250; time = 0.0138s; samplesPerSecond = 18177.9
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: CrossEntropyWithSoftmax = 0.57844336 * 250; EvalErrorPrediction = 0.27200000 * 250; time = 0.0343s; samplesPerSecond = 7294.4
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: CrossEntropyWithSoftmax = 0.49124023 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0164s; samplesPerSecond = 15243.9
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: CrossEntropyWithSoftmax = 0.39071289 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0195s; samplesPerSecond = 12833.7
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: CrossEntropyWithSoftmax = 0.27650586 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0168s; samplesPerSecond = 14895.1
07/13/2016 16:48:10:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: CrossEntropyWithSoftmax = 0.26430078 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0135s; samplesPerSecond = 18551.5
07/13/2016 16:48:10: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 0.66664155 * 10000; EvalErrorPrediction = 0.44430000 * 10000; totalSamplesSeen = 10000; learningRatePerSample = 0.02; epochTime=0.720394s
07/13/2016 16:48:10: SGD: Saving checkpoint model '/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn.1'

07/13/2016 16:48:10: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 1: frames [10000..20000] (first sequence at sample 10000), data subset 0 of 1

07/13/2016 16:48:10: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 1, NumGradientBits = 1).
07/13/2016 16:48:10:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.20720011 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0199s; samplesPerSecond = 12543.3
07/13/2016 16:48:10:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.19690294 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0173s; samplesPerSecond = 14419.2
07/13/2016 16:48:10:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.16064648 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0173s; samplesPerSecond = 14409.2
07/13/2016 16:48:10:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.13547173 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0173s; samplesPerSecond = 14436.7
07/13/2016 16:48:10:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.18000263 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0466s; samplesPerSecond = 5365.3
07/13/2016 16:48:10:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.17787842 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0217s; samplesPerSecond = 11540.9
07/13/2016 16:48:10:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.16821879 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0242s; samplesPerSecond = 10311.0
07/13/2016 16:48:10:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.16363457 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0216s; samplesPerSecond = 11565.5
07/13/2016 16:48:10:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.19533907 * 250; EvalErrorPrediction = 0.10800000 * 250; time = 0.0174s; samplesPerSecond = 14407.6
07/13/2016 16:48:10:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.19318692 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0214s; samplesPerSecond = 11681.2
07/13/2016 16:48:10:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.12726280 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0330s; samplesPerSecond = 7580.6
07/13/2016 16:48:10:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.18620068 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0405s; samplesPerSecond = 6173.9
07/13/2016 16:48:10:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.11547500 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0404s; samplesPerSecond = 6190.7
07/13/2016 16:48:10:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.16675950 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0212s; samplesPerSecond = 11814.2
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.15807389 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0174s; samplesPerSecond = 14362.0
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.18389093 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0242s; samplesPerSecond = 10314.8
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.18269752 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0143s; samplesPerSecond = 17488.6
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.18737840 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0368s; samplesPerSecond = 6797.5
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.20174758 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0666s; samplesPerSecond = 3755.1
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.13336708 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0408s; samplesPerSecond = 6128.7
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.13851335 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0210s; samplesPerSecond = 11907.6
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.15422286 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0211s; samplesPerSecond = 11830.4
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.15478818 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0174s; samplesPerSecond = 14370.3
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.14530281 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0204s; samplesPerSecond = 12232.7
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.12192868 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0175s; samplesPerSecond = 14322.5
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.13975589 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0212s; samplesPerSecond = 11789.7
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.12566355 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0201s; samplesPerSecond = 12407.6
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.18962999 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0174s; samplesPerSecond = 14383.5
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.17955441 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0150s; samplesPerSecond = 16624.6
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.18862089 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0201s; samplesPerSecond = 12437.2
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.17503114 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0174s; samplesPerSecond = 14375.3
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.14741594 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0263s; samplesPerSecond = 9496.3
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.13803631 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0212s; samplesPerSecond = 11765.8
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.14138419 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0174s; samplesPerSecond = 14405.1
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.13886964 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0203s; samplesPerSecond = 12337.8
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.15026396 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0173s; samplesPerSecond = 14485.2
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.14659499 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0174s; samplesPerSecond = 14357.1
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.13078486 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0202s; samplesPerSecond = 12384.2
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.19833051 * 250; EvalErrorPrediction = 0.11600000 * 250; time = 0.0299s; samplesPerSecond = 8348.9
07/13/2016 16:48:11:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.15827416 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0286s; samplesPerSecond = 8728.7
07/13/2016 16:48:11: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 0.16210753 * 10000; EvalErrorPrediction = 0.07480000 * 10000; totalSamplesSeen = 20000; learningRatePerSample = 0.0080000004; epochTime=0.972129s
07/13/2016 16:48:11: SGD: Saving checkpoint model '/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn.2'

07/13/2016 16:48:11: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 2: frames [20000..30000] (first sequence at sample 20000), data subset 0 of 1

07/13/2016 16:48:11: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 1, NumGradientBits = 1).
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.19030872 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0178s; samplesPerSecond = 14022.1
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.13919069 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0209s; samplesPerSecond = 11980.6
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.14593679 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0256s; samplesPerSecond = 9754.6
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.13320695 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0171s; samplesPerSecond = 14600.2
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.17358973 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0170s; samplesPerSecond = 14676.5
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.17946812 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0203s; samplesPerSecond = 12309.2
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.15006756 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0169s; samplesPerSecond = 14828.0
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.17057215 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0213s; samplesPerSecond = 11718.9
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.10411296 * 250; EvalErrorPrediction = 0.04000000 * 250; time = 0.0174s; samplesPerSecond = 14386.8
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.20570930 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0248s; samplesPerSecond = 10087.6
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.16517774 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0163s; samplesPerSecond = 15307.4
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.14909461 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0281s; samplesPerSecond = 8901.5
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.19230929 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0285s; samplesPerSecond = 8765.2
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.13671733 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0284s; samplesPerSecond = 8793.2
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.21113318 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0190s; samplesPerSecond = 13173.8
07/13/2016 16:48:11:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.13129051 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0334s; samplesPerSecond = 7484.4
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.17303704 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0477s; samplesPerSecond = 5241.4
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.16481996 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0112s; samplesPerSecond = 22236.1
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.14593373 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0142s; samplesPerSecond = 17558.6
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.12558545 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0173s; samplesPerSecond = 14425.9
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.13442997 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0143s; samplesPerSecond = 17525.4
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.17123063 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0243s; samplesPerSecond = 10271.2
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.22484426 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0268s; samplesPerSecond = 9328.7
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.18288660 * 250; EvalErrorPrediction = 0.11600000 * 250; time = 0.0323s; samplesPerSecond = 7730.4
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.20294459 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0111s; samplesPerSecond = 22544.9
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.22848232 * 250; EvalErrorPrediction = 0.12400000 * 250; time = 0.0245s; samplesPerSecond = 10189.9
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.12500145 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0185s; samplesPerSecond = 13500.4
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.15719111 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0173s; samplesPerSecond = 14429.2
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.11520179 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0172s; samplesPerSecond = 14504.5
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.14160271 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0266s; samplesPerSecond = 9410.5
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.18510072 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0214s; samplesPerSecond = 11658.3
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.15005073 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0213s; samplesPerSecond = 11725.0
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.12867929 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0361s; samplesPerSecond = 6927.3
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.17640187 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0184s; samplesPerSecond = 13559.7
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.14983432 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0217s; samplesPerSecond = 11501.1
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.11473887 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0172s; samplesPerSecond = 14521.4
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.16525631 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0172s; samplesPerSecond = 14497.0
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.14962769 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0172s; samplesPerSecond = 14496.1
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.15971886 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0386s; samplesPerSecond = 6473.5
07/13/2016 16:48:12:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.17867851 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0174s; samplesPerSecond = 14357.1
07/13/2016 16:48:12: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 0.16072911 * 10000; EvalErrorPrediction = 0.07780000 * 10000; totalSamplesSeen = 30000; learningRatePerSample = 0.0080000004; epochTime=0.887733s
07/13/2016 16:48:12: SGD: Saving checkpoint model '/tmp/cntk-test-20160713164803.281225/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn'
07/13/2016 16:48:12: CNTKCommandTrainEnd: Multigpu_Demo_Train

07/13/2016 16:48:12: Action "train" complete.


07/13/2016 16:48:12: ##############################################################################
07/13/2016 16:48:12: #                                                                            #
07/13/2016 16:48:12: # Action "test"                                                              #
07/13/2016 16:48:12: #                                                                            #
07/13/2016 16:48:12: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [EvalErrorPrediction Gradient[1]] [H1 Gradient[50 x 1 x *1]] [H2 Gradient[50 x 1 x *1]] [HLast Gradient[2 x 1 x *1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *1]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *1]] [PosteriorProb Value[2 x 1 x *1]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *1]] [ScaledLogLikelihood Value[2 x 1 x *1]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *1]] [W0*features+B0 Gradient[50 x 1 x *1]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *1]] [W1*H1+B1 Gradient[50 x 1 x *1]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *1]] [features Gradient[2 x *1]] [labels Gradient[2 x *1]] }
0x7f6e25514f38: {[B0 Value[50 x 1]] }
0x7f6e25515128: {[B1 Value[50 x 1]] }
0x7f6e25515868: {[EvalErrorPrediction Value[1]] }
0x7f6e25516098: {[B2 Value[2 x 1]] }
0x7f6e2552bb18: {[features Value[2 x *1]] }
0x7f6e2552c438: {[InvStdOfFeatures Value[2]] }
0x7f6e2552cea8: {[labels Value[2 x *1]] }
0x7f6e2552da38: {[MeanOfFeatures Value[2]] }
0x7f6e2552e588: {[Prior Value[2]] }
0x7f6e2552e788: {[W0 Value[50 x 2]] }
0x7f6e2552eb98: {[W1 Value[50 x 50]] }
0x7f6e255301a8: {[W2 Value[2 x 50]] }
0x7f6e25537e08: {[CrossEntropyWithSoftmax Value[1]] }
0x7f6e255382a8: {[LogOfPrior Value[2]] }
0x7f6e255392c8: {[MVNormalizedFeatures Value[2 x *1]] }
0x7f6e25539a18: {[W0*features Value[50 x *1]] }
0x7f6e25539b18: {[W0*features+B0 Value[50 x 1 x *1]] }
0x7f6e25539f48: {[H1 Value[50 x 1 x *1]] }
0x7f6e2553a108: {[W1*H1 Value[50 x 1 x *1]] }
0x7f6e2553a2c8: {[W1*H1+B1 Value[50 x 1 x *1]] }
0x7f6e2553a488: {[H2 Value[50 x 1 x *1]] }
0x7f6e2553a648: {[W2*H1 Value[2 x 1 x *1]] }
0x7f6e2553a808: {[HLast Value[2 x 1 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..603] (first sequence at sample 0), data subset 0 of 1
Actual gradient aggregation time: 7.9e-05
07/13/2016 16:48:12: Minibatch[1-1]: EvalErrorPrediction = 0.05804312 * 603; CrossEntropyWithSoftmax = 0.12793940 * 603
07/13/2016 16:48:12: Final Results: Minibatch[1-1]: EvalErrorPrediction = 0.05804312 * 603; CrossEntropyWithSoftmax = 0.12793940 * 603; perplexity = 1.13648413

07/13/2016 16:48:12: Action "test" complete.

07/13/2016 16:48:12: __COMPLETED__
~MPIWrapper