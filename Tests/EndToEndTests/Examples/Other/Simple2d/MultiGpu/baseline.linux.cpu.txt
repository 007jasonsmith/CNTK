CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config/Multigpu.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data RunDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config OutputDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu DeviceId=-1 timestamping=true Multigpu_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 12:05:02
		Last modified date: Thu Jul 14 10:47:21 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by philly on a77bf6d98305
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 1 nodes pinging each other
ping [requestnodes (before change)]: all 1 nodes responded
requestnodes [MPIWrapper]: using 1 out of 1 MPI nodes (1 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 1 nodes pinging each other
ping [requestnodes (after change)]: all 1 nodes responded
mpihelper: only one MPI process: MPI operation will be boring
ping [mpihelper]: 1 nodes pinging each other
ping [mpihelper]: all 1 nodes responded
07/14/2016 12:31:16: -------------------------------------------------------------------
07/14/2016 12:31:16: Build info: 

07/14/2016 12:31:16: 		Built time: Jul 14 2016 12:05:02
07/14/2016 12:31:16: 		Last modified date: Thu Jul 14 10:47:21 2016
07/14/2016 12:31:16: 		Build type: release
07/14/2016 12:31:16: 		Build target: GPU
07/14/2016 12:31:16: 		With 1bit-SGD: yes
07/14/2016 12:31:16: 		Math lib: mkl
07/14/2016 12:31:16: 		CUDA_PATH: /usr/local/cuda-7.5
07/14/2016 12:31:16: 		CUB_PATH: /usr/local/cub-1.4.1
07/14/2016 12:31:16: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/14/2016 12:31:16: 		Build Branch: HEAD
07/14/2016 12:31:16: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 12:31:16: 		Built by philly on a77bf6d98305
07/14/2016 12:31:16: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
07/14/2016 12:31:16: -------------------------------------------------------------------
07/14/2016 12:31:17: -------------------------------------------------------------------
07/14/2016 12:31:17: GPU info:

07/14/2016 12:31:17: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 12:31:17: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 12:31:17: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 12:31:17: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 12:31:17: -------------------------------------------------------------------

07/14/2016 12:31:17: Running on localhost at 2016/07/14 12:31:17
07/14/2016 12:31:17: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config/Multigpu.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  RunDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config  OutputDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu  DeviceId=-1  timestamping=true  Multigpu_Demo_Train=[SGD=[maxEpochs=3]]



07/14/2016 12:31:17: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 12:31:17: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "$OutputDir$/MultigpuOutput"    
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu
DeviceId=-1
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

07/14/2016 12:31:17: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 12:31:17: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 12:31:17: RootDir = ".."
ConfigDir = "../Config"
DataDir = "../Data"
OutputDir = "../Output"
ModelDir = "/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu/MultigpuOutput"    
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu
DeviceId=-1
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

07/14/2016 12:31:17: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 12:31:17: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Multigpu.cntk:command=Multigpu_Demo_Train:Multigpu_Demo_Test
configparameters: Multigpu.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
configparameters: Multigpu.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Multigpu.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Multigpu.cntk:deviceId=-1
configparameters: Multigpu.cntk:ModelDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu/Models
configparameters: Multigpu.cntk:modelPath=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn
configparameters: Multigpu.cntk:Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu/MultigpuOutput"    
]

configparameters: Multigpu.cntk:Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Multigpu.cntk:Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Multigpu.cntk:OutputDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu
configparameters: Multigpu.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Multigpu.cntk:parallelTrain=true
configparameters: Multigpu.cntk:precision=float
configparameters: Multigpu.cntk:RootDir=..
configparameters: Multigpu.cntk:RunDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu
configparameters: Multigpu.cntk:timestamping=true
configparameters: Multigpu.cntk:traceLevel=1
07/14/2016 12:31:17: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 12:31:17: Commands: Multigpu_Demo_Train Multigpu_Demo_Test
07/14/2016 12:31:17: Precision = "float"
07/14/2016 12:31:17: CNTKModelPath: /tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn
07/14/2016 12:31:17: CNTKCommandTrainInfo: Multigpu_Demo_Train : 3
07/14/2016 12:31:17: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/14/2016 12:31:17: ##############################################################################
07/14/2016 12:31:17: #                                                                            #
07/14/2016 12:31:17: # Action "train"                                                             #
07/14/2016 12:31:17: #                                                                            #
07/14/2016 12:31:17: ##############################################################################

07/14/2016 12:31:17: CNTKCommandTrainBegin: Multigpu_Demo_Train
SimpleNetworkBuilder Using CPU

07/14/2016 12:31:17: Creating virgin network.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 12:31:17: Created model with 25 nodes on CPU.

07/14/2016 12:31:17: Training criterion node(s):
07/14/2016 12:31:17: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

07/14/2016 12:31:17: Evaluation criterion node(s):

07/14/2016 12:31:17: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *]] [PosteriorProb Value[2 x 1 x *]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *]] [features Gradient[2 x *]] [labels Gradient[2 x *]] }
0x14096a8: {[InvStdOfFeatures Value[2]] }
0x140a078: {[MeanOfFeatures Value[2]] }
0x140ae18: {[W0 Value[50 x 2]] }
0x140b408: {[B0 Value[50 x 1]] }
0x140c388: {[W1 Value[50 x 50]] }
0x140eec8: {[B1 Value[50 x 1]] }
0x140fdb8: {[W2 Value[2 x 50]] }
0x1410378: {[B2 Value[2 x 1]] }
0x1410e48: {[labels Value[2 x *]] }
0x1411bb8: {[Prior Value[2]] }
0x1435c38: {[ScaledLogLikelihood Value[2 x 1 x *]] }
0x14367d8: {[CrossEntropyWithSoftmax Value[1]] }
0x1436ae8: {[EvalErrorPrediction Value[1]] }
0x14370f8: {[W0 Gradient[50 x 2]] [W0*features+B0 Value[50 x 1 x *]] }
0x14372e8: {[LogOfPrior Value[2]] }
0x1438cf8: {[MVNormalizedFeatures Value[2 x *]] }
0x14393f8: {[W0*features Value[50 x *]] }
0x1439608: {[H1 Value[50 x 1 x *]] [W0*features Gradient[50 x *]] }
0x14397c8: {[W0*features+B0 Gradient[50 x 1 x *]] [W1*H1 Value[50 x 1 x *]] }
0x1439988: {[W1 Gradient[50 x 50]] [W1*H1+B1 Value[50 x 1 x *]] }
0x1439b48: {[H2 Value[50 x 1 x *]] [W1*H1 Gradient[50 x 1 x *]] }
0x1439d08: {[B0 Gradient[50 x 1]] [H1 Gradient[50 x 1 x *]] [W1*H1+B1 Gradient[50 x 1 x *]] [W2*H1 Value[2 x 1 x *]] }
0x1439ec8: {[HLast Value[2 x 1 x *]] [W2 Gradient[2 x 50]] }
0x143a9f8: {[CrossEntropyWithSoftmax Gradient[1]] }
0x143abb8: {[B1 Gradient[50 x 1]] [H2 Gradient[50 x 1 x *]] [HLast Gradient[2 x 1 x *]] }
0x143ad78: {[W2*H1 Gradient[2 x 1 x *]] }
0x143af38: {[B2 Gradient[2 x 1]] }
0x174a428: {[features Value[2 x *]] }


07/14/2016 12:31:17: Precomputing --> 3 PreCompute nodes found.

07/14/2016 12:31:17: 	MeanOfFeatures = Mean()
07/14/2016 12:31:17: 	InvStdOfFeatures = InvStdDev()
07/14/2016 12:31:17: 	Prior = Mean()
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

07/14/2016 12:31:17: Precomputing --> Completed.


07/14/2016 12:31:17: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

07/14/2016 12:31:17: Starting minibatch loop.
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[   1-  10]: CrossEntropyWithSoftmax = 0.69966248 * 250; EvalErrorPrediction = 0.51200000 * 250; time = 0.0324s; samplesPerSecond = 7717.0
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[  11-  20]: CrossEntropyWithSoftmax = 0.70639648 * 250; EvalErrorPrediction = 0.49600000 * 250; time = 0.0238s; samplesPerSecond = 10516.6
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[  21-  30]: CrossEntropyWithSoftmax = 0.70470251 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0105s; samplesPerSecond = 23839.0
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[  31-  40]: CrossEntropyWithSoftmax = 0.69813501 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0135s; samplesPerSecond = 18576.3
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[  41-  50]: CrossEntropyWithSoftmax = 0.73551416 * 250; EvalErrorPrediction = 0.57600000 * 250; time = 0.0171s; samplesPerSecond = 14635.3
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[  51-  60]: CrossEntropyWithSoftmax = 0.72432324 * 250; EvalErrorPrediction = 0.50800000 * 250; time = 0.0168s; samplesPerSecond = 14865.9
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[  61-  70]: CrossEntropyWithSoftmax = 0.73327588 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0387s; samplesPerSecond = 6466.1
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[  71-  80]: CrossEntropyWithSoftmax = 0.70092627 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0166s; samplesPerSecond = 15039.4
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[  81-  90]: CrossEntropyWithSoftmax = 0.72354980 * 250; EvalErrorPrediction = 0.46000000 * 250; time = 0.0134s; samplesPerSecond = 18686.0
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[  91- 100]: CrossEntropyWithSoftmax = 0.72148096 * 250; EvalErrorPrediction = 0.52000000 * 250; time = 0.0433s; samplesPerSecond = 5770.5
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: CrossEntropyWithSoftmax = 0.69814941 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0135s; samplesPerSecond = 18558.4
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: CrossEntropyWithSoftmax = 0.70699121 * 250; EvalErrorPrediction = 0.54800000 * 250; time = 0.0339s; samplesPerSecond = 7378.3
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: CrossEntropyWithSoftmax = 0.69898437 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0165s; samplesPerSecond = 15117.6
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: CrossEntropyWithSoftmax = 0.71712695 * 250; EvalErrorPrediction = 0.54000000 * 250; time = 0.0196s; samplesPerSecond = 12742.1
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: CrossEntropyWithSoftmax = 0.69470703 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0134s; samplesPerSecond = 18623.4
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: CrossEntropyWithSoftmax = 0.71375879 * 250; EvalErrorPrediction = 0.51200000 * 250; time = 0.0134s; samplesPerSecond = 18620.6
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: CrossEntropyWithSoftmax = 0.70381641 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0268s; samplesPerSecond = 9325.9
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: CrossEntropyWithSoftmax = 0.71748633 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0134s; samplesPerSecond = 18637.2
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: CrossEntropyWithSoftmax = 0.71863281 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0166s; samplesPerSecond = 15021.3
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: CrossEntropyWithSoftmax = 0.70715234 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0165s; samplesPerSecond = 15151.5
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: CrossEntropyWithSoftmax = 0.70401074 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0246s; samplesPerSecond = 10152.7
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: CrossEntropyWithSoftmax = 0.70599414 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0133s; samplesPerSecond = 18747.7
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: CrossEntropyWithSoftmax = 0.69628711 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0142s; samplesPerSecond = 17616.8
07/14/2016 12:31:17:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: CrossEntropyWithSoftmax = 0.75920898 * 250; EvalErrorPrediction = 0.51200000 * 250; time = 0.0198s; samplesPerSecond = 12635.8
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: CrossEntropyWithSoftmax = 0.70542578 * 250; EvalErrorPrediction = 0.43600000 * 250; time = 0.0192s; samplesPerSecond = 13024.9
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: CrossEntropyWithSoftmax = 0.70643945 * 250; EvalErrorPrediction = 0.46400000 * 250; time = 0.0165s; samplesPerSecond = 15124.0
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: CrossEntropyWithSoftmax = 0.72481641 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0206s; samplesPerSecond = 12129.4
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: CrossEntropyWithSoftmax = 0.71133594 * 250; EvalErrorPrediction = 0.55600000 * 250; time = 0.0154s; samplesPerSecond = 16250.7
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: CrossEntropyWithSoftmax = 0.68605664 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0166s; samplesPerSecond = 15083.0
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: CrossEntropyWithSoftmax = 0.69535352 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0166s; samplesPerSecond = 15094.8
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: CrossEntropyWithSoftmax = 0.68741797 * 250; EvalErrorPrediction = 0.45200000 * 250; time = 0.0158s; samplesPerSecond = 15852.9
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: CrossEntropyWithSoftmax = 0.67916406 * 250; EvalErrorPrediction = 0.46000000 * 250; time = 0.0207s; samplesPerSecond = 12090.7
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: CrossEntropyWithSoftmax = 0.67841992 * 250; EvalErrorPrediction = 0.44800000 * 250; time = 0.0175s; samplesPerSecond = 14286.5
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: CrossEntropyWithSoftmax = 0.68038477 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0136s; samplesPerSecond = 18317.7
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: CrossEntropyWithSoftmax = 0.61937109 * 250; EvalErrorPrediction = 0.30400000 * 250; time = 0.0166s; samplesPerSecond = 15093.0
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: CrossEntropyWithSoftmax = 0.57844336 * 250; EvalErrorPrediction = 0.27200000 * 250; time = 0.0259s; samplesPerSecond = 9641.7
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: CrossEntropyWithSoftmax = 0.49124023 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0105s; samplesPerSecond = 23728.2
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: CrossEntropyWithSoftmax = 0.39071289 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0167s; samplesPerSecond = 14955.7
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: CrossEntropyWithSoftmax = 0.27650586 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0168s; samplesPerSecond = 14865.9
07/14/2016 12:31:18:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: CrossEntropyWithSoftmax = 0.26430078 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0380s; samplesPerSecond = 6581.2
07/14/2016 12:31:18: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 0.66664155 * 10000; EvalErrorPrediction = 0.44430000 * 10000; totalSamplesSeen = 10000; learningRatePerSample = 0.02; epochTime=0.784737s
07/14/2016 12:31:18: SGD: Saving checkpoint model '/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn.1'

07/14/2016 12:31:18: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 1: frames [10000..20000] (first sequence at sample 10000), data subset 0 of 1

07/14/2016 12:31:18: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 1, NumGradientBits = 1).
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.20720011 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0220s; samplesPerSecond = 11366.7
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.19690294 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0175s; samplesPerSecond = 14279.2
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.16064648 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0204s; samplesPerSecond = 12238.1
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.13547173 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0177s; samplesPerSecond = 14096.4
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.18000263 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0503s; samplesPerSecond = 4971.8
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.17787842 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0116s; samplesPerSecond = 21626.3
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.16821879 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0217s; samplesPerSecond = 11520.2
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.16363457 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0146s; samplesPerSecond = 17139.7
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.19533907 * 250; EvalErrorPrediction = 0.10800000 * 250; time = 0.0205s; samplesPerSecond = 12170.2
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.19318692 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0261s; samplesPerSecond = 9589.9
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.12726280 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0360s; samplesPerSecond = 6952.2
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.18620068 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0115s; samplesPerSecond = 21801.7
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.11547500 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0146s; samplesPerSecond = 17117.4
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.16675950 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0177s; samplesPerSecond = 14163.5
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.15807389 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0175s; samplesPerSecond = 14314.3
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.18389093 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0300s; samplesPerSecond = 8344.2
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.18269752 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0115s; samplesPerSecond = 21786.5
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.18737840 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0173s; samplesPerSecond = 14427.5
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.20174758 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0175s; samplesPerSecond = 14251.5
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.13336708 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0321s; samplesPerSecond = 7786.2
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.13851335 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0115s; samplesPerSecond = 21778.9
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.15422286 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0175s; samplesPerSecond = 14313.5
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.15478818 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0304s; samplesPerSecond = 8224.2
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.14530281 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0379s; samplesPerSecond = 6588.7
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.12192868 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0186s; samplesPerSecond = 13416.3
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.13975589 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0150s; samplesPerSecond = 16653.3
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.12566355 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0204s; samplesPerSecond = 12244.1
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.18962999 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0176s; samplesPerSecond = 14185.2
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.17955441 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0204s; samplesPerSecond = 12269.3
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.18862089 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0181s; samplesPerSecond = 13838.1
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.17503114 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0177s; samplesPerSecond = 14144.3
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.14741594 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0206s; samplesPerSecond = 12107.1
07/14/2016 12:31:18:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.13803631 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0303s; samplesPerSecond = 8247.6
07/14/2016 12:31:19:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.14138419 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0667s; samplesPerSecond = 3747.6
07/14/2016 12:31:19:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.13886964 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0113s; samplesPerSecond = 22116.1
07/14/2016 12:31:19:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.15026396 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0147s; samplesPerSecond = 17032.3
07/14/2016 12:31:19:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.14659499 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0215s; samplesPerSecond = 11619.8
07/14/2016 12:31:19:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.13078486 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0176s; samplesPerSecond = 14228.0
07/14/2016 12:31:19:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.19833051 * 250; EvalErrorPrediction = 0.11600000 * 250; time = 0.0234s; samplesPerSecond = 10706.2
07/14/2016 12:31:19:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.15827416 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0183s; samplesPerSecond = 13656.0
07/14/2016 12:31:19: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 0.16210753 * 10000; EvalErrorPrediction = 0.07480000 * 10000; totalSamplesSeen = 20000; learningRatePerSample = 0.0080000004; epochTime=0.882035s
07/14/2016 12:31:19: SGD: Saving checkpoint model '/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn.2'

07/14/2016 12:31:19: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 2: frames [20000..30000] (first sequence at sample 20000), data subset 0 of 1

07/14/2016 12:31:19: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 1, NumGradientBits = 1).
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.19030872 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0253s; samplesPerSecond = 9867.0
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.13919069 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0174s; samplesPerSecond = 14403.4
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.14593679 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0245s; samplesPerSecond = 10208.2
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.13320695 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0206s; samplesPerSecond = 12157.8
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.17358973 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0146s; samplesPerSecond = 17132.7
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.17946812 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0178s; samplesPerSecond = 14070.2
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.15006756 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0357s; samplesPerSecond = 6999.5
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.17057215 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0253s; samplesPerSecond = 9872.8
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.10411296 * 250; EvalErrorPrediction = 0.04000000 * 250; time = 0.0177s; samplesPerSecond = 14145.1
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.20570930 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0251s; samplesPerSecond = 9943.5
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.16517774 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.2026s; samplesPerSecond = 1233.8
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.14909461 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0151s; samplesPerSecond = 16554.1
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.19230929 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0392s; samplesPerSecond = 6375.3
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.13671733 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0182s; samplesPerSecond = 13727.2
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.21113318 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0207s; samplesPerSecond = 12103.0
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.13129051 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0212s; samplesPerSecond = 11815.9
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.17303704 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0180s; samplesPerSecond = 13857.3
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.16481996 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0503s; samplesPerSecond = 4968.8
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.14593373 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0246s; samplesPerSecond = 10152.3
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.12558545 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0181s; samplesPerSecond = 13839.7
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.13442997 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0182s; samplesPerSecond = 13724.2
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.17123063 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0256s; samplesPerSecond = 9771.0
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.22484426 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0343s; samplesPerSecond = 7282.0
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.18288660 * 250; EvalErrorPrediction = 0.11600000 * 250; time = 0.0349s; samplesPerSecond = 7164.1
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.20294459 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0180s; samplesPerSecond = 13910.5
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.22848232 * 250; EvalErrorPrediction = 0.12400000 * 250; time = 0.0179s; samplesPerSecond = 13988.4
07/14/2016 12:31:19:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.12500145 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0208s; samplesPerSecond = 11996.2
07/14/2016 12:31:20:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.15719111 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0178s; samplesPerSecond = 14005.6
07/14/2016 12:31:20:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.11520179 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0296s; samplesPerSecond = 8441.4
07/14/2016 12:31:20:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.14160271 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0178s; samplesPerSecond = 14037.1
07/14/2016 12:31:20:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.18510072 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0384s; samplesPerSecond = 6512.8
07/14/2016 12:31:20:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.15005073 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0177s; samplesPerSecond = 14089.3
07/14/2016 12:31:20:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.12867929 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0247s; samplesPerSecond = 10114.5
07/14/2016 12:31:20:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.17640187 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0304s; samplesPerSecond = 8224.8
07/14/2016 12:31:20:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.14983432 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0265s; samplesPerSecond = 9418.3
07/14/2016 12:31:20:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.11473887 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0278s; samplesPerSecond = 8977.0
07/14/2016 12:31:20:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.16525631 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0811s; samplesPerSecond = 3081.4
07/14/2016 12:31:20:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.14962769 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0425s; samplesPerSecond = 5885.5
07/14/2016 12:31:20:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.15971886 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0140s; samplesPerSecond = 17811.3
07/14/2016 12:31:20:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.17867851 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0171s; samplesPerSecond = 14649.9
07/14/2016 12:31:20: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 0.16072911 * 10000; EvalErrorPrediction = 0.07780000 * 10000; totalSamplesSeen = 30000; learningRatePerSample = 0.0080000004; epochTime=1.21294s
07/14/2016 12:31:20: SGD: Saving checkpoint model '/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn'
07/14/2016 12:31:20: CNTKCommandTrainEnd: Multigpu_Demo_Train

07/14/2016 12:31:20: Action "train" complete.


07/14/2016 12:31:20: ##############################################################################
07/14/2016 12:31:20: #                                                                            #
07/14/2016 12:31:20: # Action "test"                                                              #
07/14/2016 12:31:20: #                                                                            #
07/14/2016 12:31:20: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [EvalErrorPrediction Gradient[1]] [H1 Gradient[50 x 1 x *1]] [H2 Gradient[50 x 1 x *1]] [HLast Gradient[2 x 1 x *1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *1]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *1]] [PosteriorProb Value[2 x 1 x *1]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *1]] [ScaledLogLikelihood Value[2 x 1 x *1]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *1]] [W0*features+B0 Gradient[50 x 1 x *1]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *1]] [W1*H1+B1 Gradient[50 x 1 x *1]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *1]] [features Gradient[2 x *1]] [labels Gradient[2 x *1]] }
0x7fca9ca018c8: {[B0 Value[50 x 1]] }
0x7fca9ca312b8: {[EvalErrorPrediction Value[1]] }
0x7fca9ca31eb8: {[B1 Value[50 x 1]] }
0x7fca9ca46638: {[B2 Value[2 x 1]] }
0x7fca9ca47588: {[features Value[2 x *1]] }
0x7fca9ca482e8: {[InvStdOfFeatures Value[2]] }
0x7fca9ca48c68: {[labels Value[2 x *1]] }
0x7fca9ca494f8: {[MeanOfFeatures Value[2]] }
0x7fca9ca4a058: {[Prior Value[2]] }
0x7fca9ca4a948: {[W0 Value[50 x 2]] }
0x7fca9ca4abc8: {[W1 Value[50 x 50]] }
0x7fca9ca4bc48: {[W2 Value[2 x 50]] }
0x7fca9ca53978: {[CrossEntropyWithSoftmax Value[1]] }
0x7fca9ca53e58: {[LogOfPrior Value[2]] }
0x7fca9ca55008: {[MVNormalizedFeatures Value[2 x *1]] }
0x7fca9ca55598: {[W0*features Value[50 x *1]] }
0x7fca9ca55948: {[W0*features+B0 Value[50 x 1 x *1]] }
0x7fca9ca55aa8: {[H1 Value[50 x 1 x *1]] }
0x7fca9ca55c08: {[W1*H1 Value[50 x 1 x *1]] }
0x7fca9ca55dc8: {[W1*H1+B1 Value[50 x 1 x *1]] }
0x7fca9ca55f88: {[H2 Value[50 x 1 x *1]] }
0x7fca9ca56148: {[W2*H1 Value[2 x 1 x *1]] }
0x7fca9ca56308: {[HLast Value[2 x 1 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..603] (first sequence at sample 0), data subset 0 of 1
Actual gradient aggregation time: 0.000248
07/14/2016 12:31:20: Minibatch[1-1]: EvalErrorPrediction = 0.05804312 * 603; CrossEntropyWithSoftmax = 0.12793940 * 603
07/14/2016 12:31:20: Final Results: Minibatch[1-1]: EvalErrorPrediction = 0.05804312 * 603; CrossEntropyWithSoftmax = 0.12793940 * 603; perplexity = 1.13648413

07/14/2016 12:31:20: Action "test" complete.

07/14/2016 12:31:20: __COMPLETED__
~MPIWrapper