CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config/Multigpu.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data RunDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config OutputDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu DeviceId=0 timestamping=true Multigpu_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 12:05:02
		Last modified date: Thu Jul 14 10:47:21 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by philly on a77bf6d98305
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 1 nodes pinging each other
ping [requestnodes (before change)]: all 1 nodes responded
requestnodes [MPIWrapper]: using 1 out of 1 MPI nodes (1 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 1 nodes pinging each other
ping [requestnodes (after change)]: all 1 nodes responded
mpihelper: only one MPI process: MPI operation will be boring
ping [mpihelper]: 1 nodes pinging each other
ping [mpihelper]: all 1 nodes responded
07/14/2016 12:31:21: -------------------------------------------------------------------
07/14/2016 12:31:21: Build info: 

07/14/2016 12:31:21: 		Built time: Jul 14 2016 12:05:02
07/14/2016 12:31:21: 		Last modified date: Thu Jul 14 10:47:21 2016
07/14/2016 12:31:21: 		Build type: release
07/14/2016 12:31:21: 		Build target: GPU
07/14/2016 12:31:21: 		With 1bit-SGD: yes
07/14/2016 12:31:21: 		Math lib: mkl
07/14/2016 12:31:21: 		CUDA_PATH: /usr/local/cuda-7.5
07/14/2016 12:31:21: 		CUB_PATH: /usr/local/cub-1.4.1
07/14/2016 12:31:21: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/14/2016 12:31:21: 		Build Branch: HEAD
07/14/2016 12:31:21: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 12:31:21: 		Built by philly on a77bf6d98305
07/14/2016 12:31:21: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
07/14/2016 12:31:21: -------------------------------------------------------------------
07/14/2016 12:31:22: -------------------------------------------------------------------
07/14/2016 12:31:22: GPU info:

07/14/2016 12:31:22: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 12:31:22: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 12:31:22: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 12:31:22: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 12:31:22: -------------------------------------------------------------------

07/14/2016 12:31:22: Running on localhost at 2016/07/14 12:31:22
07/14/2016 12:31:22: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config/Multigpu.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  RunDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config  OutputDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu  DeviceId=0  timestamping=true  Multigpu_Demo_Train=[SGD=[maxEpochs=3]]



07/14/2016 12:31:22: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 12:31:22: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "$OutputDir$/MultigpuOutput"    
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu
DeviceId=0
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

07/14/2016 12:31:22: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 12:31:22: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 12:31:22: RootDir = ".."
ConfigDir = "../Config"
DataDir = "../Data"
OutputDir = "../Output"
ModelDir = "/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu/MultigpuOutput"    
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu
DeviceId=0
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

07/14/2016 12:31:22: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 12:31:22: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Multigpu.cntk:command=Multigpu_Demo_Train:Multigpu_Demo_Test
configparameters: Multigpu.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
configparameters: Multigpu.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Multigpu.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Multigpu.cntk:deviceId=0
configparameters: Multigpu.cntk:ModelDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu/Models
configparameters: Multigpu.cntk:modelPath=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn
configparameters: Multigpu.cntk:Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu/MultigpuOutput"    
]

configparameters: Multigpu.cntk:Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Multigpu.cntk:Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Multigpu.cntk:OutputDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu
configparameters: Multigpu.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Multigpu.cntk:parallelTrain=true
configparameters: Multigpu.cntk:precision=float
configparameters: Multigpu.cntk:RootDir=..
configparameters: Multigpu.cntk:RunDir=/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu
configparameters: Multigpu.cntk:timestamping=true
configparameters: Multigpu.cntk:traceLevel=1
07/14/2016 12:31:22: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 12:31:22: Commands: Multigpu_Demo_Train Multigpu_Demo_Test
07/14/2016 12:31:22: Precision = "float"
07/14/2016 12:31:22: CNTKModelPath: /tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn
07/14/2016 12:31:22: CNTKCommandTrainInfo: Multigpu_Demo_Train : 3
07/14/2016 12:31:22: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/14/2016 12:31:22: ##############################################################################
07/14/2016 12:31:22: #                                                                            #
07/14/2016 12:31:22: # Action "train"                                                             #
07/14/2016 12:31:22: #                                                                            #
07/14/2016 12:31:22: ##############################################################################

07/14/2016 12:31:22: CNTKCommandTrainBegin: Multigpu_Demo_Train
SimpleNetworkBuilder Using GPU 0

07/14/2016 12:31:22: Creating virgin network.
SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 12:31:22: Created model with 25 nodes on GPU 0.

07/14/2016 12:31:22: Training criterion node(s):
07/14/2016 12:31:22: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

07/14/2016 12:31:22: Evaluation criterion node(s):

07/14/2016 12:31:22: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *]] [PosteriorProb Value[2 x 1 x *]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *]] [features Gradient[2 x *]] [labels Gradient[2 x *]] }
0x7f53b09dfc38: {[MVNormalizedFeatures Value[2 x *]] }
0x7f53b09e0338: {[W0*features Value[50 x *]] }
0x7f53b09e0868: {[W0 Gradient[50 x 2]] [W0*features+B0 Value[50 x 1 x *]] }
0x7f53b09e09c8: {[H1 Value[50 x 1 x *]] [W0*features Gradient[50 x *]] }
0x7f53b09e0b88: {[W0*features+B0 Gradient[50 x 1 x *]] [W1*H1 Value[50 x 1 x *]] }
0x7f53b09e0d48: {[W1 Gradient[50 x 50]] [W1*H1+B1 Value[50 x 1 x *]] }
0x7f53b09e0f08: {[H2 Value[50 x 1 x *]] [W1*H1 Gradient[50 x 1 x *]] }
0x7f53b09e10c8: {[B0 Gradient[50 x 1]] [H1 Gradient[50 x 1 x *]] [W1*H1+B1 Gradient[50 x 1 x *]] [W2*H1 Value[2 x 1 x *]] }
0x7f53b09e1288: {[HLast Value[2 x 1 x *]] [W2 Gradient[2 x 50]] }
0x7f53b09e1de8: {[CrossEntropyWithSoftmax Gradient[1]] }
0x7f53b09e1fa8: {[B1 Gradient[50 x 1]] [H2 Gradient[50 x 1 x *]] [HLast Gradient[2 x 1 x *]] }
0x7f53b09e2168: {[W2*H1 Gradient[2 x 1 x *]] }
0x7f53b09e2328: {[B2 Gradient[2 x 1]] }
0x7f53b0d01e58: {[W1 Value[50 x 50]] }
0x7f53b0d02cb8: {[B1 Value[50 x 1]] }
0x7f53b0d04008: {[W2 Value[2 x 50]] }
0x7f53b0d046d8: {[B2 Value[2 x 1]] }
0x7f53b27f5008: {[B0 Value[50 x 1]] }
0x7f53b27f63b8: {[labels Value[2 x *]] }
0x7f53b27f75f8: {[Prior Value[2]] }
0x7f53b27fcf08: {[EvalErrorPrediction Value[1]] }
0x7f53b27fd0a8: {[ScaledLogLikelihood Value[2 x 1 x *]] }
0x7f53b27fd268: {[CrossEntropyWithSoftmax Value[1]] }
0x7f53b27fd928: {[LogOfPrior Value[2]] }
0x7f53b29fdb68: {[MeanOfFeatures Value[2]] }
0x7f53b29fe038: {[InvStdOfFeatures Value[2]] }
0x7f53b29fed28: {[W0 Value[50 x 2]] }
0x7f53bdebb0a8: {[features Value[2 x *]] }


07/14/2016 12:31:22: Precomputing --> 3 PreCompute nodes found.

07/14/2016 12:31:22: 	MeanOfFeatures = Mean()
07/14/2016 12:31:22: 	InvStdOfFeatures = InvStdDev()
07/14/2016 12:31:22: 	Prior = Mean()
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

07/14/2016 12:31:22: Precomputing --> Completed.


07/14/2016 12:31:22: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

07/14/2016 12:31:22: Starting minibatch loop.
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[   1-  10]: CrossEntropyWithSoftmax = 0.70004456 * 250; EvalErrorPrediction = 0.52000000 * 250; time = 0.0081s; samplesPerSecond = 30829.9
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[  11-  20]: CrossEntropyWithSoftmax = 0.70309900 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0064s; samplesPerSecond = 39166.5
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[  21-  30]: CrossEntropyWithSoftmax = 0.70606104 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0064s; samplesPerSecond = 39142.0
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[  31-  40]: CrossEntropyWithSoftmax = 0.69845532 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0063s; samplesPerSecond = 39519.4
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[  41-  50]: CrossEntropyWithSoftmax = 0.73496533 * 250; EvalErrorPrediction = 0.57600000 * 250; time = 0.0063s; samplesPerSecond = 39519.4
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[  51-  60]: CrossEntropyWithSoftmax = 0.72522827 * 250; EvalErrorPrediction = 0.50800000 * 250; time = 0.0064s; samplesPerSecond = 39351.5
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[  61-  70]: CrossEntropyWithSoftmax = 0.73287500 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0063s; samplesPerSecond = 39563.2
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[  71-  80]: CrossEntropyWithSoftmax = 0.70135547 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0062s; samplesPerSecond = 40083.4
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[  81-  90]: CrossEntropyWithSoftmax = 0.72466504 * 250; EvalErrorPrediction = 0.46000000 * 250; time = 0.0062s; samplesPerSecond = 40264.1
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[  91- 100]: CrossEntropyWithSoftmax = 0.72187500 * 250; EvalErrorPrediction = 0.52000000 * 250; time = 0.0062s; samplesPerSecond = 40610.8
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: CrossEntropyWithSoftmax = 0.69799023 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0062s; samplesPerSecond = 40544.9
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: CrossEntropyWithSoftmax = 0.70696387 * 250; EvalErrorPrediction = 0.54800000 * 250; time = 0.0061s; samplesPerSecond = 40843.0
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: CrossEntropyWithSoftmax = 0.69863965 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0061s; samplesPerSecond = 40823.0
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: CrossEntropyWithSoftmax = 0.71772461 * 250; EvalErrorPrediction = 0.54800000 * 250; time = 0.0061s; samplesPerSecond = 40743.2
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: CrossEntropyWithSoftmax = 0.69526270 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0061s; samplesPerSecond = 40936.6
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: CrossEntropyWithSoftmax = 0.71436426 * 250; EvalErrorPrediction = 0.51200000 * 250; time = 0.0060s; samplesPerSecond = 41632.0
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: CrossEntropyWithSoftmax = 0.70399316 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0061s; samplesPerSecond = 41104.9
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: CrossEntropyWithSoftmax = 0.71745508 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0060s; samplesPerSecond = 41356.5
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: CrossEntropyWithSoftmax = 0.71963184 * 250; EvalErrorPrediction = 0.49600000 * 250; time = 0.0062s; samplesPerSecond = 40505.5
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: CrossEntropyWithSoftmax = 0.70689941 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0061s; samplesPerSecond = 41017.2
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: CrossEntropyWithSoftmax = 0.70425098 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0061s; samplesPerSecond = 41125.2
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: CrossEntropyWithSoftmax = 0.70622754 * 250; EvalErrorPrediction = 0.45200000 * 250; time = 0.0061s; samplesPerSecond = 41233.7
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: CrossEntropyWithSoftmax = 0.69729492 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0060s; samplesPerSecond = 41404.4
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: CrossEntropyWithSoftmax = 0.75974219 * 250; EvalErrorPrediction = 0.51200000 * 250; time = 0.0061s; samplesPerSecond = 41125.2
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: CrossEntropyWithSoftmax = 0.70631250 * 250; EvalErrorPrediction = 0.43600000 * 250; time = 0.0061s; samplesPerSecond = 40729.9
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: CrossEntropyWithSoftmax = 0.70705664 * 250; EvalErrorPrediction = 0.46400000 * 250; time = 0.0061s; samplesPerSecond = 41301.8
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: CrossEntropyWithSoftmax = 0.72660352 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0061s; samplesPerSecond = 40763.1
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: CrossEntropyWithSoftmax = 0.71369727 * 250; EvalErrorPrediction = 0.55600000 * 250; time = 0.0061s; samplesPerSecond = 40983.6
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: CrossEntropyWithSoftmax = 0.68916602 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0062s; samplesPerSecond = 40624.0
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: CrossEntropyWithSoftmax = 0.69964844 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0061s; samplesPerSecond = 40970.2
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: CrossEntropyWithSoftmax = 0.69387891 * 250; EvalErrorPrediction = 0.46000000 * 250; time = 0.0062s; samplesPerSecond = 40650.4
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: CrossEntropyWithSoftmax = 0.68885742 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0062s; samplesPerSecond = 40498.9
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: CrossEntropyWithSoftmax = 0.69388867 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0062s; samplesPerSecond = 40407.3
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: CrossEntropyWithSoftmax = 0.70363867 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0061s; samplesPerSecond = 40843.0
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: CrossEntropyWithSoftmax = 0.65449219 * 250; EvalErrorPrediction = 0.44400000 * 250; time = 0.0061s; samplesPerSecond = 41192.9
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: CrossEntropyWithSoftmax = 0.64607031 * 250; EvalErrorPrediction = 0.46000000 * 250; time = 0.0061s; samplesPerSecond = 40950.0
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: CrossEntropyWithSoftmax = 0.59492773 * 250; EvalErrorPrediction = 0.12400000 * 250; time = 0.0060s; samplesPerSecond = 41322.3
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: CrossEntropyWithSoftmax = 0.53965625 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0061s; samplesPerSecond = 40710.0
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: CrossEntropyWithSoftmax = 0.43681445 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0061s; samplesPerSecond = 41037.4
07/14/2016 12:31:22:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: CrossEntropyWithSoftmax = 0.37407422 * 250; EvalErrorPrediction = 0.12000000 * 250; time = 0.0061s; samplesPerSecond = 41274.6
07/14/2016 12:31:22: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 0.68409619 * 10000; EvalErrorPrediction = 0.45780000 * 10000; totalSamplesSeen = 10000; learningRatePerSample = 0.02; epochTime=0.251664s
07/14/2016 12:31:22: SGD: Saving checkpoint model '/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn.1'

07/14/2016 12:31:22: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 1: frames [10000..20000] (first sequence at sample 10000), data subset 0 of 1

07/14/2016 12:31:22: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 1, NumGradientBits = 1).
07/14/2016 12:31:22:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.27919582 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0114s; samplesPerSecond = 21857.0
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.24468563 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0104s; samplesPerSecond = 24105.7
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.19639855 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0096s; samplesPerSecond = 26090.6
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.16397831 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0095s; samplesPerSecond = 26200.0
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.19744991 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0097s; samplesPerSecond = 25722.8
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.19548803 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0096s; samplesPerSecond = 26063.4
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.18230155 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0095s; samplesPerSecond = 26274.3
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.17531260 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0096s; samplesPerSecond = 26158.8
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.20166612 * 250; EvalErrorPrediction = 0.10800000 * 250; time = 0.0096s; samplesPerSecond = 25992.9
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.19749026 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0095s; samplesPerSecond = 26324.1
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.13463062 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0095s; samplesPerSecond = 26189.0
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.19006274 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0096s; samplesPerSecond = 26106.9
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.12234764 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0095s; samplesPerSecond = 26343.5
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.16963028 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0094s; samplesPerSecond = 26457.8
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.16092096 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0094s; samplesPerSecond = 26457.8
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.18624320 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0095s; samplesPerSecond = 26255.0
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.18465683 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0095s; samplesPerSecond = 26307.5
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.18514310 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0096s; samplesPerSecond = 26044.4
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.20126220 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0096s; samplesPerSecond = 26128.8
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.13416849 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0095s; samplesPerSecond = 26388.0
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.13993689 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0095s; samplesPerSecond = 26382.4
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.15601874 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0095s; samplesPerSecond = 26296.4
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.15447692 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0095s; samplesPerSecond = 26224.7
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.14779248 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0095s; samplesPerSecond = 26260.5
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.12361015 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0096s; samplesPerSecond = 26167.1
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.14079164 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0095s; samplesPerSecond = 26304.7
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.12625385 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0096s; samplesPerSecond = 26112.4
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.18914322 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0095s; samplesPerSecond = 26429.9
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.17953371 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0095s; samplesPerSecond = 26216.4
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.18825222 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0097s; samplesPerSecond = 25869.2
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.17516732 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0097s; samplesPerSecond = 25680.5
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.14743738 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0095s; samplesPerSecond = 26393.6
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.13889099 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0096s; samplesPerSecond = 26134.2
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.14157520 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0094s; samplesPerSecond = 26488.7
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.13992157 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0097s; samplesPerSecond = 25850.5
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.15059720 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0100s; samplesPerSecond = 25115.5
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.14720877 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0096s; samplesPerSecond = 25933.6
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.13022279 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0095s; samplesPerSecond = 26244.0
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.19705554 * 250; EvalErrorPrediction = 0.11600000 * 250; time = 0.0096s; samplesPerSecond = 26041.7
07/14/2016 12:31:23:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.15856542 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0096s; samplesPerSecond = 26115.1
07/14/2016 12:31:23: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 0.16938712 * 10000; EvalErrorPrediction = 0.07430000 * 10000; totalSamplesSeen = 20000; learningRatePerSample = 0.0080000004; epochTime=0.387625s
07/14/2016 12:31:23: SGD: Saving checkpoint model '/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn.2'

07/14/2016 12:31:23: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 2: frames [20000..30000] (first sequence at sample 20000), data subset 0 of 1

07/14/2016 12:31:23: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 1, NumGradientBits = 1).
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.18890656 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0113s; samplesPerSecond = 22098.5
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.14085061 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0105s; samplesPerSecond = 23921.2
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.14562281 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0105s; samplesPerSecond = 23782.3
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.13236065 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0104s; samplesPerSecond = 24070.9
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.17464739 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0104s; samplesPerSecond = 24003.8
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.17751452 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0104s; samplesPerSecond = 23980.8
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.15029813 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0103s; samplesPerSecond = 24248.3
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.17116742 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0105s; samplesPerSecond = 23730.4
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.10379052 * 250; EvalErrorPrediction = 0.04000000 * 250; time = 0.0103s; samplesPerSecond = 24262.4
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.20638321 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0105s; samplesPerSecond = 23898.3
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.16606975 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0104s; samplesPerSecond = 24038.5
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.14936887 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0118s; samplesPerSecond = 21152.4
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.19164331 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0105s; samplesPerSecond = 23714.7
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.13686750 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0105s; samplesPerSecond = 23818.6
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.21099020 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0105s; samplesPerSecond = 23884.6
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.13216081 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0104s; samplesPerSecond = 24045.4
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.17339206 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0105s; samplesPerSecond = 23784.6
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.16532728 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0104s; samplesPerSecond = 23976.2
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.14612719 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0104s; samplesPerSecond = 24001.5
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.12550383 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0104s; samplesPerSecond = 24013.1
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.13420657 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0105s; samplesPerSecond = 23891.4
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.17052208 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0103s; samplesPerSecond = 24163.9
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.22581518 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0104s; samplesPerSecond = 23971.6
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.18219630 * 250; EvalErrorPrediction = 0.10800000 * 250; time = 0.0104s; samplesPerSecond = 24061.6
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.20351667 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0103s; samplesPerSecond = 24231.9
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.22974060 * 250; EvalErrorPrediction = 0.12000000 * 250; time = 0.0104s; samplesPerSecond = 24131.3
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.12619892 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0104s; samplesPerSecond = 23969.3
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.15675536 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0104s; samplesPerSecond = 23983.1
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.11517208 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0104s; samplesPerSecond = 24084.8
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.14186118 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0104s; samplesPerSecond = 23985.4
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.18497532 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0103s; samplesPerSecond = 24206.0
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.15025405 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0104s; samplesPerSecond = 24036.2
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.12861091 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0104s; samplesPerSecond = 23930.3
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.17651076 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0104s; samplesPerSecond = 23985.4
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.14974453 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0104s; samplesPerSecond = 24054.7
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.11466580 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0105s; samplesPerSecond = 23909.7
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.16514436 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0106s; samplesPerSecond = 23656.3
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.14973075 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0101s; samplesPerSecond = 24742.7
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.15994331 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0100s; samplesPerSecond = 25027.5
07/14/2016 12:31:23:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.17897582 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0102s; samplesPerSecond = 24589.4
07/14/2016 12:31:23: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 0.16083833 * 10000; EvalErrorPrediction = 0.07760000 * 10000; totalSamplesSeen = 30000; learningRatePerSample = 0.0080000004; epochTime=0.420737s
07/14/2016 12:31:23: SGD: Saving checkpoint model '/tmp/cntk-test-20160714123111.100373/Examples/Other/Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn'
07/14/2016 12:31:23: CNTKCommandTrainEnd: Multigpu_Demo_Train

07/14/2016 12:31:23: Action "train" complete.


07/14/2016 12:31:23: ##############################################################################
07/14/2016 12:31:23: #                                                                            #
07/14/2016 12:31:23: # Action "test"                                                              #
07/14/2016 12:31:23: #                                                                            #
07/14/2016 12:31:23: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [EvalErrorPrediction Gradient[1]] [H1 Gradient[50 x 1 x *1]] [H2 Gradient[50 x 1 x *1]] [HLast Gradient[2 x 1 x *1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *1]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *1]] [PosteriorProb Value[2 x 1 x *1]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *1]] [ScaledLogLikelihood Value[2 x 1 x *1]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *1]] [W0*features+B0 Gradient[50 x 1 x *1]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *1]] [W1*H1+B1 Gradient[50 x 1 x *1]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *1]] [features Gradient[2 x *1]] [labels Gradient[2 x *1]] }
0x7f53b09f1e28: {[CrossEntropyWithSoftmax Value[1]] }
0x7f53b09f2558: {[B2 Value[2 x 1]] }
0x7f53b09f2608: {[B0 Value[50 x 1]] }
0x7f53b09f2ca8: {[B1 Value[50 x 1]] }
0x7f53b09f62e8: {[features Value[2 x *1]] }
0x7f53b09f7508: {[InvStdOfFeatures Value[2]] }
0x7f53b09f83d8: {[labels Value[2 x *1]] }
0x7f53b09f90a8: {[MeanOfFeatures Value[2]] }
0x7f53b09f9868: {[Prior Value[2]] }
0x7f53b09fa818: {[W0 Value[50 x 2]] }
0x7f53b09fabe8: {[W1 Value[50 x 50]] }
0x7f53b09fc428: {[W2 Value[2 x 50]] }
0x7f53bdecbea8: {[EvalErrorPrediction Value[1]] }
0x7f53bdecc298: {[LogOfPrior Value[2]] }
0x7f53bdecd668: {[MVNormalizedFeatures Value[2 x *1]] }
0x7f53bdecddb8: {[W0*features Value[50 x *1]] }
0x7f53bdecdeb8: {[W0*features+B0 Value[50 x 1 x *1]] }
0x7f53bdece168: {[H1 Value[50 x 1 x *1]] }
0x7f53bdece328: {[W1*H1 Value[50 x 1 x *1]] }
0x7f53bdece4e8: {[W1*H1+B1 Value[50 x 1 x *1]] }
0x7f53bdece6a8: {[H2 Value[50 x 1 x *1]] }
0x7f53bdece868: {[W2*H1 Value[2 x 1 x *1]] }
0x7f53bdecea28: {[HLast Value[2 x 1 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..603] (first sequence at sample 0), data subset 0 of 1
Actual gradient aggregation time: 0.00011
07/14/2016 12:31:23: Minibatch[1-1]: EvalErrorPrediction = 0.05804312 * 603; CrossEntropyWithSoftmax = 0.12739181 * 603
07/14/2016 12:31:23: Final Results: Minibatch[1-1]: EvalErrorPrediction = 0.05804312 * 603; CrossEntropyWithSoftmax = 0.12739181 * 603; perplexity = 1.13586197

07/14/2016 12:31:23: Action "test" complete.

07/14/2016 12:31:23: __COMPLETED__
~MPIWrapper