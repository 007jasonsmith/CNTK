CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3565 @ 3.20GHz
    Hardware threads: 8
    Total Memory: 12580436 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/debug/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/cntk_sequence.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu DeviceId=0 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 05:11:35
		Last modified date: Thu Jul 14 03:20:47 2016
		Build type: Debug
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData
07/14/2016 06:07:36: -------------------------------------------------------------------
07/14/2016 06:07:36: Build info: 

07/14/2016 06:07:36: 		Built time: Jul 14 2016 05:11:35
07/14/2016 06:07:36: 		Last modified date: Thu Jul 14 03:20:47 2016
07/14/2016 06:07:36: 		Build type: Debug
07/14/2016 06:07:36: 		Build target: GPU
07/14/2016 06:07:36: 		With 1bit-SGD: no
07/14/2016 06:07:36: 		Math lib: mkl
07/14/2016 06:07:36: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
07/14/2016 06:07:36: 		CUB_PATH: C:\src\cub-1.4.1
07/14/2016 06:07:36: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
07/14/2016 06:07:36: 		Build Branch: HEAD
07/14/2016 06:07:36: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 06:07:36: 		Built by svcphil on liana-08-w
07/14/2016 06:07:36: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
07/14/2016 06:07:36: -------------------------------------------------------------------
07/14/2016 06:07:36: -------------------------------------------------------------------
07/14/2016 06:07:36: GPU info:

07/14/2016 06:07:36: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
07/14/2016 06:07:36: -------------------------------------------------------------------

07/14/2016 06:07:36: Running on cntk-muc01 at 2016/07/14 06:07:36
07/14/2016 06:07:36: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/cntk_sequence.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu  DeviceId=0  timestamping=true



07/14/2016 06:07:36: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 06:07:36: precision = "float"
deviceId = $DeviceId$
command = dptPre1:addLayer2:dptPre2:addLayer3:speechTrain:replaceCriterionNode:sequenceTrain
ndlMacros = "$ConfigDir$/macros.txt"
globalMeanPath   = "GlobalStats/mean.363"
globalInvStdPath = "GlobalStats/var.363"
globalPriorPath  = "GlobalStats/prior.132"
traceLevel = 1
truncated = false
SGD = [
    epochSize = 81920
    minibatchSize = 256
    learningRatesPerMB = 0.8
    numMBsToShowResult = 10
    momentumPerMB = 0.9
    dropoutRate = 0.0
    maxEpochs = 2
]
dptPre1 = [
    action = "train"
    modelPath = "$RunDir$/models/Pre1/cntkSpeech"
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/dnn_1layer.txt"
    ]
]
addLayer2 = [    
    action = "edit"
    currLayer = 1
    newLayer = 2
    currModel = "$RunDir$/models/Pre1/cntkSpeech"
    newModel  = "$RunDir$/models/Pre2/cntkSpeech.0"
    editPath  = "$ConfigDir$/add_layer.mel"
]
dptPre2 = [
    action = "train"
    modelPath = "$RunDir$/models/Pre2/cntkSpeech"
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/dnn_1layer.txt"
    ]
]
AddLayer3 = [    
    action = "edit"
    currLayer = 2
    newLayer = 3
    currModel = "$RunDir$/models/Pre2/cntkSpeech"
    newModel  = "$RunDir$/models/cntkSpeech.0"
    editPath  = "$ConfigDir$/add_layer.mel"
]
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech"
    traceLevel = 1
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/dnn.txt"
    ]
    SGD = [
        epochSize = 81920
        minibatchSize = 256:512
        learningRatesPerMB = 0.8:1.6
        numMBsToShowResult = 10
        momentumPerSample = 0.999589
        dropoutRate = 0.0
        maxEpochs = 4
        gradUpdateType = "none"
        normWithAveMultiplier = true
        clippingThresholdPerSample = 1#INF
    ]
]
reader = [
    readerType = "HTKMLFReader"
    readMethod = "blockRandomize"
    miniBatchMode = "partial"
    randomize = "auto"
    verbosity = 0
    features = [
        dim = 363
        type = "real"
        scpFile = "$DataDir$/glob_0000.scp"
    ]
    labels = [
        mlfFile = "$DataDir$/glob_0000.mlf"
        labelMappingFile = "$DataDir$/state.list"
        labelDim = 132
        labelType = "category"
    ]
]
replaceCriterionNode = [
    action = "edit"
    currModel = "$RunDir$/models/cntkSpeech"
    newModel  = "$RunDir$/models/cntkSpeech.sequence.0"
    editPath  = "$ConfigDir$/replace_ce_with_sequence_criterion.mel"
]
sequenceTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.sequence"
    traceLevel = 1
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/nonexistentfile.txt"
    ]
    SGD = [
        epochSize = 81920
        minibatchSize = 10
        learningRatesPerSample = 0.000002
        momentumPerSample = 0.999589
        dropoutRate = 0.0
        maxEpochs = 3
        hsmoothingWeight = 0.95
        frameDropThresh = 1e-10
        numMBsToShowResult = 10
        gradientClippingWithTruncation = true
        clippingThresholdPerSample = 1.0
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        frameMode = false
        nbruttsineachrecurrentiter = 2
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
        hmms = [
            phoneFile  = "$DataDir$/model.overalltying"
            transpFile = "$DataDir$/model.transprob"
        ]
        lattices = [
            denlatTocFile = "$DataDir$/*.lats.toc"
        ]
    ]
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu
DeviceId=0
timestamping=true

07/14/2016 06:07:36: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 06:07:36: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 06:07:36: precision = "float"
deviceId = 0
command = dptPre1:addLayer2:dptPre2:addLayer3:speechTrain:replaceCriterionNode:sequenceTrain
ndlMacros = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/macros.txt"
globalMeanPath   = "GlobalStats/mean.363"
globalInvStdPath = "GlobalStats/var.363"
globalPriorPath  = "GlobalStats/prior.132"
traceLevel = 1
truncated = false
SGD = [
    epochSize = 81920
    minibatchSize = 256
    learningRatesPerMB = 0.8
    numMBsToShowResult = 10
    momentumPerMB = 0.9
    dropoutRate = 0.0
    maxEpochs = 2
]
dptPre1 = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre1/cntkSpeech"
    NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/dnn_1layer.txt"
    ]
]
addLayer2 = [    
    action = "edit"
    currLayer = 1
    newLayer = 2
    currModel = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre1/cntkSpeech"
    newModel  = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre2/cntkSpeech.0"
    editPath  = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/add_layer.mel"
]
dptPre2 = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre2/cntkSpeech"
    NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/dnn_1layer.txt"
    ]
]
AddLayer3 = [    
    action = "edit"
    currLayer = 2
    newLayer = 3
    currModel = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre2/cntkSpeech"
    newModel  = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.0"
    editPath  = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/add_layer.mel"
]
speechTrain = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech"
    traceLevel = 1
    NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/dnn.txt"
    ]
    SGD = [
        epochSize = 81920
        minibatchSize = 256:512
        learningRatesPerMB = 0.8:1.6
        numMBsToShowResult = 10
        momentumPerSample = 0.999589
        dropoutRate = 0.0
        maxEpochs = 4
        gradUpdateType = "none"
        normWithAveMultiplier = true
        clippingThresholdPerSample = 1#INF
    ]
]
reader = [
    readerType = "HTKMLFReader"
    readMethod = "blockRandomize"
    miniBatchMode = "partial"
    randomize = "auto"
    verbosity = 0
    features = [
        dim = 363
        type = "real"
        scpFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.scp"
    ]
    labels = [
        mlfFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.mlf"
        labelMappingFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/state.list"
        labelDim = 132
        labelType = "category"
    ]
]
replaceCriterionNode = [
    action = "edit"
    currModel = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech"
    newModel  = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.sequence.0"
    editPath  = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/replace_ce_with_sequence_criterion.mel"
]
sequenceTrain = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.sequence"
    traceLevel = 1
    NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/nonexistentfile.txt"
    ]
    SGD = [
        epochSize = 81920
        minibatchSize = 10
        learningRatesPerSample = 0.000002
        momentumPerSample = 0.999589
        dropoutRate = 0.0
        maxEpochs = 3
        hsmoothingWeight = 0.95
        frameDropThresh = 1e-10
        numMBsToShowResult = 10
        gradientClippingWithTruncation = true
        clippingThresholdPerSample = 1.0
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        frameMode = false
        nbruttsineachrecurrentiter = 2
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.mlf"
            labelMappingFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/state.list"
            labelDim = 132
            labelType = "category"
        ]
        hmms = [
            phoneFile  = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/model.overalltying"
            transpFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/model.transprob"
        ]
        lattices = [
            denlatTocFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/*.lats.toc"
        ]
    ]
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu
DeviceId=0
timestamping=true

07/14/2016 06:07:36: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 06:07:36: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk_sequence.cntk:addLayer2=[    
    action = "edit"
    currLayer = 1
    newLayer = 2
    currModel = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre1/cntkSpeech"
    newModel  = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre2/cntkSpeech.0"
    editPath  = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/add_layer.mel"
]

configparameters: cntk_sequence.cntk:AddLayer3=[    
    action = "edit"
    currLayer = 2
    newLayer = 3
    currModel = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre2/cntkSpeech"
    newModel  = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.0"
    editPath  = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/add_layer.mel"
]

configparameters: cntk_sequence.cntk:command=dptPre1:addLayer2:dptPre2:addLayer3:speechTrain:replaceCriterionNode:sequenceTrain
configparameters: cntk_sequence.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining
configparameters: cntk_sequence.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData
configparameters: cntk_sequence.cntk:DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData
configparameters: cntk_sequence.cntk:deviceId=0
configparameters: cntk_sequence.cntk:dptPre1=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre1/cntkSpeech"
    NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/dnn_1layer.txt"
    ]
]

configparameters: cntk_sequence.cntk:dptPre2=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre2/cntkSpeech"
    NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/dnn_1layer.txt"
    ]
]

configparameters: cntk_sequence.cntk:globalInvStdPath=GlobalStats/var.363
configparameters: cntk_sequence.cntk:globalMeanPath=GlobalStats/mean.363
configparameters: cntk_sequence.cntk:globalPriorPath=GlobalStats/prior.132
configparameters: cntk_sequence.cntk:ndlMacros=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/macros.txt
configparameters: cntk_sequence.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu
configparameters: cntk_sequence.cntk:precision=float
configparameters: cntk_sequence.cntk:reader=[
    readerType = "HTKMLFReader"
    readMethod = "blockRandomize"
    miniBatchMode = "partial"
    randomize = "auto"
    verbosity = 0
    features = [
        dim = 363
        type = "real"
        scpFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.scp"
    ]
    labels = [
        mlfFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.mlf"
        labelMappingFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/state.list"
        labelDim = 132
        labelType = "category"
    ]
]

configparameters: cntk_sequence.cntk:replaceCriterionNode=[
    action = "edit"
    currModel = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech"
    newModel  = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.sequence.0"
    editPath  = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/replace_ce_with_sequence_criterion.mel"
]

configparameters: cntk_sequence.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu
configparameters: cntk_sequence.cntk:sequenceTrain=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.sequence"
    traceLevel = 1
    NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/nonexistentfile.txt"
    ]
    SGD = [
        epochSize = 81920
        minibatchSize = 10
        learningRatesPerSample = 0.000002
        momentumPerSample = 0.999589
        dropoutRate = 0.0
        maxEpochs = 3
        hsmoothingWeight = 0.95
        frameDropThresh = 1e-10
        numMBsToShowResult = 10
        gradientClippingWithTruncation = true
        clippingThresholdPerSample = 1.0
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        frameMode = false
        nbruttsineachrecurrentiter = 2
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.mlf"
            labelMappingFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/state.list"
            labelDim = 132
            labelType = "category"
        ]
        hmms = [
            phoneFile  = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/model.overalltying"
            transpFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/model.transprob"
        ]
        lattices = [
            denlatTocFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/*.lats.toc"
        ]
    ]
]

configparameters: cntk_sequence.cntk:SGD=[
    epochSize = 81920
    minibatchSize = 256
    learningRatesPerMB = 0.8
    numMBsToShowResult = 10
    momentumPerMB = 0.9
    dropoutRate = 0.0
    maxEpochs = 2
]

configparameters: cntk_sequence.cntk:speechTrain=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech"
    traceLevel = 1
    NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\SequenceTraining/dnn.txt"
    ]
    SGD = [
        epochSize = 81920
        minibatchSize = 256:512
        learningRatesPerMB = 0.8:1.6
        numMBsToShowResult = 10
        momentumPerSample = 0.999589
        dropoutRate = 0.0
        maxEpochs = 4
        gradUpdateType = "none"
        normWithAveMultiplier = true
        clippingThresholdPerSample = 1#INF
    ]
]

configparameters: cntk_sequence.cntk:timestamping=true
configparameters: cntk_sequence.cntk:traceLevel=1
configparameters: cntk_sequence.cntk:truncated=false
07/14/2016 06:07:36: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 06:07:36: Commands: dptPre1 addLayer2 dptPre2 addLayer3 speechTrain replaceCriterionNode sequenceTrain
07/14/2016 06:07:36: Precision = "float"
07/14/2016 06:07:36: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre1/cntkSpeech
07/14/2016 06:07:36: CNTKCommandTrainInfo: dptPre1 : 2
07/14/2016 06:07:36: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre2/cntkSpeech
07/14/2016 06:07:36: CNTKCommandTrainInfo: dptPre2 : 2
07/14/2016 06:07:36: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech
07/14/2016 06:07:36: CNTKCommandTrainInfo: speechTrain : 4
07/14/2016 06:07:36: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.sequence
07/14/2016 06:07:36: CNTKCommandTrainInfo: sequenceTrain : 3
07/14/2016 06:07:36: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 11

07/14/2016 06:07:36: ##############################################################################
07/14/2016 06:07:36: #                                                                            #
07/14/2016 06:07:36: # Action "train"                                                             #
07/14/2016 06:07:36: #                                                                            #
07/14/2016 06:07:36: ##############################################################################

07/14/2016 06:07:36: CNTKCommandTrainBegin: dptPre1
NDLBuilder Using GPU 0
reading script file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.scp ... 948 entries
total 132 state names in state list C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/state.list
htkmlfreader: reading MLF file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

07/14/2016 06:07:39: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	scaledLogLikelihood = Minus()

Validating network. 19 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> OL.W = LearnableParameter() :  -> [132 x 512]
Validating --> HL1.W = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> globalMean = LearnableParameter() :  -> [363 x 1]
Validating --> globalInvStd = LearnableParameter() :  -> [363 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (features, globalMean, globalInvStd) : [363 x *], [363 x 1], [363 x 1] -> [363 x *]
Validating --> HL1.t = Times (HL1.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
Validating --> HL1.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL1.z = Plus (HL1.t, HL1.b) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> HL1.y = Sigmoid (HL1.z) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> OL.t = Times (OL.W, HL1.y) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> OL.b = LearnableParameter() :  -> [132 x 1]
Validating --> OL.z = Plus (OL.t, OL.b) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, OL.z) : [132 x *], [132 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, OL.z) : [132 x *], [132 x 1 x *] -> [1]
Validating --> globalPrior = LearnableParameter() :  -> [132 x 1]
Validating --> logPrior = Log (globalPrior) : [132 x 1] -> [132 x 1]
Validating --> scaledLogLikelihood = Minus (OL.z, logPrior) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]

Validating network. 10 nodes to process in pass 2.


Validating network, final pass.



10 out of 19 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 06:07:40: Created model with 19 nodes on GPU 0.

07/14/2016 06:07:40: Training criterion node(s):
07/14/2016 06:07:40: 	ce = CrossEntropyWithSoftmax

07/14/2016 06:07:40: Evaluation criterion node(s):

07/14/2016 06:07:40: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[err Gradient[1]] [featNorm Gradient[363 x *]] [features Gradient[363 x *]] [globalInvStd Gradient[363 x 1]] [globalMean Gradient[363 x 1]] [globalPrior Gradient[132 x 1]] [labels Gradient[132 x *]] [logPrior Gradient[132 x 1]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
000000B4197782D0: {[HL1.W Gradient[512 x 363]] [HL1.z Value[512 x 1 x *]] }
000000B4197787B0: {[globalInvStd Value[363 x 1]] }
000000B419778880: {[featNorm Value[363 x *]] }
000000B419778950: {[OL.W Gradient[132 x 512]] [OL.z Value[132 x 1 x *]] }
000000B419778BC0: {[globalMean Value[363 x 1]] }
000000B4197790A0: {[HL1.b Value[512 x 1]] }
000000B419779170: {[labels Value[132 x *]] }
000000B419779240: {[OL.b Value[132 x 1]] }
000000B419779310: {[HL1.W Value[512 x 363]] }
000000B4197793E0: {[HL1.t Gradient[512 x *]] [HL1.y Value[512 x 1 x *]] }
000000B4197794B0: {[HL1.z Gradient[512 x 1 x *]] [OL.t Value[132 x 1 x *]] }
000000B419779580: {[logPrior Value[132 x 1]] }
000000B419779650: {[ce Value[1]] }
000000B419779720: {[scaledLogLikelihood Value[132 x 1 x *]] }
000000B4197797F0: {[globalPrior Value[132 x 1]] }
000000B4197798C0: {[err Value[1]] }
000000B419779990: {[OL.W Value[132 x 512]] }
000000B419779A60: {[HL1.t Value[512 x *]] }
000000B419779CD0: {[HL1.b Gradient[512 x 1]] [HL1.y Gradient[512 x 1 x *]] [OL.z Gradient[132 x 1 x *]] }
000000B419779E70: {[ce Gradient[1]] }
000000B419779F40: {[OL.t Gradient[132 x 1 x *]] }
000000B41977A0E0: {[OL.b Gradient[132 x 1]] }
000000B47E67CF30: {[features Value[363 x *]] }

07/14/2016 06:07:40: No PreCompute nodes found, skipping PreCompute step.

07/14/2016 06:07:40: Starting Epoch 1: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
minibatchiterator: epoch 0: frames [0..81920] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/14/2016 06:07:44: Starting minibatch loop.
07/14/2016 06:07:44:  Epoch[ 1 of 2]-Minibatch[   1-  10, 3.13%]: ce = 3.89978218 * 2560; err = 0.84375000 * 2560; time = 0.3354s; samplesPerSecond = 7631.9
07/14/2016 06:07:44:  Epoch[ 1 of 2]-Minibatch[  11-  20, 6.25%]: ce = 2.96755714 * 2560; err = 0.72031250 * 2560; time = 0.1564s; samplesPerSecond = 16366.5
07/14/2016 06:07:44:  Epoch[ 1 of 2]-Minibatch[  21-  30, 9.38%]: ce = 2.55723495 * 2560; err = 0.65859375 * 2560; time = 0.1573s; samplesPerSecond = 16269.6
07/14/2016 06:07:45:  Epoch[ 1 of 2]-Minibatch[  31-  40, 12.50%]: ce = 2.29642715 * 2560; err = 0.61992187 * 2560; time = 0.1569s; samplesPerSecond = 16311.1
07/14/2016 06:07:45:  Epoch[ 1 of 2]-Minibatch[  41-  50, 15.63%]: ce = 2.02396469 * 2560; err = 0.55117187 * 2560; time = 0.1565s; samplesPerSecond = 16358.5
07/14/2016 06:07:45:  Epoch[ 1 of 2]-Minibatch[  51-  60, 18.75%]: ce = 1.87309265 * 2560; err = 0.51484375 * 2560; time = 0.1570s; samplesPerSecond = 16310.2
07/14/2016 06:07:45:  Epoch[ 1 of 2]-Minibatch[  61-  70, 21.88%]: ce = 1.78157196 * 2560; err = 0.50507813 * 2560; time = 0.1555s; samplesPerSecond = 16459.0
07/14/2016 06:07:45:  Epoch[ 1 of 2]-Minibatch[  71-  80, 25.00%]: ce = 1.75391235 * 2560; err = 0.50781250 * 2560; time = 0.1545s; samplesPerSecond = 16567.6
07/14/2016 06:07:45:  Epoch[ 1 of 2]-Minibatch[  81-  90, 28.13%]: ce = 1.66460266 * 2560; err = 0.45742187 * 2560; time = 0.1520s; samplesPerSecond = 16843.3
07/14/2016 06:07:46:  Epoch[ 1 of 2]-Minibatch[  91- 100, 31.25%]: ce = 1.62184296 * 2560; err = 0.47968750 * 2560; time = 0.1519s; samplesPerSecond = 16855.2
07/14/2016 06:07:46:  Epoch[ 1 of 2]-Minibatch[ 101- 110, 34.38%]: ce = 1.65328217 * 2560; err = 0.47265625 * 2560; time = 0.1513s; samplesPerSecond = 16921.5
07/14/2016 06:07:46:  Epoch[ 1 of 2]-Minibatch[ 111- 120, 37.50%]: ce = 1.50686951 * 2560; err = 0.44921875 * 2560; time = 0.1512s; samplesPerSecond = 16931.9
07/14/2016 06:07:46:  Epoch[ 1 of 2]-Minibatch[ 121- 130, 40.63%]: ce = 1.46723938 * 2560; err = 0.42304687 * 2560; time = 0.1517s; samplesPerSecond = 16871.9
07/14/2016 06:07:46:  Epoch[ 1 of 2]-Minibatch[ 131- 140, 43.75%]: ce = 1.49163513 * 2560; err = 0.44140625 * 2560; time = 0.1517s; samplesPerSecond = 16876.5
07/14/2016 06:07:46:  Epoch[ 1 of 2]-Minibatch[ 141- 150, 46.88%]: ce = 1.46437683 * 2560; err = 0.43398437 * 2560; time = 0.1516s; samplesPerSecond = 16882.4
07/14/2016 06:07:46:  Epoch[ 1 of 2]-Minibatch[ 151- 160, 50.00%]: ce = 1.43047485 * 2560; err = 0.43867187 * 2560; time = 0.1517s; samplesPerSecond = 16873.3
07/14/2016 06:07:47:  Epoch[ 1 of 2]-Minibatch[ 161- 170, 53.13%]: ce = 1.42106018 * 2560; err = 0.41992188 * 2560; time = 0.1530s; samplesPerSecond = 16728.5
07/14/2016 06:07:47:  Epoch[ 1 of 2]-Minibatch[ 171- 180, 56.25%]: ce = 1.46538086 * 2560; err = 0.42421875 * 2560; time = 0.1513s; samplesPerSecond = 16924.6
07/14/2016 06:07:47:  Epoch[ 1 of 2]-Minibatch[ 181- 190, 59.38%]: ce = 1.47427673 * 2560; err = 0.44062500 * 2560; time = 0.1515s; samplesPerSecond = 16898.1
07/14/2016 06:07:47:  Epoch[ 1 of 2]-Minibatch[ 191- 200, 62.50%]: ce = 1.42847290 * 2560; err = 0.44023438 * 2560; time = 0.1515s; samplesPerSecond = 16896.9
07/14/2016 06:07:47:  Epoch[ 1 of 2]-Minibatch[ 201- 210, 65.63%]: ce = 1.34078369 * 2560; err = 0.41171875 * 2560; time = 0.1512s; samplesPerSecond = 16933.5
07/14/2016 06:07:47:  Epoch[ 1 of 2]-Minibatch[ 211- 220, 68.75%]: ce = 1.39474487 * 2560; err = 0.42734375 * 2560; time = 0.1488s; samplesPerSecond = 17208.8
07/14/2016 06:07:47:  Epoch[ 1 of 2]-Minibatch[ 221- 230, 71.88%]: ce = 1.40151062 * 2560; err = 0.41250000 * 2560; time = 0.1521s; samplesPerSecond = 16833.9
07/14/2016 06:07:48:  Epoch[ 1 of 2]-Minibatch[ 231- 240, 75.00%]: ce = 1.39345703 * 2560; err = 0.42734375 * 2560; time = 0.1513s; samplesPerSecond = 16924.7
07/14/2016 06:07:48:  Epoch[ 1 of 2]-Minibatch[ 241- 250, 78.13%]: ce = 1.32485046 * 2560; err = 0.40156250 * 2560; time = 0.1515s; samplesPerSecond = 16898.2
07/14/2016 06:07:48:  Epoch[ 1 of 2]-Minibatch[ 251- 260, 81.25%]: ce = 1.27032471 * 2560; err = 0.39765625 * 2560; time = 0.1520s; samplesPerSecond = 16841.2
07/14/2016 06:07:48:  Epoch[ 1 of 2]-Minibatch[ 261- 270, 84.38%]: ce = 1.32375488 * 2560; err = 0.39257813 * 2560; time = 0.1510s; samplesPerSecond = 16948.5
07/14/2016 06:07:48:  Epoch[ 1 of 2]-Minibatch[ 271- 280, 87.50%]: ce = 1.25393982 * 2560; err = 0.38320312 * 2560; time = 0.1513s; samplesPerSecond = 16922.2
07/14/2016 06:07:48:  Epoch[ 1 of 2]-Minibatch[ 281- 290, 90.63%]: ce = 1.23377075 * 2560; err = 0.36953125 * 2560; time = 0.1510s; samplesPerSecond = 16959.0
07/14/2016 06:07:49:  Epoch[ 1 of 2]-Minibatch[ 291- 300, 93.75%]: ce = 1.20861511 * 2560; err = 0.35976562 * 2560; time = 0.1506s; samplesPerSecond = 17002.1
07/14/2016 06:07:49:  Epoch[ 1 of 2]-Minibatch[ 301- 310, 96.88%]: ce = 1.23675232 * 2560; err = 0.36757812 * 2560; time = 0.1516s; samplesPerSecond = 16892.0
07/14/2016 06:07:49:  Epoch[ 1 of 2]-Minibatch[ 311- 320, 100.00%]: ce = 1.22960205 * 2560; err = 0.37460938 * 2560; time = 0.1379s; samplesPerSecond = 18565.4
07/14/2016 06:07:49: Finished Epoch[ 1 of 2]: [Training] ce = 1.65172386 * 81920; err = 0.46774902 * 81920; totalSamplesSeen = 81920; learningRatePerSample = 0.003125; epochTime=8.91878s
07/14/2016 06:07:49: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre1/cntkSpeech.1'

07/14/2016 06:07:49: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
minibatchiterator: epoch 1: frames [81920..163840] (first utterance at frame 81920), data subset 0 of 1, with 1 datapasses

07/14/2016 06:07:49: Starting minibatch loop.
07/14/2016 06:07:49:  Epoch[ 2 of 2]-Minibatch[   1-  10, 3.13%]: ce = 1.21869726 * 2560; err = 0.36992188 * 2560; time = 0.1566s; samplesPerSecond = 16348.3
07/14/2016 06:07:49:  Epoch[ 2 of 2]-Minibatch[  11-  20, 6.25%]: ce = 1.18345709 * 2560; err = 0.36679688 * 2560; time = 0.1581s; samplesPerSecond = 16194.5
07/14/2016 06:07:49:  Epoch[ 2 of 2]-Minibatch[  21-  30, 9.38%]: ce = 1.17220440 * 2560; err = 0.35898438 * 2560; time = 0.1579s; samplesPerSecond = 16216.9
07/14/2016 06:07:50:  Epoch[ 2 of 2]-Minibatch[  31-  40, 12.50%]: ce = 1.20035286 * 2560; err = 0.35781250 * 2560; time = 0.1567s; samplesPerSecond = 16342.0
07/14/2016 06:07:50:  Epoch[ 2 of 2]-Minibatch[  41-  50, 15.63%]: ce = 1.19499741 * 2560; err = 0.37460938 * 2560; time = 0.1555s; samplesPerSecond = 16465.7
07/14/2016 06:07:50:  Epoch[ 2 of 2]-Minibatch[  51-  60, 18.75%]: ce = 1.16373444 * 2560; err = 0.34687500 * 2560; time = 0.1551s; samplesPerSecond = 16500.6
07/14/2016 06:07:50:  Epoch[ 2 of 2]-Minibatch[  61-  70, 21.88%]: ce = 1.13869247 * 2560; err = 0.34804687 * 2560; time = 0.1571s; samplesPerSecond = 16299.2
07/14/2016 06:07:50:  Epoch[ 2 of 2]-Minibatch[  71-  80, 25.00%]: ce = 1.19293823 * 2560; err = 0.36992188 * 2560; time = 0.1569s; samplesPerSecond = 16317.1
07/14/2016 06:07:50:  Epoch[ 2 of 2]-Minibatch[  81-  90, 28.13%]: ce = 1.23978348 * 2560; err = 0.37539062 * 2560; time = 0.1553s; samplesPerSecond = 16481.1
07/14/2016 06:07:50:  Epoch[ 2 of 2]-Minibatch[  91- 100, 31.25%]: ce = 1.18622742 * 2560; err = 0.36406250 * 2560; time = 0.1593s; samplesPerSecond = 16068.4
07/14/2016 06:07:51:  Epoch[ 2 of 2]-Minibatch[ 101- 110, 34.38%]: ce = 1.16710892 * 2560; err = 0.35703125 * 2560; time = 0.1569s; samplesPerSecond = 16311.2
07/14/2016 06:07:51:  Epoch[ 2 of 2]-Minibatch[ 111- 120, 37.50%]: ce = 1.24683685 * 2560; err = 0.38554688 * 2560; time = 0.1545s; samplesPerSecond = 16566.0
07/14/2016 06:07:51:  Epoch[ 2 of 2]-Minibatch[ 121- 130, 40.63%]: ce = 1.18601685 * 2560; err = 0.35273437 * 2560; time = 0.1572s; samplesPerSecond = 16287.8
07/14/2016 06:07:51:  Epoch[ 2 of 2]-Minibatch[ 131- 140, 43.75%]: ce = 1.21721497 * 2560; err = 0.37617187 * 2560; time = 0.1548s; samplesPerSecond = 16542.7
07/14/2016 06:07:51:  Epoch[ 2 of 2]-Minibatch[ 141- 150, 46.88%]: ce = 1.19934692 * 2560; err = 0.36953125 * 2560; time = 0.1569s; samplesPerSecond = 16315.5
07/14/2016 06:07:51:  Epoch[ 2 of 2]-Minibatch[ 151- 160, 50.00%]: ce = 1.15099945 * 2560; err = 0.34257813 * 2560; time = 0.1558s; samplesPerSecond = 16434.4
07/14/2016 06:07:52:  Epoch[ 2 of 2]-Minibatch[ 161- 170, 53.13%]: ce = 1.14984589 * 2560; err = 0.35703125 * 2560; time = 0.1569s; samplesPerSecond = 16316.0
07/14/2016 06:07:52:  Epoch[ 2 of 2]-Minibatch[ 171- 180, 56.25%]: ce = 1.19028320 * 2560; err = 0.35898438 * 2560; time = 0.1568s; samplesPerSecond = 16326.4
07/14/2016 06:07:52:  Epoch[ 2 of 2]-Minibatch[ 181- 190, 59.38%]: ce = 1.16434784 * 2560; err = 0.36406250 * 2560; time = 0.1592s; samplesPerSecond = 16080.4
07/14/2016 06:07:52:  Epoch[ 2 of 2]-Minibatch[ 191- 200, 62.50%]: ce = 1.08853760 * 2560; err = 0.33359375 * 2560; time = 0.1548s; samplesPerSecond = 16533.7
07/14/2016 06:07:52:  Epoch[ 2 of 2]-Minibatch[ 201- 210, 65.63%]: ce = 1.15194244 * 2560; err = 0.35039063 * 2560; time = 0.1599s; samplesPerSecond = 16009.8
07/14/2016 06:07:52:  Epoch[ 2 of 2]-Minibatch[ 211- 220, 68.75%]: ce = 1.16113434 * 2560; err = 0.35625000 * 2560; time = 0.1562s; samplesPerSecond = 16386.8
07/14/2016 06:07:53:  Epoch[ 2 of 2]-Minibatch[ 221- 230, 71.88%]: ce = 1.18479004 * 2560; err = 0.36757812 * 2560; time = 0.1559s; samplesPerSecond = 16424.8
07/14/2016 06:07:53:  Epoch[ 2 of 2]-Minibatch[ 231- 240, 75.00%]: ce = 1.14554138 * 2560; err = 0.34843750 * 2560; time = 0.1554s; samplesPerSecond = 16474.5
07/14/2016 06:07:53:  Epoch[ 2 of 2]-Minibatch[ 241- 250, 78.13%]: ce = 1.15263367 * 2560; err = 0.35390625 * 2560; time = 0.1546s; samplesPerSecond = 16563.4
07/14/2016 06:07:53:  Epoch[ 2 of 2]-Minibatch[ 251- 260, 81.25%]: ce = 1.08563538 * 2560; err = 0.33437500 * 2560; time = 0.1560s; samplesPerSecond = 16411.9
07/14/2016 06:07:53:  Epoch[ 2 of 2]-Minibatch[ 261- 270, 84.38%]: ce = 1.10797424 * 2560; err = 0.34882812 * 2560; time = 0.1571s; samplesPerSecond = 16294.6
07/14/2016 06:07:53:  Epoch[ 2 of 2]-Minibatch[ 271- 280, 87.50%]: ce = 1.07031860 * 2560; err = 0.33593750 * 2560; time = 0.1619s; samplesPerSecond = 15807.8
07/14/2016 06:07:53:  Epoch[ 2 of 2]-Minibatch[ 281- 290, 90.63%]: ce = 1.09429016 * 2560; err = 0.33476563 * 2560; time = 0.1568s; samplesPerSecond = 16331.5
07/14/2016 06:07:54:  Epoch[ 2 of 2]-Minibatch[ 291- 300, 93.75%]: ce = 1.14634094 * 2560; err = 0.35351563 * 2560; time = 0.1588s; samplesPerSecond = 16119.3
07/14/2016 06:07:54:  Epoch[ 2 of 2]-Minibatch[ 301- 310, 96.88%]: ce = 1.10476990 * 2560; err = 0.34335938 * 2560; time = 0.1593s; samplesPerSecond = 16074.8
07/14/2016 06:07:54:  Epoch[ 2 of 2]-Minibatch[ 311- 320, 100.00%]: ce = 1.07355957 * 2560; err = 0.32695313 * 2560; time = 0.1466s; samplesPerSecond = 17464.3
07/14/2016 06:07:54: Finished Epoch[ 2 of 2]: [Training] ce = 1.16032982 * 81920; err = 0.35574951 * 81920; totalSamplesSeen = 163840; learningRatePerSample = 0.003125; epochTime=5.03168s
07/14/2016 06:07:54: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre1/cntkSpeech'
07/14/2016 06:07:54: CNTKCommandTrainEnd: dptPre1

07/14/2016 06:07:54: Action "train" complete.


07/14/2016 06:07:54: ##############################################################################
07/14/2016 06:07:54: #                                                                            #
07/14/2016 06:07:54: # Action "edit"                                                              #
07/14/2016 06:07:54: #                                                                            #
07/14/2016 06:07:54: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	scaledLogLikelihood = Minus()

Validating network. 19 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> OL.W = LearnableParameter() :  -> [132 x 512]
Validating --> HL1.W = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> globalMean = LearnableParameter() :  -> [363 x 1]
Validating --> globalInvStd = LearnableParameter() :  -> [363 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (features, globalMean, globalInvStd) : [363 x *1], [363 x 1], [363 x 1] -> [363 x *1]
Validating --> HL1.t = Times (HL1.W, featNorm) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> HL1.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL1.z = Plus (HL1.t, HL1.b) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> HL1.y = Sigmoid (HL1.z) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> OL.t = Times (OL.W, HL1.y) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> OL.b = LearnableParameter() :  -> [132 x 1]
Validating --> OL.z = Plus (OL.t, OL.b) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, OL.z) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> err = ErrorPrediction (labels, OL.z) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> globalPrior = LearnableParameter() :  -> [132 x 1]
Validating --> logPrior = Log (globalPrior) : [132 x 1] -> [132 x 1]
Validating --> scaledLogLikelihood = Minus (OL.z, logPrior) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]

Validating network. 10 nodes to process in pass 2.


Validating network, final pass.



10 out of 19 nodes do not share the minibatch layout with the input data.

Post-processing network complete.


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	scaledLogLikelihood = Minus()

Validating network. 24 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> OL.W = LearnableParameter() :  -> [132 x 512]
Validating --> HL2.W = LearnableParameter() :  -> [512 x 512]
Validating --> HL1.W = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> globalMean = LearnableParameter() :  -> [363 x 1]
Validating --> globalInvStd = LearnableParameter() :  -> [363 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (features, globalMean, globalInvStd) : [363 x *1], [363 x 1], [363 x 1] -> [363 x *1]
Validating --> HL1.t = Times (HL1.W, featNorm) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> HL1.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL1.z = Plus (HL1.t, HL1.b) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> HL1.y = Sigmoid (HL1.z) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> HL2.t = Times (HL2.W, HL1.y) : [512 x 512], [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> HL2.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL2.z = Plus (HL2.t, HL2.b) : [512 x 1 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> HL2.y = Sigmoid (HL2.z) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> OL.t = Times (OL.W, HL2.y) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> OL.b = LearnableParameter() :  -> [132 x 1]
Validating --> OL.z = Plus (OL.t, OL.b) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, OL.z) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> err = ErrorPrediction (labels, OL.z) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> globalPrior = LearnableParameter() :  -> [132 x 1]
Validating --> logPrior = Log (globalPrior) : [132 x 1] -> [132 x 1]
Validating --> scaledLogLikelihood = Minus (OL.z, logPrior) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]

Validating network. 12 nodes to process in pass 2.


Validating network, final pass.



12 out of 24 nodes do not share the minibatch layout with the input data.

Post-processing network complete.


07/14/2016 06:07:54: Action "edit" complete.


07/14/2016 06:07:54: ##############################################################################
07/14/2016 06:07:54: #                                                                            #
07/14/2016 06:07:54: # Action "train"                                                             #
07/14/2016 06:07:54: #                                                                            #
07/14/2016 06:07:54: ##############################################################################

07/14/2016 06:07:54: CNTKCommandTrainBegin: dptPre2
NDLBuilder Using GPU 0
reading script file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.scp ... 948 entries
total 132 state names in state list C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/state.list
htkmlfreader: reading MLF file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

07/14/2016 06:07:56: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre2/cntkSpeech.0'.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	scaledLogLikelihood = Minus()

Validating network. 24 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *3]
Validating --> OL.W = LearnableParameter() :  -> [132 x 512]
Validating --> HL2.W = LearnableParameter() :  -> [512 x 512]
Validating --> HL1.W = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *3]
Validating --> globalMean = LearnableParameter() :  -> [363 x 1]
Validating --> globalInvStd = LearnableParameter() :  -> [363 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (features, globalMean, globalInvStd) : [363 x *3], [363 x 1], [363 x 1] -> [363 x *3]
Validating --> HL1.t = Times (HL1.W, featNorm) : [512 x 363], [363 x *3] -> [512 x *3]
Validating --> HL1.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL1.z = Plus (HL1.t, HL1.b) : [512 x *3], [512 x 1] -> [512 x 1 x *3]
Validating --> HL1.y = Sigmoid (HL1.z) : [512 x 1 x *3] -> [512 x 1 x *3]
Validating --> HL2.t = Times (HL2.W, HL1.y) : [512 x 512], [512 x 1 x *3] -> [512 x 1 x *3]
Validating --> HL2.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL2.z = Plus (HL2.t, HL2.b) : [512 x 1 x *3], [512 x 1] -> [512 x 1 x *3]
Validating --> HL2.y = Sigmoid (HL2.z) : [512 x 1 x *3] -> [512 x 1 x *3]
Validating --> OL.t = Times (OL.W, HL2.y) : [132 x 512], [512 x 1 x *3] -> [132 x 1 x *3]
Validating --> OL.b = LearnableParameter() :  -> [132 x 1]
Validating --> OL.z = Plus (OL.t, OL.b) : [132 x 1 x *3], [132 x 1] -> [132 x 1 x *3]
Validating --> ce = CrossEntropyWithSoftmax (labels, OL.z) : [132 x *3], [132 x 1 x *3] -> [1]
Validating --> err = ErrorPrediction (labels, OL.z) : [132 x *3], [132 x 1 x *3] -> [1]
Validating --> globalPrior = LearnableParameter() :  -> [132 x 1]
Validating --> logPrior = Log (globalPrior) : [132 x 1] -> [132 x 1]
Validating --> scaledLogLikelihood = Minus (OL.z, logPrior) : [132 x 1 x *3], [132 x 1] -> [132 x 1 x *3]

Validating network. 13 nodes to process in pass 2.


Validating network, final pass.



12 out of 24 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 06:07:57: Loaded model with 24 nodes on GPU 0.

07/14/2016 06:07:57: Training criterion node(s):
07/14/2016 06:07:57: 	ce = CrossEntropyWithSoftmax

07/14/2016 06:07:57: Evaluation criterion node(s):

07/14/2016 06:07:57: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[err Gradient[1]] [featNorm Gradient[363 x *3]] [features Gradient[363 x *3]] [globalInvStd Gradient[363 x 1]] [globalMean Gradient[363 x 1]] [globalPrior Gradient[132 x 1]] [labels Gradient[132 x *3]] [logPrior Gradient[132 x 1]] [scaledLogLikelihood Gradient[132 x 1 x *3]] }
000000B4197783A0: {[logPrior Value[132 x 1]] }
000000B419778470: {[HL1.t Value[512 x *3]] }
000000B419778540: {[HL1.b Gradient[512 x 1]] [HL1.y Gradient[512 x 1 x *3]] [HL2.z Gradient[512 x 1 x *3]] [OL.t Value[132 x 1 x *3]] }
000000B4197786E0: {[globalPrior Value[132 x 1]] }
000000B4197787B0: {[HL1.z Gradient[512 x 1 x *3]] [HL2.t Value[512 x 1 x *3]] }
000000B419778880: {[HL1.W Value[512 x 363]] }
000000B419778950: {[ce Value[1]] }
000000B419778A20: {[scaledLogLikelihood Value[132 x 1 x *3]] }
000000B419778AF0: {[HL2.W Gradient[512 x 512]] [HL2.z Value[512 x 1 x *3]] }
000000B419778C90: {[globalMean Value[363 x 1]] }
000000B419778D60: {[featNorm Value[363 x *3]] }
000000B419778F00: {[features Value[363 x *3]] }
000000B419779170: {[HL2.b Value[512 x 1]] }
000000B419779240: {[HL2.W Value[512 x 512]] }
000000B419779310: {[OL.W Gradient[132 x 512]] [OL.z Value[132 x 1 x *3]] }
000000B4197793E0: {[OL.W Value[132 x 512]] }
000000B4197798C0: {[labels Value[132 x *3]] }
000000B419779990: {[HL1.t Gradient[512 x *3]] [HL1.y Value[512 x 1 x *3]] }
000000B419779A60: {[ce Gradient[1]] }
000000B419779B30: {[OL.b Value[132 x 1]] }
000000B419779C00: {[HL1.W Gradient[512 x 363]] [HL1.z Value[512 x 1 x *3]] }
000000B419779CD0: {[HL2.t Gradient[512 x 1 x *3]] [HL2.y Value[512 x 1 x *3]] }
000000B419779DA0: {[HL2.b Gradient[512 x 1]] [HL2.y Gradient[512 x 1 x *3]] [OL.z Gradient[132 x 1 x *3]] }
000000B41977A010: {[globalInvStd Value[363 x 1]] }
000000B41977A0E0: {[HL1.b Value[512 x 1]] }
000000B41977A1B0: {[err Value[1]] }
000000B47E67C8B0: {[OL.b Gradient[132 x 1]] }
000000B47E67CF30: {[OL.t Gradient[132 x 1 x *3]] }

07/14/2016 06:07:57: No PreCompute nodes found, skipping PreCompute step.

07/14/2016 06:07:57: Starting Epoch 1: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
minibatchiterator: epoch 0: frames [0..81920] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/14/2016 06:08:00: Starting minibatch loop.
07/14/2016 06:08:01:  Epoch[ 1 of 2]-Minibatch[   1-  10, 3.13%]: ce = 4.49739113 * 2560; err = 0.80429688 * 2560; time = 0.1932s; samplesPerSecond = 13249.4
07/14/2016 06:08:01:  Epoch[ 1 of 2]-Minibatch[  11-  20, 6.25%]: ce = 2.83226433 * 2560; err = 0.68125000 * 2560; time = 0.1819s; samplesPerSecond = 14076.4
07/14/2016 06:08:01:  Epoch[ 1 of 2]-Minibatch[  21-  30, 9.38%]: ce = 2.25921097 * 2560; err = 0.59921875 * 2560; time = 0.1819s; samplesPerSecond = 14075.1
07/14/2016 06:08:01:  Epoch[ 1 of 2]-Minibatch[  31-  40, 12.50%]: ce = 1.91240921 * 2560; err = 0.51210937 * 2560; time = 0.1816s; samplesPerSecond = 14093.4
07/14/2016 06:08:01:  Epoch[ 1 of 2]-Minibatch[  41-  50, 15.63%]: ce = 1.69259949 * 2560; err = 0.46679688 * 2560; time = 0.1837s; samplesPerSecond = 13933.9
07/14/2016 06:08:02:  Epoch[ 1 of 2]-Minibatch[  51-  60, 18.75%]: ce = 1.59069672 * 2560; err = 0.45312500 * 2560; time = 0.1841s; samplesPerSecond = 13907.8
07/14/2016 06:08:02:  Epoch[ 1 of 2]-Minibatch[  61-  70, 21.88%]: ce = 1.48813324 * 2560; err = 0.43789062 * 2560; time = 0.1852s; samplesPerSecond = 13819.5
07/14/2016 06:08:02:  Epoch[ 1 of 2]-Minibatch[  71-  80, 25.00%]: ce = 1.48960571 * 2560; err = 0.43515625 * 2560; time = 0.1849s; samplesPerSecond = 13843.8
07/14/2016 06:08:02:  Epoch[ 1 of 2]-Minibatch[  81-  90, 28.13%]: ce = 1.45628204 * 2560; err = 0.42187500 * 2560; time = 0.1828s; samplesPerSecond = 14005.1
07/14/2016 06:08:02:  Epoch[ 1 of 2]-Minibatch[  91- 100, 31.25%]: ce = 1.41567383 * 2560; err = 0.40820313 * 2560; time = 0.1838s; samplesPerSecond = 13931.3
07/14/2016 06:08:02:  Epoch[ 1 of 2]-Minibatch[ 101- 110, 34.38%]: ce = 1.42048950 * 2560; err = 0.41406250 * 2560; time = 0.1834s; samplesPerSecond = 13958.7
07/14/2016 06:08:03:  Epoch[ 1 of 2]-Minibatch[ 111- 120, 37.50%]: ce = 1.34279480 * 2560; err = 0.39726563 * 2560; time = 0.1846s; samplesPerSecond = 13865.3
07/14/2016 06:08:03:  Epoch[ 1 of 2]-Minibatch[ 121- 130, 40.63%]: ce = 1.31633148 * 2560; err = 0.38789062 * 2560; time = 0.1826s; samplesPerSecond = 14022.2
07/14/2016 06:08:03:  Epoch[ 1 of 2]-Minibatch[ 131- 140, 43.75%]: ce = 1.33296814 * 2560; err = 0.39804688 * 2560; time = 0.1848s; samplesPerSecond = 13853.3
07/14/2016 06:08:03:  Epoch[ 1 of 2]-Minibatch[ 141- 150, 46.88%]: ce = 1.32084351 * 2560; err = 0.39609375 * 2560; time = 0.1814s; samplesPerSecond = 14109.4
07/14/2016 06:08:03:  Epoch[ 1 of 2]-Minibatch[ 151- 160, 50.00%]: ce = 1.27189636 * 2560; err = 0.38125000 * 2560; time = 0.1832s; samplesPerSecond = 13970.9
07/14/2016 06:08:04:  Epoch[ 1 of 2]-Minibatch[ 161- 170, 53.13%]: ce = 1.29380188 * 2560; err = 0.38554688 * 2560; time = 0.1837s; samplesPerSecond = 13938.3
07/14/2016 06:08:04:  Epoch[ 1 of 2]-Minibatch[ 171- 180, 56.25%]: ce = 1.31463013 * 2560; err = 0.38984375 * 2560; time = 0.1841s; samplesPerSecond = 13902.2
07/14/2016 06:08:04:  Epoch[ 1 of 2]-Minibatch[ 181- 190, 59.38%]: ce = 1.33578796 * 2560; err = 0.40664062 * 2560; time = 0.1836s; samplesPerSecond = 13941.9
07/14/2016 06:08:04:  Epoch[ 1 of 2]-Minibatch[ 191- 200, 62.50%]: ce = 1.32202454 * 2560; err = 0.41484375 * 2560; time = 0.1834s; samplesPerSecond = 13960.9
07/14/2016 06:08:04:  Epoch[ 1 of 2]-Minibatch[ 201- 210, 65.63%]: ce = 1.23669434 * 2560; err = 0.37460938 * 2560; time = 0.1830s; samplesPerSecond = 13990.8
07/14/2016 06:08:04:  Epoch[ 1 of 2]-Minibatch[ 211- 220, 68.75%]: ce = 1.27109985 * 2560; err = 0.38906250 * 2560; time = 0.1840s; samplesPerSecond = 13912.2
07/14/2016 06:08:05:  Epoch[ 1 of 2]-Minibatch[ 221- 230, 71.88%]: ce = 1.26419678 * 2560; err = 0.37578125 * 2560; time = 0.1835s; samplesPerSecond = 13953.5
07/14/2016 06:08:05:  Epoch[ 1 of 2]-Minibatch[ 231- 240, 75.00%]: ce = 1.23778992 * 2560; err = 0.37265625 * 2560; time = 0.1830s; samplesPerSecond = 13985.5
07/14/2016 06:08:05:  Epoch[ 1 of 2]-Minibatch[ 241- 250, 78.13%]: ce = 1.21040344 * 2560; err = 0.36757812 * 2560; time = 0.1837s; samplesPerSecond = 13936.1
07/14/2016 06:08:05:  Epoch[ 1 of 2]-Minibatch[ 251- 260, 81.25%]: ce = 1.18387146 * 2560; err = 0.36562500 * 2560; time = 0.1827s; samplesPerSecond = 14011.1
07/14/2016 06:08:05:  Epoch[ 1 of 2]-Minibatch[ 261- 270, 84.38%]: ce = 1.23827515 * 2560; err = 0.37148437 * 2560; time = 0.1825s; samplesPerSecond = 14025.9
07/14/2016 06:08:06:  Epoch[ 1 of 2]-Minibatch[ 271- 280, 87.50%]: ce = 1.18418274 * 2560; err = 0.36328125 * 2560; time = 0.1832s; samplesPerSecond = 13977.2
07/14/2016 06:08:06:  Epoch[ 1 of 2]-Minibatch[ 281- 290, 90.63%]: ce = 1.16851501 * 2560; err = 0.35234375 * 2560; time = 0.1813s; samplesPerSecond = 14118.8
07/14/2016 06:08:06:  Epoch[ 1 of 2]-Minibatch[ 291- 300, 93.75%]: ce = 1.14337463 * 2560; err = 0.34375000 * 2560; time = 0.1825s; samplesPerSecond = 14023.8
07/14/2016 06:08:06:  Epoch[ 1 of 2]-Minibatch[ 301- 310, 96.88%]: ce = 1.17227478 * 2560; err = 0.34882812 * 2560; time = 0.1816s; samplesPerSecond = 14094.9
07/14/2016 06:08:06:  Epoch[ 1 of 2]-Minibatch[ 311- 320, 100.00%]: ce = 1.18431091 * 2560; err = 0.36835937 * 2560; time = 0.1708s; samplesPerSecond = 14990.0
07/14/2016 06:08:06: Finished Epoch[ 1 of 2]: [Training] ce = 1.51252575 * 81920; err = 0.42452393 * 81920; totalSamplesSeen = 81920; learningRatePerSample = 0.003125; epochTime=9.73292s
07/14/2016 06:08:06: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre2/cntkSpeech.1'

07/14/2016 06:08:06: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
minibatchiterator: epoch 1: frames [81920..163840] (first utterance at frame 81920), data subset 0 of 1, with 1 datapasses

07/14/2016 06:08:06: Starting minibatch loop.
07/14/2016 06:08:07:  Epoch[ 2 of 2]-Minibatch[   1-  10, 3.13%]: ce = 1.17448177 * 2560; err = 0.35195312 * 2560; time = 0.1872s; samplesPerSecond = 13675.7
07/14/2016 06:08:07:  Epoch[ 2 of 2]-Minibatch[  11-  20, 6.25%]: ce = 1.14536781 * 2560; err = 0.35664062 * 2560; time = 0.1862s; samplesPerSecond = 13745.1
07/14/2016 06:08:07:  Epoch[ 2 of 2]-Minibatch[  21-  30, 9.38%]: ce = 1.15722904 * 2560; err = 0.34531250 * 2560; time = 0.1835s; samplesPerSecond = 13954.5
07/14/2016 06:08:07:  Epoch[ 2 of 2]-Minibatch[  31-  40, 12.50%]: ce = 1.14344521 * 2560; err = 0.34804687 * 2560; time = 0.1810s; samplesPerSecond = 14141.5
07/14/2016 06:08:07:  Epoch[ 2 of 2]-Minibatch[  41-  50, 15.63%]: ce = 1.14842377 * 2560; err = 0.36562500 * 2560; time = 0.1843s; samplesPerSecond = 13887.8
07/14/2016 06:08:08:  Epoch[ 2 of 2]-Minibatch[  51-  60, 18.75%]: ce = 1.14489059 * 2560; err = 0.34218750 * 2560; time = 0.1853s; samplesPerSecond = 13818.3
07/14/2016 06:08:08:  Epoch[ 2 of 2]-Minibatch[  61-  70, 21.88%]: ce = 1.09631195 * 2560; err = 0.33984375 * 2560; time = 0.1822s; samplesPerSecond = 14054.1
07/14/2016 06:08:08:  Epoch[ 2 of 2]-Minibatch[  71-  80, 25.00%]: ce = 1.16026917 * 2560; err = 0.35546875 * 2560; time = 0.1831s; samplesPerSecond = 13979.4
07/14/2016 06:08:08:  Epoch[ 2 of 2]-Minibatch[  81-  90, 28.13%]: ce = 1.16528091 * 2560; err = 0.36015625 * 2560; time = 0.1855s; samplesPerSecond = 13802.6
07/14/2016 06:08:08:  Epoch[ 2 of 2]-Minibatch[  91- 100, 31.25%]: ce = 1.12257309 * 2560; err = 0.34492187 * 2560; time = 0.1846s; samplesPerSecond = 13871.4
07/14/2016 06:08:08:  Epoch[ 2 of 2]-Minibatch[ 101- 110, 34.38%]: ce = 1.12313080 * 2560; err = 0.34765625 * 2560; time = 0.1857s; samplesPerSecond = 13784.6
07/14/2016 06:08:09:  Epoch[ 2 of 2]-Minibatch[ 111- 120, 37.50%]: ce = 1.18492126 * 2560; err = 0.36171875 * 2560; time = 0.1833s; samplesPerSecond = 13967.2
07/14/2016 06:08:09:  Epoch[ 2 of 2]-Minibatch[ 121- 130, 40.63%]: ce = 1.13058014 * 2560; err = 0.33476563 * 2560; time = 0.1839s; samplesPerSecond = 13919.5
07/14/2016 06:08:09:  Epoch[ 2 of 2]-Minibatch[ 131- 140, 43.75%]: ce = 1.16725922 * 2560; err = 0.35781250 * 2560; time = 0.1858s; samplesPerSecond = 13777.4
07/14/2016 06:08:09:  Epoch[ 2 of 2]-Minibatch[ 141- 150, 46.88%]: ce = 1.12244720 * 2560; err = 0.34648438 * 2560; time = 0.1839s; samplesPerSecond = 13921.1
07/14/2016 06:08:09:  Epoch[ 2 of 2]-Minibatch[ 151- 160, 50.00%]: ce = 1.09480591 * 2560; err = 0.33671875 * 2560; time = 0.1809s; samplesPerSecond = 14150.0
07/14/2016 06:08:10:  Epoch[ 2 of 2]-Minibatch[ 161- 170, 53.13%]: ce = 1.11218109 * 2560; err = 0.34140625 * 2560; time = 0.1867s; samplesPerSecond = 13714.8
07/14/2016 06:08:10:  Epoch[ 2 of 2]-Minibatch[ 171- 180, 56.25%]: ce = 1.11966095 * 2560; err = 0.33398438 * 2560; time = 0.1825s; samplesPerSecond = 14026.5
07/14/2016 06:08:10:  Epoch[ 2 of 2]-Minibatch[ 181- 190, 59.38%]: ce = 1.10485687 * 2560; err = 0.33671875 * 2560; time = 0.1805s; samplesPerSecond = 14180.4
07/14/2016 06:08:10:  Epoch[ 2 of 2]-Minibatch[ 191- 200, 62.50%]: ce = 1.06019897 * 2560; err = 0.32617188 * 2560; time = 0.1826s; samplesPerSecond = 14018.3
07/14/2016 06:08:10:  Epoch[ 2 of 2]-Minibatch[ 201- 210, 65.63%]: ce = 1.10600891 * 2560; err = 0.34101562 * 2560; time = 0.1842s; samplesPerSecond = 13898.2
07/14/2016 06:08:10:  Epoch[ 2 of 2]-Minibatch[ 211- 220, 68.75%]: ce = 1.13724823 * 2560; err = 0.34101562 * 2560; time = 0.1817s; samplesPerSecond = 14087.7
07/14/2016 06:08:11:  Epoch[ 2 of 2]-Minibatch[ 221- 230, 71.88%]: ce = 1.12464600 * 2560; err = 0.34609375 * 2560; time = 0.1790s; samplesPerSecond = 14299.7
07/14/2016 06:08:11:  Epoch[ 2 of 2]-Minibatch[ 231- 240, 75.00%]: ce = 1.10831604 * 2560; err = 0.33593750 * 2560; time = 0.1813s; samplesPerSecond = 14119.0
07/14/2016 06:08:11:  Epoch[ 2 of 2]-Minibatch[ 241- 250, 78.13%]: ce = 1.09707031 * 2560; err = 0.34023437 * 2560; time = 0.1819s; samplesPerSecond = 14071.8
07/14/2016 06:08:11:  Epoch[ 2 of 2]-Minibatch[ 251- 260, 81.25%]: ce = 1.04812317 * 2560; err = 0.32773438 * 2560; time = 0.1808s; samplesPerSecond = 14158.8
07/14/2016 06:08:11:  Epoch[ 2 of 2]-Minibatch[ 261- 270, 84.38%]: ce = 1.04979248 * 2560; err = 0.33398438 * 2560; time = 0.1805s; samplesPerSecond = 14180.3
07/14/2016 06:08:12:  Epoch[ 2 of 2]-Minibatch[ 271- 280, 87.50%]: ce = 1.03223572 * 2560; err = 0.31835938 * 2560; time = 0.1806s; samplesPerSecond = 14176.2
07/14/2016 06:08:12:  Epoch[ 2 of 2]-Minibatch[ 281- 290, 90.63%]: ce = 1.05677490 * 2560; err = 0.32773438 * 2560; time = 0.1814s; samplesPerSecond = 14116.0
07/14/2016 06:08:12:  Epoch[ 2 of 2]-Minibatch[ 291- 300, 93.75%]: ce = 1.10880737 * 2560; err = 0.34296875 * 2560; time = 0.1800s; samplesPerSecond = 14221.0
07/14/2016 06:08:12:  Epoch[ 2 of 2]-Minibatch[ 301- 310, 96.88%]: ce = 1.08513489 * 2560; err = 0.33476563 * 2560; time = 0.1818s; samplesPerSecond = 14083.3
07/14/2016 06:08:12:  Epoch[ 2 of 2]-Minibatch[ 311- 320, 100.00%]: ce = 1.04244080 * 2560; err = 0.31757812 * 2560; time = 0.1685s; samplesPerSecond = 15194.5
07/14/2016 06:08:12: Finished Epoch[ 2 of 2]: [Training] ce = 1.11484108 * 81920; err = 0.34190674 * 81920; totalSamplesSeen = 163840; learningRatePerSample = 0.003125; epochTime=5.86161s
07/14/2016 06:08:12: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/Pre2/cntkSpeech'
07/14/2016 06:08:12: CNTKCommandTrainEnd: dptPre2

07/14/2016 06:08:12: Action "train" complete.


07/14/2016 06:08:12: ##############################################################################
07/14/2016 06:08:12: #                                                                            #
07/14/2016 06:08:12: # Action "edit"                                                              #
07/14/2016 06:08:12: #                                                                            #
07/14/2016 06:08:12: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	scaledLogLikelihood = Minus()

Validating network. 24 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *4]
Validating --> OL.W = LearnableParameter() :  -> [132 x 512]
Validating --> HL2.W = LearnableParameter() :  -> [512 x 512]
Validating --> HL1.W = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *4]
Validating --> globalMean = LearnableParameter() :  -> [363 x 1]
Validating --> globalInvStd = LearnableParameter() :  -> [363 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (features, globalMean, globalInvStd) : [363 x *4], [363 x 1], [363 x 1] -> [363 x *4]
Validating --> HL1.t = Times (HL1.W, featNorm) : [512 x 363], [363 x *4] -> [512 x *4]
Validating --> HL1.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL1.z = Plus (HL1.t, HL1.b) : [512 x *4], [512 x 1] -> [512 x 1 x *4]
Validating --> HL1.y = Sigmoid (HL1.z) : [512 x 1 x *4] -> [512 x 1 x *4]
Validating --> HL2.t = Times (HL2.W, HL1.y) : [512 x 512], [512 x 1 x *4] -> [512 x 1 x *4]
Validating --> HL2.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL2.z = Plus (HL2.t, HL2.b) : [512 x 1 x *4], [512 x 1] -> [512 x 1 x *4]
Validating --> HL2.y = Sigmoid (HL2.z) : [512 x 1 x *4] -> [512 x 1 x *4]
Validating --> OL.t = Times (OL.W, HL2.y) : [132 x 512], [512 x 1 x *4] -> [132 x 1 x *4]
Validating --> OL.b = LearnableParameter() :  -> [132 x 1]
Validating --> OL.z = Plus (OL.t, OL.b) : [132 x 1 x *4], [132 x 1] -> [132 x 1 x *4]
Validating --> ce = CrossEntropyWithSoftmax (labels, OL.z) : [132 x *4], [132 x 1 x *4] -> [1]
Validating --> err = ErrorPrediction (labels, OL.z) : [132 x *4], [132 x 1 x *4] -> [1]
Validating --> globalPrior = LearnableParameter() :  -> [132 x 1]
Validating --> logPrior = Log (globalPrior) : [132 x 1] -> [132 x 1]
Validating --> scaledLogLikelihood = Minus (OL.z, logPrior) : [132 x 1 x *4], [132 x 1] -> [132 x 1 x *4]

Validating network. 13 nodes to process in pass 2.


Validating network, final pass.



12 out of 24 nodes do not share the minibatch layout with the input data.

Post-processing network complete.


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	scaledLogLikelihood = Minus()

Validating network. 29 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *4]
Validating --> OL.W = LearnableParameter() :  -> [132 x 512]
Validating --> HL3.W = LearnableParameter() :  -> [512 x 512]
Validating --> HL2.W = LearnableParameter() :  -> [512 x 512]
Validating --> HL1.W = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *4]
Validating --> globalMean = LearnableParameter() :  -> [363 x 1]
Validating --> globalInvStd = LearnableParameter() :  -> [363 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (features, globalMean, globalInvStd) : [363 x *4], [363 x 1], [363 x 1] -> [363 x *4]
Validating --> HL1.t = Times (HL1.W, featNorm) : [512 x 363], [363 x *4] -> [512 x *4]
Validating --> HL1.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL1.z = Plus (HL1.t, HL1.b) : [512 x *4], [512 x 1] -> [512 x 1 x *4]
Validating --> HL1.y = Sigmoid (HL1.z) : [512 x 1 x *4] -> [512 x 1 x *4]
Validating --> HL2.t = Times (HL2.W, HL1.y) : [512 x 512], [512 x 1 x *4] -> [512 x 1 x *4]
Validating --> HL2.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL2.z = Plus (HL2.t, HL2.b) : [512 x 1 x *4], [512 x 1] -> [512 x 1 x *4]
Validating --> HL2.y = Sigmoid (HL2.z) : [512 x 1 x *4] -> [512 x 1 x *4]
Validating --> HL3.t = Times (HL3.W, HL2.y) : [512 x 512], [512 x 1 x *4] -> [512 x 1 x *4]
Validating --> HL3.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL3.z = Plus (HL3.t, HL3.b) : [512 x 1 x *4], [512 x 1] -> [512 x 1 x *4]
Validating --> HL3.y = Sigmoid (HL3.z) : [512 x 1 x *4] -> [512 x 1 x *4]
Validating --> OL.t = Times (OL.W, HL3.y) : [132 x 512], [512 x 1 x *4] -> [132 x 1 x *4]
Validating --> OL.b = LearnableParameter() :  -> [132 x 1]
Validating --> OL.z = Plus (OL.t, OL.b) : [132 x 1 x *4], [132 x 1] -> [132 x 1 x *4]
Validating --> ce = CrossEntropyWithSoftmax (labels, OL.z) : [132 x *4], [132 x 1 x *4] -> [1]
Validating --> err = ErrorPrediction (labels, OL.z) : [132 x *4], [132 x 1 x *4] -> [1]
Validating --> globalPrior = LearnableParameter() :  -> [132 x 1]
Validating --> logPrior = Log (globalPrior) : [132 x 1] -> [132 x 1]
Validating --> scaledLogLikelihood = Minus (OL.z, logPrior) : [132 x 1 x *4], [132 x 1] -> [132 x 1 x *4]

Validating network. 15 nodes to process in pass 2.


Validating network, final pass.



14 out of 29 nodes do not share the minibatch layout with the input data.

Post-processing network complete.


07/14/2016 06:08:13: Action "edit" complete.


07/14/2016 06:08:13: ##############################################################################
07/14/2016 06:08:13: #                                                                            #
07/14/2016 06:08:13: # Action "train"                                                             #
07/14/2016 06:08:13: #                                                                            #
07/14/2016 06:08:13: ##############################################################################

07/14/2016 06:08:13: CNTKCommandTrainBegin: speechTrain
NDLBuilder Using GPU 0
reading script file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.scp ... 948 entries
total 132 state names in state list C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/state.list
htkmlfreader: reading MLF file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

07/14/2016 06:08:15: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.0'.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	scaledLogLikelihood = Minus()

Validating network. 29 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *6]
Validating --> OL.W = LearnableParameter() :  -> [132 x 512]
Validating --> HL3.W = LearnableParameter() :  -> [512 x 512]
Validating --> HL2.W = LearnableParameter() :  -> [512 x 512]
Validating --> HL1.W = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *6]
Validating --> globalMean = LearnableParameter() :  -> [363 x 1]
Validating --> globalInvStd = LearnableParameter() :  -> [363 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (features, globalMean, globalInvStd) : [363 x *6], [363 x 1], [363 x 1] -> [363 x *6]
Validating --> HL1.t = Times (HL1.W, featNorm) : [512 x 363], [363 x *6] -> [512 x *6]
Validating --> HL1.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL1.z = Plus (HL1.t, HL1.b) : [512 x *6], [512 x 1] -> [512 x 1 x *6]
Validating --> HL1.y = Sigmoid (HL1.z) : [512 x 1 x *6] -> [512 x 1 x *6]
Validating --> HL2.t = Times (HL2.W, HL1.y) : [512 x 512], [512 x 1 x *6] -> [512 x 1 x *6]
Validating --> HL2.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL2.z = Plus (HL2.t, HL2.b) : [512 x 1 x *6], [512 x 1] -> [512 x 1 x *6]
Validating --> HL2.y = Sigmoid (HL2.z) : [512 x 1 x *6] -> [512 x 1 x *6]
Validating --> HL3.t = Times (HL3.W, HL2.y) : [512 x 512], [512 x 1 x *6] -> [512 x 1 x *6]
Validating --> HL3.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL3.z = Plus (HL3.t, HL3.b) : [512 x 1 x *6], [512 x 1] -> [512 x 1 x *6]
Validating --> HL3.y = Sigmoid (HL3.z) : [512 x 1 x *6] -> [512 x 1 x *6]
Validating --> OL.t = Times (OL.W, HL3.y) : [132 x 512], [512 x 1 x *6] -> [132 x 1 x *6]
Validating --> OL.b = LearnableParameter() :  -> [132 x 1]
Validating --> OL.z = Plus (OL.t, OL.b) : [132 x 1 x *6], [132 x 1] -> [132 x 1 x *6]
Validating --> ce = CrossEntropyWithSoftmax (labels, OL.z) : [132 x *6], [132 x 1 x *6] -> [1]
Validating --> err = ErrorPrediction (labels, OL.z) : [132 x *6], [132 x 1 x *6] -> [1]
Validating --> globalPrior = LearnableParameter() :  -> [132 x 1]
Validating --> logPrior = Log (globalPrior) : [132 x 1] -> [132 x 1]
Validating --> scaledLogLikelihood = Minus (OL.z, logPrior) : [132 x 1 x *6], [132 x 1] -> [132 x 1 x *6]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.



14 out of 29 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 06:08:15: Loaded model with 29 nodes on GPU 0.

07/14/2016 06:08:15: Training criterion node(s):
07/14/2016 06:08:15: 	ce = CrossEntropyWithSoftmax

07/14/2016 06:08:15: Evaluation criterion node(s):

07/14/2016 06:08:15: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[err Gradient[1]] [featNorm Gradient[363 x *6]] [features Gradient[363 x *6]] [globalInvStd Gradient[363 x 1]] [globalMean Gradient[363 x 1]] [globalPrior Gradient[132 x 1]] [labels Gradient[132 x *6]] [logPrior Gradient[132 x 1]] [scaledLogLikelihood Gradient[132 x 1 x *6]] }
000000B4197783A0: {[err Value[1]] }
000000B419778470: {[HL2.W Gradient[512 x 512]] [HL2.z Value[512 x 1 x *6]] }
000000B419778610: {[globalMean Value[363 x 1]] }
000000B4197787B0: {[globalInvStd Value[363 x 1]] }
000000B419778880: {[HL2.b Value[512 x 1]] }
000000B419778950: {[OL.W Value[132 x 512]] }
000000B419778A20: {[HL1.t Value[512 x *6]] }
000000B419778AF0: {[HL1.W Gradient[512 x 363]] [HL1.z Value[512 x 1 x *6]] }
000000B419778BC0: {[HL1.b Gradient[512 x 1]] [HL1.y Gradient[512 x 1 x *6]] [HL2.z Gradient[512 x 1 x *6]] [HL3.t Value[512 x 1 x *6]] }
000000B419778C90: {[HL3.W Gradient[512 x 512]] [HL3.z Value[512 x 1 x *6]] }
000000B419778D60: {[HL1.W Value[512 x 363]] }
000000B419778F00: {[HL2.W Value[512 x 512]] }
000000B419779240: {[globalPrior Value[132 x 1]] }
000000B419779310: {[HL3.W Value[512 x 512]] }
000000B4197793E0: {[ce Value[1]] }
000000B4197794B0: {[featNorm Value[363 x *6]] }
000000B419779580: {[HL3.t Gradient[512 x 1 x *6]] [HL3.y Value[512 x 1 x *6]] }
000000B419779650: {[OL.b Value[132 x 1]] }
000000B419779720: {[OL.W Gradient[132 x 512]] [OL.z Value[132 x 1 x *6]] }
000000B4197798C0: {[features Value[363 x *6]] }
000000B419779990: {[HL1.b Value[512 x 1]] }
000000B419779B30: {[labels Value[132 x *6]] }
000000B419779C00: {[scaledLogLikelihood Value[132 x 1 x *6]] }
000000B419779CD0: {[logPrior Value[132 x 1]] }
000000B419779DA0: {[HL1.t Gradient[512 x *6]] [HL1.y Value[512 x 1 x *6]] }
000000B419779F40: {[HL1.z Gradient[512 x 1 x *6]] [HL2.t Value[512 x 1 x *6]] }
000000B41977A010: {[HL3.b Value[512 x 1]] }
000000B41977A0E0: {[HL2.t Gradient[512 x 1 x *6]] [HL2.y Value[512 x 1 x *6]] }
000000B41977A1B0: {[HL2.b Gradient[512 x 1]] [HL2.y Gradient[512 x 1 x *6]] [HL3.z Gradient[512 x 1 x *6]] [OL.t Value[132 x 1 x *6]] }
000000B47B2048D0: {[ce Gradient[1]] }
000000B47B204C10: {[OL.b Gradient[132 x 1]] }
000000B47B205B80: {[OL.t Gradient[132 x 1 x *6]] }
000000B47B2066E0: {[HL3.b Gradient[512 x 1]] [HL3.y Gradient[512 x 1 x *6]] [OL.z Gradient[132 x 1 x *6]] }

07/14/2016 06:08:15: No PreCompute nodes found, skipping PreCompute step.

07/14/2016 06:08:15: Starting Epoch 1: learning rate per sample = 0.003125  effective momentum = 0.900117  momentum as time constant = 2432.7 samples
minibatchiterator: epoch 0: frames [0..81920] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/14/2016 06:08:19: Starting minibatch loop.
07/14/2016 06:08:19:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.13%]: ce = 4.12455368 * 2560; err = 0.82734375 * 2560; time = 0.2212s; samplesPerSecond = 11572.1
07/14/2016 06:08:19:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: ce = 2.55599899 * 2560; err = 0.63007813 * 2560; time = 0.2111s; samplesPerSecond = 12129.6
07/14/2016 06:08:20:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: ce = 2.03516159 * 2560; err = 0.53945312 * 2560; time = 0.2119s; samplesPerSecond = 12082.4
07/14/2016 06:08:20:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: ce = 1.73739853 * 2560; err = 0.47500000 * 2560; time = 0.2121s; samplesPerSecond = 12072.1
07/14/2016 06:08:20:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.63%]: ce = 1.54207916 * 2560; err = 0.43515625 * 2560; time = 0.2097s; samplesPerSecond = 12207.9
07/14/2016 06:08:20:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: ce = 1.44409790 * 2560; err = 0.41328125 * 2560; time = 0.2081s; samplesPerSecond = 12299.4
07/14/2016 06:08:20:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: ce = 1.36059418 * 2560; err = 0.40898438 * 2560; time = 0.2114s; samplesPerSecond = 12110.0
07/14/2016 06:08:21:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: ce = 1.35930023 * 2560; err = 0.40117188 * 2560; time = 0.2117s; samplesPerSecond = 12090.5
07/14/2016 06:08:21:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.13%]: ce = 1.34254303 * 2560; err = 0.38632813 * 2560; time = 0.2098s; samplesPerSecond = 12203.4
07/14/2016 06:08:21:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: ce = 1.30505676 * 2560; err = 0.38320312 * 2560; time = 0.2108s; samplesPerSecond = 12145.7
07/14/2016 06:08:21:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: ce = 1.30881348 * 2560; err = 0.38476563 * 2560; time = 0.2091s; samplesPerSecond = 12243.2
07/14/2016 06:08:21:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: ce = 1.23755188 * 2560; err = 0.37304688 * 2560; time = 0.2099s; samplesPerSecond = 12198.8
07/14/2016 06:08:22:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.63%]: ce = 1.21070251 * 2560; err = 0.35546875 * 2560; time = 0.2113s; samplesPerSecond = 12114.8
07/14/2016 06:08:22:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: ce = 1.24008789 * 2560; err = 0.37109375 * 2560; time = 0.2127s; samplesPerSecond = 12035.3
07/14/2016 06:08:22:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: ce = 1.23422089 * 2560; err = 0.36835937 * 2560; time = 0.2084s; samplesPerSecond = 12281.5
07/14/2016 06:08:22:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: ce = 1.19426117 * 2560; err = 0.35195312 * 2560; time = 0.2094s; samplesPerSecond = 12225.1
07/14/2016 06:08:22:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.13%]: ce = 1.21415710 * 2560; err = 0.36289063 * 2560; time = 0.2092s; samplesPerSecond = 12235.0
07/14/2016 06:08:23:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: ce = 1.24289551 * 2560; err = 0.37031250 * 2560; time = 0.2107s; samplesPerSecond = 12152.1
07/14/2016 06:08:23:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: ce = 1.26465759 * 2560; err = 0.38359375 * 2560; time = 0.2124s; samplesPerSecond = 12051.5
07/14/2016 06:08:23:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: ce = 1.22050476 * 2560; err = 0.38085938 * 2560; time = 0.2095s; samplesPerSecond = 12221.0
07/14/2016 06:08:23:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.63%]: ce = 1.17745056 * 2560; err = 0.35507813 * 2560; time = 0.2082s; samplesPerSecond = 12294.7
07/14/2016 06:08:24:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: ce = 1.19851379 * 2560; err = 0.37109375 * 2560; time = 0.2083s; samplesPerSecond = 12288.0
07/14/2016 06:08:24:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: ce = 1.21453857 * 2560; err = 0.35820313 * 2560; time = 0.2096s; samplesPerSecond = 12214.5
07/14/2016 06:08:24:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: ce = 1.18011475 * 2560; err = 0.35546875 * 2560; time = 0.2091s; samplesPerSecond = 12241.5
07/14/2016 06:08:24:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.13%]: ce = 1.16693726 * 2560; err = 0.35195312 * 2560; time = 0.2083s; samplesPerSecond = 12291.3
07/14/2016 06:08:24:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: ce = 1.12398987 * 2560; err = 0.35234375 * 2560; time = 0.2097s; samplesPerSecond = 12208.2
07/14/2016 06:08:25:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: ce = 1.18822021 * 2560; err = 0.36328125 * 2560; time = 0.2089s; samplesPerSecond = 12257.2
07/14/2016 06:08:25:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: ce = 1.13831482 * 2560; err = 0.35078125 * 2560; time = 0.2078s; samplesPerSecond = 12318.6
07/14/2016 06:08:25:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.63%]: ce = 1.12718811 * 2560; err = 0.33984375 * 2560; time = 0.2081s; samplesPerSecond = 12304.0
07/14/2016 06:08:25:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: ce = 1.11155396 * 2560; err = 0.34179688 * 2560; time = 0.2083s; samplesPerSecond = 12291.4
07/14/2016 06:08:25:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: ce = 1.13423157 * 2560; err = 0.34101562 * 2560; time = 0.2121s; samplesPerSecond = 12067.3
07/14/2016 06:08:26:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: ce = 1.12716675 * 2560; err = 0.34414062 * 2560; time = 0.1949s; samplesPerSecond = 13137.8
07/14/2016 06:08:26: Finished Epoch[ 1 of 4]: [Training] ce = 1.40821428 * 81920; err = 0.40085449 * 81920; totalSamplesSeen = 81920; learningRatePerSample = 0.003125; epochTime=10.5581s
07/14/2016 06:08:26: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.1'

07/14/2016 06:08:26: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.810210  momentum as time constant = 2432.7 samples
minibatchiterator: epoch 1: frames [81920..163840] (first utterance at frame 81920), data subset 0 of 1, with 1 datapasses

07/14/2016 06:08:26: Starting minibatch loop.
07/14/2016 06:08:26:  Epoch[ 2 of 4]-Minibatch[   1-  10, 6.25%]: ce = 1.20089607 * 5120; err = 0.36757812 * 5120; time = 0.3235s; samplesPerSecond = 15828.0
07/14/2016 06:08:26:  Epoch[ 2 of 4]-Minibatch[  11-  20, 12.50%]: ce = 1.15295639 * 5120; err = 0.34550781 * 5120; time = 0.3083s; samplesPerSecond = 16606.7
07/14/2016 06:08:27:  Epoch[ 2 of 4]-Minibatch[  21-  30, 18.75%]: ce = 1.09945831 * 5120; err = 0.33613281 * 5120; time = 0.3066s; samplesPerSecond = 16700.4
07/14/2016 06:08:27:  Epoch[ 2 of 4]-Minibatch[  31-  40, 25.00%]: ce = 1.09916496 * 5120; err = 0.33867188 * 5120; time = 0.3058s; samplesPerSecond = 16740.3
07/14/2016 06:08:27:  Epoch[ 2 of 4]-Minibatch[  41-  50, 31.25%]: ce = 1.17260475 * 5120; err = 0.36230469 * 5120; time = 0.3072s; samplesPerSecond = 16669.0
07/14/2016 06:08:28:  Epoch[ 2 of 4]-Minibatch[  51-  60, 37.50%]: ce = 1.15717888 * 5120; err = 0.35820313 * 5120; time = 0.3033s; samplesPerSecond = 16882.5
07/14/2016 06:08:28:  Epoch[ 2 of 4]-Minibatch[  61-  70, 43.75%]: ce = 1.14431229 * 5120; err = 0.34296875 * 5120; time = 0.3050s; samplesPerSecond = 16786.8
07/14/2016 06:08:28:  Epoch[ 2 of 4]-Minibatch[  71-  80, 50.00%]: ce = 1.10515747 * 5120; err = 0.34394531 * 5120; time = 0.3065s; samplesPerSecond = 16706.0
07/14/2016 06:08:29:  Epoch[ 2 of 4]-Minibatch[  81-  90, 56.25%]: ce = 1.15175400 * 5120; err = 0.35449219 * 5120; time = 0.3054s; samplesPerSecond = 16764.1
07/14/2016 06:08:29:  Epoch[ 2 of 4]-Minibatch[  91- 100, 62.50%]: ce = 1.11654053 * 5120; err = 0.34101562 * 5120; time = 0.3091s; samplesPerSecond = 16564.3
07/14/2016 06:08:29:  Epoch[ 2 of 4]-Minibatch[ 101- 110, 68.75%]: ce = 1.11851807 * 5120; err = 0.34472656 * 5120; time = 0.3060s; samplesPerSecond = 16732.5
07/14/2016 06:08:30:  Epoch[ 2 of 4]-Minibatch[ 111- 120, 75.00%]: ce = 1.11374130 * 5120; err = 0.34492187 * 5120; time = 0.3063s; samplesPerSecond = 16713.4
07/14/2016 06:08:30:  Epoch[ 2 of 4]-Minibatch[ 121- 130, 81.25%]: ce = 1.04686737 * 5120; err = 0.32265625 * 5120; time = 0.3091s; samplesPerSecond = 16562.5
07/14/2016 06:08:30:  Epoch[ 2 of 4]-Minibatch[ 131- 140, 87.50%]: ce = 1.02721252 * 5120; err = 0.32246094 * 5120; time = 0.3071s; samplesPerSecond = 16670.3
07/14/2016 06:08:30:  Epoch[ 2 of 4]-Minibatch[ 141- 150, 93.75%]: ce = 1.08386230 * 5120; err = 0.33144531 * 5120; time = 0.3096s; samplesPerSecond = 16537.0
07/14/2016 06:08:31:  Epoch[ 2 of 4]-Minibatch[ 151- 160, 100.00%]: ce = 1.06164856 * 5120; err = 0.32558594 * 5120; time = 0.2783s; samplesPerSecond = 18395.0
07/14/2016 06:08:31: Finished Epoch[ 2 of 4]: [Training] ce = 1.11574211 * 81920; err = 0.34266357 * 81920; totalSamplesSeen = 163840; learningRatePerSample = 0.003125; epochTime=4.93259s
07/14/2016 06:08:31: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.2'

07/14/2016 06:08:31: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.810210  momentum as time constant = 2432.7 samples
minibatchiterator: epoch 2: frames [163840..245760] (first utterance at frame 163840), data subset 0 of 1, with 1 datapasses

07/14/2016 06:08:31: Starting minibatch loop.
07/14/2016 06:08:31:  Epoch[ 3 of 4]-Minibatch[   1-  10, 6.25%]: ce = 1.12331724 * 5120; err = 0.34121094 * 5120; time = 0.3087s; samplesPerSecond = 16583.3
07/14/2016 06:08:32:  Epoch[ 3 of 4]-Minibatch[  11-  20, 12.50%]: ce = 1.07871103 * 5120; err = 0.33652344 * 5120; time = 0.3107s; samplesPerSecond = 16481.5
07/14/2016 06:08:32:  Epoch[ 3 of 4]-Minibatch[  21-  30, 18.75%]: ce = 1.06784973 * 5120; err = 0.33183594 * 5120; time = 0.3092s; samplesPerSecond = 16557.4
07/14/2016 06:08:32:  Epoch[ 3 of 4]-Minibatch[  31-  40, 25.00%]: ce = 1.08440666 * 5120; err = 0.33398438 * 5120; time = 0.3101s; samplesPerSecond = 16513.1
07/14/2016 06:08:33:  Epoch[ 3 of 4]-Minibatch[  41-  50, 31.25%]: ce = 1.07466774 * 5120; err = 0.33320312 * 5120; time = 0.3100s; samplesPerSecond = 16516.0
07/14/2016 06:08:33:  Epoch[ 3 of 4]-Minibatch[  51-  60, 37.50%]: ce = 1.05427513 * 5120; err = 0.33125000 * 5120; time = 0.3131s; samplesPerSecond = 16354.5
07/14/2016 06:08:33:  Epoch[ 3 of 4]-Minibatch[  61-  70, 43.75%]: ce = 1.06873093 * 5120; err = 0.32773438 * 5120; time = 0.3089s; samplesPerSecond = 16573.4
07/14/2016 06:08:33:  Epoch[ 3 of 4]-Minibatch[  71-  80, 50.00%]: ce = 1.08097610 * 5120; err = 0.33007813 * 5120; time = 0.3104s; samplesPerSecond = 16494.3
07/14/2016 06:08:34:  Epoch[ 3 of 4]-Minibatch[  81-  90, 56.25%]: ce = 1.05431290 * 5120; err = 0.32792969 * 5120; time = 0.3094s; samplesPerSecond = 16546.0
07/14/2016 06:08:34:  Epoch[ 3 of 4]-Minibatch[  91- 100, 62.50%]: ce = 1.06173096 * 5120; err = 0.32695313 * 5120; time = 0.3095s; samplesPerSecond = 16543.3
07/14/2016 06:08:34:  Epoch[ 3 of 4]-Minibatch[ 101- 110, 68.75%]: ce = 1.04505692 * 5120; err = 0.32792969 * 5120; time = 0.3097s; samplesPerSecond = 16532.8
07/14/2016 06:08:35:  Epoch[ 3 of 4]-Minibatch[ 111- 120, 75.00%]: ce = 1.08151245 * 5120; err = 0.33574219 * 5120; time = 0.3080s; samplesPerSecond = 16625.9
07/14/2016 06:08:35:  Epoch[ 3 of 4]-Minibatch[ 121- 130, 81.25%]: ce = 1.10628204 * 5120; err = 0.33437500 * 5120; time = 0.3089s; samplesPerSecond = 16576.6
07/14/2016 06:08:35:  Epoch[ 3 of 4]-Minibatch[ 131- 140, 87.50%]: ce = 1.05827026 * 5120; err = 0.32636719 * 5120; time = 0.3078s; samplesPerSecond = 16631.6
07/14/2016 06:08:36:  Epoch[ 3 of 4]-Minibatch[ 141- 150, 93.75%]: ce = 1.05841064 * 5120; err = 0.33574219 * 5120; time = 0.3087s; samplesPerSecond = 16584.2
07/14/2016 06:08:36:  Epoch[ 3 of 4]-Minibatch[ 151- 160, 100.00%]: ce = 1.04437866 * 5120; err = 0.32773438 * 5120; time = 0.2793s; samplesPerSecond = 18329.7
07/14/2016 06:08:36: Finished Epoch[ 3 of 4]: [Training] ce = 1.07143059 * 81920; err = 0.33178711 * 81920; totalSamplesSeen = 245760; learningRatePerSample = 0.003125; epochTime=4.95678s
07/14/2016 06:08:36: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.3'

07/14/2016 06:08:36: Starting Epoch 4: learning rate per sample = 0.003125  effective momentum = 0.810210  momentum as time constant = 2432.7 samples
minibatchiterator: epoch 3: frames [245760..327680] (first utterance at frame 245760), data subset 0 of 1, with 1 datapasses

07/14/2016 06:08:36: Starting minibatch loop.
07/14/2016 06:08:36:  Epoch[ 4 of 4]-Minibatch[   1-  10, 6.25%]: ce = 1.04450397 * 5120; err = 0.33125000 * 5120; time = 0.3100s; samplesPerSecond = 16514.9
07/14/2016 06:08:39:  Epoch[ 4 of 4]-Minibatch[  11-  20, 12.50%]: ce = 1.02895867 * 4926; err = 0.31567194 * 4926; time = 2.7732s; samplesPerSecond = 1776.3
07/14/2016 06:08:40:  Epoch[ 4 of 4]-Minibatch[  21-  30, 18.75%]: ce = 1.00198059 * 5120; err = 0.31601563 * 5120; time = 0.3052s; samplesPerSecond = 16773.5
07/14/2016 06:08:40:  Epoch[ 4 of 4]-Minibatch[  31-  40, 25.00%]: ce = 1.00561543 * 5120; err = 0.31777344 * 5120; time = 0.3053s; samplesPerSecond = 16768.2
07/14/2016 06:08:40:  Epoch[ 4 of 4]-Minibatch[  41-  50, 31.25%]: ce = 1.00148888 * 5120; err = 0.31601563 * 5120; time = 0.3059s; samplesPerSecond = 16737.4
07/14/2016 06:08:40:  Epoch[ 4 of 4]-Minibatch[  51-  60, 37.50%]: ce = 1.00593338 * 5120; err = 0.31406250 * 5120; time = 0.3049s; samplesPerSecond = 16789.7
07/14/2016 06:08:41:  Epoch[ 4 of 4]-Minibatch[  61-  70, 43.75%]: ce = 0.98752327 * 5120; err = 0.30722656 * 5120; time = 0.3037s; samplesPerSecond = 16860.4
07/14/2016 06:08:41:  Epoch[ 4 of 4]-Minibatch[  71-  80, 50.00%]: ce = 1.01428757 * 5120; err = 0.31992188 * 5120; time = 0.3072s; samplesPerSecond = 16665.0
07/14/2016 06:08:41:  Epoch[ 4 of 4]-Minibatch[  81-  90, 56.25%]: ce = 0.99691544 * 5120; err = 0.31621094 * 5120; time = 0.3040s; samplesPerSecond = 16841.8
07/14/2016 06:08:42:  Epoch[ 4 of 4]-Minibatch[  91- 100, 62.50%]: ce = 0.96604996 * 5120; err = 0.30937500 * 5120; time = 0.3051s; samplesPerSecond = 16782.3
07/14/2016 06:08:42:  Epoch[ 4 of 4]-Minibatch[ 101- 110, 68.75%]: ce = 0.99062958 * 5120; err = 0.30527344 * 5120; time = 0.3085s; samplesPerSecond = 16598.9
07/14/2016 06:08:42:  Epoch[ 4 of 4]-Minibatch[ 111- 120, 75.00%]: ce = 0.99886856 * 5120; err = 0.30976562 * 5120; time = 0.3063s; samplesPerSecond = 16718.3
07/14/2016 06:08:43:  Epoch[ 4 of 4]-Minibatch[ 121- 130, 81.25%]: ce = 1.00958405 * 5120; err = 0.31523438 * 5120; time = 0.3051s; samplesPerSecond = 16782.5
07/14/2016 06:08:43:  Epoch[ 4 of 4]-Minibatch[ 131- 140, 87.50%]: ce = 0.97942047 * 5120; err = 0.31171875 * 5120; time = 0.3072s; samplesPerSecond = 16664.4
07/14/2016 06:08:43:  Epoch[ 4 of 4]-Minibatch[ 141- 150, 93.75%]: ce = 0.94226837 * 5120; err = 0.30136719 * 5120; time = 0.3064s; samplesPerSecond = 16712.0
07/14/2016 06:08:43:  Epoch[ 4 of 4]-Minibatch[ 151- 160, 100.00%]: ce = 0.96711578 * 5120; err = 0.30175781 * 5120; time = 0.2858s; samplesPerSecond = 17911.5
07/14/2016 06:08:44: Finished Epoch[ 4 of 4]: [Training] ce = 0.99611807 * 81920; err = 0.31303711 * 81920; totalSamplesSeen = 327680; learningRatePerSample = 0.003125; epochTime=7.39196s
07/14/2016 06:08:44: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech'
07/14/2016 06:08:44: CNTKCommandTrainEnd: speechTrain

07/14/2016 06:08:44: Action "train" complete.


07/14/2016 06:08:44: ##############################################################################
07/14/2016 06:08:44: #                                                                            #
07/14/2016 06:08:44: # Action "edit"                                                              #
07/14/2016 06:08:44: #                                                                            #
07/14/2016 06:08:44: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	scaledLogLikelihood = Minus()

Validating network. 29 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *7]
Validating --> OL.W = LearnableParameter() :  -> [132 x 512]
Validating --> HL3.W = LearnableParameter() :  -> [512 x 512]
Validating --> HL2.W = LearnableParameter() :  -> [512 x 512]
Validating --> HL1.W = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *7]
Validating --> globalMean = LearnableParameter() :  -> [363 x 1]
Validating --> globalInvStd = LearnableParameter() :  -> [363 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (features, globalMean, globalInvStd) : [363 x *7], [363 x 1], [363 x 1] -> [363 x *7]
Validating --> HL1.t = Times (HL1.W, featNorm) : [512 x 363], [363 x *7] -> [512 x *7]
Validating --> HL1.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL1.z = Plus (HL1.t, HL1.b) : [512 x *7], [512 x 1] -> [512 x 1 x *7]
Validating --> HL1.y = Sigmoid (HL1.z) : [512 x 1 x *7] -> [512 x 1 x *7]
Validating --> HL2.t = Times (HL2.W, HL1.y) : [512 x 512], [512 x 1 x *7] -> [512 x 1 x *7]
Validating --> HL2.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL2.z = Plus (HL2.t, HL2.b) : [512 x 1 x *7], [512 x 1] -> [512 x 1 x *7]
Validating --> HL2.y = Sigmoid (HL2.z) : [512 x 1 x *7] -> [512 x 1 x *7]
Validating --> HL3.t = Times (HL3.W, HL2.y) : [512 x 512], [512 x 1 x *7] -> [512 x 1 x *7]
Validating --> HL3.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL3.z = Plus (HL3.t, HL3.b) : [512 x 1 x *7], [512 x 1] -> [512 x 1 x *7]
Validating --> HL3.y = Sigmoid (HL3.z) : [512 x 1 x *7] -> [512 x 1 x *7]
Validating --> OL.t = Times (OL.W, HL3.y) : [132 x 512], [512 x 1 x *7] -> [132 x 1 x *7]
Validating --> OL.b = LearnableParameter() :  -> [132 x 1]
Validating --> OL.z = Plus (OL.t, OL.b) : [132 x 1 x *7], [132 x 1] -> [132 x 1 x *7]
Validating --> ce = CrossEntropyWithSoftmax (labels, OL.z) : [132 x *7], [132 x 1 x *7] -> [1]
Validating --> err = ErrorPrediction (labels, OL.z) : [132 x *7], [132 x 1 x *7] -> [1]
Validating --> globalPrior = LearnableParameter() :  -> [132 x 1]
Validating --> logPrior = Log (globalPrior) : [132 x 1] -> [132 x 1]
Validating --> scaledLogLikelihood = Minus (OL.z, logPrior) : [132 x 1 x *7], [132 x 1] -> [132 x 1 x *7]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.



14 out of 29 nodes do not share the minibatch layout with the input data.

Post-processing network complete.


Post-processing network...

3 roots:
	ce = SequenceWithSoftmax()
	err = ErrorPrediction()
	scaledLogLikelihood = Minus()

Validating network. 29 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *7]
Validating --> OL.W = LearnableParameter() :  -> [132 x 512]
Validating --> HL3.W = LearnableParameter() :  -> [512 x 512]
Validating --> HL2.W = LearnableParameter() :  -> [512 x 512]
Validating --> HL1.W = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *7]
Validating --> globalMean = LearnableParameter() :  -> [363 x 1]
Validating --> globalInvStd = LearnableParameter() :  -> [363 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (features, globalMean, globalInvStd) : [363 x *7], [363 x 1], [363 x 1] -> [363 x *7]
Validating --> HL1.t = Times (HL1.W, featNorm) : [512 x 363], [363 x *7] -> [512 x *7]
Validating --> HL1.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL1.z = Plus (HL1.t, HL1.b) : [512 x *7], [512 x 1] -> [512 x 1 x *7]
Validating --> HL1.y = Sigmoid (HL1.z) : [512 x 1 x *7] -> [512 x 1 x *7]
Validating --> HL2.t = Times (HL2.W, HL1.y) : [512 x 512], [512 x 1 x *7] -> [512 x 1 x *7]
Validating --> HL2.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL2.z = Plus (HL2.t, HL2.b) : [512 x 1 x *7], [512 x 1] -> [512 x 1 x *7]
Validating --> HL2.y = Sigmoid (HL2.z) : [512 x 1 x *7] -> [512 x 1 x *7]
Validating --> HL3.t = Times (HL3.W, HL2.y) : [512 x 512], [512 x 1 x *7] -> [512 x 1 x *7]
Validating --> HL3.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL3.z = Plus (HL3.t, HL3.b) : [512 x 1 x *7], [512 x 1] -> [512 x 1 x *7]
Validating --> HL3.y = Sigmoid (HL3.z) : [512 x 1 x *7] -> [512 x 1 x *7]
Validating --> OL.t = Times (OL.W, HL3.y) : [132 x 512], [512 x 1 x *7] -> [132 x 1 x *7]
Validating --> OL.b = LearnableParameter() :  -> [132 x 1]
Validating --> OL.z = Plus (OL.t, OL.b) : [132 x 1 x *7], [132 x 1] -> [132 x 1 x *7]
Validating --> globalPrior = LearnableParameter() :  -> [132 x 1]
Validating --> logPrior = Log (globalPrior) : [132 x 1] -> [132 x 1]
Validating --> scaledLogLikelihood = Minus (OL.z, logPrior) : [132 x 1 x *7], [132 x 1] -> [132 x 1 x *7]
Validating --> ce = SequenceWithSoftmax (labels, OL.z, scaledLogLikelihood) : [132 x *7], [132 x 1 x *7], [132 x 1 x *7] -> [1]
Validating --> err = ErrorPrediction (labels, OL.z) : [132 x *7], [132 x 1 x *7] -> [1]

Validating network. 15 nodes to process in pass 2.


Validating network, final pass.



14 out of 29 nodes do not share the minibatch layout with the input data.

Post-processing network complete.


07/14/2016 06:08:44: Action "edit" complete.


07/14/2016 06:08:44: ##############################################################################
07/14/2016 06:08:44: #                                                                            #
07/14/2016 06:08:44: # Action "train"                                                             #
07/14/2016 06:08:44: #                                                                            #
07/14/2016 06:08:44: ##############################################################################

07/14/2016 06:08:44: CNTKCommandTrainBegin: sequenceTrain
NDLBuilder Using GPU 0
simplesenonehmm: reading 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/model.overalltying', 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/state.list', 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/model.transprob'
simplesenonehmm: 83253 units with 45 unique HMMs, 132 tied states, and 45 trans matrices read
reading script file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.scp ... 948 entries
trainlayer: OOV-exclusion code enabled, but no unigram specified to derive the word set from, so you won't get OOV exclusion
total 132 state names in state list C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/state.list
htkmlfreader: reading MLF file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData/glob_0000.mlf ... total 948 entries
archive: opening 80 lattice-archive TOC files ('C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu\TestData\CY2SCH010061231_1369712653.numden.lats.toc' etc.).................................................................................. 923 total lattices referenced in 80 archive files
. [no lattice for An4/454/454/an70-meht-b]....... [no lattice for An4/89/89/an6-fjmd-b].. [no lattice for An4/683/683/an364-mmkw-b].. [no lattice for An4/476/476/an256-mewl-b].... [no lattice for An4/2/2/an253-fash-b]...............................................................................feature set 0: 250814 frames in 923 out of 948 utterances
minibatchutterancesource: out of 948 files, 0 files not found in label set and 25 have no lattice
label set 0: 129 classes
minibatchutterancesource: 923 utterances grouped into 3 chunks, av. chunk size: 307.7 utterances, 83604.7 frames

07/14/2016 06:08:49: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.sequence.0'.

Post-processing network...

3 roots:
	ce = SequenceWithSoftmax()
	err = ErrorPrediction()
	scaledLogLikelihood = Minus()

Validating network. 29 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *9]
Validating --> OL.W = LearnableParameter() :  -> [132 x 512]
Validating --> HL3.W = LearnableParameter() :  -> [512 x 512]
Validating --> HL2.W = LearnableParameter() :  -> [512 x 512]
Validating --> HL1.W = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *9]
Validating --> globalMean = LearnableParameter() :  -> [363 x 1]
Validating --> globalInvStd = LearnableParameter() :  -> [363 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (features, globalMean, globalInvStd) : [363 x *9], [363 x 1], [363 x 1] -> [363 x *9]
Validating --> HL1.t = Times (HL1.W, featNorm) : [512 x 363], [363 x *9] -> [512 x *9]
Validating --> HL1.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL1.z = Plus (HL1.t, HL1.b) : [512 x *9], [512 x 1] -> [512 x 1 x *9]
Validating --> HL1.y = Sigmoid (HL1.z) : [512 x 1 x *9] -> [512 x 1 x *9]
Validating --> HL2.t = Times (HL2.W, HL1.y) : [512 x 512], [512 x 1 x *9] -> [512 x 1 x *9]
Validating --> HL2.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL2.z = Plus (HL2.t, HL2.b) : [512 x 1 x *9], [512 x 1] -> [512 x 1 x *9]
Validating --> HL2.y = Sigmoid (HL2.z) : [512 x 1 x *9] -> [512 x 1 x *9]
Validating --> HL3.t = Times (HL3.W, HL2.y) : [512 x 512], [512 x 1 x *9] -> [512 x 1 x *9]
Validating --> HL3.b = LearnableParameter() :  -> [512 x 1]
Validating --> HL3.z = Plus (HL3.t, HL3.b) : [512 x 1 x *9], [512 x 1] -> [512 x 1 x *9]
Validating --> HL3.y = Sigmoid (HL3.z) : [512 x 1 x *9] -> [512 x 1 x *9]
Validating --> OL.t = Times (OL.W, HL3.y) : [132 x 512], [512 x 1 x *9] -> [132 x 1 x *9]
Validating --> OL.b = LearnableParameter() :  -> [132 x 1]
Validating --> OL.z = Plus (OL.t, OL.b) : [132 x 1 x *9], [132 x 1] -> [132 x 1 x *9]
Validating --> globalPrior = LearnableParameter() :  -> [132 x 1]
Validating --> logPrior = Log (globalPrior) : [132 x 1] -> [132 x 1]
Validating --> scaledLogLikelihood = Minus (OL.z, logPrior) : [132 x 1 x *9], [132 x 1] -> [132 x 1 x *9]
Validating --> ce = SequenceWithSoftmax (labels, OL.z, scaledLogLikelihood) : [132 x *9], [132 x 1 x *9], [132 x 1 x *9] -> [1]
Validating --> err = ErrorPrediction (labels, OL.z) : [132 x *9], [132 x 1 x *9] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.



14 out of 29 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 06:08:49: Loaded model with 29 nodes on GPU 0.

07/14/2016 06:08:49: Training criterion node(s):
07/14/2016 06:08:49: 	ce = SequenceWithSoftmax

07/14/2016 06:08:49: Evaluation criterion node(s):

07/14/2016 06:08:49: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[err Gradient[1]] [featNorm Gradient[363 x *9]] [features Gradient[363 x *9]] [globalInvStd Gradient[363 x 1]] [globalMean Gradient[363 x 1]] [globalPrior Gradient[132 x 1]] [labels Gradient[132 x *9]] [logPrior Gradient[132 x 1]] }
000000B4197782D0: {[ce Value[1]] }
000000B4197783A0: {[err Value[1]] }
000000B419778470: {[globalInvStd Value[363 x 1]] }
000000B419778540: {[HL1.W Gradient[512 x 363]] [HL1.z Value[512 x 1 x *9]] }
000000B419778610: {[HL1.t Gradient[512 x *9]] [HL1.y Value[512 x 1 x *9]] }
000000B4197787B0: {[HL1.W Value[512 x 363]] }
000000B419778880: {[HL2.t Gradient[512 x 1 x *9]] [HL2.y Value[512 x 1 x *9]] }
000000B419778950: {[HL3.t Gradient[512 x 1 x *9]] [HL3.y Value[512 x 1 x *9]] }
000000B419778A20: {[HL2.b Value[512 x 1]] }
000000B419778AF0: {[featNorm Value[363 x *9]] }
000000B419778BC0: {[features Value[363 x *9]] }
000000B419778C90: {[HL3.W Value[512 x 512]] }
000000B419778D60: {[OL.W Value[132 x 512]] }
000000B419779240: {[HL1.z Gradient[512 x 1 x *9]] [HL2.t Value[512 x 1 x *9]] }
000000B419779310: {[HL2.W Gradient[512 x 512]] [HL2.z Value[512 x 1 x *9]] }
000000B4197793E0: {[globalPrior Value[132 x 1]] }
000000B4197794B0: {[HL1.b Gradient[512 x 1]] [HL1.y Gradient[512 x 1 x *9]] [HL2.z Gradient[512 x 1 x *9]] [HL3.t Value[512 x 1 x *9]] }
000000B419779580: {[HL3.W Gradient[512 x 512]] [HL3.z Value[512 x 1 x *9]] }
000000B419779720: {[OL.b Value[132 x 1]] }
000000B419779990: {[HL1.b Value[512 x 1]] }
000000B419779B30: {[HL1.t Value[512 x *9]] }
000000B419779C00: {[HL3.b Value[512 x 1]] }
000000B419779CD0: {[globalMean Value[363 x 1]] }
000000B419779DA0: {[scaledLogLikelihood Value[132 x 1 x *9]] }
000000B419779F40: {[labels Value[132 x *9]] }
000000B41977A010: {[HL2.W Value[512 x 512]] }
000000B41977A1B0: {[logPrior Value[132 x 1]] }
000000B4197D7BA0: {[ce Gradient[1]] }
000000B4197D7E10: {[OL.t Gradient[132 x 1 x *9]] [scaledLogLikelihood Gradient[132 x 1 x *9]] }
000000B4197D8150: {[OL.b Gradient[132 x 1]] }
000000B4197D8BE0: {[HL3.b Gradient[512 x 1]] [HL3.y Gradient[512 x 1 x *9]] [OL.z Gradient[132 x 1 x *9]] }
000000B47E67C710: {[HL2.b Gradient[512 x 1]] [HL2.y Gradient[512 x 1 x *9]] [HL3.z Gradient[512 x 1 x *9]] [OL.t Value[132 x 1 x *9]] }
000000B47E67C8B0: {[OL.W Gradient[132 x 512]] [OL.z Value[132 x 1 x *9]] }

07/14/2016 06:08:49: No PreCompute nodes found, skipping PreCompute step.
Setting Hsmoothing weight to 0.95 and frame-dropping threshhold to 1e-010
Setting SeqGammar-related parameters: amf=14.00, lmf=14.00, wp=0.00, bMMIFactor=0.00, usesMBR=false

07/14/2016 06:08:49: Starting Epoch 1: learning rate per sample = 0.000002  effective momentum = 0.995898  momentum as time constant = 2432.7 samples
minibatchiterator: epoch 0: frames [0..81920] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/14/2016 06:10:06: Starting minibatch loop.
dengamma value 1.015387
dengamma value 1.051343
dengamma value 1.072787
dengamma value 1.063094
dengamma value 1.076285
dengamma value 1.095859
dengamma value 0.976427
dengamma value 1.196782
dengamma value 1.015319
dengamma value 1.105372
dengamma value 1.034096
dengamma value 1.155336
dengamma value 1.050430
dengamma value 1.030251
dengamma value 1.107270
dengamma value 1.037082
dengamma value 1.125835
dengamma value 1.042351
dengamma value 1.060958
dengamma value 1.064541
dengamma value 1.000843
07/14/2016 06:10:26:  Epoch[ 1 of 3]-Minibatch[   1-  10, 0.12%]: ce = 0.08358561 * 4628; err = 0.33059637 * 4628; time = 20.5275s; samplesPerSecond = 225.5
dengamma value 1.099889
dengamma value 1.039597
dengamma value 1.115739
dengamma value 0.957857
dengamma value 1.122265
dengamma value 1.111263
dengamma value 1.065039
dengamma value 1.066569
dengamma value 0.987920
dengamma value 1.044044
dengamma value 1.004607
dengamma value 1.062701
dengamma value 1.035316
dengamma value 1.026637
dengamma value 1.144678
dengamma value 1.165378
dengamma value 1.132944
dengamma value 1.081424
dengamma value 1.108471
dengamma value 1.075180
dengamma value 1.088663
dengamma value 1.078510
07/14/2016 06:10:28:  Epoch[ 1 of 3]-Minibatch[  11-  20, 0.24%]: ce = 0.08214610 * 5946; err = 0.31449714 * 5946; time = 1.8100s; samplesPerSecond = 3285.0
dengamma value 1.048358
dengamma value 1.103563
dengamma value 1.099066
dengamma value 1.136579
dengamma value 1.077474
dengamma value 1.060762
dengamma value 1.101553
dengamma value 1.107761
dengamma value 1.022390
dengamma value 1.081607
dengamma value 1.010834
dengamma value 1.077299
dengamma value 1.083294
dengamma value 1.126290
dengamma value 1.066091
dengamma value 1.078891
dengamma value 1.046375
dengamma value 0.986374
dengamma value 1.084432
dengamma value 1.116274
dengamma value 1.091088
dengamma value 1.074867
07/14/2016 06:10:30:  Epoch[ 1 of 3]-Minibatch[  21-  30, 0.37%]: ce = 0.08367419 * 5916; err = 0.32437458 * 5916; time = 1.6081s; samplesPerSecond = 3679.0
dengamma value 1.030191
dengamma value 1.047688
dengamma value 1.041505
dengamma value 1.137154
dengamma value 1.101086
dengamma value 1.032440
dengamma value 1.077590
dengamma value 1.102024
dengamma value 1.104773
dengamma value 1.157433
dengamma value 1.050714
dengamma value 1.003643
dengamma value 1.107600
dengamma value 1.107183
dengamma value 0.954740
dengamma value 1.009407
dengamma value 1.066747
dengamma value 1.065564
dengamma value 1.048961
dengamma value 1.026667
dengamma value 1.096718
dengamma value 1.068000
07/14/2016 06:10:31:  Epoch[ 1 of 3]-Minibatch[  31-  40, 0.49%]: ce = 0.08031854 * 6386; err = 0.32680864 * 6386; time = 1.7412s; samplesPerSecond = 3667.6
dengamma value 1.044291
dengamma value 1.082913
dengamma value 1.073895
dengamma value 1.133403
dengamma value 1.078159
dengamma value 1.102889
dengamma value 1.082325
dengamma value 1.099348
dengamma value 1.167385
dengamma value 1.058515
dengamma value 1.078929
dengamma value 1.050607
dengamma value 1.091514
dengamma value 1.052261
dengamma value 1.109094
dengamma value 1.121752
dengamma value 1.057149
dengamma value 1.042336
dengamma value 1.051527
dengamma value 0.977551
dengamma value 1.104787
dengamma value 1.159152
dengamma value 1.068097
07/14/2016 06:10:33:  Epoch[ 1 of 3]-Minibatch[  41-  50, 0.61%]: ce = 0.08171638 * 6734; err = 0.29551530 * 6734; time = 1.8526s; samplesPerSecond = 3635.0
dengamma value 1.086780
dengamma value 1.130269
dengamma value 1.073455
dengamma value 1.091998
dengamma value 1.035754
dengamma value 0.985550
dengamma value 1.059557
dengamma value 1.123901
dengamma value 1.083224
dengamma value 1.059212
dengamma value 1.097844
dengamma value 1.036471
dengamma value 1.081966
dengamma value 0.984412
dengamma value 1.105340
dengamma value 1.047261
dengamma value 1.033234
dengamma value 1.141741
dengamma value 1.066171
dengamma value 1.077317
dengamma value 1.127820
dengamma value 1.077791
dengamma value 1.080292
dengamma value 0.981080
07/14/2016 06:10:35:  Epoch[ 1 of 3]-Minibatch[  51-  60, 0.73%]: ce = 0.08549177 * 6202; err = 0.31360851 * 6202; time = 1.6965s; samplesPerSecond = 3655.7
dengamma value 1.130581
dengamma value 1.117521
dengamma value 1.055970
dengamma value 1.068845
dengamma value 1.151987
dengamma value 1.030249
dengamma value 1.106854
dengamma value 1.101331
dengamma value 1.060793
dengamma value 1.107020
dengamma value 1.105107
dengamma value 1.079484
dengamma value 1.108909
dengamma value 1.004101
dengamma value 0.950285
dengamma value 1.125628
dengamma value 1.085928
dengamma value 1.042281
dengamma value 1.065240
dengamma value 1.049562
dengamma value 1.073483
dengamma value 1.089740
dengamma value 1.053381
dengamma value 1.018081
07/14/2016 06:10:37:  Epoch[ 1 of 3]-Minibatch[  61-  70, 0.85%]: ce = 0.07997490 * 6362; err = 0.32568375 * 6362; time = 1.7947s; samplesPerSecond = 3544.9
dengamma value 1.075601
dengamma value 1.083481
dengamma value 1.123551
dengamma value 1.028559
dengamma value 1.061858
dengamma value 1.100839
dengamma value 1.023886
dengamma value 1.043098
dengamma value 1.025118
dengamma value 1.136169
dengamma value 1.116578
dengamma value 1.054926
dengamma value 1.064200
dengamma value 1.068297
dengamma value 1.059706
dengamma value 1.095217
dengamma value 1.115496
dengamma value 1.135736
dengamma value 1.060187
dengamma value 1.092560
dengamma value 1.066627
07/14/2016 06:10:38:  Epoch[ 1 of 3]-Minibatch[  71-  80, 0.98%]: ce = 0.07502962 * 5608; err = 0.31847361 * 5608; time = 1.5204s; samplesPerSecond = 3688.4
dengamma value 1.063054
dengamma value 1.042724
dengamma value 1.059763
dengamma value 1.021321
dengamma value 1.097745
dengamma value 1.028584
dengamma value 1.103968
dengamma value 0.997650
dengamma value 1.112675
dengamma value 1.092727
dengamma value 1.043912
dengamma value 1.129032
dengamma value 1.116614
dengamma value 1.042492
dengamma value 1.061597
dengamma value 1.015698
dengamma value 1.053582
dengamma value 1.033995
dengamma value 1.093077
dengamma value 1.080366
dengamma value 1.104077
dengamma value 1.044763
dengamma value 1.020228
07/14/2016 06:10:40:  Epoch[ 1 of 3]-Minibatch[  81-  90, 1.10%]: ce = 0.08151794 * 6594; err = 0.33651805 * 6594; time = 1.8790s; samplesPerSecond = 3509.4
dengamma value 1.028670
dengamma value 0.886836
dengamma value 1.157957
dengamma value 1.014026
dengamma value 1.116295
dengamma value 1.039071
dengamma value 1.099671
dengamma value 1.101143
dengamma value 1.113298
dengamma value 1.109584
dengamma value 1.079916
dengamma value 1.063747
dengamma value 1.095497
dengamma value 1.076887
dengamma value 1.141736
dengamma value 1.035007
dengamma value 1.117461
dengamma value 1.135798
dengamma value 1.057881
dengamma value 1.067153
dengamma value 1.072834
dengamma value 1.006985
dengamma value 1.110780
07/14/2016 06:10:42:  Epoch[ 1 of 3]-Minibatch[  91- 100, 1.22%]: ce = 0.08032955 * 6364; err = 0.31615336 * 6364; time = 1.9008s; samplesPerSecond = 3348.0
dengamma value 1.061657
dengamma value 1.052374
dengamma value 0.987764
dengamma value 1.062911
dengamma value 1.061221
dengamma value 1.142910
dengamma value 1.130698
dengamma value 1.082887
dengamma value 1.044966
dengamma value 1.143583
dengamma value 1.073300
dengamma value 1.157146
dengamma value 1.095505
dengamma value 1.008495
dengamma value 1.116105
dengamma value 1.059661
dengamma value 1.161594
dengamma value 1.098735
dengamma value 1.146981
dengamma value 1.140211
dengamma value 1.096159
dengamma value 1.051981
dengamma value 1.046266
dengamma value 1.118023
dengamma value 1.042709
dengamma value 1.001388
dengamma value 1.012911
07/14/2016 06:10:44:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 1.34%]: ce = 0.08613263 * 6536; err = 0.31548348 * 6536; time = 1.8272s; samplesPerSecond = 3577.0
dengamma value 1.087017
dengamma value 1.059792
dengamma value 1.046501
dengamma value 1.073579
dengamma value 1.095312
dengamma value 1.055991
dengamma value 1.085752
dengamma value 1.068742
dengamma value 1.091071
dengamma value 1.032232
dengamma value 1.084744
dengamma value 1.105438
dengamma value 1.041391
dengamma value 0.937120
dengamma value 1.102653
dengamma value 1.053025
dengamma value 1.061745
dengamma value 1.016491
dengamma value 1.044234
dengamma value 1.025076
dengamma value 1.032975
07/14/2016 06:10:46:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 1.46%]: ce = 0.08295637 * 6208; err = 0.31765464 * 6208; time = 1.7862s; samplesPerSecond = 3475.5
dengamma value 1.085692
dengamma value 1.075794
dengamma value 1.118479
dengamma value 1.067378
dengamma value 0.945208
dengamma value 1.050391
dengamma value 1.078381
dengamma value 1.099215
dengamma value 1.086438
dengamma value 1.049932
dengamma value 1.063138
dengamma value 1.130924
dengamma value 1.028988
dengamma value 1.191101
dengamma value 1.027579
dengamma value 1.088230
dengamma value 1.089141
dengamma value 1.083345
dengamma value 1.072232
dengamma value 1.090651
dengamma value 1.135706
dengamma value 1.127724
07/14/2016 06:10:47:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 1.59%]: ce = 0.08117240 * 6326; err = 0.29687006 * 6326; time = 1.8182s; samplesPerSecond = 3479.2
dengamma value 1.085506
dengamma value 1.071655
dengamma value 1.116561
dengamma value 1.135969
dengamma value 1.003626
dengamma value 1.027538
dengamma value 1.104102
07/14/2016 06:10:48: Finished Epoch[ 1 of 3]: [Training] ce = 0.08156704 * 81936; err = 0.31603935 * 81936; totalSamplesSeen = 81936; learningRatePerSample = 2e-006; epochTime=118.713s
07/14/2016 06:10:48: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.sequence.1'

07/14/2016 06:10:48: Starting Epoch 2: learning rate per sample = 0.000002  effective momentum = 0.995898  momentum as time constant = 2432.7 samples
minibatchiterator: epoch 1: frames [81920..163840] (first utterance at frame 81936), data subset 0 of 1, with 1 datapasses

07/14/2016 06:10:48: Starting minibatch loop.
dengamma value 1.145242
dengamma value 1.085012
dengamma value 1.160179
dengamma value 1.053052
dengamma value 1.116928
dengamma value 1.056254
dengamma value 1.095588
dengamma value 1.143948
dengamma value 1.044307
dengamma value 1.043959
dengamma value 1.020891
dengamma value 1.092130
dengamma value 1.081158
dengamma value 1.091468
dengamma value 1.055750
dengamma value 1.017632
dengamma value 1.057541
dengamma value 1.110858
dengamma value 1.063133
dengamma value 1.071745
dengamma value 1.083208
dengamma value 1.134414
dengamma value 1.035728
dengamma value 1.045233
07/14/2016 06:10:50:  Epoch[ 2 of 3]-Minibatch[   1-  10, 0.12%]: ce = 0.08368399 * 6182; err = 0.30071174 * 6182; time = 1.8936s; samplesPerSecond = 3264.7
dengamma value 1.046536
dengamma value 1.004586
dengamma value 1.288806
dengamma value 1.035090
dengamma value 1.095160
dengamma value 1.119750
dengamma value 1.107882
dengamma value 1.040208
dengamma value 1.045552
dengamma value 1.080889
dengamma value 1.044524
dengamma value 1.125897
dengamma value 1.135680
dengamma value 1.026725
dengamma value 1.036926
dengamma value 1.092974
dengamma value 1.024887
dengamma value 1.115769
dengamma value 1.044357
dengamma value 1.026637
dengamma value 1.048265
dengamma value 1.113920
07/14/2016 06:10:52:  Epoch[ 2 of 3]-Minibatch[  11-  20, 0.24%]: ce = 0.08501334 * 5736; err = 0.28417015 * 5736; time = 1.7079s; samplesPerSecond = 3358.6
dengamma value 1.010748
dengamma value 1.110667
dengamma value 1.085324
dengamma value 1.081510
dengamma value 1.057740
dengamma value 1.163440
dengamma value 1.024172
dengamma value 1.126877
dengamma value 1.054233
dengamma value 1.054708
dengamma value 1.047825
dengamma value 1.056014
dengamma value 1.107508
dengamma value 1.188774
dengamma value 1.061890
dengamma value 1.168044
dengamma value 1.112633
dengamma value 1.068623
dengamma value 1.072696
dengamma value 1.098664
dengamma value 0.974260
dengamma value 0.964481
dengamma value 1.066706
07/14/2016 06:10:53:  Epoch[ 2 of 3]-Minibatch[  21-  30, 0.37%]: ce = 0.08160518 * 6244; err = 0.30172966 * 6244; time = 1.7803s; samplesPerSecond = 3507.2
dengamma value 1.105943
dengamma value 1.116022
dengamma value 1.088509
dengamma value 1.058934
dengamma value 1.161254
dengamma value 1.097798
dengamma value 1.077121
dengamma value 1.044863
dengamma value 1.070741
dengamma value 1.016574
dengamma value 1.093447
dengamma value 1.126311
dengamma value 1.119959
dengamma value 1.129718
dengamma value 1.017900
dengamma value 1.132437
dengamma value 1.024505
dengamma value 1.020736
dengamma value 1.078649
dengamma value 1.095957
dengamma value 1.025882
dengamma value 1.065037
dengamma value 1.176505
dengamma value 1.076838
dengamma value 1.056696
07/14/2016 06:10:55:  Epoch[ 2 of 3]-Minibatch[  31-  40, 0.49%]: ce = 0.08490154 * 6280; err = 0.31242038 * 6280; time = 1.7278s; samplesPerSecond = 3634.6
dengamma value 1.018347
dengamma value 1.082831
dengamma value 1.075497
dengamma value 1.085046
dengamma value 1.063649
dengamma value 1.074264
dengamma value 1.067420
dengamma value 1.053149
dengamma value 1.117731
dengamma value 1.072480
dengamma value 1.076274
dengamma value 1.046603
dengamma value 1.115489
dengamma value 1.067307
dengamma value 1.103777
dengamma value 1.085866
dengamma value 1.144047
dengamma value 1.088565
dengamma value 1.087098
dengamma value 1.063796
dengamma value 1.100174
dengamma value 1.084196
dengamma value 1.102490
dengamma value 1.084687
dengamma value 1.092789
dengamma value 1.103273
07/14/2016 06:10:57:  Epoch[ 2 of 3]-Minibatch[  41-  50, 0.61%]: ce = 0.07733348 * 7428; err = 0.29806139 * 7428; time = 2.1699s; samplesPerSecond = 3423.2
dengamma value 1.142144
dengamma value 1.081073
dengamma value 1.051410
dengamma value 1.134920
dengamma value 1.054180
dengamma value 1.033420
dengamma value 1.037870
dengamma value 1.091124
dengamma value 1.059701
dengamma value 1.061054
dengamma value 1.035654
dengamma value 1.057789
dengamma value 1.026473
dengamma value 1.151943
dengamma value 1.083800
dengamma value 1.082665
dengamma value 1.089776
dengamma value 0.975704
dengamma value 1.056808
dengamma value 1.071527
dengamma value 1.119046
dengamma value 1.022266
dengamma value 1.057294
07/14/2016 06:10:59:  Epoch[ 2 of 3]-Minibatch[  51-  60, 0.73%]: ce = 0.08150290 * 6994; err = 0.31855876 * 6994; time = 1.8545s; samplesPerSecond = 3771.4
dengamma value 1.113186
dengamma value 1.079921
dengamma value 1.175955
dengamma value 1.024600
dengamma value 1.053710
dengamma value 1.130235
dengamma value 0.975800
dengamma value 1.141175
dengamma value 1.185706
dengamma value 1.065715
dengamma value 1.152167
dengamma value 1.111953
dengamma value 1.060055
dengamma value 1.027962
dengamma value 1.074742
dengamma value 1.093271
dengamma value 1.048562
dengamma value 1.041243
dengamma value 1.095344
dengamma value 1.088717
dengamma value 1.070026
dengamma value 1.152819
dengamma value 1.080982
dengamma value 1.101065
07/14/2016 06:11:01:  Epoch[ 2 of 3]-Minibatch[  61-  70, 0.85%]: ce = 0.07725126 * 6572; err = 0.30340840 * 6572; time = 1.8915s; samplesPerSecond = 3474.6
dengamma value 1.097197
dengamma value 1.021022
dengamma value 1.078317
dengamma value 1.085192
dengamma value 1.072534
dengamma value 1.117073
dengamma value 1.200122
dengamma value 1.072119
dengamma value 1.074173
dengamma value 1.060047
dengamma value 1.006856
dengamma value 1.043449
dengamma value 1.018330
dengamma value 1.178684
dengamma value 1.084694
dengamma value 0.941980
dengamma value 1.006588
dengamma value 1.032836
dengamma value 1.074309
dengamma value 1.085413
dengamma value 1.216896
dengamma value 1.015795
07/14/2016 06:11:03:  Epoch[ 2 of 3]-Minibatch[  71-  80, 0.98%]: ce = 0.08773969 * 5506; err = 0.32909553 * 5506; time = 1.5455s; samplesPerSecond = 3562.7
dengamma value 1.002740
dengamma value 1.074720
dengamma value 1.015641
dengamma value 1.082433
dengamma value 1.124583
dengamma value 1.121300
dengamma value 1.129819
dengamma value 1.078518
dengamma value 1.040683
dengamma value 1.013661
dengamma value 1.096474
dengamma value 0.958585
dengamma value 1.076417
dengamma value 1.027448
dengamma value 1.066752
dengamma value 1.115725
dengamma value 1.114337
dengamma value 1.090009
dengamma value 1.107314
dengamma value 1.006038
dengamma value 1.001244
07/14/2016 06:11:04:  Epoch[ 2 of 3]-Minibatch[  81-  90, 1.10%]: ce = 0.08559576 * 5628; err = 0.33688699 * 5628; time = 1.5648s; samplesPerSecond = 3596.7
dengamma value 1.039761
dengamma value 1.123939
dengamma value 1.071136
dengamma value 1.098651
dengamma value 1.086919
dengamma value 0.986629
dengamma value 1.035707
dengamma value 1.000715
dengamma value 1.104032
dengamma value 1.055806
dengamma value 1.166729
dengamma value 1.092039
dengamma value 1.083523
dengamma value 1.073980
dengamma value 1.020984
dengamma value 1.043832
dengamma value 1.045460
dengamma value 1.060373
dengamma value 1.059040
dengamma value 1.135645
dengamma value 1.018242
dengamma value 1.030202
dengamma value 1.055369
dengamma value 0.988205
07/14/2016 06:11:06:  Epoch[ 2 of 3]-Minibatch[  91- 100, 1.22%]: ce = 0.08217202 * 6032; err = 0.32625995 * 6032; time = 1.6403s; samplesPerSecond = 3677.3
dengamma value 1.040056
dengamma value 1.059124
dengamma value 1.058682
dengamma value 1.091049
dengamma value 1.067363
dengamma value 1.119150
dengamma value 1.081032
dengamma value 0.965229
dengamma value 1.122860
dengamma value 1.133967
dengamma value 1.037526
dengamma value 0.968076
dengamma value 1.059440
dengamma value 1.140410
dengamma value 1.086110
dengamma value 0.997839
dengamma value 1.165703
dengamma value 1.048398
dengamma value 1.104210
dengamma value 1.028737
07/14/2016 06:11:07:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 1.34%]: ce = 0.08802488 * 4790; err = 0.33799582 * 4790; time = 1.3691s; samplesPerSecond = 3498.6
dengamma value 1.015772
dengamma value 0.967842
dengamma value 1.055026
dengamma value 1.060577
dengamma value 1.081279
dengamma value 1.012655
dengamma value 1.010070
dengamma value 1.089346
dengamma value 1.075223
dengamma value 0.957264
dengamma value 1.129906
dengamma value 1.057574
dengamma value 1.077032
dengamma value 1.016718
dengamma value 1.128840
dengamma value 1.068581
dengamma value 1.133210
dengamma value 1.167371
dengamma value 0.961193
dengamma value 1.143450
dengamma value 1.034745
dengamma value 1.034677
07/14/2016 06:11:09:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 1.46%]: ce = 0.08562207 * 5986; err = 0.34513866 * 5986; time = 1.6170s; samplesPerSecond = 3701.8
dengamma value 1.027943
dengamma value 1.006940
dengamma value 1.054680
dengamma value 1.089151
dengamma value 1.029769
dengamma value 1.217527
dengamma value 1.101724
dengamma value 1.113608
dengamma value 1.074514
dengamma value 1.081673
dengamma value 1.094728
dengamma value 1.087523
dengamma value 1.003731
dengamma value 0.994219
dengamma value 1.028819
dengamma value 1.075157
dengamma value 1.049089
dengamma value 1.053537
dengamma value 1.120696
dengamma value 1.045499
dengamma value 1.108837
dengamma value 1.059376
dengamma value 1.091137
dengamma value 0.994257
07/14/2016 06:11:11:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 1.59%]: ce = 0.08639331 * 7022; err = 0.31444033 * 7022; time = 1.8551s; samplesPerSecond = 3785.2
dengamma value 1.034703
dengamma value 1.093763
dengamma value 1.188881
dengamma value 1.072499
dengamma value 1.043478
dengamma value 1.085861
dengamma value 1.015125
dengamma value 1.085830
dengamma value 1.085830
07/14/2016 06:11:11: Finished Epoch[ 2 of 3]: [Training] ce = 0.08332526 * 82462; err = 0.31518760 * 82462; totalSamplesSeen = 164398; learningRatePerSample = 2e-006; epochTime=23.1865s
07/14/2016 06:11:11: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.sequence.2'

07/14/2016 06:11:11: Starting Epoch 3: learning rate per sample = 0.000002  effective momentum = 0.995898  momentum as time constant = 2432.7 samples
minibatchiterator: epoch 2: frames [163840..245760] (first utterance at frame 164102), data subset 0 of 1, with 1 datapasses

07/14/2016 06:11:11: Starting minibatch loop.
dengamma value 1.088197
dengamma value 1.100274
dengamma value 1.084374
dengamma value 1.104666
dengamma value 1.080939
dengamma value 1.060389
dengamma value 1.150334
dengamma value 1.039812
dengamma value 1.112423
dengamma value 0.985965
dengamma value 1.117210
dengamma value 1.071346
dengamma value 1.071001
dengamma value 1.100134
dengamma value 1.077029
dengamma value 1.060612
dengamma value 1.105358
dengamma value 1.011032
dengamma value 1.095015
dengamma value 1.093480
dengamma value 1.050025
dengamma value 1.071393
dengamma value 1.042980
dengamma value 1.039124
07/14/2016 06:11:13:  Epoch[ 3 of 3]-Minibatch[   1-  10, 0.12%]: ce = 0.08358906 * 6292; err = 0.30101716 * 6292; time = 1.7141s; samplesPerSecond = 3670.7
dengamma value 1.160758
dengamma value 1.035082
dengamma value 0.988546
dengamma value 1.101547
dengamma value 1.082563
dengamma value 1.025480
dengamma value 1.047410
dengamma value 1.136445
dengamma value 1.040095
dengamma value 0.976965
dengamma value 0.961430
dengamma value 1.100491
dengamma value 1.068102
dengamma value 1.070083
dengamma value 1.033162
dengamma value 1.068287
dengamma value 1.011897
dengamma value 1.077012
dengamma value 1.112298
dengamma value 1.034657
dengamma value 1.074293
dengamma value 1.025731
07/14/2016 06:11:15:  Epoch[ 3 of 3]-Minibatch[  11-  20, 0.24%]: ce = 0.07963296 * 6596; err = 0.33110976 * 6596; time = 1.8285s; samplesPerSecond = 3607.4
dengamma value 1.085887
dengamma value 1.006123
dengamma value 1.100073
dengamma value 1.118208
dengamma value 1.071417
dengamma value 1.167362
dengamma value 1.031790
dengamma value 1.079441
dengamma value 1.055116
dengamma value 1.062575
dengamma value 1.106028
dengamma value 1.058904
dengamma value 1.022302
dengamma value 1.037796
dengamma value 1.120612
dengamma value 0.954849
dengamma value 1.048381
dengamma value 1.034218
dengamma value 1.031126
dengamma value 1.173674
dengamma value 1.070757
dengamma value 1.203380
07/14/2016 06:11:17:  Epoch[ 3 of 3]-Minibatch[  21-  30, 0.37%]: ce = 0.08600028 * 5666; err = 0.29844688 * 5666; time = 1.6278s; samplesPerSecond = 3480.7
dengamma value 1.131507
dengamma value 1.027065
dengamma value 1.060685
dengamma value 1.093865
dengamma value 1.081544
dengamma value 1.078910
dengamma value 1.105020
dengamma value 1.070809
dengamma value 1.094553
dengamma value 1.076389
dengamma value 1.105419
dengamma value 1.050209
dengamma value 1.002027
dengamma value 1.128992
dengamma value 1.124045
dengamma value 1.039761
dengamma value 1.086744
dengamma value 1.040163
dengamma value 1.089048
dengamma value 1.037200
dengamma value 1.085009
dengamma value 1.031806
07/14/2016 06:11:19:  Epoch[ 3 of 3]-Minibatch[  31-  40, 0.49%]: ce = 0.08130104 * 6626; err = 0.28327800 * 6626; time = 1.8903s; samplesPerSecond = 3505.3
dengamma value 1.094679
dengamma value 1.037563
dengamma value 1.033161
dengamma value 1.093461
dengamma value 1.125289
dengamma value 1.151998
dengamma value 1.093540
dengamma value 1.099577
dengamma value 1.029092
dengamma value 1.087039
dengamma value 1.145239
dengamma value 1.075084
dengamma value 1.043946
dengamma value 1.067017
dengamma value 1.024815
dengamma value 1.064146
dengamma value 1.083589
dengamma value 1.064345
dengamma value 1.111978
dengamma value 1.106094
dengamma value 1.074091
dengamma value 1.080812
dengamma value 1.068420
dengamma value 1.059111
07/14/2016 06:11:20:  Epoch[ 3 of 3]-Minibatch[  41-  50, 0.61%]: ce = 0.08144237 * 5652; err = 0.30042463 * 5652; time = 1.7159s; samplesPerSecond = 3293.9
dengamma value 1.092134
dengamma value 1.047652
dengamma value 1.002004
dengamma value 1.048934
dengamma value 1.037261
dengamma value 1.150848
dengamma value 1.047778
dengamma value 1.048185
dengamma value 1.106732
dengamma value 1.022934
dengamma value 1.029545
dengamma value 1.055188
dengamma value 1.074436
dengamma value 1.073219
dengamma value 1.089149
dengamma value 1.040302
dengamma value 1.009003
dengamma value 1.036303
dengamma value 1.098994
dengamma value 1.043439
dengamma value 1.056252
07/14/2016 06:11:22:  Epoch[ 3 of 3]-Minibatch[  51-  60, 0.73%]: ce = 0.08578500 * 6588; err = 0.33986035 * 6588; time = 1.8352s; samplesPerSecond = 3589.8
dengamma value 1.065623
dengamma value 1.096644
dengamma value 1.041698
dengamma value 0.983649
dengamma value 1.153678
dengamma value 1.073628
dengamma value 1.081920
dengamma value 1.037372
dengamma value 1.007501
dengamma value 1.093147
dengamma value 1.082585
dengamma value 1.026000
dengamma value 1.028268
dengamma value 1.123083
dengamma value 1.135424
dengamma value 1.056123
dengamma value 1.042214
dengamma value 1.079012
dengamma value 1.108924
dengamma value 1.058956
dengamma value 1.028283
07/14/2016 06:11:24:  Epoch[ 3 of 3]-Minibatch[  61-  70, 0.85%]: ce = 0.08631521 * 6328; err = 0.30941846 * 6328; time = 1.8447s; samplesPerSecond = 3430.3
dengamma value 1.072576
dengamma value 1.097221
dengamma value 1.011787
dengamma value 1.103157
dengamma value 1.126538
dengamma value 1.070615
dengamma value 1.089780
dengamma value 1.109849
dengamma value 1.052071
dengamma value 0.991507
dengamma value 1.060412
dengamma value 1.032442
dengamma value 1.022123
dengamma value 1.104983
dengamma value 1.048826
dengamma value 1.083207
dengamma value 1.072539
dengamma value 1.192497
dengamma value 1.086666
dengamma value 1.062849
dengamma value 1.065174
dengamma value 1.108937
dengamma value 1.036068
dengamma value 1.100262
dengamma value 1.077704
07/14/2016 06:11:26:  Epoch[ 3 of 3]-Minibatch[  71-  80, 0.98%]: ce = 0.08290498 * 6980; err = 0.28839542 * 6980; time = 1.9475s; samplesPerSecond = 3584.1
dengamma value 1.050160
dengamma value 0.978864
dengamma value 0.951252
dengamma value 1.137690
dengamma value 1.125302
dengamma value 1.023794
dengamma value 1.281458
dengamma value 1.102675
dengamma value 1.066576
dengamma value 1.116553
dengamma value 0.979398
dengamma value 1.075125
dengamma value 1.059821
dengamma value 1.015062
dengamma value 1.119501
dengamma value 1.061463
dengamma value 1.002527
dengamma value 1.284401
dengamma value 1.185396
dengamma value 1.049221
dengamma value 1.136681
dengamma value 0.981109
dengamma value 1.022418
07/14/2016 06:11:28:  Epoch[ 3 of 3]-Minibatch[  81-  90, 1.10%]: ce = 0.07985366 * 6774; err = 0.31251845 * 6774; time = 1.7150s; samplesPerSecond = 3949.8
dengamma value 0.991020
dengamma value 1.080265
dengamma value 1.125530
dengamma value 1.028283
dengamma value 0.931542
dengamma value 1.073510
dengamma value 1.040909
dengamma value 1.068603
dengamma value 0.930335
dengamma value 1.068783
dengamma value 1.012925
dengamma value 1.095008
dengamma value 1.032397
dengamma value 0.980707
dengamma value 1.071786
dengamma value 0.933892
dengamma value 1.054113
dengamma value 1.016794
dengamma value 1.071612
dengamma value 1.069752
dengamma value 1.103920
dengamma value 1.082665
07/14/2016 06:11:29:  Epoch[ 3 of 3]-Minibatch[  91- 100, 1.22%]: ce = 0.08853470 * 6146; err = 0.35388871 * 6146; time = 1.7650s; samplesPerSecond = 3482.2
dengamma value 1.017763
dengamma value 1.131387
dengamma value 1.059096
dengamma value 1.147637
dengamma value 0.959775
dengamma value 1.082525
dengamma value 1.071139
dengamma value 1.150287
dengamma value 1.107909
dengamma value 1.082605
dengamma value 1.038306
dengamma value 1.014547
dengamma value 1.165069
dengamma value 1.063468
dengamma value 1.117538
dengamma value 1.068459
dengamma value 1.086083
dengamma value 1.095840
dengamma value 1.014370
dengamma value 1.139207
dengamma value 1.066824
dengamma value 1.079760
07/14/2016 06:11:31:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 1.34%]: ce = 0.08208266 * 5366; err = 0.30301901 * 5366; time = 1.6009s; samplesPerSecond = 3351.9
dengamma value 1.061395
dengamma value 1.047785
dengamma value 1.090934
dengamma value 1.070985
dengamma value 1.064222
dengamma value 1.015890
dengamma value 1.125446
dengamma value 1.071238
dengamma value 1.019477
dengamma value 1.031274
dengamma value 1.034352
dengamma value 1.063972
dengamma value 1.058114
dengamma value 1.040602
dengamma value 1.091374
dengamma value 1.086140
dengamma value 1.112651
dengamma value 1.103647
dengamma value 1.057306
dengamma value 0.988464
dengamma value 1.036586
dengamma value 1.127764
dengamma value 1.148842
dengamma value 1.096221
dengamma value 1.088360
07/14/2016 06:11:33:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 1.46%]: ce = 0.08114245 * 6220; err = 0.32250804 * 6220; time = 1.7013s; samplesPerSecond = 3656.0
dengamma value 1.082362
dengamma value 1.051853
dengamma value 1.113975
dengamma value 1.084998
dengamma value 1.030133
dengamma value 1.070156
dengamma value 1.075748
dengamma value 1.107124
dengamma value 1.086904
dengamma value 1.084355
dengamma value 1.043573
dengamma value 1.068356
dengamma value 1.032575
dengamma value 1.093060
dengamma value 1.160388
dengamma value 1.106279
dengamma value 1.066270
dengamma value 0.998378
dengamma value 1.082442
dengamma value 1.033566
dengamma value 1.083996
dengamma value 1.100964
dengamma value 1.142857
07/14/2016 06:11:34:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 1.59%]: ce = 0.08458937 * 6564; err = 0.30042657 * 6564; time = 1.7607s; samplesPerSecond = 3728.0
07/14/2016 06:11:34: Finished Epoch[ 3 of 3]: [Training] ce = 0.08329045 * 81798; err = 0.31113230 * 81798; totalSamplesSeen = 246196; learningRatePerSample = 2e-006; epochTime=22.9734s
07/14/2016 06:11:35: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_SequenceTraining@debug_gpu/models/cntkSpeech.sequence'
07/14/2016 06:11:40: CNTKCommandTrainEnd: sequenceTrain

07/14/2016 06:11:40: Action "train" complete.

07/14/2016 06:11:40: __COMPLETED__