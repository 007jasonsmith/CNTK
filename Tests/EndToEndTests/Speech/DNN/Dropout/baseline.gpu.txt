CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running mpiexec -n 2 /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu DeviceId=0 timestamping=true numCPUThreads=12 stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 12:04:41
		Last modified date: Tue Jul 12 04:28:35 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by philly on 34e58dd0283f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 12:04:41
		Last modified date: Tue Jul 12 04:28:35 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by philly on 34e58dd0283f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [mpihelper]: all 2 nodes responded
07/14/2016 12:31:02: Redirecting stderr to file /tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr_speechTrain.logrank0
07/14/2016 12:31:02: Redirecting stderr to file /tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr_speechTrain.logrank1
MPI Rank 0: 07/14/2016 12:31:02: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 12:31:02: Build info: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:02: 		Built time: Jul 14 2016 12:04:41
MPI Rank 0: 07/14/2016 12:31:02: 		Last modified date: Tue Jul 12 04:28:35 2016
MPI Rank 0: 07/14/2016 12:31:02: 		Build type: release
MPI Rank 0: 07/14/2016 12:31:02: 		Build target: GPU
MPI Rank 0: 07/14/2016 12:31:02: 		With 1bit-SGD: no
MPI Rank 0: 07/14/2016 12:31:02: 		Math lib: mkl
MPI Rank 0: 07/14/2016 12:31:02: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 0: 07/14/2016 12:31:02: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 07/14/2016 12:31:02: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 0: 07/14/2016 12:31:02: 		Build Branch: HEAD
MPI Rank 0: 07/14/2016 12:31:02: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
MPI Rank 0: 07/14/2016 12:31:02: 		Built by philly on 34e58dd0283f
MPI Rank 0: 07/14/2016 12:31:02: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 0: 07/14/2016 12:31:02: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 12:31:03: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 12:31:03: GPU info:
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 12:31:03: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 12:31:03: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 12:31:03: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 12:31:03: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: Running on localhost at 2016/07/14 12:31:03
MPI Rank 0: 07/14/2016 12:31:03: Command line: 
MPI Rank 0: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/14/2016 12:31:03: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/14/2016 12:31:03: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = 0
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=0
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 0: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 07/14/2016 12:31:03: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 07/14/2016 12:31:03: Commands: speechTrain
MPI Rank 0: 07/14/2016 12:31:03: Precision = "float"
MPI Rank 0: 07/14/2016 12:31:03: Using 12 CPU threads.
MPI Rank 0: 07/14/2016 12:31:03: CNTKModelPath: /tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 0: 07/14/2016 12:31:03: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 07/14/2016 12:31:03: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: ##############################################################################
MPI Rank 0: 07/14/2016 12:31:03: #                                                                            #
MPI Rank 0: 07/14/2016 12:31:03: # Action "train"                                                             #
MPI Rank 0: 07/14/2016 12:31:03: #                                                                            #
MPI Rank 0: 07/14/2016 12:31:03: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: Creating virgin network.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ErrorPrediction()
MPI Rank 0: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 	featNorm.meanVector = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 36 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: Created model with 36 nodes on GPU 0.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: Training criterion node(s):
MPI Rank 0: 07/14/2016 12:31:03: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: 	err = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 0: 0x295d778: {[labels Value[132 x *]] }
MPI Rank 0: 0x2d20d08: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x2d424c8: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x2d425d8: {[logPrior._ Value[132]] }
MPI Rank 0: 0x2d44618: {[outLayer.B Value[132 x 1]] }
MPI Rank 0: 0x3575958: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 0: 0x3575c98: {[ce Value[1]] }
MPI Rank 0: 0x3578258: {[featNorm.meanVector Value[363]] }
MPI Rank 0: 0x3578358: {[features Value[363 x *]] }
MPI Rank 0: 0x357a058: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x357d748: {[featNorm Value[363 x *]] }
MPI Rank 0: 0x357d908: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 0: 0x357de78: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x357e038: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 0: 0x357e1f8: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x357e3b8: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x357e578: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x357e738: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x357e8f8: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x357eab8: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x357ec78: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x357ee38: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x357eff8: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x357f1b8: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x357f378: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x357f538: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x357f6f8: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 0: 0x357f8b8: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 0: 0x357fa78: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 0: 0x357fc38: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 0: 0x3580748: {[ce Gradient[1]] }
MPI Rank 0: 0x3580908: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 0: 0x3580ac8: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 0: 0x3580c88: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 0: 0x3595d08: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 0x3596898: {[outLayer.W Value[132 x 512]] }
MPI Rank 0: 0x3599ed8: {[logPrior Value[132]] }
MPI Rank 0: 0x359a698: {[link Value[1 x 1]] }
MPI Rank 0: 0x359b2c8: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x359dc08: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x359efc8: {[err Value[1]] }
MPI Rank 0: 0x359f358: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 0: 0x359f628: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:03: 	featNorm.meanVector = Mean()
MPI Rank 0: 07/14/2016 12:31:03: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 07/14/2016 12:31:03: 	logPrior._ = Mean()
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:04: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Setting dropout rate to 0.1.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:04: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:04: Starting minibatch loop.
MPI Rank 0: (GPU): creating curand object with seed 0
MPI Rank 0: (GPU): creating curand object with seed 1
MPI Rank 0: (GPU): creating curand object with seed 2
MPI Rank 0: (GPU): creating curand object with seed 3
MPI Rank 0: 07/14/2016 12:31:04:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 11.29415588 * 2560; err = 0.94648438 * 2560; time = 0.0595s; samplesPerSecond = 43023.8
MPI Rank 0: 07/14/2016 12:31:04:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 10.37568054 * 2560; err = 0.93476563 * 2560; time = 0.0388s; samplesPerSecond = 65894.5
MPI Rank 0: 07/14/2016 12:31:04:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 7.00799866 * 2560; err = 0.93242187 * 2560; time = 0.0387s; samplesPerSecond = 66136.2
MPI Rank 0: 07/14/2016 12:31:04:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 5.09111328 * 2560; err = 0.89335937 * 2560; time = 0.0388s; samplesPerSecond = 66047.5
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.23195496 * 2560; err = 0.90468750 * 2560; time = 0.0390s; samplesPerSecond = 65620.8
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 4.07601013 * 2560; err = 0.89804688 * 2560; time = 0.0385s; samplesPerSecond = 66409.0
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.95135498 * 2560; err = 0.86015625 * 2560; time = 0.0393s; samplesPerSecond = 65075.4
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.89093628 * 2560; err = 0.89804688 * 2560; time = 0.0382s; samplesPerSecond = 66987.6
MPI Rank 0: 07/14/2016 12:31:05: Finished Epoch[ 1 of 5]: [Training] ce = 6.23990059 * 20480; err = 0.90849609 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=0.333381s
MPI Rank 0: 07/14/2016 12:31:05: SGD: Saving checkpoint model '/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.1'
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:05: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:05: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 4
MPI Rank 0: (GPU): creating curand object with seed 5
MPI Rank 0: (GPU): creating curand object with seed 6
MPI Rank 0: (GPU): creating curand object with seed 7
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.84867339 * 2560; err = 0.86054688 * 2560; time = 0.0794s; samplesPerSecond = 32257.3
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.85232964 * 2560; err = 0.86914062 * 2560; time = 0.0635s; samplesPerSecond = 40345.5
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.86345359 * 2560; err = 0.86992187 * 2560; time = 0.0634s; samplesPerSecond = 40376.0
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.73069704 * 2560; err = 0.84687500 * 2560; time = 0.0634s; samplesPerSecond = 40384.9
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.64188339 * 2560; err = 0.82773438 * 2560; time = 0.0632s; samplesPerSecond = 40534.5
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.59684860 * 2560; err = 0.81523437 * 2560; time = 0.0634s; samplesPerSecond = 40410.4
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.48736085 * 2560; err = 0.80195313 * 2560; time = 0.0634s; samplesPerSecond = 40365.2
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.37097157 * 2560; err = 0.80703125 * 2560; time = 0.0636s; samplesPerSecond = 40270.6
MPI Rank 0: 07/14/2016 12:31:05: Finished Epoch[ 2 of 5]: [Training] ce = 3.67402726 * 20480; err = 0.83730469 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=0.528976s
MPI Rank 0: 07/14/2016 12:31:05: SGD: Saving checkpoint model '/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.2'
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:05: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:05: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 8
MPI Rank 0: (GPU): creating curand object with seed 9
MPI Rank 0: (GPU): creating curand object with seed 10
MPI Rank 0: (GPU): creating curand object with seed 11
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.29139347 * 2560; err = 0.77343750 * 2560; time = 0.0707s; samplesPerSecond = 36226.8
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.26643769 * 2560; err = 0.77734375 * 2560; time = 0.0638s; samplesPerSecond = 40104.6
MPI Rank 0: 07/14/2016 12:31:05:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.25540482 * 2560; err = 0.77968750 * 2560; time = 0.0636s; samplesPerSecond = 40254.1
MPI Rank 0: 07/14/2016 12:31:06:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.18506477 * 2560; err = 0.76562500 * 2560; time = 0.0644s; samplesPerSecond = 39760.8
MPI Rank 0: 07/14/2016 12:31:06:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.16975111 * 2560; err = 0.77695313 * 2560; time = 0.0630s; samplesPerSecond = 40618.2
MPI Rank 0: 07/14/2016 12:31:06:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.10348842 * 2560; err = 0.75351563 * 2560; time = 0.0630s; samplesPerSecond = 40602.7
MPI Rank 0: 07/14/2016 12:31:06:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.03528624 * 2560; err = 0.74453125 * 2560; time = 0.0631s; samplesPerSecond = 40567.3
MPI Rank 0: 07/14/2016 12:31:06:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.04793528 * 2560; err = 0.75312500 * 2560; time = 0.0632s; samplesPerSecond = 40511.5
MPI Rank 0: 07/14/2016 12:31:06: Finished Epoch[ 3 of 5]: [Training] ce = 3.16934522 * 20480; err = 0.76552734 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=0.520558s
MPI Rank 0: 07/14/2016 12:31:06: SGD: Saving checkpoint model '/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.3'
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:06: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:06: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 12
MPI Rank 0: (GPU): creating curand object with seed 13
MPI Rank 0: (GPU): creating curand object with seed 14
MPI Rank 0: (GPU): creating curand object with seed 15
MPI Rank 0: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.00295194 * 2560; err = 0.73125000 * 2560; time = 0.0687s; samplesPerSecond = 37287.9
MPI Rank 0: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.88291902 * 2560; err = 0.71757812 * 2560; time = 0.0640s; samplesPerSecond = 39993.8
MPI Rank 0: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.84082441 * 2560; err = 0.69296875 * 2560; time = 0.0628s; samplesPerSecond = 40739.0
MPI Rank 0: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.83747733 * 2560; err = 0.72109375 * 2560; time = 0.0632s; samplesPerSecond = 40485.2
MPI Rank 0: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.82151905 * 2560; err = 0.70546875 * 2560; time = 0.0636s; samplesPerSecond = 40264.9
MPI Rank 0: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.71233722 * 2560; err = 0.69648438 * 2560; time = 0.0632s; samplesPerSecond = 40533.9
MPI Rank 0: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.70736644 * 2560; err = 0.68203125 * 2560; time = 0.0633s; samplesPerSecond = 40411.7
MPI Rank 0: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.68875924 * 2560; err = 0.67656250 * 2560; time = 0.0639s; samplesPerSecond = 40094.0
MPI Rank 0: 07/14/2016 12:31:06: Finished Epoch[ 4 of 5]: [Training] ce = 2.81176933 * 20480; err = 0.70292969 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=0.518286s
MPI Rank 0: 07/14/2016 12:31:06: SGD: Saving checkpoint model '/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:06: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:06: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/14/2016 12:31:06:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.55157278 * 2560; err = 0.65937500 * 2560; time = 0.0619s; samplesPerSecond = 41385.1
MPI Rank 0: 07/14/2016 12:31:07:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58907775 * 2560; err = 0.65546875 * 2560; time = 0.0644s; samplesPerSecond = 39779.3
MPI Rank 0: 07/14/2016 12:31:07:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.56596201 * 2560; err = 0.65859375 * 2560; time = 0.0666s; samplesPerSecond = 38417.1
MPI Rank 0: 07/14/2016 12:31:07:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.50385330 * 2560; err = 0.62539062 * 2560; time = 0.0612s; samplesPerSecond = 41862.2
MPI Rank 0: 07/14/2016 12:31:07:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.48117527 * 2560; err = 0.62578125 * 2560; time = 0.0596s; samplesPerSecond = 42985.5
MPI Rank 0: 07/14/2016 12:31:07:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.47055498 * 2560; err = 0.63281250 * 2560; time = 0.0612s; samplesPerSecond = 41832.8
MPI Rank 0: 07/14/2016 12:31:07:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.42318143 * 2560; err = 0.61406250 * 2560; time = 0.0615s; samplesPerSecond = 41651.8
MPI Rank 0: 07/14/2016 12:31:07:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.38452355 * 2560; err = 0.62187500 * 2560; time = 0.0595s; samplesPerSecond = 43029.5
MPI Rank 0: 07/14/2016 12:31:07: Finished Epoch[ 5 of 5]: [Training] ce = 2.49623763 * 20480; err = 0.63666992 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.501323s
MPI Rank 0: 07/14/2016 12:31:07: SGD: Saving checkpoint model '/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn'
MPI Rank 0: 07/14/2016 12:31:07: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:07: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:07: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 07/14/2016 12:31:02: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 12:31:02: Build info: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:02: 		Built time: Jul 14 2016 12:04:41
MPI Rank 1: 07/14/2016 12:31:02: 		Last modified date: Tue Jul 12 04:28:35 2016
MPI Rank 1: 07/14/2016 12:31:02: 		Build type: release
MPI Rank 1: 07/14/2016 12:31:02: 		Build target: GPU
MPI Rank 1: 07/14/2016 12:31:02: 		With 1bit-SGD: no
MPI Rank 1: 07/14/2016 12:31:02: 		Math lib: mkl
MPI Rank 1: 07/14/2016 12:31:02: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 1: 07/14/2016 12:31:02: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 07/14/2016 12:31:02: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 1: 07/14/2016 12:31:02: 		Build Branch: HEAD
MPI Rank 1: 07/14/2016 12:31:02: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
MPI Rank 1: 07/14/2016 12:31:02: 		Built by philly on 34e58dd0283f
MPI Rank 1: 07/14/2016 12:31:02: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 1: 07/14/2016 12:31:02: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 12:31:03: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 12:31:03: GPU info:
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:03: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 12:31:03: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 12:31:03: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 12:31:03: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 12:31:03: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:03: Running on localhost at 2016/07/14 12:31:03
MPI Rank 1: 07/14/2016 12:31:03: Command line: 
MPI Rank 1: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:03: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/14/2016 12:31:03: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:03: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:03: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/14/2016 12:31:03: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = 0
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:03: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:03: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=0
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 1: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 07/14/2016 12:31:03: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 07/14/2016 12:31:03: Commands: speechTrain
MPI Rank 1: 07/14/2016 12:31:03: Precision = "float"
MPI Rank 1: 07/14/2016 12:31:03: Using 12 CPU threads.
MPI Rank 1: 07/14/2016 12:31:03: CNTKModelPath: /tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 1: 07/14/2016 12:31:03: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 07/14/2016 12:31:03: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:03: ##############################################################################
MPI Rank 1: 07/14/2016 12:31:03: #                                                                            #
MPI Rank 1: 07/14/2016 12:31:03: # Action "train"                                                             #
MPI Rank 1: 07/14/2016 12:31:03: #                                                                            #
MPI Rank 1: 07/14/2016 12:31:03: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:03: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:03: Creating virgin network.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ErrorPrediction()
MPI Rank 1: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 	featNorm.meanVector = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 36 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:04: Created model with 36 nodes on GPU 0.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:04: Training criterion node(s):
MPI Rank 1: 07/14/2016 12:31:04: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:04: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:04: 	err = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 1: 0x25e2748: {[labels Value[132 x *]] }
MPI Rank 1: 0x261bcc8: {[logPrior._ Value[132]] }
MPI Rank 1: 0x261cc98: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x2d7cdb8: {[outLayer.W Value[132 x 512]] }
MPI Rank 1: 0x2d7fc18: {[outLayer.B Value[132 x 1]] }
MPI Rank 1: 0x2d80be8: {[link Value[1 x 1]] }
MPI Rank 1: 0x2e61a18: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x2e63c18: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 1: 0x2e64a78: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x2e65288: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x2e65868: {[err Value[1]] }
MPI Rank 1: 0x2e661b8: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 0x2e67588: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 1: 0x2e67e58: {[ce Value[1]] }
MPI Rank 1: 0x2e68a48: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 1: 0x2e69088: {[featNorm.meanVector Value[363]] }
MPI Rank 1: 0x2e69588: {[features Value[363 x *]] }
MPI Rank 1: 0x2e6af48: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x2e6c038: {[logPrior Value[132]] }
MPI Rank 1: 0x2e6e598: {[featNorm Value[363 x *]] }
MPI Rank 1: 0x2e6ebf8: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 1: 0x2e6edb8: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x2e6f328: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 1: 0x2e6f4e8: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x2e6f6a8: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x2e6f868: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x2e6fa28: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x2e6fbe8: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x2e6fda8: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x2e6ff68: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x2e70128: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x2e702e8: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x2e704a8: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x2e70668: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x2e70828: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x2e709e8: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 1: 0x2e70ba8: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 1: 0x2e70d68: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 1: 0x2e70f28: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 1: 0x2e719a8: {[ce Gradient[1]] }
MPI Rank 1: 0x2e71b68: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 1: 0x2e71d28: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 1: 0x2e71ee8: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:04: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:04: 	featNorm.meanVector = Mean()
MPI Rank 1: 07/14/2016 12:31:04: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 07/14/2016 12:31:04: 	logPrior._ = Mean()
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:04: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Setting dropout rate to 0.1.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:04: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:04: Starting minibatch loop.
MPI Rank 1: (GPU): creating curand object with seed 0
MPI Rank 1: (GPU): creating curand object with seed 1
MPI Rank 1: (GPU): creating curand object with seed 2
MPI Rank 1: (GPU): creating curand object with seed 3
MPI Rank 1: 07/14/2016 12:31:04:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 11.29415588 * 2560; err = 0.94648438 * 2560; time = 0.0577s; samplesPerSecond = 44400.5
MPI Rank 1: 07/14/2016 12:31:04:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 10.37568054 * 2560; err = 0.93476563 * 2560; time = 0.0388s; samplesPerSecond = 65989.6
MPI Rank 1: 07/14/2016 12:31:04:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 7.00799866 * 2560; err = 0.93242187 * 2560; time = 0.0387s; samplesPerSecond = 66194.3
MPI Rank 1: 07/14/2016 12:31:04:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 5.09111328 * 2560; err = 0.89335937 * 2560; time = 0.0387s; samplesPerSecond = 66132.8
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.23195496 * 2560; err = 0.90468750 * 2560; time = 0.0387s; samplesPerSecond = 66066.2
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 4.07601013 * 2560; err = 0.89804688 * 2560; time = 0.0388s; samplesPerSecond = 66056.0
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.95135498 * 2560; err = 0.86015625 * 2560; time = 0.0393s; samplesPerSecond = 65085.3
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.89093628 * 2560; err = 0.89804688 * 2560; time = 0.0385s; samplesPerSecond = 66576.5
MPI Rank 1: 07/14/2016 12:31:05: Finished Epoch[ 1 of 5]: [Training] ce = 6.23990059 * 20480; err = 0.90849609 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=0.331583s
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:05: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:05: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 24
MPI Rank 1: (GPU): creating curand object with seed 25
MPI Rank 1: (GPU): creating curand object with seed 26
MPI Rank 1: (GPU): creating curand object with seed 27
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.84867339 * 2560; err = 0.86054688 * 2560; time = 0.0796s; samplesPerSecond = 32179.8
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.85232964 * 2560; err = 0.86914062 * 2560; time = 0.0632s; samplesPerSecond = 40512.7
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.86345359 * 2560; err = 0.86992187 * 2560; time = 0.0636s; samplesPerSecond = 40276.3
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.73069704 * 2560; err = 0.84687500 * 2560; time = 0.0634s; samplesPerSecond = 40409.1
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.64188339 * 2560; err = 0.82773438 * 2560; time = 0.0632s; samplesPerSecond = 40519.8
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.59684860 * 2560; err = 0.81523437 * 2560; time = 0.0632s; samplesPerSecond = 40488.4
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.48736085 * 2560; err = 0.80195313 * 2560; time = 0.0634s; samplesPerSecond = 40400.2
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.37097157 * 2560; err = 0.80703125 * 2560; time = 0.0635s; samplesPerSecond = 40301.0
MPI Rank 1: 07/14/2016 12:31:05: Finished Epoch[ 2 of 5]: [Training] ce = 3.67402726 * 20480; err = 0.83730469 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=0.528699s
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:05: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:05: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 28
MPI Rank 1: (GPU): creating curand object with seed 29
MPI Rank 1: (GPU): creating curand object with seed 30
MPI Rank 1: (GPU): creating curand object with seed 31
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.29139347 * 2560; err = 0.77343750 * 2560; time = 0.0706s; samplesPerSecond = 36245.7
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.26643769 * 2560; err = 0.77734375 * 2560; time = 0.0639s; samplesPerSecond = 40048.2
MPI Rank 1: 07/14/2016 12:31:05:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.25540482 * 2560; err = 0.77968750 * 2560; time = 0.0636s; samplesPerSecond = 40280.7
MPI Rank 1: 07/14/2016 12:31:06:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.18506477 * 2560; err = 0.76562500 * 2560; time = 0.0643s; samplesPerSecond = 39789.9
MPI Rank 1: 07/14/2016 12:31:06:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.16975111 * 2560; err = 0.77695313 * 2560; time = 0.0628s; samplesPerSecond = 40765.6
MPI Rank 1: 07/14/2016 12:31:06:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.10348842 * 2560; err = 0.75351563 * 2560; time = 0.0630s; samplesPerSecond = 40628.5
MPI Rank 1: 07/14/2016 12:31:06:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.03528624 * 2560; err = 0.74453125 * 2560; time = 0.0633s; samplesPerSecond = 40469.2
MPI Rank 1: 07/14/2016 12:31:06:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.04793528 * 2560; err = 0.75312500 * 2560; time = 0.0630s; samplesPerSecond = 40647.8
MPI Rank 1: 07/14/2016 12:31:06: Finished Epoch[ 3 of 5]: [Training] ce = 3.16934522 * 20480; err = 0.76552734 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=0.52044s
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:06: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:06: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 32
MPI Rank 1: (GPU): creating curand object with seed 33
MPI Rank 1: (GPU): creating curand object with seed 34
MPI Rank 1: (GPU): creating curand object with seed 35
MPI Rank 1: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.00295194 * 2560; err = 0.73125000 * 2560; time = 0.0687s; samplesPerSecond = 37264.0
MPI Rank 1: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.88291902 * 2560; err = 0.71757812 * 2560; time = 0.0638s; samplesPerSecond = 40114.1
MPI Rank 1: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.84082441 * 2560; err = 0.69296875 * 2560; time = 0.0629s; samplesPerSecond = 40676.2
MPI Rank 1: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.83747733 * 2560; err = 0.72109375 * 2560; time = 0.0632s; samplesPerSecond = 40513.4
MPI Rank 1: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.82151905 * 2560; err = 0.70546875 * 2560; time = 0.0635s; samplesPerSecond = 40301.0
MPI Rank 1: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.71233722 * 2560; err = 0.69648438 * 2560; time = 0.0631s; samplesPerSecond = 40595.0
MPI Rank 1: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.70736644 * 2560; err = 0.68203125 * 2560; time = 0.0633s; samplesPerSecond = 40429.6
MPI Rank 1: 07/14/2016 12:31:06:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.68875924 * 2560; err = 0.67656250 * 2560; time = 0.0638s; samplesPerSecond = 40129.8
MPI Rank 1: 07/14/2016 12:31:06: Finished Epoch[ 4 of 5]: [Training] ce = 2.81176933 * 20480; err = 0.70292969 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=0.518022s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:06: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:06: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/14/2016 12:31:06:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.55157278 * 2560; err = 0.65937500 * 2560; time = 0.0619s; samplesPerSecond = 41366.4
MPI Rank 1: 07/14/2016 12:31:07:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58907775 * 2560; err = 0.65546875 * 2560; time = 0.0641s; samplesPerSecond = 39950.1
MPI Rank 1: 07/14/2016 12:31:07:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.56596201 * 2560; err = 0.65859375 * 2560; time = 0.0668s; samplesPerSecond = 38332.5
MPI Rank 1: 07/14/2016 12:31:07:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.50385330 * 2560; err = 0.62539062 * 2560; time = 0.0611s; samplesPerSecond = 41907.4
MPI Rank 1: 07/14/2016 12:31:07:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.48117527 * 2560; err = 0.62578125 * 2560; time = 0.0595s; samplesPerSecond = 43025.9
MPI Rank 1: 07/14/2016 12:31:07:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.47055498 * 2560; err = 0.63281250 * 2560; time = 0.0611s; samplesPerSecond = 41865.0
MPI Rank 1: 07/14/2016 12:31:07:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.42318143 * 2560; err = 0.61406250 * 2560; time = 0.0613s; samplesPerSecond = 41746.8
MPI Rank 1: 07/14/2016 12:31:07:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.38452355 * 2560; err = 0.62187500 * 2560; time = 0.0595s; samplesPerSecond = 42992.0
MPI Rank 1: 07/14/2016 12:31:07: Finished Epoch[ 5 of 5]: [Training] ce = 2.49623763 * 20480; err = 0.63666992 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.500975s
MPI Rank 1: 07/14/2016 12:31:07: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:07: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:07: __COMPLETED__
MPI Rank 1: ~MPIWrapper
=== Deleting last 2 epochs and restart
==== Re-running from checkpoint
=== Running mpiexec -n 2 /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu DeviceId=0 timestamping=true numCPUThreads=12 stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 12:04:41
		Last modified date: Tue Jul 12 04:28:35 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by philly on 34e58dd0283f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 12:04:41
		Last modified date: Tue Jul 12 04:28:35 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by philly on 34e58dd0283f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
07/14/2016 12:31:09: Redirecting stderr to file /tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr_speechTrain.logrank0
07/14/2016 12:31:09: Redirecting stderr to file /tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr_speechTrain.logrank1
MPI Rank 0: 07/14/2016 12:31:09: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 12:31:09: Build info: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:09: 		Built time: Jul 14 2016 12:04:41
MPI Rank 0: 07/14/2016 12:31:09: 		Last modified date: Tue Jul 12 04:28:35 2016
MPI Rank 0: 07/14/2016 12:31:09: 		Build type: release
MPI Rank 0: 07/14/2016 12:31:09: 		Build target: GPU
MPI Rank 0: 07/14/2016 12:31:09: 		With 1bit-SGD: no
MPI Rank 0: 07/14/2016 12:31:09: 		Math lib: mkl
MPI Rank 0: 07/14/2016 12:31:09: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 0: 07/14/2016 12:31:09: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 07/14/2016 12:31:09: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 0: 07/14/2016 12:31:09: 		Build Branch: HEAD
MPI Rank 0: 07/14/2016 12:31:09: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
MPI Rank 0: 07/14/2016 12:31:09: 		Built by philly on 34e58dd0283f
MPI Rank 0: 07/14/2016 12:31:09: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 0: 07/14/2016 12:31:09: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 12:31:10: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 12:31:10: GPU info:
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 12:31:10: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 12:31:10: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 12:31:10: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 12:31:10: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: Running on localhost at 2016/07/14 12:31:10
MPI Rank 0: 07/14/2016 12:31:10: Command line: 
MPI Rank 0: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/14/2016 12:31:10: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/14/2016 12:31:10: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = 0
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=0
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 0: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 07/14/2016 12:31:10: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 07/14/2016 12:31:10: Commands: speechTrain
MPI Rank 0: 07/14/2016 12:31:10: Precision = "float"
MPI Rank 0: 07/14/2016 12:31:10: Using 12 CPU threads.
MPI Rank 0: 07/14/2016 12:31:10: CNTKModelPath: /tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 0: 07/14/2016 12:31:10: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 07/14/2016 12:31:10: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: ##############################################################################
MPI Rank 0: 07/14/2016 12:31:10: #                                                                            #
MPI Rank 0: 07/14/2016 12:31:10: # Action "train"                                                             #
MPI Rank 0: 07/14/2016 12:31:10: #                                                                            #
MPI Rank 0: 07/14/2016 12:31:10: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.3'.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ErrorPrediction()
MPI Rank 0: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 	featNorm.meanVector = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 36 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: Loaded model with 36 nodes on GPU 0.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: Training criterion node(s):
MPI Rank 0: 07/14/2016 12:31:10: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: 	err = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 0: 0x159cf48: {[featNorm.meanVector Value[363]] }
MPI Rank 0: 0x159f808: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 0: 0x21e7ff8: {[features Value[363 x *]] }
MPI Rank 0: 0x21e8fb8: {[labels Value[132 x *]] }
MPI Rank 0: 0x21ea8d8: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 0: 0x21eac98: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x21ecf98: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x21ed358: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x21ef418: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x21ef7d8: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x21f1368: {[link Value[1 x 1]] }
MPI Rank 0: 0x21f1fe8: {[logPrior._ Value[132]] }
MPI Rank 0: 0x21f2268: {[outLayer.B Value[132 x 1]] }
MPI Rank 0: 0x21f2d38: {[outLayer.W Value[132 x 512]] }
MPI Rank 0: 0x21f94d8: {[err Value[1]] }
MPI Rank 0: 0x21f9698: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 0x21f9858: {[ce Value[1]] }
MPI Rank 0: 0x21f9ad8: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 0: 0x21fa238: {[logPrior Value[132]] }
MPI Rank 0: 0x21fcbf8: {[featNorm Value[363 x *]] }
MPI Rank 0: 0x21fccc8: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 0: 0x21fce28: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x21fd608: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 0: 0x21fd768: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x21fd928: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x21fdae8: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x21fdca8: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x21fde68: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x21fe028: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x21fe1e8: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x21fe3a8: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x21fe568: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x21fe728: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x21fe8e8: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x21feaa8: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x21fec68: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 0: 0x21fee28: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 0: 0x21fefe8: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 0: 0x21ff1a8: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 0: 0x21ffc28: {[ce Gradient[1]] }
MPI Rank 0: 0x21ffde8: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 0: 0x21fffa8: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 0: 0x2200168: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:10: No PreCompute nodes found, skipping PreCompute step.
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:11: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:11: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 12
MPI Rank 0: (GPU): creating curand object with seed 13
MPI Rank 0: (GPU): creating curand object with seed 14
MPI Rank 0: (GPU): creating curand object with seed 15
MPI Rank 0: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.00295194 * 2560; err = 0.73125000 * 2560; time = 0.1949s; samplesPerSecond = 13135.9
MPI Rank 0: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.88291902 * 2560; err = 0.71757812 * 2560; time = 0.0635s; samplesPerSecond = 40318.8
MPI Rank 0: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.84082441 * 2560; err = 0.69296875 * 2560; time = 0.0638s; samplesPerSecond = 40105.9
MPI Rank 0: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.83747733 * 2560; err = 0.72109375 * 2560; time = 0.0652s; samplesPerSecond = 39250.0
MPI Rank 0: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.82151905 * 2560; err = 0.70546875 * 2560; time = 0.0628s; samplesPerSecond = 40791.0
MPI Rank 0: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.71233722 * 2560; err = 0.69648438 * 2560; time = 0.0640s; samplesPerSecond = 39999.4
MPI Rank 0: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.70736644 * 2560; err = 0.68203125 * 2560; time = 0.0646s; samplesPerSecond = 39612.5
MPI Rank 0: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.68875924 * 2560; err = 0.67656250 * 2560; time = 0.0634s; samplesPerSecond = 40370.3
MPI Rank 0: 07/14/2016 12:31:11: Finished Epoch[ 4 of 5]: [Training] ce = 2.81176933 * 20480; err = 0.70292969 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=0.717048s
MPI Rank 0: 07/14/2016 12:31:11: SGD: Saving checkpoint model '/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:11: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:11: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.55157278 * 2560; err = 0.65937500 * 2560; time = 0.0618s; samplesPerSecond = 41446.8
MPI Rank 0: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58907775 * 2560; err = 0.65546875 * 2560; time = 0.0646s; samplesPerSecond = 39647.5
MPI Rank 0: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.56596201 * 2560; err = 0.65859375 * 2560; time = 0.0623s; samplesPerSecond = 41082.3
MPI Rank 0: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.50385330 * 2560; err = 0.62539062 * 2560; time = 0.0603s; samplesPerSecond = 42455.8
MPI Rank 0: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.48117527 * 2560; err = 0.62578125 * 2560; time = 0.0601s; samplesPerSecond = 42592.1
MPI Rank 0: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.47055498 * 2560; err = 0.63281250 * 2560; time = 0.0603s; samplesPerSecond = 42450.9
MPI Rank 0: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.42318143 * 2560; err = 0.61406250 * 2560; time = 0.0599s; samplesPerSecond = 42724.3
MPI Rank 0: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.38452355 * 2560; err = 0.62187500 * 2560; time = 0.0606s; samplesPerSecond = 42255.4
MPI Rank 0: 07/14/2016 12:31:12: Finished Epoch[ 5 of 5]: [Training] ce = 2.49623763 * 20480; err = 0.63666992 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.495414s
MPI Rank 0: 07/14/2016 12:31:12: SGD: Saving checkpoint model '/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn'
MPI Rank 0: 07/14/2016 12:31:12: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:12: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 12:31:12: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 07/14/2016 12:31:09: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 12:31:09: Build info: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:09: 		Built time: Jul 14 2016 12:04:41
MPI Rank 1: 07/14/2016 12:31:09: 		Last modified date: Tue Jul 12 04:28:35 2016
MPI Rank 1: 07/14/2016 12:31:09: 		Build type: release
MPI Rank 1: 07/14/2016 12:31:09: 		Build target: GPU
MPI Rank 1: 07/14/2016 12:31:09: 		With 1bit-SGD: no
MPI Rank 1: 07/14/2016 12:31:09: 		Math lib: mkl
MPI Rank 1: 07/14/2016 12:31:09: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 1: 07/14/2016 12:31:09: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 07/14/2016 12:31:09: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 1: 07/14/2016 12:31:09: 		Build Branch: HEAD
MPI Rank 1: 07/14/2016 12:31:09: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
MPI Rank 1: 07/14/2016 12:31:09: 		Built by philly on 34e58dd0283f
MPI Rank 1: 07/14/2016 12:31:09: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 1: 07/14/2016 12:31:09: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 12:31:10: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 12:31:10: GPU info:
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:10: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 12:31:10: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 12:31:10: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 12:31:10: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 12:31:10: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:10: Running on localhost at 2016/07/14 12:31:10
MPI Rank 1: 07/14/2016 12:31:10: Command line: 
MPI Rank 1: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:10: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/14/2016 12:31:10: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:10: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:10: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/14/2016 12:31:10: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = 0
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:10: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:10: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=0
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 1: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 07/14/2016 12:31:10: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 07/14/2016 12:31:10: Commands: speechTrain
MPI Rank 1: 07/14/2016 12:31:10: Precision = "float"
MPI Rank 1: 07/14/2016 12:31:10: Using 12 CPU threads.
MPI Rank 1: 07/14/2016 12:31:10: CNTKModelPath: /tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 1: 07/14/2016 12:31:10: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 07/14/2016 12:31:10: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:10: ##############################################################################
MPI Rank 1: 07/14/2016 12:31:10: #                                                                            #
MPI Rank 1: 07/14/2016 12:31:10: # Action "train"                                                             #
MPI Rank 1: 07/14/2016 12:31:10: #                                                                            #
MPI Rank 1: 07/14/2016 12:31:10: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:10: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:10: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160714122957.627315/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.3'.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ErrorPrediction()
MPI Rank 1: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 	featNorm.meanVector = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 36 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:11: Loaded model with 36 nodes on GPU 0.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:11: Training criterion node(s):
MPI Rank 1: 07/14/2016 12:31:11: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:11: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:11: 	err = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7f6208bce838: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 1: 0x7f6208bcebf8: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x7f6208bd0ef8: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x7f6208bd12b8: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x7f6208bd33c8: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x7f6208bd3788: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x7f6208bd3928: {[link Value[1 x 1]] }
MPI Rank 1: 0x7f6208bd5fb8: {[logPrior._ Value[132]] }
MPI Rank 1: 0x7f6208bd6238: {[outLayer.B Value[132 x 1]] }
MPI Rank 1: 0x7f6208bd6d08: {[outLayer.W Value[132 x 512]] }
MPI Rank 1: 0x7f6208bdd5f8: {[err Value[1]] }
MPI Rank 1: 0x7f6208bdd7b8: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 0x7f6208bdd978: {[ce Value[1]] }
MPI Rank 1: 0x7f6208bddbf8: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 1: 0x7f6208bde318: {[logPrior Value[132]] }
MPI Rank 1: 0x7f6208be0488: {[featNorm Value[363 x *]] }
MPI Rank 1: 0x7f6208be06d8: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 1: 0x7f6208be12a8: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x7f6208be1408: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 1: 0x7f6208be15c8: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x7f6208be1788: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f6208be1948: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x7f6208be1b08: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x7f6208be1cc8: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f6208be1e88: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x7f6208be2048: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f6208be2208: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x7f6208be23c8: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x7f6208be2588: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f6208be2748: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x7f6208be2908: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f6208be2ac8: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 1: 0x7f6208be2c88: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 1: 0x7f6208be2e48: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 1: 0x7f6208be3008: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 1: 0x7f6208be3ae8: {[ce Gradient[1]] }
MPI Rank 1: 0x7f6208be3ca8: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7f6208be3e68: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7f6208be4028: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 1: 0x7f6208d68408: {[labels Value[132 x *]] }
MPI Rank 1: 0x7f621f485c98: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 1: 0x7f621f48b468: {[featNorm.meanVector Value[363]] }
MPI Rank 1: 0x7f621f48b5c8: {[features Value[363 x *]] }
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:11: No PreCompute nodes found, skipping PreCompute step.
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:11: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:11: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 32
MPI Rank 1: (GPU): creating curand object with seed 33
MPI Rank 1: (GPU): creating curand object with seed 34
MPI Rank 1: (GPU): creating curand object with seed 35
MPI Rank 1: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.00295194 * 2560; err = 0.73125000 * 2560; time = 0.2116s; samplesPerSecond = 12095.5
MPI Rank 1: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.88291902 * 2560; err = 0.71757812 * 2560; time = 0.0633s; samplesPerSecond = 40462.8
MPI Rank 1: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.84082441 * 2560; err = 0.69296875 * 2560; time = 0.0638s; samplesPerSecond = 40125.4
MPI Rank 1: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.83747733 * 2560; err = 0.72109375 * 2560; time = 0.0652s; samplesPerSecond = 39269.2
MPI Rank 1: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.82151905 * 2560; err = 0.70546875 * 2560; time = 0.0629s; samplesPerSecond = 40728.0
MPI Rank 1: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.71233722 * 2560; err = 0.69648438 * 2560; time = 0.0638s; samplesPerSecond = 40112.2
MPI Rank 1: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.70736644 * 2560; err = 0.68203125 * 2560; time = 0.0646s; samplesPerSecond = 39619.9
MPI Rank 1: 07/14/2016 12:31:11:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.68875924 * 2560; err = 0.67656250 * 2560; time = 0.0635s; samplesPerSecond = 40335.9
MPI Rank 1: 07/14/2016 12:31:11: Finished Epoch[ 4 of 5]: [Training] ce = 2.81176933 * 20480; err = 0.70292969 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=0.716844s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:11: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:11: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.55157278 * 2560; err = 0.65937500 * 2560; time = 0.0615s; samplesPerSecond = 41594.2
MPI Rank 1: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58907775 * 2560; err = 0.65546875 * 2560; time = 0.0647s; samplesPerSecond = 39541.0
MPI Rank 1: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.56596201 * 2560; err = 0.65859375 * 2560; time = 0.0621s; samplesPerSecond = 41255.1
MPI Rank 1: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.50385330 * 2560; err = 0.62539062 * 2560; time = 0.0603s; samplesPerSecond = 42427.7
MPI Rank 1: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.48117527 * 2560; err = 0.62578125 * 2560; time = 0.0600s; samplesPerSecond = 42672.4
MPI Rank 1: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.47055498 * 2560; err = 0.63281250 * 2560; time = 0.0602s; samplesPerSecond = 42524.9
MPI Rank 1: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.42318143 * 2560; err = 0.61406250 * 2560; time = 0.0599s; samplesPerSecond = 42770.7
MPI Rank 1: 07/14/2016 12:31:12:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.38452355 * 2560; err = 0.62187500 * 2560; time = 0.0605s; samplesPerSecond = 42309.2
MPI Rank 1: 07/14/2016 12:31:12: Finished Epoch[ 5 of 5]: [Training] ce = 2.49623763 * 20480; err = 0.63666992 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.495307s
MPI Rank 1: 07/14/2016 12:31:12: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:12: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 12:31:12: __COMPLETED__
MPI Rank 1: ~MPIWrapper