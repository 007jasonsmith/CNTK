CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3565 @ 3.20GHz
    Hardware threads: 8
    Total Memory: 12580436 kB
-------------------------------------------------------------------
=== Running C:\Program Files\Microsoft MPI\Bin\/mpiexec.exe -n 2 C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu DeviceId=-1 timestamping=true numCPUThreads=4 stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 05:11:35
		Last modified date: Thu Jul 14 03:20:47 2016
		Build type: Debug
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 05:11:35
		Last modified date: Thu Jul 14 03:20:47 2016
		Build type: Debug
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [mpihelper]: all 2 nodes responded
MPI Rank 0: 07/14/2016 05:51:42: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr_speechTrain.logrank0
MPI Rank 0: 07/14/2016 05:51:42: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 05:51:42: Build info: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:42: 		Built time: Jul 14 2016 05:11:35
MPI Rank 0: 07/14/2016 05:51:42: 		Last modified date: Thu Jul 14 03:20:47 2016
MPI Rank 0: 07/14/2016 05:51:42: 		Build type: Debug
MPI Rank 0: 07/14/2016 05:51:42: 		Build target: GPU
MPI Rank 0: 07/14/2016 05:51:42: 		With 1bit-SGD: no
MPI Rank 0: 07/14/2016 05:51:42: 		Math lib: mkl
MPI Rank 0: 07/14/2016 05:51:42: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 0: 07/14/2016 05:51:42: 		CUB_PATH: C:\src\cub-1.4.1
MPI Rank 0: 07/14/2016 05:51:42: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 0: 07/14/2016 05:51:42: 		Build Branch: HEAD
MPI Rank 0: 07/14/2016 05:51:42: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
MPI Rank 0: 07/14/2016 05:51:42: 		Built by svcphil on liana-08-w
MPI Rank 0: 07/14/2016 05:51:42: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 0: 07/14/2016 05:51:42: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 05:51:43: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 05:51:43: GPU info:
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:43: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
MPI Rank 0: 07/14/2016 05:51:43: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:43: Running on cntk-muc01 at 2016/07/14 05:51:43
MPI Rank 0: 07/14/2016 05:51:43: Command line: 
MPI Rank 0: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu  DeviceId=-1  timestamping=true  numCPUThreads=4  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:43: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/14/2016 05:51:43: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=4
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:43: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:43: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/14/2016 05:51:43: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = -1
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=4
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:43: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:43: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=-1
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=4
MPI Rank 0: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 07/14/2016 05:51:43: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 07/14/2016 05:51:43: Commands: speechTrain
MPI Rank 0: 07/14/2016 05:51:43: Precision = "float"
MPI Rank 0: 07/14/2016 05:51:43: Using 4 CPU threads.
MPI Rank 0: 07/14/2016 05:51:43: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn
MPI Rank 0: 07/14/2016 05:51:43: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 07/14/2016 05:51:43: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:43: ##############################################################################
MPI Rank 0: 07/14/2016 05:51:43: #                                                                            #
MPI Rank 0: 07/14/2016 05:51:43: # Action "train"                                                             #
MPI Rank 0: 07/14/2016 05:51:43: #                                                                            #
MPI Rank 0: 07/14/2016 05:51:43: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:43: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:46: Creating virgin network.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ErrorPrediction()
MPI Rank 0: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 	featNorm.meanVector = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 36 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:46: Created model with 36 nodes on CPU.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:46: Training criterion node(s):
MPI Rank 0: 07/14/2016 05:51:46: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:46: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:46: 	err = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: 0000000000000000: {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 0: 00000099DCBB75B0: {[labels Value[132 x *]] }
MPI Rank 0: 00000099DCBB7680: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 00000099DCBB78F0: {[features Value[363 x *]] }
MPI Rank 0: 00000099DCBB7A90: {[link Value[1 x 1]] }
MPI Rank 0: 00000099DCBB7C30: {[outLayer.W Value[132 x 512]] }
MPI Rank 0: 00000099DCBB7EA0: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 0: 00000099DCBB81E0: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 00000099DCBB8380: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 0: 00000099DCBB8C70: {[featNorm.meanVector Value[363]] }
MPI Rank 0: 00000099DCBB8D40: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 00000099DCBB8E10: {[outLayer.B Value[132 x 1]] }
MPI Rank 0: 00000099DCBB8EE0: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 00000099DCBB8FB0: {[logPrior._ Value[132]] }
MPI Rank 0: 00000099DCBB92F0: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 00000099DCBB93C0: {[err Value[1]] }
MPI Rank 0: 00000099DCBB9490: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 00000099DCCDF7E0: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 00000099DCCDF980: {[logPrior Value[132]] }
MPI Rank 0: 00000099DCCDFD90: {[featNorm Value[363 x *]] }
MPI Rank 0: 00000099DCCDFE60: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 00000099DCCDFF30: {[ce Value[1]] }
MPI Rank 0: 00000099DCCE0000: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 0: 00000099DCCE01A0: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 00000099DCCE0270: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 0: 00000099DCCE0340: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 00000099DCCE0410: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 0: 00000099DCCE04E0: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 00000099DCCE05B0: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 0: 00000099DCCE0680: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 0: 00000099DE45F110: {[ce Gradient[1]] }
MPI Rank 0: 00000099DE45F2B0: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 00000099DE45FBA0: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 0: 00000099DE45FD40: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 0: 00000099DE460490: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 0: 00000099DE460560: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 0: 00000099DE460970: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 0: 00000099DE460B10: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 0: 00000099DE460BE0: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 0: 00000099DE8CEF10: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 00000099DE8CEFE0: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 00000099DE8CF0B0: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 00000099DE8CF180: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 0: 00000099DE8CF590: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:46: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:51:46: 	featNorm.meanVector = Mean()
MPI Rank 0: 07/14/2016 05:51:46: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 07/14/2016 05:51:46: 	logPrior._ = Mean()
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:52:39: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Setting dropout rate to 0.1.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:52:40: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:52:40: Starting minibatch loop.
MPI Rank 0: 07/14/2016 05:52:52:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 10.61264801 * 2560; err = 0.94414062 * 2560; time = 12.6889s; samplesPerSecond = 201.8
MPI Rank 0: 07/14/2016 05:53:05:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 9.52569427 * 2560; err = 0.94218750 * 2560; time = 12.1502s; samplesPerSecond = 210.7
MPI Rank 0: 07/14/2016 05:53:17:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 5.80332336 * 2560; err = 0.91523438 * 2560; time = 12.9791s; samplesPerSecond = 197.2
MPI Rank 0: 07/14/2016 05:53:30:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 4.50911255 * 2560; err = 0.91796875 * 2560; time = 12.1513s; samplesPerSecond = 210.7
MPI Rank 0: 07/14/2016 05:53:42:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.17114868 * 2560; err = 0.89296875 * 2560; time = 12.1266s; samplesPerSecond = 211.1
MPI Rank 0: 07/14/2016 05:53:55:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 4.01416016 * 2560; err = 0.90000000 * 2560; time = 13.5935s; samplesPerSecond = 188.3
MPI Rank 0: 07/14/2016 05:54:08:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.94895020 * 2560; err = 0.86914063 * 2560; time = 12.3603s; samplesPerSecond = 207.1
MPI Rank 0: 07/14/2016 05:54:15:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.95422058 * 2560; err = 0.88632813 * 2560; time = 7.1086s; samplesPerSecond = 360.1
MPI Rank 0: 07/14/2016 05:54:15: Finished Epoch[ 1 of 5]: [Training] ce = 5.81740723 * 20480; err = 0.90849609 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=95.1806s
MPI Rank 0: 07/14/2016 05:54:15: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn.1'
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:54:15: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:54:15: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/14/2016 05:54:23:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.91872851 * 2560; err = 0.86875000 * 2560; time = 8.0130s; samplesPerSecond = 319.5
MPI Rank 0: 07/14/2016 05:54:31:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.84357055 * 2560; err = 0.86914063 * 2560; time = 7.8173s; samplesPerSecond = 327.5
MPI Rank 0: 07/14/2016 05:54:39:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.80774573 * 2560; err = 0.84921875 * 2560; time = 7.9690s; samplesPerSecond = 321.2
MPI Rank 0: 07/14/2016 05:54:47:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.72405988 * 2560; err = 0.84335938 * 2560; time = 7.6094s; samplesPerSecond = 336.4
MPI Rank 0: 07/14/2016 05:54:54:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.64167142 * 2560; err = 0.81914062 * 2560; time = 7.8687s; samplesPerSecond = 325.3
MPI Rank 0: 07/14/2016 05:55:02:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.54793239 * 2560; err = 0.83906250 * 2560; time = 7.7827s; samplesPerSecond = 328.9
MPI Rank 0: 07/14/2016 05:55:10:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.50518116 * 2560; err = 0.81445313 * 2560; time = 7.5856s; samplesPerSecond = 337.5
MPI Rank 0: 07/14/2016 05:55:18:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.37443992 * 2560; err = 0.80781250 * 2560; time = 8.0039s; samplesPerSecond = 319.8
MPI Rank 0: 07/14/2016 05:55:18: Finished Epoch[ 2 of 5]: [Training] ce = 3.67041619 * 20480; err = 0.83886719 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=62.6783s
MPI Rank 0: 07/14/2016 05:55:18: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn.2'
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:55:18: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:55:18: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/14/2016 05:55:26:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.39371496 * 2560; err = 0.79453125 * 2560; time = 7.8713s; samplesPerSecond = 325.2
MPI Rank 0: 07/14/2016 05:55:33:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.28519344 * 2560; err = 0.79218750 * 2560; time = 7.4931s; samplesPerSecond = 341.6
MPI Rank 0: 07/14/2016 05:55:41:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.28963907 * 2560; err = 0.78242188 * 2560; time = 7.4599s; samplesPerSecond = 343.2
MPI Rank 0: 07/14/2016 05:55:49:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.27551918 * 2560; err = 0.79804688 * 2560; time = 7.7316s; samplesPerSecond = 331.1
MPI Rank 0: 07/14/2016 05:55:56:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.15880115 * 2560; err = 0.77382812 * 2560; time = 7.5749s; samplesPerSecond = 338.0
MPI Rank 0: 07/14/2016 05:56:04:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.19646583 * 2560; err = 0.76796875 * 2560; time = 8.0190s; samplesPerSecond = 319.2
MPI Rank 0: 07/14/2016 05:56:12:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.15745525 * 2560; err = 0.76328125 * 2560; time = 7.7940s; samplesPerSecond = 328.5
MPI Rank 0: 07/14/2016 05:56:20:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.06263722 * 2560; err = 0.75312500 * 2560; time = 7.7898s; samplesPerSecond = 328.6
MPI Rank 0: 07/14/2016 05:56:20: Finished Epoch[ 3 of 5]: [Training] ce = 3.22742826 * 20480; err = 0.77817383 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=61.763s
MPI Rank 0: 07/14/2016 05:56:20: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn.3'
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:56:20: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:56:20: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/14/2016 05:56:28:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.04339664 * 2560; err = 0.74492187 * 2560; time = 7.6096s; samplesPerSecond = 336.4
MPI Rank 0: 07/14/2016 05:56:35:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.95825222 * 2560; err = 0.71757812 * 2560; time = 7.4660s; samplesPerSecond = 342.9
MPI Rank 0: 07/14/2016 05:56:43:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.90843762 * 2560; err = 0.72421875 * 2560; time = 7.8818s; samplesPerSecond = 324.8
MPI Rank 0: 07/14/2016 05:56:51:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.89464768 * 2560; err = 0.71640625 * 2560; time = 7.9969s; samplesPerSecond = 320.1
MPI Rank 0: 07/14/2016 05:56:59:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.83440068 * 2560; err = 0.72031250 * 2560; time = 7.7515s; samplesPerSecond = 330.3
MPI Rank 0: 07/14/2016 05:57:07:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.77729006 * 2560; err = 0.68007812 * 2560; time = 7.8401s; samplesPerSecond = 326.5
MPI Rank 0: 07/14/2016 05:57:14:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.73071406 * 2560; err = 0.68359375 * 2560; time = 7.6819s; samplesPerSecond = 333.3
MPI Rank 0: 07/14/2016 05:57:22:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.74671722 * 2560; err = 0.69218750 * 2560; time = 7.8228s; samplesPerSecond = 327.2
MPI Rank 0: 07/14/2016 05:57:22: Finished Epoch[ 4 of 5]: [Training] ce = 2.86173202 * 20480; err = 0.70991211 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=62.0721s
MPI Rank 0: 07/14/2016 05:57:22: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:57:22: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:57:23: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/14/2016 05:57:29:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.62138931 * 2560; err = 0.66757813 * 2560; time = 6.5044s; samplesPerSecond = 393.6
MPI Rank 0: 07/14/2016 05:57:36:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58290846 * 2560; err = 0.65664062 * 2560; time = 6.5909s; samplesPerSecond = 388.4
MPI Rank 0: 07/14/2016 05:57:42:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.53379622 * 2560; err = 0.64531250 * 2560; time = 6.4343s; samplesPerSecond = 397.9
MPI Rank 0: 07/14/2016 05:57:48:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.51124316 * 2560; err = 0.64687500 * 2560; time = 5.8994s; samplesPerSecond = 433.9
MPI Rank 0: 07/14/2016 05:57:55:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.44015949 * 2560; err = 0.62695313 * 2560; time = 6.9342s; samplesPerSecond = 369.2
MPI Rank 0: 07/14/2016 05:58:01:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.40351964 * 2560; err = 0.62382812 * 2560; time = 6.5227s; samplesPerSecond = 392.5
MPI Rank 0: 07/14/2016 05:58:07:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.40518999 * 2560; err = 0.62500000 * 2560; time = 6.0332s; samplesPerSecond = 424.3
MPI Rank 0: 07/14/2016 05:58:14:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.35717092 * 2560; err = 0.62304688 * 2560; time = 6.1518s; samplesPerSecond = 416.1
MPI Rank 0: 07/14/2016 05:58:14: Finished Epoch[ 5 of 5]: [Training] ce = 2.48192215 * 20480; err = 0.63940430 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=51.0997s
MPI Rank 0: 07/14/2016 05:58:14: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn'
MPI Rank 0: 07/14/2016 05:58:14: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:14: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:14: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 07/14/2016 05:51:43: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr_speechTrain.logrank1
MPI Rank 1: 07/14/2016 05:51:43: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 05:51:43: Build info: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:43: 		Built time: Jul 14 2016 05:11:35
MPI Rank 1: 07/14/2016 05:51:43: 		Last modified date: Thu Jul 14 03:20:47 2016
MPI Rank 1: 07/14/2016 05:51:43: 		Build type: Debug
MPI Rank 1: 07/14/2016 05:51:43: 		Build target: GPU
MPI Rank 1: 07/14/2016 05:51:43: 		With 1bit-SGD: no
MPI Rank 1: 07/14/2016 05:51:43: 		Math lib: mkl
MPI Rank 1: 07/14/2016 05:51:43: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 1: 07/14/2016 05:51:43: 		CUB_PATH: C:\src\cub-1.4.1
MPI Rank 1: 07/14/2016 05:51:43: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 1: 07/14/2016 05:51:43: 		Build Branch: HEAD
MPI Rank 1: 07/14/2016 05:51:43: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
MPI Rank 1: 07/14/2016 05:51:43: 		Built by svcphil on liana-08-w
MPI Rank 1: 07/14/2016 05:51:43: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 1: 07/14/2016 05:51:43: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 05:51:43: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 05:51:43: GPU info:
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:43: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
MPI Rank 1: 07/14/2016 05:51:43: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:43: Running on cntk-muc01 at 2016/07/14 05:51:43
MPI Rank 1: 07/14/2016 05:51:43: Command line: 
MPI Rank 1: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu  DeviceId=-1  timestamping=true  numCPUThreads=4  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:43: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/14/2016 05:51:43: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=4
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:43: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:43: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/14/2016 05:51:43: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = -1
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=4
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:43: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:43: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=-1
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=4
MPI Rank 1: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 07/14/2016 05:51:43: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 07/14/2016 05:51:43: Commands: speechTrain
MPI Rank 1: 07/14/2016 05:51:43: Precision = "float"
MPI Rank 1: 07/14/2016 05:51:43: Using 4 CPU threads.
MPI Rank 1: 07/14/2016 05:51:43: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn
MPI Rank 1: 07/14/2016 05:51:43: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 07/14/2016 05:51:43: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:43: ##############################################################################
MPI Rank 1: 07/14/2016 05:51:43: #                                                                            #
MPI Rank 1: 07/14/2016 05:51:43: # Action "train"                                                             #
MPI Rank 1: 07/14/2016 05:51:43: #                                                                            #
MPI Rank 1: 07/14/2016 05:51:43: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:43: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:46: Creating virgin network.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ErrorPrediction()
MPI Rank 1: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 	featNorm.meanVector = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 36 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:46: Created model with 36 nodes on CPU.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:46: Training criterion node(s):
MPI Rank 1: 07/14/2016 05:51:46: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:46: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:46: 	err = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: 0000000000000000: {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 1: 000000135B0908F0: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 000000135B0909C0: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 000000135B090A90: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 1: 000000135B090B60: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 000000135B090C30: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 1: 000000135B090DD0: {[logPrior Value[132]] }
MPI Rank 1: 000000135B090EA0: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 1: 000000135B090F70: {[featNorm Value[363 x *]] }
MPI Rank 1: 000000135B091040: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 000000135B091110: {[ce Value[1]] }
MPI Rank 1: 000000135B0911E0: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 1: 000000135B091380: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 000000135B0915F0: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 1: 00000013635E6730: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 00000013635E7840: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 00000013635E7910: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 00000013635E7DF0: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 00000013635E8060: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 1: 00000013780264D0: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 1: 0000001378026670: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 1: 0000001378026810: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 1: 0000001378026E90: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 1: 0000001378026F60: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 1: 0000001378027030: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 1: 0000001378027440: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 1: 0000001378027ED0: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0000001378027FA0: {[ce Gradient[1]] }
MPI Rank 1: 00000013799E4BF0: {[labels Value[132 x *]] }
MPI Rank 1: 00000013799E51A0: {[outLayer.W Value[132 x 512]] }
MPI Rank 1: 00000013799E5270: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 00000013799E5340: {[outLayer.B Value[132 x 1]] }
MPI Rank 1: 00000013799E55B0: {[logPrior._ Value[132]] }
MPI Rank 1: 00000013799E5680: {[err Value[1]] }
MPI Rank 1: 00000013799E5750: {[features Value[363 x *]] }
MPI Rank 1: 00000013799E5820: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 00000013799E58F0: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 00000013799E5A90: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 1: 00000013799E5EA0: {[featNorm.meanVector Value[363]] }
MPI Rank 1: 00000013799E6040: {[link Value[1 x 1]] }
MPI Rank 1: 00000013799E62B0: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 00000013799E65F0: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 00000013799E6790: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 1: 00000013799E6930: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:46: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:51:46: 	featNorm.meanVector = Mean()
MPI Rank 1: 07/14/2016 05:51:46: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 07/14/2016 05:51:46: 	logPrior._ = Mean()
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:52:39: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Setting dropout rate to 0.1.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:52:40: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:52:40: Starting minibatch loop.
MPI Rank 1: 07/14/2016 05:52:52:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 10.61264801 * 2560; err = 0.94414062 * 2560; time = 12.1970s; samplesPerSecond = 209.9
MPI Rank 1: 07/14/2016 05:53:04:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 9.52569427 * 2560; err = 0.94218750 * 2560; time = 12.4487s; samplesPerSecond = 205.6
MPI Rank 1: 07/14/2016 05:53:16:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 5.80332336 * 2560; err = 0.91523438 * 2560; time = 11.6602s; samplesPerSecond = 219.6
MPI Rank 1: 07/14/2016 05:53:27:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 4.50911255 * 2560; err = 0.91796875 * 2560; time = 11.1718s; samplesPerSecond = 229.1
MPI Rank 1: 07/14/2016 05:53:37:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.17114868 * 2560; err = 0.89296875 * 2560; time = 10.2965s; samplesPerSecond = 248.6
MPI Rank 1: 07/14/2016 05:53:47:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 4.01416016 * 2560; err = 0.90000000 * 2560; time = 9.9309s; samplesPerSecond = 257.8
MPI Rank 1: 07/14/2016 05:53:58:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.94895020 * 2560; err = 0.86914063 * 2560; time = 10.3032s; samplesPerSecond = 248.5
MPI Rank 1: 07/14/2016 05:54:09:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.95422058 * 2560; err = 0.88632813 * 2560; time = 11.3483s; samplesPerSecond = 225.6
MPI Rank 1: 07/14/2016 05:54:09: Finished Epoch[ 1 of 5]: [Training] ce = 5.81740723 * 20480; err = 0.90849609 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=89.3792s
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:54:15: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:54:15: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/14/2016 05:54:23:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.91872851 * 2560; err = 0.86875000 * 2560; time = 8.0183s; samplesPerSecond = 319.3
MPI Rank 1: 07/14/2016 05:54:31:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.84357055 * 2560; err = 0.86914063 * 2560; time = 7.7750s; samplesPerSecond = 329.3
MPI Rank 1: 07/14/2016 05:54:39:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.80774573 * 2560; err = 0.84921875 * 2560; time = 8.1054s; samplesPerSecond = 315.8
MPI Rank 1: 07/14/2016 05:54:46:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.72405988 * 2560; err = 0.84335938 * 2560; time = 7.5025s; samplesPerSecond = 341.2
MPI Rank 1: 07/14/2016 05:54:54:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.64167142 * 2560; err = 0.81914062 * 2560; time = 7.8811s; samplesPerSecond = 324.8
MPI Rank 1: 07/14/2016 05:55:02:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.54793239 * 2560; err = 0.83906250 * 2560; time = 7.8345s; samplesPerSecond = 326.8
MPI Rank 1: 07/14/2016 05:55:10:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.50518116 * 2560; err = 0.81445313 * 2560; time = 7.7009s; samplesPerSecond = 332.4
MPI Rank 1: 07/14/2016 05:55:18:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.37443992 * 2560; err = 0.80781250 * 2560; time = 7.8096s; samplesPerSecond = 327.8
MPI Rank 1: 07/14/2016 05:55:18: Finished Epoch[ 2 of 5]: [Training] ce = 3.67041619 * 20480; err = 0.83886719 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=62.6783s
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:55:18: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:55:18: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/14/2016 05:55:26:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.39371496 * 2560; err = 0.79453125 * 2560; time = 7.8778s; samplesPerSecond = 325.0
MPI Rank 1: 07/14/2016 05:55:33:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.28519344 * 2560; err = 0.79218750 * 2560; time = 7.4941s; samplesPerSecond = 341.6
MPI Rank 1: 07/14/2016 05:55:41:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.28963907 * 2560; err = 0.78242188 * 2560; time = 7.4602s; samplesPerSecond = 343.2
MPI Rank 1: 07/14/2016 05:55:49:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.27551918 * 2560; err = 0.79804688 * 2560; time = 7.6876s; samplesPerSecond = 333.0
MPI Rank 1: 07/14/2016 05:55:56:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.15880115 * 2560; err = 0.77382812 * 2560; time = 7.5956s; samplesPerSecond = 337.0
MPI Rank 1: 07/14/2016 05:56:04:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.19646583 * 2560; err = 0.76796875 * 2560; time = 8.0177s; samplesPerSecond = 319.3
MPI Rank 1: 07/14/2016 05:56:12:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.15745525 * 2560; err = 0.76328125 * 2560; time = 8.0285s; samplesPerSecond = 318.9
MPI Rank 1: 07/14/2016 05:56:20:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.06263722 * 2560; err = 0.75312500 * 2560; time = 7.5786s; samplesPerSecond = 337.8
MPI Rank 1: 07/14/2016 05:56:20: Finished Epoch[ 3 of 5]: [Training] ce = 3.22742826 * 20480; err = 0.77817383 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=61.763s
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:56:20: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:56:20: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/14/2016 05:56:28:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.04339664 * 2560; err = 0.74492187 * 2560; time = 7.6140s; samplesPerSecond = 336.2
MPI Rank 1: 07/14/2016 05:56:35:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.95825222 * 2560; err = 0.71757812 * 2560; time = 7.4531s; samplesPerSecond = 343.5
MPI Rank 1: 07/14/2016 05:56:43:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.90843762 * 2560; err = 0.72421875 * 2560; time = 7.8519s; samplesPerSecond = 326.0
MPI Rank 1: 07/14/2016 05:56:51:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.89464768 * 2560; err = 0.71640625 * 2560; time = 7.9965s; samplesPerSecond = 320.1
MPI Rank 1: 07/14/2016 05:56:59:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.83440068 * 2560; err = 0.72031250 * 2560; time = 7.7518s; samplesPerSecond = 330.2
MPI Rank 1: 07/14/2016 05:57:07:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.77729006 * 2560; err = 0.68007812 * 2560; time = 7.9156s; samplesPerSecond = 323.4
MPI Rank 1: 07/14/2016 05:57:14:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.73071406 * 2560; err = 0.68359375 * 2560; time = 7.6512s; samplesPerSecond = 334.6
MPI Rank 1: 07/14/2016 05:57:22:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.74671722 * 2560; err = 0.69218750 * 2560; time = 7.8204s; samplesPerSecond = 327.4
MPI Rank 1: 07/14/2016 05:57:22: Finished Epoch[ 4 of 5]: [Training] ce = 2.86173202 * 20480; err = 0.70991211 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=62.0721s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:57:22: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:57:23: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/14/2016 05:57:29:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.62138931 * 2560; err = 0.66757813 * 2560; time = 6.5093s; samplesPerSecond = 393.3
MPI Rank 1: 07/14/2016 05:57:35:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58290846 * 2560; err = 0.65664062 * 2560; time = 6.4699s; samplesPerSecond = 395.7
MPI Rank 1: 07/14/2016 05:57:42:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.53379622 * 2560; err = 0.64531250 * 2560; time = 6.4137s; samplesPerSecond = 399.1
MPI Rank 1: 07/14/2016 05:57:48:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.51124316 * 2560; err = 0.64687500 * 2560; time = 6.0400s; samplesPerSecond = 423.8
MPI Rank 1: 07/14/2016 05:57:55:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.44015949 * 2560; err = 0.62695313 * 2560; time = 6.9353s; samplesPerSecond = 369.1
MPI Rank 1: 07/14/2016 05:58:01:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.40351964 * 2560; err = 0.62382812 * 2560; time = 6.5229s; samplesPerSecond = 392.5
MPI Rank 1: 07/14/2016 05:58:07:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.40518999 * 2560; err = 0.62500000 * 2560; time = 5.9370s; samplesPerSecond = 431.2
MPI Rank 1: 07/14/2016 05:58:14:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.35717092 * 2560; err = 0.62304688 * 2560; time = 6.2479s; samplesPerSecond = 409.7
MPI Rank 1: 07/14/2016 05:58:14: Finished Epoch[ 5 of 5]: [Training] ce = 2.48192215 * 20480; err = 0.63940430 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=51.0997s
MPI Rank 1: 07/14/2016 05:58:14: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:14: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:14: __COMPLETED__
MPI Rank 1: ~MPIWrapper
=== Deleting last 2 epochs and restart
==== Re-running from checkpoint
=== Running C:\Program Files\Microsoft MPI\Bin\/mpiexec.exe -n 2 C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu DeviceId=-1 timestamping=true numCPUThreads=4 stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 05:11:35
		Last modified date: Thu Jul 14 03:20:47 2016
		Build type: Debug
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 05:11:35
		Last modified date: Thu Jul 14 03:20:47 2016
		Build type: Debug
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [mpihelper]: all 2 nodes responded
MPI Rank 0: 07/14/2016 05:58:16: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr_speechTrain.logrank0
MPI Rank 0: 07/14/2016 05:58:16: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 05:58:16: Build info: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:16: 		Built time: Jul 14 2016 05:11:35
MPI Rank 0: 07/14/2016 05:58:16: 		Last modified date: Thu Jul 14 03:20:47 2016
MPI Rank 0: 07/14/2016 05:58:16: 		Build type: Debug
MPI Rank 0: 07/14/2016 05:58:16: 		Build target: GPU
MPI Rank 0: 07/14/2016 05:58:16: 		With 1bit-SGD: no
MPI Rank 0: 07/14/2016 05:58:16: 		Math lib: mkl
MPI Rank 0: 07/14/2016 05:58:16: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 0: 07/14/2016 05:58:16: 		CUB_PATH: C:\src\cub-1.4.1
MPI Rank 0: 07/14/2016 05:58:16: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 0: 07/14/2016 05:58:16: 		Build Branch: HEAD
MPI Rank 0: 07/14/2016 05:58:16: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
MPI Rank 0: 07/14/2016 05:58:16: 		Built by svcphil on liana-08-w
MPI Rank 0: 07/14/2016 05:58:16: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 0: 07/14/2016 05:58:16: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 05:58:16: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 05:58:16: GPU info:
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:16: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
MPI Rank 0: 07/14/2016 05:58:16: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:16: Running on cntk-muc01 at 2016/07/14 05:58:16
MPI Rank 0: 07/14/2016 05:58:16: Command line: 
MPI Rank 0: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu  DeviceId=-1  timestamping=true  numCPUThreads=4  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:16: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/14/2016 05:58:16: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=4
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:16: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:16: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/14/2016 05:58:16: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = -1
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=4
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:16: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:16: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=-1
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=4
MPI Rank 0: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 07/14/2016 05:58:16: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 07/14/2016 05:58:16: Commands: speechTrain
MPI Rank 0: 07/14/2016 05:58:16: Precision = "float"
MPI Rank 0: 07/14/2016 05:58:16: Using 4 CPU threads.
MPI Rank 0: 07/14/2016 05:58:16: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn
MPI Rank 0: 07/14/2016 05:58:16: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 07/14/2016 05:58:16: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:16: ##############################################################################
MPI Rank 0: 07/14/2016 05:58:16: #                                                                            #
MPI Rank 0: 07/14/2016 05:58:16: # Action "train"                                                             #
MPI Rank 0: 07/14/2016 05:58:16: #                                                                            #
MPI Rank 0: 07/14/2016 05:58:16: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:16: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:19: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn.3'.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ErrorPrediction()
MPI Rank 0: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 	featNorm.meanVector = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 36 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:19: Loaded model with 36 nodes on CPU.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:19: Training criterion node(s):
MPI Rank 0: 07/14/2016 05:58:19: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:19: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:19: 	err = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: 0000000000000000: {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 0: 0000004471EA33A0: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0000004471EA3D60: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0000004471EA4240: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0000004471EA43E0: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0000004471EA4580: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 0: 000000447A2FFBA0: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 0: 000000447A2FFC70: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 000000447A300150: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 0: 000000447A300560: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 0: 000000447A300CB0: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 0: 000000447A300FF0: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 0: 000000447A301330: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 0: 000000447A3018E0: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 0: 000000447A301A80: {[ce Gradient[1]] }
MPI Rank 0: 000000447A3307E0: {[logPrior Value[132]] }
MPI Rank 0: 000000447A3308B0: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 000000447A330980: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 000000447A330A50: {[featNorm Value[363 x *]] }
MPI Rank 0: 000000447A330B20: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 000000447A330BF0: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 000000447A330CC0: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 0: 000000447A331000: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 0: 000000447A3311A0: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 0: 000000447A331270: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 000000447A331340: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 0: 000000447A331410: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 0: 000000447A3315B0: {[ce Value[1]] }
MPI Rank 0: 000000447D06F560: {[outLayer.B Value[132 x 1]] }
MPI Rank 0: 000000447D06F630: {[outLayer.W Value[132 x 512]] }
MPI Rank 0: 000000447D06F700: {[err Value[1]] }
MPI Rank 0: 000000447D06F7D0: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 000000447D06F8A0: {[features Value[363 x *]] }
MPI Rank 0: 000000447D06FCB0: {[labels Value[132 x *]] }
MPI Rank 0: 000000447D06FE50: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 000000447D06FF20: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 000000447D06FFF0: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 000000447D070260: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 0: 000000447D070B50: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 000000447D070C20: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 0: 000000447D0711D0: {[featNorm.meanVector Value[363]] }
MPI Rank 0: 000000447D0712A0: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 000000447D071370: {[link Value[1 x 1]] }
MPI Rank 0: 000000447D071440: {[logPrior._ Value[132]] }
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:19: No PreCompute nodes found, skipping PreCompute step.
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:20: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:58:23: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/14/2016 05:58:31:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.04339664 * 2560; err = 0.74492187 * 2560; time = 7.6172s; samplesPerSecond = 336.1
MPI Rank 0: 07/14/2016 05:58:39:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.95825222 * 2560; err = 0.71757812 * 2560; time = 8.0096s; samplesPerSecond = 319.6
MPI Rank 0: 07/14/2016 05:58:47:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.90843762 * 2560; err = 0.72421875 * 2560; time = 7.9056s; samplesPerSecond = 323.8
MPI Rank 0: 07/14/2016 05:58:54:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.89464768 * 2560; err = 0.71640625 * 2560; time = 7.8123s; samplesPerSecond = 327.7
MPI Rank 0: 07/14/2016 05:59:02:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.83440068 * 2560; err = 0.72031250 * 2560; time = 7.6752s; samplesPerSecond = 333.5
MPI Rank 0: 07/14/2016 05:59:10:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.77729006 * 2560; err = 0.68007812 * 2560; time = 7.9511s; samplesPerSecond = 322.0
MPI Rank 0: 07/14/2016 05:59:18:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.73071406 * 2560; err = 0.68359375 * 2560; time = 8.1923s; samplesPerSecond = 312.5
MPI Rank 0: 07/14/2016 05:59:26:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.74671722 * 2560; err = 0.69218750 * 2560; time = 7.7730s; samplesPerSecond = 329.3
MPI Rank 0: 07/14/2016 05:59:26: Finished Epoch[ 4 of 5]: [Training] ce = 2.86173202 * 20480; err = 0.70991211 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=66.3721s
MPI Rank 0: 07/14/2016 05:59:26: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:59:26: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 05:59:26: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/14/2016 05:59:33:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.62138931 * 2560; err = 0.66757813 * 2560; time = 6.3555s; samplesPerSecond = 402.8
MPI Rank 0: 07/14/2016 05:59:39:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58290846 * 2560; err = 0.65664062 * 2560; time = 6.2771s; samplesPerSecond = 407.8
MPI Rank 0: 07/14/2016 05:59:45:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.53379622 * 2560; err = 0.64531250 * 2560; time = 6.3264s; samplesPerSecond = 404.7
MPI Rank 0: 07/14/2016 05:59:53:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.51124316 * 2560; err = 0.64687500 * 2560; time = 7.4516s; samplesPerSecond = 343.5
MPI Rank 0: 07/14/2016 06:00:00:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.44015949 * 2560; err = 0.62695313 * 2560; time = 6.8917s; samplesPerSecond = 371.5
MPI Rank 0: 07/14/2016 06:00:07:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.40351964 * 2560; err = 0.62382812 * 2560; time = 7.1519s; samplesPerSecond = 357.9
MPI Rank 0: 07/14/2016 06:00:13:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.40518999 * 2560; err = 0.62500000 * 2560; time = 6.6437s; samplesPerSecond = 385.3
MPI Rank 0: 07/14/2016 06:00:20:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.35717092 * 2560; err = 0.62304688 * 2560; time = 6.2669s; samplesPerSecond = 408.5
MPI Rank 0: 07/14/2016 06:00:20: Finished Epoch[ 5 of 5]: [Training] ce = 2.48192215 * 20480; err = 0.63940430 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=53.4379s
MPI Rank 0: 07/14/2016 06:00:20: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn'
MPI Rank 0: 07/14/2016 06:00:20: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 07/14/2016 06:00:20: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 06:00:20: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 07/14/2016 05:58:16: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr_speechTrain.logrank1
MPI Rank 1: 07/14/2016 05:58:16: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 05:58:16: Build info: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:16: 		Built time: Jul 14 2016 05:11:35
MPI Rank 1: 07/14/2016 05:58:16: 		Last modified date: Thu Jul 14 03:20:47 2016
MPI Rank 1: 07/14/2016 05:58:16: 		Build type: Debug
MPI Rank 1: 07/14/2016 05:58:16: 		Build target: GPU
MPI Rank 1: 07/14/2016 05:58:16: 		With 1bit-SGD: no
MPI Rank 1: 07/14/2016 05:58:16: 		Math lib: mkl
MPI Rank 1: 07/14/2016 05:58:16: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 1: 07/14/2016 05:58:16: 		CUB_PATH: C:\src\cub-1.4.1
MPI Rank 1: 07/14/2016 05:58:16: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 1: 07/14/2016 05:58:16: 		Build Branch: HEAD
MPI Rank 1: 07/14/2016 05:58:16: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
MPI Rank 1: 07/14/2016 05:58:16: 		Built by svcphil on liana-08-w
MPI Rank 1: 07/14/2016 05:58:16: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 1: 07/14/2016 05:58:16: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 05:58:17: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 05:58:17: GPU info:
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:17: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
MPI Rank 1: 07/14/2016 05:58:17: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:17: Running on cntk-muc01 at 2016/07/14 05:58:17
MPI Rank 1: 07/14/2016 05:58:17: Command line: 
MPI Rank 1: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu  DeviceId=-1  timestamping=true  numCPUThreads=4  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:17: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/14/2016 05:58:17: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=4
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:17: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:17: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/14/2016 05:58:17: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = -1
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=4
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:17: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:17: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=-1
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=4
MPI Rank 1: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 07/14/2016 05:58:17: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 07/14/2016 05:58:17: Commands: speechTrain
MPI Rank 1: 07/14/2016 05:58:17: Precision = "float"
MPI Rank 1: 07/14/2016 05:58:17: Using 4 CPU threads.
MPI Rank 1: 07/14/2016 05:58:17: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn
MPI Rank 1: 07/14/2016 05:58:17: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 07/14/2016 05:58:17: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:17: ##############################################################################
MPI Rank 1: 07/14/2016 05:58:17: #                                                                            #
MPI Rank 1: 07/14/2016 05:58:17: # Action "train"                                                             #
MPI Rank 1: 07/14/2016 05:58:17: #                                                                            #
MPI Rank 1: 07/14/2016 05:58:17: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:17: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:19: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714055016.501646\Speech\DNN_Dropout@debug_cpu/models/cntkSpeech.dnn.3'.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ErrorPrediction()
MPI Rank 1: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 	featNorm.meanVector = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 36 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:19: Loaded model with 36 nodes on CPU.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:19: Training criterion node(s):
MPI Rank 1: 07/14/2016 05:58:19: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:19: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:19: 	err = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: 0000000000000000: {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 1: 0000003B89125DB0: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 0000003B89126020: {[outLayer.B Value[132 x 1]] }
MPI Rank 1: 0000003B891260F0: {[features Value[363 x *]] }
MPI Rank 1: 0000003B891261C0: {[link Value[1 x 1]] }
MPI Rank 1: 0000003B89126430: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0000003B89126500: {[logPrior._ Value[132]] }
MPI Rank 1: 0000003B89126B80: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 1: 0000003B89126F90: {[labels Value[132 x *]] }
MPI Rank 1: 0000003B89127060: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0000003B89127540: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0000003B89127610: {[featNorm.meanVector Value[363]] }
MPI Rank 1: 0000003B891277B0: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0000003B89127950: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 1: 0000003B89127A20: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0000003B89127BC0: {[outLayer.W Value[132 x 512]] }
MPI Rank 1: 0000003B89127C90: {[err Value[1]] }
MPI Rank 1: 0000003B8A4084D0: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 1: 0000003B8A408B50: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 1: 0000003B8A409030: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0000003B8A4091D0: {[ce Gradient[1]] }
MPI Rank 1: 0000003B8A4092A0: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 1: 0000003B8A409510: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 1: 0000003B8A409850: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 1: 0000003B8A409E00: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 1: 0000003B8A409ED0: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 1: 0000003BEB9108F0: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0000003BEB910D00: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0000003BEB910DD0: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0000003BEB910EA0: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 1: 0000003BEB910F70: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0000003BEB911110: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 1: 0000003BEB9111E0: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0000003BEB9112B0: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0000003BEB911380: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0000003BEB911520: {[ce Value[1]] }
MPI Rank 1: 0000003BEB9115F0: {[logPrior Value[132]] }
MPI Rank 1: 0000003BEB9116C0: {[featNorm Value[363 x *]] }
MPI Rank 1: 0000003BEB911790: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 1: 0000003BF3F8C960: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0000003BF3F8DE80: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0000003BF3F8E1C0: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0000003BF3F8E5D0: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0000003BF3F8E770: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:19: No PreCompute nodes found, skipping PreCompute step.
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:20: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:58:23: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/14/2016 05:58:31:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.04339664 * 2560; err = 0.74492187 * 2560; time = 7.9623s; samplesPerSecond = 321.5
MPI Rank 1: 07/14/2016 05:58:39:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.95825222 * 2560; err = 0.71757812 * 2560; time = 7.9228s; samplesPerSecond = 323.1
MPI Rank 1: 07/14/2016 05:58:47:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.90843762 * 2560; err = 0.72421875 * 2560; time = 7.9924s; samplesPerSecond = 320.3
MPI Rank 1: 07/14/2016 05:58:54:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.89464768 * 2560; err = 0.71640625 * 2560; time = 7.9166s; samplesPerSecond = 323.4
MPI Rank 1: 07/14/2016 05:59:02:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.83440068 * 2560; err = 0.72031250 * 2560; time = 7.5309s; samplesPerSecond = 339.9
MPI Rank 1: 07/14/2016 05:59:10:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.77729006 * 2560; err = 0.68007812 * 2560; time = 7.9468s; samplesPerSecond = 322.1
MPI Rank 1: 07/14/2016 05:59:18:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.73071406 * 2560; err = 0.68359375 * 2560; time = 8.2365s; samplesPerSecond = 310.8
MPI Rank 1: 07/14/2016 05:59:26:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.74671722 * 2560; err = 0.69218750 * 2560; time = 7.7738s; samplesPerSecond = 329.3
MPI Rank 1: 07/14/2016 05:59:26: Finished Epoch[ 4 of 5]: [Training] ce = 2.86173202 * 20480; err = 0.70991211 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=66.3721s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:59:26: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 05:59:26: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/14/2016 05:59:33:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.62138931 * 2560; err = 0.66757813 * 2560; time = 6.5451s; samplesPerSecond = 391.1
MPI Rank 1: 07/14/2016 05:59:39:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58290846 * 2560; err = 0.65664062 * 2560; time = 6.1305s; samplesPerSecond = 417.6
MPI Rank 1: 07/14/2016 05:59:45:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.53379622 * 2560; err = 0.64531250 * 2560; time = 6.2880s; samplesPerSecond = 407.1
MPI Rank 1: 07/14/2016 05:59:53:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.51124316 * 2560; err = 0.64687500 * 2560; time = 7.4421s; samplesPerSecond = 344.0
MPI Rank 1: 07/14/2016 06:00:00:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.44015949 * 2560; err = 0.62695313 * 2560; time = 6.9912s; samplesPerSecond = 366.2
MPI Rank 1: 07/14/2016 06:00:07:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.40351964 * 2560; err = 0.62382812 * 2560; time = 6.8831s; samplesPerSecond = 371.9
MPI Rank 1: 07/14/2016 06:00:13:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.40518999 * 2560; err = 0.62500000 * 2560; time = 6.7979s; samplesPerSecond = 376.6
MPI Rank 1: 07/14/2016 06:00:20:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.35717092 * 2560; err = 0.62304688 * 2560; time = 6.2461s; samplesPerSecond = 409.9
MPI Rank 1: 07/14/2016 06:00:20: Finished Epoch[ 5 of 5]: [Training] ce = 2.48192215 * 20480; err = 0.63940430 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=53.435s
MPI Rank 1: 07/14/2016 06:00:20: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 07/14/2016 06:00:20: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 06:00:20: __COMPLETED__
MPI Rank 1: ~MPIWrapper