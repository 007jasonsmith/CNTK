CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/../cntk.kaldi.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/.. OutputDir=/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu DeviceId=-1 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 12:04:41
		Last modified date: Tue Jul 12 04:28:35 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by philly on 34e58dd0283f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
07/14/2016 12:27:08: -------------------------------------------------------------------
07/14/2016 12:27:08: Build info: 

07/14/2016 12:27:08: 		Built time: Jul 14 2016 12:04:41
07/14/2016 12:27:08: 		Last modified date: Tue Jul 12 04:28:35 2016
07/14/2016 12:27:08: 		Build type: release
07/14/2016 12:27:08: 		Build target: GPU
07/14/2016 12:27:08: 		With 1bit-SGD: no
07/14/2016 12:27:08: 		Math lib: mkl
07/14/2016 12:27:08: 		CUDA_PATH: /usr/local/cuda-7.5
07/14/2016 12:27:08: 		CUB_PATH: /usr/local/cub-1.4.1
07/14/2016 12:27:08: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/14/2016 12:27:08: 		Build Branch: HEAD
07/14/2016 12:27:08: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 12:27:08: 		Built by philly on 34e58dd0283f
07/14/2016 12:27:08: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
07/14/2016 12:27:08: -------------------------------------------------------------------
07/14/2016 12:27:09: -------------------------------------------------------------------
07/14/2016 12:27:09: GPU info:

07/14/2016 12:27:09: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 12:27:09: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 12:27:09: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 12:27:09: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 12:27:09: -------------------------------------------------------------------

07/14/2016 12:27:09: Running on localhost at 2016/07/14 12:27:09
07/14/2016 12:27:09: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/../cntk.kaldi.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..  OutputDir=/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu  DeviceId=-1  timestamping=true



07/14/2016 12:27:09: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 12:27:09: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.counts"
            rx= "$DataDir$/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.labels"
            labelMappingFile = "$DataDir$/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
OutputDir=/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu
DeviceId=-1
timestamping=true

07/14/2016 12:27:09: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 12:27:09: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 12:27:09: precision = "float"
command = speechTrain
deviceId = -1
parallelTrain = false
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts"
            rx= "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
OutputDir=/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu
DeviceId=-1
timestamping=true

07/14/2016 12:27:09: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 12:27:09: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.kaldi.cntk:command=speechTrain
configparameters: cntk.kaldi.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
configparameters: cntk.kaldi.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.kaldi.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.kaldi.cntk:deviceId=-1
configparameters: cntk.kaldi.cntk:frameMode=false
configparameters: cntk.kaldi.cntk:OutputDir=/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu
configparameters: cntk.kaldi.cntk:parallelTrain=false
configparameters: cntk.kaldi.cntk:precision=float
configparameters: cntk.kaldi.cntk:RunDir=/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu
configparameters: cntk.kaldi.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts"
            rx= "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]

configparameters: cntk.kaldi.cntk:timestamping=true
configparameters: cntk.kaldi.cntk:truncated=true
07/14/2016 12:27:09: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 12:27:09: Commands: speechTrain
07/14/2016 12:27:09: Precision = "float"
07/14/2016 12:27:09: CNTKModelPath: /tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn
07/14/2016 12:27:09: CNTKCommandTrainInfo: speechTrain : 4
07/14/2016 12:27:09: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4

07/14/2016 12:27:09: ##############################################################################
07/14/2016 12:27:09: #                                                                            #
07/14/2016 12:27:09: # Action "train"                                                             #
07/14/2016 12:27:09: #                                                                            #
07/14/2016 12:27:09: ##############################################################################

07/14/2016 12:27:09: CNTKCommandTrainBegin: speechTrain
reading script file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts ... 948 entries
total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list
htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/14/2016 12:27:10: Creating virgin network.

Post-processing network...

6 roots:
	Err = ErrorPrediction()
	ScaledLogLikelihood = Minus()
	cr = CrossEntropyWithSoftmax()
	featNorm.invStdDevVector = InvStdDev()
	featNorm.meanVector = Mean()
	logPrior._ = Mean()

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].ot._.PlusArgs[0]	LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].ft._.PlusArgs[0]	LSTMoutput[1].dc	LSTMoutput[1].ft._.PlusArgs[1].matrix
	LSTMoutput[1].ft._.PlusArgs[1]	LSTMoutput[1].ft._	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].it._.PlusArgs[0]	LSTMoutput[1].it._.PlusArgs[1].matrix	LSTMoutput[1].it._.PlusArgs[1]
	LSTMoutput[1].it._	LSTMoutput[1].it	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[1].bit.ElementTimesArgs[1].z
	LSTMoutput[1].bit.ElementTimesArgs[1]	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot._.PlusArgs[1].matrix	LSTMoutput[1].ot._.PlusArgs[1]	LSTMoutput[1].ot._
	LSTMoutput[1].ot	LSTMoutput[1].mt.ElementTimesArgs[1]	LSTMoutput[1].mt
	LSTMoutput[1].output.TimesArgs[1]	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].ot._.PlusArgs[0]	LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].ft._.PlusArgs[0]	LSTMoutput[2].dc	LSTMoutput[2].ft._.PlusArgs[1].matrix
	LSTMoutput[2].ft._.PlusArgs[1]	LSTMoutput[2].ft._	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].it._.PlusArgs[0]	LSTMoutput[2].it._.PlusArgs[1].matrix	LSTMoutput[2].it._.PlusArgs[1]
	LSTMoutput[2].it._	LSTMoutput[2].it	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[2].bit.ElementTimesArgs[1].z
	LSTMoutput[2].bit.ElementTimesArgs[1]	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot._.PlusArgs[1].matrix	LSTMoutput[2].ot._.PlusArgs[1]	LSTMoutput[2].ot._
	LSTMoutput[2].ot	LSTMoutput[2].mt.ElementTimesArgs[1]	LSTMoutput[2].mt
	LSTMoutput[2].output.TimesArgs[1]	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].ot._.PlusArgs[0]	LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].ft._.PlusArgs[0]	LSTMoutput[3].dc	LSTMoutput[3].ft._.PlusArgs[1].matrix
	LSTMoutput[3].ft._.PlusArgs[1]	LSTMoutput[3].ft._	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].it._.PlusArgs[0]	LSTMoutput[3].it._.PlusArgs[1].matrix	LSTMoutput[3].it._.PlusArgs[1]
	LSTMoutput[3].it._	LSTMoutput[3].it	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[3].bit.ElementTimesArgs[1].z
	LSTMoutput[3].bit.ElementTimesArgs[1]	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot._.PlusArgs[1].matrix	LSTMoutput[3].ot._.PlusArgs[1]	LSTMoutput[3].ot._
	LSTMoutput[3].ot	LSTMoutput[3].mt.ElementTimesArgs[1]	LSTMoutput[3].mt
	LSTMoutput[3].output.TimesArgs[1]	LSTMoutput[3].output

Validating network. 277 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [132 x 256]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> features = InputValue() :  -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions (features) : [1 x 363 x *] -> [363 x 1 x *]
Validating --> feashift = Slice (realFeatures) : [363 x 1 x *] -> [33 x 1 x *]
Validating --> featNorm.meanVector = Mean (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm.invStdDevVector = InvStdDev (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (feashift, featNorm.meanVector, featNorm.invStdDevVector) : [33 x 1 x *], [33 x 1], [33 x 1] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0] = Plus (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0] = Plus (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ft._ = Plus (LSTMoutput[1].ft._.PlusArgs[0], LSTMoutput[1].ft._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft = Sigmoid (LSTMoutput[1].ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bft = ElementTimes (LSTMoutput[1].ft, LSTMoutput[1].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0] = Plus (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[1] = DiagTimes (LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].it._ = Plus (LSTMoutput[1].it._.PlusArgs[0], LSTMoutput[1].it._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it = Sigmoid (LSTMoutput[1].it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[1].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit = ElementTimes (LSTMoutput[1].it, LSTMoutput[1].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ct = Plus (LSTMoutput[1].bft, LSTMoutput[1].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[1] = DiagTimes (LSTMoutput[1].ot._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ot._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._ = Plus (LSTMoutput[1].ot._.PlusArgs[0], LSTMoutput[1].ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot = Sigmoid (LSTMoutput[1].ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[1].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt = ElementTimes (LSTMoutput[1].ot, LSTMoutput[1].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output.TimesArgs[1] = ElementTimes (LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[1].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output = Times (LSTMoutput[1].Wmr, LSTMoutput[1].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0] = Plus (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0] = Plus (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ft._ = Plus (LSTMoutput[2].ft._.PlusArgs[0], LSTMoutput[2].ft._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft = Sigmoid (LSTMoutput[2].ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bft = ElementTimes (LSTMoutput[2].ft, LSTMoutput[2].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0] = Plus (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[1] = DiagTimes (LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].it._ = Plus (LSTMoutput[2].it._.PlusArgs[0], LSTMoutput[2].it._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it = Sigmoid (LSTMoutput[2].it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[2].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit = ElementTimes (LSTMoutput[2].it, LSTMoutput[2].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ct = Plus (LSTMoutput[2].bft, LSTMoutput[2].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[1] = DiagTimes (LSTMoutput[2].ot._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ot._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._ = Plus (LSTMoutput[2].ot._.PlusArgs[0], LSTMoutput[2].ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot = Sigmoid (LSTMoutput[2].ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[2].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt = ElementTimes (LSTMoutput[2].ot, LSTMoutput[2].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output.TimesArgs[1] = ElementTimes (LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[2].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output = Times (LSTMoutput[2].Wmr, LSTMoutput[2].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0] = Plus (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0] = Plus (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ft._ = Plus (LSTMoutput[3].ft._.PlusArgs[0], LSTMoutput[3].ft._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft = Sigmoid (LSTMoutput[3].ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bft = ElementTimes (LSTMoutput[3].ft, LSTMoutput[3].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0] = Plus (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[1] = DiagTimes (LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].it._ = Plus (LSTMoutput[3].it._.PlusArgs[0], LSTMoutput[3].it._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it = Sigmoid (LSTMoutput[3].it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[3].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit = ElementTimes (LSTMoutput[3].it, LSTMoutput[3].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ct = Plus (LSTMoutput[3].bft, LSTMoutput[3].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[1] = DiagTimes (LSTMoutput[3].ot._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ot._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._ = Plus (LSTMoutput[3].ot._.PlusArgs[0], LSTMoutput[3].ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot = Sigmoid (LSTMoutput[3].ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[3].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt = ElementTimes (LSTMoutput[3].ot, LSTMoutput[3].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output.TimesArgs[1] = ElementTimes (LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[3].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output = Times (LSTMoutput[3].Wmr, LSTMoutput[3].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutputW.PlusArgs[0] = Times (LSTMoutputW.PlusArgs[0].TimesArgs[0], LSTMoutputW.PlusArgs[0].TimesArgs[1]) : [132 x 256], [256 x 1 x *] -> [132 x 1 x *]
Validating --> B = LearnableParameter() :  -> [132]
Validating --> LSTMoutputW = Plus (LSTMoutputW.PlusArgs[0], B) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> Err = ErrorPrediction (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]
Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior = Log (logPrior._) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (LSTMoutputW, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> cr = CrossEntropyWithSoftmax (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]

Validating network. 188 nodes to process in pass 2.

Validating --> LSTMoutput[1].dh = PastValue (LSTMoutput[1].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].dc = PastValue (LSTMoutput[1].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[1] = DiagTimes (LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].dh = PastValue (LSTMoutput[2].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].dc = PastValue (LSTMoutput[2].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[1] = DiagTimes (LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].dh = PastValue (LSTMoutput[3].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].dc = PastValue (LSTMoutput[3].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[1] = DiagTimes (LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]

Validating network. 45 nodes to process in pass 3.


Validating network, final pass.



130 out of 277 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 12:27:10: Created model with 277 nodes on CPU.

07/14/2016 12:27:10: Training criterion node(s):
07/14/2016 12:27:10: 	cr = CrossEntropyWithSoftmax

07/14/2016 12:27:10: Evaluation criterion node(s):

07/14/2016 12:27:10: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[Err Gradient[1]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [feashift Gradient[33 x 1 x *]] [featNorm Gradient[33 x 1 x *]] [featNorm.invStdDevVector Gradient[33 x 1]] [featNorm.meanVector Gradient[33 x 1]] [features Gradient[1 x 363 x *]] [labels Gradient[132 x *]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [realFeatures Gradient[363 x 1 x *]] }
0x7efdbcc13d58: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7efdbce07378: {[LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7efdbce14c18: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbce14df8: {[LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7efdbce15038: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbce15338: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbce16138: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbce16378: {[LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7efdbce165b8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbce168f8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbce16b38: {[LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7efdbce16d78: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbce170b8: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbce172f8: {[LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7efdbce17538: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbce17838: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbce186b8: {[logPrior Value[132]] }
0x7efdbce22ef8: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbce24ab8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbce25418: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7efdbce254b8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x7efdbce2df88: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbce2ef48: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x7efdbce2f0a8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbce2f208: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbce2f368: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x7efdbce2f4c8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbce2f628: {[LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7efdbce2f788: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x7efdbce2f8e8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbce2fa48: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbce2fba8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7efdbce2fe08: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbce30508: {[featNorm Value[33 x 1 x *]] }
0x7efdbce47d98: {[LSTMoutput[1].dc Value[1024 x 1 x *]] }
0x7efdbce49b48: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbce4b728: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7efdbce4b7c8: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbce4d668: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbce4dfe8: {[LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7efdbce4e418: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7efdbce51f98: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbce52208: {[LSTMoutput[2].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7efdbce54108: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbce541a8: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7efdbce57508: {[feashift Value[33 x 1 x *]] }
0x7efdbce57ee8: {[realFeatures Value[363 x 1 x *]] }
0x7efdbce64f08: {[featNorm.invStdDevVector Value[33 x 1]] }
0x7efdbce74558: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7efdbce746c8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbce770a8: {[LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbce777b8: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbce7c068: {[Err Value[1]] }
0x7efdbce7d668: {[LSTMoutput[2].it Gradient[1024 x 1 x *]] [LSTMoutput[3].dc Value[1024 x 1 x *]] }
0x7efdbce7dd88: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7efdbce7e488: {[LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7efdbce7f8b8: {[LSTMoutput[2].ot Value[1024 x 1 x *]] }
0x7efdbce7fa78: {[LSTMoutput[2].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7efdbce7fc38: {[LSTMoutput[2].mt Value[1024 x 1 x *]] }
0x7efdbce7fdf8: {[LSTMoutput[2].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x7efdbce7ffb8: {[LSTMoutput[2].output Value[256 x 1 x *]] }
0x7efdbce80178: {[LSTMoutput[2].Wmr Gradient[256 x 1024]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x7efdbce80338: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbce804f8: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7efdbce806b8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbce80878: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbce80a38: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7efdbce80bf8: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbce80db8: {[LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7efdbce80f78: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7efdbce81138: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbce812f8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbce814b8: {[LSTMoutput[2].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7efdbce81678: {[LSTMoutput[2].ot._ Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbce81838: {[LSTMoutput[2].ot._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7efdbce819f8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7efdbce81bb8: {[LSTMoutput[2].ot._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbce81d78: {[LSTMoutput[1].it._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bft Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7efdbce81f38: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7efdbce820f8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].ft._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbce822b8: {[LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ft._ Value[1024 x 1 x *]] }
0x7efdbce82478: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].dh Gradient[256 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].ft Value[1024 x 1 x *]] }
0x7efdbce82638: {[LSTMoutput[1].dc Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].bft Value[1024 x 1 x *]] }
0x7efdbce827f8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7efdbce829b8: {[LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbce82b78: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7efdbce82d38: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7efdbce82ef8: {[LSTMoutput[1].ot Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbce830b8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ft._ Gradient[1024 x 1 x *]] [LSTMoutput[3].it._ Value[1024 x 1 x *]] }
0x7efdbce83278: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].ft._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].it Value[1024 x 1 x *]] }
0x7efdbce83438: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x7efdbce835f8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x7efdbce837b8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbce83978: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x7efdbce83b38: {[LSTMoutput[1].mt Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7efdbce83cf8: {[LSTMoutput[1].ot._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit Value[1024 x 1 x *]] }
0x7efdbce83eb8: {[LSTMoutput[1].ct Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ct Value[1024 x 1 x *]] }
0x7efdbce84078: {[LSTMoutput[3].ot._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7efdbce84238: {[LSTMoutput[3].ot._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbce843f8: {[LSTMoutput[3].ot._ Value[1024 x 1 x *]] }
0x7efdbce85028: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7efdbce85588: {[LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7efdbce86bf8: {[LSTMoutput[3].ot Value[1024 x 1 x *]] }
0x7efdbce86db8: {[LSTMoutput[3].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7efdbce86f78: {[LSTMoutput[3].mt Value[1024 x 1 x *]] }
0x7efdbce87138: {[LSTMoutput[3].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x7efdbce872f8: {[LSTMoutput[3].output Value[256 x 1 x *]] }
0x7efdbce874b8: {[LSTMoutputW.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].Wmr Gradient[256 x 1024]] }
0x7efdbce87678: {[LSTMoutputW.PlusArgs[0] Value[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7efdbce87838: {[LSTMoutputW Value[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[0] Gradient[132 x 256]] }
0x7efdbce882e8: {[cr Gradient[1]] }
0x7efdbce884a8: {[LSTMoutputW Gradient[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].output.TimesArgs[1] Gradient[1024 x 1 x *]] }
0x7efdbce88668: {[LSTMoutputW.PlusArgs[0] Gradient[132 x 1 x *]] [LSTMoutput[3].output Gradient[256 x 1 x *]] }
0x7efdbce88828: {[B Gradient[132]] }
0x7efdbce88a18: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7efdbce88bd8: {[LSTMoutput[3].mt Gradient[1024 x 1 x *]] }
0x7efdbce88d98: {[LSTMoutput[3].ot Gradient[1024 x 1 x *]] }
0x7efdbce88f58: {[LSTMoutput[3].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x7efdbce89118: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ct Gradient[1024 x 1 x *]] }
0x7efdbce892d8: {[LSTMoutput[3].ot._ Gradient[1024 x 1 x *]] }
0x7efdbce89498: {[LSTMoutput[3].ot._.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7efdbce89658: {[LSTMoutput[3].ot._.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7efdbce89b98: {[LSTMoutput[3].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x7efdbce89d58: {[LSTMoutput[3].ot._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x7efdbce89f18: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x7efdbce8a0d8: {[LSTMoutput[1].ft Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bft Gradient[1024 x 1 x *]] }
0x7efdbce8a298: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit Gradient[1024 x 1 x *]] }
0x7efdbce8a458: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it Gradient[1024 x 1 x *]] }
0x7efdbce8a618: {[LSTMoutput[1].output.TimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x7efdbce8a7d8: {[LSTMoutput[1].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] }
0x7efdbce8a998: {[LSTMoutput[2].output Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7efdbce8ab58: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7efdbce8ad18: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7efdbce8aed8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] }
0x7efdbce8b098: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7efdbce8b258: {[LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x7efdbce8b418: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7efdbce8b5d8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].dh Gradient[256 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] }
0x7efdbce8b798: {[LSTMoutput[1].bit Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it._ Gradient[1024 x 1 x *]] }
0x7efdbce963b8: {[LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7efdbce966b8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbce96db8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbce97388: {[LSTMoutput[1].it Gradient[1024 x 1 x *]] [LSTMoutput[2].dc Value[1024 x 1 x *]] }
0x7efdbce97428: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7efdbce97f18: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7efdbceb03d8: {[LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbceb0598: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbceb0758: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbceb0918: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbceb0b18: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbceb0d58: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbceb1218: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbceb1458: {[LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7efdbceb8d48: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7efdbceb97c8: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbceb98a8: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbceca368: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbced2bf8: {[LSTMoutput[1].Wmr Value[256 x 1024]] }
0x7efdbced30c8: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7efdbcedc8f8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbcedcc38: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x7efdbcedd0e8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbcedd7b8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7efdbcedd898: {[featNorm.meanVector Value[33 x 1]] }
0x7efdbd04c398: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7efdbd04ce28: {[LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd04dcb8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd04df78: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd04e0d8: {[LSTMoutput[3].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7efdbd059998: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd059db8: {[LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd077268: {[LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7efdbd077e88: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd078698: {[LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd07db88: {[LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd07de88: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7efdbd091af8: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0x7efdbd091cb8: {[cr Value[1]] }
0x7efdbd0a16e8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd0adfd8: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd0ae628: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7efdbd0d8a58: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x7efdbd0d98d8: {[LSTMoutput[1].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].dc Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7efdbd0d9a38: {[LSTMoutput[1].it._ Gradient[1024 x 1 x *]] [LSTMoutput[2].ft Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7efdbd0d9bf8: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x7efdbd0d9db8: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7efdbd0d9f78: {[LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x7efdbd0da138: {[LSTMoutput[1].it._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x7efdbd0da2f8: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x7efdbd0da4b8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].dc Gradient[1024 x 1 x *]] }
0x7efdbd0da678: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x7efdbd0da838: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7efdbd0da9f8: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7efdbd0dabb8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x7efdbd0dad78: {[LSTMoutput[2].ot Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7efdbd0daf38: {[LSTMoutput[1].ft._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it._ Gradient[1024 x 1 x *]] [LSTMoutput[3].ft Gradient[1024 x 1 x *]] }
0x7efdbd0db0f8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ft._ Gradient[1024 x 1 x *]] }
0x7efdbd0db2b8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7efdbd0db478: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].ft._.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7efdbd0db638: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7efdbd0db7f8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7efdbd0db9b8: {[LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x7efdbd0dbb78: {[LSTMoutput[1].output Gradient[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x7efdbd0dbd38: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x7efdbd0dbef8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] }
0x7efdbd0dc0b8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7efdbd0dc278: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7efdbd0dc438: {[LSTMoutput[2].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x7efdbd0dc5f8: {[LSTMoutput[2].mt Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7efdbd0dc7b8: {[LSTMoutput[2].output.TimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x7efdbd0dc978: {[LSTMoutput[2].ot._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7efdbd0dcb38: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7efdbd0dccf8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ct Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x7efdbd0dceb8: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7efdbd0e0568: {[LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7efdbd0e5dc8: {[labels Value[132 x *]] }
0x7efdbd0ef498: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7efdbd0f58f8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7efdbd0f6f98: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].dh Value[256 x 1 x *]] }
0x7efdbd0f7158: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd200ed8: {[LSTMoutput[1].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7efdbd2013b8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7efdbd2015a8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x7efdbd203118: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd2034e8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd2042c8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7efdbd20b688: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7efdbd20bbe8: {[LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7efdbd20cda8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x7efdbd20e558: {[LSTMoutputW.PlusArgs[0].TimesArgs[0] Value[132 x 256]] }
0x7efdbd21e918: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7efdbd21fa78: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].dh Value[256 x 1 x *]] }
0x7efdbd22ef88: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd2321d8: {[LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd241b88: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7efdbd242348: {[LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd25d388: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbd25d4e8: {[LSTMoutput[1].it._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7efdbd25d648: {[LSTMoutput[1].it._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7efdbd25d7a8: {[LSTMoutput[1].it._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbd25d908: {[LSTMoutput[1].it._ Value[1024 x 1 x *]] }
0x7efdbd25da68: {[LSTMoutput[1].it Value[1024 x 1 x *]] }
0x7efdbd25dbc8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x7efdbd25dd28: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x7efdbd25de88: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbd25dfe8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x7efdbd25e148: {[LSTMoutput[1].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7efdbd25e2a8: {[LSTMoutput[1].bit Value[1024 x 1 x *]] }
0x7efdbd25e408: {[LSTMoutput[1].ct Value[1024 x 1 x *]] }
0x7efdbd25e568: {[LSTMoutput[1].ot._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7efdbd25e6c8: {[LSTMoutput[1].ot._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbd25e828: {[LSTMoutput[1].ot._ Value[1024 x 1 x *]] }
0x7efdbd25e9e8: {[LSTMoutput[1].ot Value[1024 x 1 x *]] }
0x7efdbd260bb8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbd260d18: {[LSTMoutput[1].ot._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7efdbd260e78: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7efdbd260fd8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbd261138: {[LSTMoutput[1].ft._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7efdbd261298: {[LSTMoutput[1].ft._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7efdbd2613f8: {[LSTMoutput[1].ft._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbd261558: {[LSTMoutput[1].ft._ Value[1024 x 1 x *]] }
0x7efdbd2616b8: {[LSTMoutput[1].ft Value[1024 x 1 x *]] }
0x7efdbd261818: {[LSTMoutput[1].bft Value[1024 x 1 x *]] }
0x7efdbd261978: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7efdbd261a18: {[LSTMoutput[2].ot._ Value[1024 x 1 x *]] }
0x7efdbd273f68: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd274698: {[LSTMoutput[3].Wmr Value[256 x 1024]] }
0x7efdbd275e98: {[logPrior._ Value[132]] }
0x7efdbd2762e8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7efdbd2767d8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x7efdbd277e18: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7efdbd27e818: {[LSTMoutput[1].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7efdbd27e9d8: {[LSTMoutput[1].mt Value[1024 x 1 x *]] }
0x7efdbd27eb98: {[LSTMoutput[1].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x7efdbd27ed58: {[LSTMoutput[1].output Value[256 x 1 x *]] }
0x7efdbd27ef18: {[LSTMoutput[1].Wmr Gradient[256 x 1024]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x7efdbd27f0d8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbd27f298: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7efdbd27f458: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbd27f618: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbd27f7d8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7efdbd27f998: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbd27fb58: {[LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7efdbd27fd18: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7efdbd27fed8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbd280098: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x7efdbd280258: {[LSTMoutput[1].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7efdbd280418: {[LSTMoutput[1].ot._ Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbd2805d8: {[LSTMoutput[1].ot._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7efdbd280798: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7efdbd280958: {[LSTMoutput[1].ot._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbd280b18: {[LSTMoutput[1].bft Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7efdbd280cd8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7efdbd280e98: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].ft._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbd281058: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ft._ Value[1024 x 1 x *]] }
0x7efdbd281218: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[1].dh Gradient[256 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].ft Value[1024 x 1 x *]] }
0x7efdbd2813d8: {[LSTMoutput[1].it._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].bft Value[1024 x 1 x *]] }
0x7efdbd281598: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7efdbd281758: {[LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbd281918: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7efdbd281ad8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7efdbd281c98: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbd281e58: {[LSTMoutput[1].ft._ Gradient[1024 x 1 x *]] [LSTMoutput[2].it._ Value[1024 x 1 x *]] }
0x7efdbd282018: {[LSTMoutput[1].ft._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].it Value[1024 x 1 x *]] }
0x7efdbd2821d8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x7efdbd282398: {[LSTMoutput[1].ft._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x7efdbd282558: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbd282718: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x7efdbd2828d8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7efdbd282a98: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bit Value[1024 x 1 x *]] }
0x7efdbd282c58: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ct Value[1024 x 1 x *]] }
0x7efdbd282e18: {[LSTMoutput[2].ot._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7efdbd282fd8: {[LSTMoutput[2].ot._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7efdbd2a6208: {[LSTMoutput[2].Wmr Value[256 x 1024]] }
0x7efdbd2a76d8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7efdbd2c0d78: {[features Value[1 x 363 x *]] }
0x7efdbd2c1828: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].dh Value[256 x 1 x *]] }
0x7efdbd2c34c8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7efdbd2c4e38: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7efdbd2debd8: {[B Value[132]] }
0x7efdbd2efdd8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbd2f0118: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbd2f0358: {[LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7efdbd2f0598: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbd2f08d8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbd2f0b18: {[LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7efdbd2f0d58: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbd2f1058: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbd2f1e58: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbd2f2098: {[LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7efdbd2f22d8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbd2f2618: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbd2f2858: {[LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7efdbd2f2a98: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7efdbd2f7158: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7efdc15e2898: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x7efdc15f1ac8: {[LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7efdc15fe278: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }


07/14/2016 12:27:10: Precomputing --> 3 PreCompute nodes found.

07/14/2016 12:27:10: 	featNorm.meanVector = Mean()
07/14/2016 12:27:10: 	featNorm.invStdDevVector = InvStdDev()
07/14/2016 12:27:10: 	logPrior._ = Mean()
lazyrandomization: re-randomizing for sweep 0 in utterance mode
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0) with 1 datapasses
feature set 0: requirerandomizedchunk: paging in randomized chunk 0 (frame range [0..90157]), 1 resident in RAM
requiredata: determined feature kind as 33-dimensional
requiredata: 341 utterances read
feature set 0: requirerandomizedchunk: paging in randomized chunk 1 (frame range [90158..180391]), 2 resident in RAM
requiredata: 328 utterances read
feature set 0: requirerandomizedchunk: paging in randomized chunk 2 (frame range [180392..252733]), 3 resident in RAM
requiredata: 279 utterances read

07/14/2016 12:27:13: Precomputing --> Completed.


07/14/2016 12:27:13: Starting Epoch 1: learning rate per sample = 0.000781  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0) with 1 datapasses

07/14/2016 12:27:13: Starting minibatch loop.
07/14/2016 12:27:20:  Epoch[ 1 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.80572449 * 6400; Err = 0.90265625 * 6400; time = 6.5842s; samplesPerSecond = 972.0
07/14/2016 12:27:27:  Epoch[ 1 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.59894226 * 6400; Err = 0.85390625 * 6400; time = 7.1030s; samplesPerSecond = 901.0
07/14/2016 12:27:34:  Epoch[ 1 of 4]-Minibatch[  21-  30, 2.93%]: cr = 5.52926760 * 5738; Err = 0.88654583 * 5738; time = 6.6084s; samplesPerSecond = 868.3
07/14/2016 12:27:40:  Epoch[ 1 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.56729365 * 1840; Err = 0.88369565 * 1840; time = 6.5933s; samplesPerSecond = 279.1
07/14/2016 12:27:43: Finished Epoch[ 1 of 4]: [Training] cr = 4.91752691 * 20546; Err = 0.88017132 * 20546; totalSamplesSeen = 20546; learningRatePerSample = 0.00078125001; epochTime=29.3588s
07/14/2016 12:27:43: SGD: Saving checkpoint model '/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn.1'

07/14/2016 12:27:43: Starting Epoch 2: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20546) with 1 datapasses

07/14/2016 12:27:43: Starting minibatch loop.
07/14/2016 12:27:50:  Epoch[ 2 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.47222778 * 6400; Err = 0.91109375 * 6400; time = 6.5184s; samplesPerSecond = 981.8
07/14/2016 12:27:56:  Epoch[ 2 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.39250305 * 6400; Err = 0.87343750 * 6400; time = 6.4861s; samplesPerSecond = 986.7
07/14/2016 12:28:02:  Epoch[ 2 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.39425597 * 4782; Err = 0.91447093 * 4782; time = 6.1739s; samplesPerSecond = 774.5
07/14/2016 12:28:08:  Epoch[ 2 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.41530524 * 2238; Err = 0.93610366 * 2238; time = 5.9307s; samplesPerSecond = 377.4
07/14/2016 12:28:15:  Epoch[ 2 of 4]-Minibatch[  41-  50, 4.88%]: cr = 4.45681281 * 608; Err = 0.92927632 * 608; time = 6.3290s; samplesPerSecond = 96.1
07/14/2016 12:28:15: Finished Epoch[ 2 of 4]: [Training] cr = 4.42175839 * 20434; Err = 0.90310267 * 20434; totalSamplesSeen = 40980; learningRatePerSample = 0.00078125001; epochTime=32.0263s
07/14/2016 12:28:16: SGD: Saving checkpoint model '/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn.2'

07/14/2016 12:28:16: Starting Epoch 3: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40980) with 1 datapasses

07/14/2016 12:28:16: Starting minibatch loop.
07/14/2016 12:28:22:  Epoch[ 3 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.14042358 * 6400; Err = 0.83671875 * 6400; time = 6.1512s; samplesPerSecond = 1040.5
07/14/2016 12:28:28:  Epoch[ 3 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.17684814 * 6400; Err = 0.86468750 * 6400; time = 5.8988s; samplesPerSecond = 1085.0
07/14/2016 12:28:34:  Epoch[ 3 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.23903612 * 5330; Err = 0.89530957 * 5330; time = 6.2354s; samplesPerSecond = 854.8
07/14/2016 12:28:40:  Epoch[ 3 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.41369312 * 2390; Err = 0.94016736 * 2390; time = 5.9099s; samplesPerSecond = 404.4
07/14/2016 12:28:42: Finished Epoch[ 3 of 4]: [Training] cr = 4.20693190 * 20682; Err = 0.87264288 * 20682; totalSamplesSeen = 61662; learningRatePerSample = 0.00078125001; epochTime=26.572s
07/14/2016 12:28:43: SGD: Saving checkpoint model '/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn.3'

07/14/2016 12:28:43: Starting Epoch 4: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61662) with 1 datapasses

07/14/2016 12:28:43: Starting minibatch loop.
07/14/2016 12:28:49:  Epoch[ 4 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.06095673 * 6400; Err = 0.85125000 * 6400; time = 6.1403s; samplesPerSecond = 1042.3
07/14/2016 12:28:55:  Epoch[ 4 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.12552338 * 6400; Err = 0.87437500 * 6400; time = 6.1308s; samplesPerSecond = 1043.9
07/14/2016 12:29:01:  Epoch[ 4 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.13897583 * 5796; Err = 0.87370600 * 5796; time = 5.9988s; samplesPerSecond = 966.2
07/14/2016 12:29:07:  Epoch[ 4 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.05378643 * 1630; Err = 0.89018405 * 1630; time = 6.1670s; samplesPerSecond = 264.3
07/14/2016 12:29:11: Finished Epoch[ 4 of 4]: [Training] cr = 4.09726114 * 20366; Err = 0.86727880 * 20366; totalSamplesSeen = 82028; learningRatePerSample = 0.00078125001; epochTime=27.9799s
07/14/2016 12:29:11: SGD: Saving checkpoint model '/tmp/cntk-test-20160714122216.433583/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn'
07/14/2016 12:29:12: CNTKCommandTrainEnd: speechTrain

07/14/2016 12:29:12: Action "train" complete.

07/14/2016 12:29:12: __COMPLETED__