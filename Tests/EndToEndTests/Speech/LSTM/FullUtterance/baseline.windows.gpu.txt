CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3565 @ 3.20GHz
    Hardware threads: 8
    Total Memory: 12580436 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/debug/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\LSTM/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\LSTM OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu DeviceId=0 timestamping=true Truncated=false speechTrain=[reader=[nbruttsineachrecurrentiter=2]] speechTrain=[SGD=[epochSize=2560]] speechTrain=[SGD=[maxEpochs=2]] speechTrain=[SGD=[numMBsToShowResult=1]] shareNodeValueMatrices=true
-------------------------------------------------------------------
Build info: 

		Built time: Jul 13 2016 03:39:41
		Last modified date: Fri Jul  8 10:29:45 2016
		Build type: Debug
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 50bb4c8afbc87c14548a5b5f315a064186a5cb5f
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
07/13/2016 04:38:38: -------------------------------------------------------------------
07/13/2016 04:38:38: Build info: 

07/13/2016 04:38:38: 		Built time: Jul 13 2016 03:39:41
07/13/2016 04:38:38: 		Last modified date: Fri Jul  8 10:29:45 2016
07/13/2016 04:38:38: 		Build type: Debug
07/13/2016 04:38:38: 		Build target: GPU
07/13/2016 04:38:38: 		With 1bit-SGD: no
07/13/2016 04:38:38: 		Math lib: mkl
07/13/2016 04:38:38: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
07/13/2016 04:38:38: 		CUB_PATH: C:\src\cub-1.4.1
07/13/2016 04:38:38: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
07/13/2016 04:38:38: 		Build Branch: HEAD
07/13/2016 04:38:38: 		Build SHA1: 50bb4c8afbc87c14548a5b5f315a064186a5cb5f
07/13/2016 04:38:38: 		Built by svcphil on liana-08-w
07/13/2016 04:38:38: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
07/13/2016 04:38:38: -------------------------------------------------------------------
07/13/2016 04:38:39: -------------------------------------------------------------------
07/13/2016 04:38:39: GPU info:

07/13/2016 04:38:39: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
07/13/2016 04:38:39: -------------------------------------------------------------------

07/13/2016 04:38:39: Running on cntk-muc01 at 2016/07/13 04:38:39
07/13/2016 04:38:39: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\LSTM/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\LSTM  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu  DeviceId=0  timestamping=true  Truncated=false  speechTrain=[reader=[nbruttsineachrecurrentiter=2]]  speechTrain=[SGD=[epochSize=2560]]  speechTrain=[SGD=[maxEpochs=2]]  speechTrain=[SGD=[numMBsToShowResult=1]]  shareNodeValueMatrices=true



07/13/2016 04:38:39: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/13/2016 04:38:39: precision = "float"
deviceId = $DeviceId$
command = speechTrain
// Note: These options are overridden from the command line in some test cases.
frameMode = false
truncated = true
parallelTrain = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        Stabilize (x, enabled=true) =
            if enabled
            then [
beta = Exp (BS.Parameters.BiasParam ((1))) 
                result = beta .* x
            ].result
            else x
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        ce  = /*Pass*/ SumElements (ReduceLogSum (z) - TransposeTimes (labels,          z),  tag='criterion')  // manually-defined per-sample objective
        err = /*Pass*/ SumElements (BS.Constants.One - TransposeTimes (labels, Hardmax (z)), tag='evaluation') // also track frame errors
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output') // using Pass() since we can't assign a tag to x - y
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\LSTM
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu
DeviceId=0
timestamping=true
Truncated=false
speechTrain=[reader=[nbruttsineachrecurrentiter=2]]
speechTrain=[SGD=[epochSize=2560]]
speechTrain=[SGD=[maxEpochs=2]]
speechTrain=[SGD=[numMBsToShowResult=1]]
shareNodeValueMatrices=true

07/13/2016 04:38:39: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/13/2016 04:38:39: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/13/2016 04:38:39: precision = "float"
deviceId = 0
command = speechTrain
// Note: These options are overridden from the command line in some test cases.
frameMode = false
truncated = true
parallelTrain = false
speechTrain = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        Stabilize (x, enabled=true) =
            if enabled
            then [
beta = Exp (BS.Parameters.BiasParam ((1))) 
                result = beta .* x
            ].result
            else x
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        ce  = /*Pass*/ SumElements (ReduceLogSum (z) - TransposeTimes (labels,          z),  tag='criterion')  // manually-defined per-sample objective
        err = /*Pass*/ SumElements (BS.Constants.One - TransposeTimes (labels, Hardmax (z)), tag='evaluation') // also track frame errors
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output') // using Pass() since we can't assign a tag to x - y
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\LSTM
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu
DeviceId=0
timestamping=true
Truncated=false
speechTrain=[reader=[nbruttsineachrecurrentiter=2]]
speechTrain=[SGD=[epochSize=2560]]
speechTrain=[SGD=[maxEpochs=2]]
speechTrain=[SGD=[numMBsToShowResult=1]]
shareNodeValueMatrices=true

07/13/2016 04:38:39: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/13/2016 04:38:39: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:// Note: These options are overridden from the command line in some test cases.=true
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\LSTM
configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:frameMode=false
configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu
configparameters: cntk.cntk:shareNodeValueMatrices=true
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        Stabilize (x, enabled=true) =
            if enabled
            then [
beta = Exp (BS.Parameters.BiasParam ((1))) 
                result = beta .* x
            ].result
            else x
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        ce  = /*Pass*/ SumElements (ReduceLogSum (z) - TransposeTimes (labels,          z),  tag='criterion')  // manually-defined per-sample objective
        err = /*Pass*/ SumElements (BS.Constants.One - TransposeTimes (labels, Hardmax (z)), tag='evaluation') // also track frame errors
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output') // using Pass() since we can't assign a tag to x - y
    ]
] [reader=[nbruttsineachrecurrentiter=2]] [SGD=[epochSize=2560]] [SGD=[maxEpochs=2]] [SGD=[numMBsToShowResult=1]]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:truncated=false
07/13/2016 04:38:39: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/13/2016 04:38:39: Commands: speechTrain
07/13/2016 04:38:39: Precision = "float"
07/13/2016 04:38:39: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu/models/cntkSpeech.dnn
07/13/2016 04:38:39: CNTKCommandTrainInfo: speechTrain : 2
07/13/2016 04:38:39: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 2

07/13/2016 04:38:39: ##############################################################################
07/13/2016 04:38:39: #                                                                            #
07/13/2016 04:38:39: # Action "train"                                                             #
07/13/2016 04:38:39: #                                                                            #
07/13/2016 04:38:39: ##############################################################################

07/13/2016 04:38:39: CNTKCommandTrainBegin: speechTrain
reading script file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.scp ... 948 entries
total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/13/2016 04:38:41: Creating virgin network.

Post-processing network...

6 roots:
	ScaledLogLikelihood = Pass()
	ce = SumElements()
	err = SumElements()
	featNorm.invStdDevVector = InvStdDev()
	featNorm.meanVector = Mean()
	logPrior._ = Mean()

Loop[0] --> Loop_LSTMoutput[1].lstmState.h.htp -> 35 nodes

	LSTMoutput[1].prevState.h	LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0]	LSTMoutput[1].prevState.c	LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.ft._	LSTMoutput[1].lstmState._privateInnards.ft
	LSTMoutput[1].lstmState._privateInnards.bft	LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.it._	LSTMoutput[1].lstmState._privateInnards.it	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[1].lstmState._privateInnards.bit	LSTMoutput[1].lstmState._privateInnards.ct
	LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.ot._
	LSTMoutput[1].lstmState._privateInnards.ot	LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[1].lstmState._privateInnards.ht
	LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[1].lstmState.h.htp

Loop[1] --> Loop_LSTMoutput[2].lstmState.h.htp -> 35 nodes

	LSTMoutput[2].prevState.h	LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0]	LSTMoutput[2].prevState.c	LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.ft._	LSTMoutput[2].lstmState._privateInnards.ft
	LSTMoutput[2].lstmState._privateInnards.bft	LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.it._	LSTMoutput[2].lstmState._privateInnards.it	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[2].lstmState._privateInnards.bit	LSTMoutput[2].lstmState._privateInnards.ct
	LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.ot._
	LSTMoutput[2].lstmState._privateInnards.ot	LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[2].lstmState._privateInnards.ht
	LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[2].lstmState.h.htp

Loop[2] --> Loop_LSTMoutput[3].lstmState.h.htp -> 35 nodes

	LSTMoutput[3].prevState.h	LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0]	LSTMoutput[3].prevState.c	LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.ft._	LSTMoutput[3].lstmState._privateInnards.ft
	LSTMoutput[3].lstmState._privateInnards.bft	LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.it._	LSTMoutput[3].lstmState._privateInnards.it	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[3].lstmState._privateInnards.bit	LSTMoutput[3].lstmState._privateInnards.ct
	LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.ot._
	LSTMoutput[3].lstmState._privateInnards.ot	LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[3].lstmState._privateInnards.ht
	LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[3].lstmState.h.htp

Validating network. 287 nodes to process in pass 1.

Validating --> W = LearnableParameter() :  -> [132 x 256]
Validating --> z.PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.PlusArgs[0].TimesArgs[1].beta = Exp (z.PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> features = InputValue() :  -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions (features) : [1 x 363 x *] -> [363 x 1 x *]
Validating --> feashift = Slice (realFeatures) : [363 x 1 x *] -> [33 x 1 x *]
Validating --> featNorm.meanVector = Mean (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm.invStdDevVector = InvStdDev (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (feashift, featNorm.meanVector, featNorm.invStdDevVector) : [33 x 1 x *], [33 x 1], [33 x 1] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._ = Plus (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[1].lstmState._privateInnards.ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft, LSTMoutput[1].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._ = Plus (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it = Sigmoid (LSTMoutput[1].lstmState._privateInnards.it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it, LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ct = Plus (LSTMoutput[1].lstmState._privateInnards.bft, LSTMoutput[1].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._ = Plus (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[1].lstmState._privateInnards.ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[1].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot, LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[1].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState.h.htp = Times (LSTMoutput[1].lstmState.h.Wmr, LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._ = Plus (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[2].lstmState._privateInnards.ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft, LSTMoutput[2].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._ = Plus (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it = Sigmoid (LSTMoutput[2].lstmState._privateInnards.it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it, LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ct = Plus (LSTMoutput[2].lstmState._privateInnards.bft, LSTMoutput[2].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._ = Plus (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[2].lstmState._privateInnards.ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[2].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot, LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[2].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState.h.htp = Times (LSTMoutput[2].lstmState.h.Wmr, LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._ = Plus (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[3].lstmState._privateInnards.ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft, LSTMoutput[3].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._ = Plus (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it = Sigmoid (LSTMoutput[3].lstmState._privateInnards.it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it, LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ct = Plus (LSTMoutput[3].lstmState._privateInnards.bft, LSTMoutput[3].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._ = Plus (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[3].lstmState._privateInnards.ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[3].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot, LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[3].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState.h.htp = Times (LSTMoutput[3].lstmState.h.Wmr, LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> z.PlusArgs[0].TimesArgs[1].result = ElementTimes (z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.PlusArgs[0] = Times (W, z.PlusArgs[0].TimesArgs[1].result) : [132 x 256], [256 x 1 x *] -> [132 x 1 x *]
Validating --> B = LearnableParameter() :  -> [132]
Validating --> z = Plus (z.PlusArgs[0], B) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> labels = InputValue() :  -> [132 x *]
Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior = Log (logPrior._) : [132] -> [132]
Validating --> ScaledLogLikelihood._ = Minus (z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> ScaledLogLikelihood = Pass (ScaledLogLikelihood._) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> ce.matrix.MinusArgs[0].out.input.MinusArgs[1] = LogSoftmax (z) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> ce.matrix.MinusArgs[0].out.input = Minus (z, ce.matrix.MinusArgs[0].out.input.MinusArgs[1]) : [132 x 1 x *], [132 x 1 x *] -> [132 x 1 x *]
Validating --> ce.matrix.MinusArgs[0].out = Slice (ce.matrix.MinusArgs[0].out.input) : [132 x 1 x *] -> [1 x 1 x *]
Validating --> ce.matrix.MinusArgs[1] = TransposeTimes (labels, z) : [132 x *], [132 x 1 x *] -> [1 x 1 x *]
Validating --> ce.matrix = Minus (ce.matrix.MinusArgs[0].out, ce.matrix.MinusArgs[1]) : [1 x 1 x *], [1 x 1 x *] -> [1 x 1 x *]
Validating --> ce = SumElements (ce.matrix) : [1 x 1 x *] -> [1]
Validating --> BS.Constants.One = LearnableParameter() :  -> [1]
Validating --> err.matrix.MinusArgs[1].rightMatrix = Hardmax (z) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> err.matrix.MinusArgs[1] = TransposeTimes (labels, err.matrix.MinusArgs[1].rightMatrix) : [132 x *], [132 x 1 x *] -> [1 x 1 x *]
Validating --> err.matrix = Minus (BS.Constants.One, err.matrix.MinusArgs[1]) : [1], [1 x 1 x *] -> [1 x 1 x *]
Validating --> err = SumElements (err.matrix) : [1 x 1 x *] -> [1]

Validating network. 197 nodes to process in pass 2.

Validating --> LSTMoutput[1].prevState.h = PastValue (LSTMoutput[1].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].prevState.c = PastValue (LSTMoutput[1].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].prevState.h = PastValue (LSTMoutput[2].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].prevState.c = PastValue (LSTMoutput[2].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].prevState.h = PastValue (LSTMoutput[3].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].prevState.c = PastValue (LSTMoutput[3].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]

Validating network. 45 nodes to process in pass 3.


Validating network, final pass.



131 out of 287 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/13/2016 04:38:43: Created model with 287 nodes on GPU 0.

07/13/2016 04:38:43: Training criterion node(s):
07/13/2016 04:38:43: 	ce = SumElements

07/13/2016 04:38:43: Evaluation criterion node(s):

07/13/2016 04:38:43: 	err = SumElements


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[BS.Constants.One Gradient[1]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [ScaledLogLikelihood._ Gradient[132 x 1 x *]] [err Gradient[1]] [err.matrix Gradient[1 x 1 x *]] [err.matrix.MinusArgs[1] Gradient[1 x 1 x *]] [err.matrix.MinusArgs[1].rightMatrix Gradient[132 x 1 x *]] [feashift Gradient[33 x 1 x *]] [featNorm Gradient[33 x 1 x *]] [featNorm.invStdDevVector Gradient[33 x 1]] [featNorm.meanVector Gradient[33 x 1]] [features Gradient[1 x 363 x *]] [labels Gradient[132 x *]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [realFeatures Gradient[363 x 1 x *]] }
000000EABFC856C0: {[B Value[132]] }
000000EABFDDD1A0: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
000000EABFDDD270: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EABFDDD410: {[featNorm.meanVector Value[33 x 1]] }
000000EABFDDD4E0: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
000000EABFDDD5B0: {[featNorm.invStdDevVector Value[33 x 1]] }
000000EABFDDD750: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
000000EABFDDD820: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].prevState.h Value[256 x 1 x *]] }
000000EABFDDD9C0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EABFDDDA90: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
000000EABFDDDB60: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
000000EABFDDDC30: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
000000EABFDDDDD0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].prevState.h Value[256 x 1 x *]] }
000000EABFDDDEA0: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
000000EABFDDE040: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
000000EABFDDE110: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
000000EABFDDE1E0: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
000000EABFDDE2B0: {[LSTMoutput[1].prevState.c Value[1024 x 1 x *]] }
000000EABFDDE380: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
000000EABFDDE450: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
000000EABFDDE520: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EABFDDE5F0: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
000000EABFDDE6C0: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
000000EABFDDE790: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
000000EABFDDE860: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
000000EABFDDE930: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
000000EABFDDEA00: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
000000EABFDDEAD0: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
000000EABFDDED40: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
000000EABFDDEE10: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
000000EABFDDEFB0: {[features Value[1 x 363 x *]] }
000000EABFDDF080: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EAC0388240: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
000000EAC0388310: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
000000EAC03883E0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
000000EAC0388580: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
000000EAC0388650: {[LSTMoutput[1].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] [LSTMoutput[2].prevState.c Value[1024 x 1 x *]] }
000000EAC0388720: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].prevState.h Value[256 x 1 x *]] }
000000EAC0388990: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EAC0388A60: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
000000EAC0388B30: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
000000EAC0388C00: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
000000EAC0388CD0: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
000000EAC0388DA0: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EAC0388E70: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
000000EAC0389010: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
000000EAC03894F0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EAC0389760: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
000000EAC0389830: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
000000EAC0389900: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EAC03899D0: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
000000EAC0389AA0: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
000000EAC0389B70: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
000000EAC0389C40: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
000000EAC0389D10: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
000000EAC0389DE0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
000000EAC0389EB0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EAC038A120: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
000000EAC03AA2C0: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
000000EAC03AA390: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
000000EAC03AA600: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
000000EAC03AA7A0: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
000000EAC03AA870: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
000000EAC03AAAE0: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EAC03AAC80: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
000000EAC03AAD50: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
000000EAC03AAE20: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
000000EAC03AAEF0: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EAC03AAFC0: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
000000EAC03AB090: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
000000EAC03AB160: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
000000EAC03AB230: {[labels Value[132 x *]] }
000000EAC03AB300: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
000000EAC03AB3D0: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
000000EAC03AB4A0: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
000000EAC03AB640: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EAC03AB710: {[logPrior._ Value[132]] }
000000EAC03AB7E0: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
000000EAC03AB8B0: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EAC03ABD90: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
000000EAC03AC000: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] [LSTMoutput[3].prevState.c Value[1024 x 1 x *]] }
000000EAC03AC0D0: {[BS.Constants.One Value[1]] }
000000EAC03AC1A0: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
000000EAC03C0310: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC03C03E0: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
000000EAC03C04B0: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
000000EAC03C0580: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
000000EAC03C08C0: {[LSTMoutput[2].lstmState._privateInnards.it._ Value[1024 x 1 x *]] }
000000EAC03C0990: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it Value[1024 x 1 x *]] }
000000EAC03C0A60: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC03C0B30: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
000000EAC03C0C00: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
000000EAC03C0CD0: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
000000EAC03C0DA0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC03C0E70: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].prevState.h Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC03C0F40: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC03C1010: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC03C10E0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC03C11B0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
000000EAC03C1280: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
000000EAC03C1420: {[err Value[1]] }
000000EAC03C14F0: {[ce Value[1]] }
000000EAC03C15C0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC03C1690: {[ScaledLogLikelihood Value[132 x 1 x *]] }
000000EAC03C1760: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
000000EAC03C1830: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
000000EAC03C1900: {[z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC03C19D0: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
000000EAC03C1AA0: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
000000EAC03C1B70: {[LSTMoutput[2].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
000000EAC03C1C40: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC03C1D10: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC03C1DE0: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
000000EAC03C1F80: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
000000EAC03C2050: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC03C2120: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC03C21F0: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
000000EAC040B140: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC040B210: {[LSTMoutput[1].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
000000EAC040B2E0: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
000000EAC040B3B0: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC040B480: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC040B550: {[LSTMoutput[1].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
000000EAC040B620: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC040B6F0: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC040B7C0: {[feashift Value[33 x 1 x *]] }
000000EAC040B890: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC040B960: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
000000EAC040BA30: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC040BB00: {[LSTMoutput[1].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
000000EAC040BBD0: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
000000EAC040BCA0: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
000000EAC040BD70: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC040BE40: {[LSTMoutput[1].lstmState.h.htp Value[256 x 1 x *]] }
000000EAC040BF10: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
000000EAC040BFE0: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC040C0B0: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] }
000000EAC040C180: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState.h.Wmr Gradient[256 x 1024]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC040C250: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC040C320: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC040C3F0: {[LSTMoutput[1].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
000000EAC040C4C0: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
000000EAC040C590: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC040C660: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
000000EAC040C730: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC040C800: {[LSTMoutput[1].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [ce.matrix Gradient[1 x 1 x *]] [ce.matrix.MinusArgs[0].out.input Value[132 x 1 x *]] [ce.matrix.MinusArgs[1] Value[1 x 1 x *]] [err.matrix.MinusArgs[1] Value[1 x 1 x *]] [z Gradient[132 x 1 x *]] [z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
000000EAC040C8D0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC040C9A0: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC040CA70: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
000000EAC040CB40: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC040CC10: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState.h.Wmr Gradient[256 x 1024]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC040CCE0: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC040CDB0: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC040CE80: {[LSTMoutput[1].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
000000EAC040CF50: {[LSTMoutput[1].lstmState.h.htp Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC040D020: {[LSTMoutput[1].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
000000EAC040D0F0: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC040D1C0: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
000000EAC040D290: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC040D360: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC040D430: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC040D500: {[logPrior Value[132]] }
000000EAC040D5D0: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
000000EAC040D6A0: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC040D770: {[LSTMoutput[1].lstmState._privateInnards.ft._ Value[1024 x 1 x *]] }
000000EAC040D840: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
000000EAC040D910: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
000000EAC040D9E0: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
000000EAC040DAB0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC040DB80: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] }
000000EAC040DC50: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC040DD20: {[LSTMoutput[1].lstmState._privateInnards.it._ Value[1024 x 1 x *]] }
000000EAC040DDF0: {[LSTMoutput[1].lstmState._privateInnards.it Value[1024 x 1 x *]] }
000000EAC040DEC0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC040DF90: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC040E060: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
000000EAC040E130: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
000000EAC040E200: {[LSTMoutput[1].lstmState._privateInnards.ot._ Value[1024 x 1 x *]] }
000000EAC040E2D0: {[LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
000000EAC040E3A0: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC040E470: {[featNorm Value[33 x 1 x *]] [realFeatures Value[363 x 1 x *]] }
000000EAC040E540: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
000000EAC040E610: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC040E6E0: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC040E7B0: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC040E880: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC040E950: {[LSTMoutput[1].lstmState._privateInnards.it Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC040EA20: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC040EAF0: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC040EBC0: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
000000EAC040EC90: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC040ED60: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] }
000000EAC040EE30: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
000000EAC040EF00: {[LSTMoutput[2].lstmState._privateInnards.ft._ Value[1024 x 1 x *]] }
000000EAC040EFD0: {[LSTMoutput[2].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
000000EAC0471320: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
000000EAC04713F0: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
000000EAC04714C0: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC0471590: {[B Gradient[132]] }
000000EAC0471660: {[LSTMoutput[2].lstmState._privateInnards.ot._ Value[1024 x 1 x *]] }
000000EAC0471730: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
000000EAC0471800: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
000000EAC04718D0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] }
000000EAC04719A0: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
000000EAC0471A70: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState.h.htp Value[256 x 1 x *]] }
000000EAC0471B40: {[LSTMoutput[3].lstmState._privateInnards.ot._ Value[1024 x 1 x *]] }
000000EAC0471C10: {[LSTMoutput[1].lstmState._privateInnards.it._ Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it Value[1024 x 1 x *]] }
000000EAC0471CE0: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState.h.htp Value[256 x 1 x *]] }
000000EAC0471DB0: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
000000EAC0471E80: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].prevState.h Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC0471F50: {[LSTMoutput[1].lstmState._privateInnards.ft._ Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
000000EAC0472020: {[LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] }
000000EAC04720F0: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC04721C0: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState.h.Wmr Gradient[256 x 1024]] [z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC0472290: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC0472360: {[LSTMoutput[1].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState.h.htp Gradient[256 x 1 x *]] [ScaledLogLikelihood._ Value[132 x 1 x *]] [ce.matrix.MinusArgs[0].out.input.MinusArgs[1] Value[132 x 1 x *]] [z.PlusArgs[0] Value[132 x 1 x *]] }
000000EAC0472430: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC0472500: {[ce.matrix Value[1 x 1 x *]] [err.matrix.MinusArgs[1].rightMatrix Value[132 x 1 x *]] }
000000EAC04725D0: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
000000EAC04726A0: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState.h.htp Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC0472770: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC0472840: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
000000EAC0472910: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
000000EAC04729E0: {[LSTMoutput[3].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
000000EAC0472AB0: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC0472B80: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._ Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
000000EAC0472C50: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[2].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
000000EAC0472D20: {[LSTMoutput[3].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
000000EAC0472DF0: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC0472EC0: {[ce Gradient[1]] [ce.matrix.MinusArgs[0].out Value[1 x 1 x *]] [err.matrix Value[1 x 1 x *]] }
000000EAC0472F90: {[LSTMoutput[1].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._ Gradient[1024 x 1 x *]] }
000000EAC0473060: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
000000EAC0473130: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
000000EAC0473200: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1] Gradient[1024 x 1 x *]] }
000000EAC04732D0: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
000000EAC04733A0: {[z.PlusArgs[0] Gradient[132 x 1 x *]] [z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] }
000000EAC0473470: {[LSTMoutput[1].prevState.c Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] }
000000EAC0473540: {[LSTMoutput[1].lstmState._privateInnards.ot._ Gradient[1024 x 1 x *]] [LSTMoutput[2].prevState.c Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] }
000000EAC0473610: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
000000EAC04736E0: {[LSTMoutput[3].lstmState._privateInnards.ft._ Value[1024 x 1 x *]] }
000000EAC04737B0: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC0473880: {[LSTMoutput[3].lstmState._privateInnards.it._ Value[1024 x 1 x *]] }
000000EAC0473950: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
000000EAC0473A20: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC0473AF0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
000000EAC0473BC0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it Gradient[1024 x 1 x *]] }
000000EAC0473C90: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] [ce.matrix.MinusArgs[0].out.input Gradient[132 x 1 x *]] [ce.matrix.MinusArgs[1] Gradient[1 x 1 x *]] }
000000EAC0473D60: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
000000EAC0473E30: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC0473F00: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC0473FD0: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0] Value[1024 x 1 x *]] }
000000EAC04740A0: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
000000EAC0474170: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
000000EAC0474240: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
000000EAC0474310: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
000000EAC04743E0: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [W Gradient[132 x 256]] [z Value[132 x 1 x *]] }
000000EAC04744B0: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] }
000000EAC0474580: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
000000EAC0474650: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [ce.matrix.MinusArgs[0].out Gradient[1 x 1 x *]] [ce.matrix.MinusArgs[0].out.input.MinusArgs[1] Gradient[132 x 1 x *]] [z.PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] }
000000EAC0474720: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1] Gradient[1024 x 1 x *]] }
000000EAC04747F0: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
000000EAC04748C0: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
000000EAC0474990: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] }
000000EAC0474A60: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].prevState.h Gradient[256 x 1 x *]] }
000000EAC0474B30: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
000000EAC0474C00: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
000000EAC0474CD0: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] }
000000EAC0474DA0: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] }
000000EAC0474E70: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
000000EAC0474F40: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.it._ Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
000000EAC0475010: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.it._ Gradient[1024 x 1 x *]] }
000000EAC04750E0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0] Gradient[1024 x 1 x *]] }
000000EAC04751B0: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] }
000000EAC047D340: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
000000EAC047D410: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
000000EAC047D680: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
000000EAC047D750: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
000000EAC047D9C0: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
000000EAC047DA90: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
000000EAC047DB60: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
000000EAC047DC30: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] }
000000EAC047DDD0: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
000000EAC047DF70: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] }
000000EAC047E040: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
000000EAC047E2B0: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
000000EAC047E380: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
000000EAC047E6C0: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._ Gradient[1024 x 1 x *]] }
000000EAC047E860: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
000000EAC047EAD0: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0] Gradient[1024 x 1 x *]] }
000000EAC047EBA0: {[LSTMoutput[1].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] }
000000EAC047ED40: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta._ Gradient[1]] }
000000EAC047EEE0: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
000000EAC047EFB0: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
000000EAC047F080: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
000000EAC047F150: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta._ Gradient[1]] }
000000EAC047F220: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] }
000000EAC047F490: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
000000EAC047F560: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
000000EAC047F630: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
000000EAC047F700: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
000000EAC047F970: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
000000EAC047FA40: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
000000EAC047FB10: {[LSTMoutput[1].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._ Gradient[1024 x 1 x *]] [LSTMoutput[3].prevState.c Gradient[1024 x 1 x *]] }
000000EAC047FBE0: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
000000EAC047FCB0: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] }
000000EAC047FD80: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
000000EAC047FE50: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
000000EAC04800C0: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
000000EAC04805A0: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1] Gradient[1024 x 1 x *]] }
000000EAC0480670: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta._ Gradient[1]] }
000000EAD0E79820: {[LSTMoutput[1].lstmState.h.Wmr Value[256 x 1024]] }
000000EAD0E798F0: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
000000EAD0E79C30: {[W Value[132 x 256]] }
000000EAD0E79D00: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EAD0E79DD0: {[LSTMoutput[3].lstmState.h.Wmr Value[256 x 1024]] }
000000EAD0E79F70: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta._ Value[1]] }
000000EAD0E7A110: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
000000EAD0E7A1E0: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
000000EAD0E7A380: {[z.PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EAD0E7A860: {[LSTMoutput[2].lstmState.h.Wmr Value[256 x 1024]] }
000000EAD0E7ABA0: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
000000EAD0E7AC70: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
000000EAD0E7AD40: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta._ Value[1]] }
000000EAD0E7AEE0: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta._ Value[1]] }
000000EAD0E7B2F0: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
000000EAD0E7B630: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }


07/13/2016 04:38:43: Precomputing --> 3 PreCompute nodes found.

07/13/2016 04:38:43: 	featNorm.meanVector = Mean()
07/13/2016 04:38:43: 	featNorm.invStdDevVector = InvStdDev()
07/13/2016 04:38:43: 	logPrior._ = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/13/2016 04:38:55: Precomputing --> Completed.


07/13/2016 04:38:57: Starting Epoch 1: learning rate per sample = 0.025000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..2560] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

07/13/2016 04:38:57: Starting minibatch loop.
07/13/2016 04:39:06:  Epoch[ 1 of 2]-Minibatch[   1-   1, 0.78%]: ce = 4.88304402 * 716; err = 0.99581006 * 716; time = 8.7283s; samplesPerSecond = 82.0
07/13/2016 04:39:16:  Epoch[ 1 of 2]-Minibatch[   2-   2, 1.56%]: ce = 4.42834615 * 856; err = 0.91822430 * 856; time = 10.7170s; samplesPerSecond = 79.9
07/13/2016 04:39:22:  Epoch[ 1 of 2]-Minibatch[   3-   3, 2.34%]: ce = 7.29730929 * 416; err = 0.94471154 * 416; time = 5.7459s; samplesPerSecond = 72.4
07/13/2016 04:39:29:  Epoch[ 1 of 2]-Minibatch[   4-   4, 3.13%]: ce = 4.73515657 * 616; err = 0.88961039 * 616; time = 7.2662s; samplesPerSecond = 84.8
07/13/2016 04:39:29: Finished Epoch[ 1 of 2]: [Training] ce = 5.08427839 * 2604; err = 0.93701997 * 2604; totalSamplesSeen = 2604; learningRatePerSample = 0.025; epochTime=32.4916s
07/13/2016 04:39:30: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu/models/cntkSpeech.dnn.1'

07/13/2016 04:39:31: Starting Epoch 2: learning rate per sample = 0.025000  effective momentum = 0.900000  momentum as time constant = 189.8 samples
minibatchiterator: epoch 1: frames [2560..5120] (first utterance at frame 2604), data subset 0 of 1, with 1 datapasses

07/13/2016 04:39:31: Starting minibatch loop.
07/13/2016 04:39:42:  Epoch[ 2 of 2]-Minibatch[   1-   1, 0.78%]: ce = 4.54555474 * 824; err = 0.85072816 * 824; time = 11.4331s; samplesPerSecond = 72.1
07/13/2016 04:39:47:  Epoch[ 2 of 2]-Minibatch[   2-   2, 1.56%]: ce = 4.40765712 * 406; err = 0.91871921 * 406; time = 4.7010s; samplesPerSecond = 86.4
07/13/2016 04:39:57:  Epoch[ 2 of 2]-Minibatch[   3-   3, 2.34%]: ce = 4.12002853 * 716; err = 0.92737430 * 716; time = 10.2504s; samplesPerSecond = 69.9
07/13/2016 04:40:03:  Epoch[ 2 of 2]-Minibatch[   4-   4, 3.13%]: ce = 3.82479055 * 456; err = 0.80921053 * 456; time = 5.5308s; samplesPerSecond = 82.4
07/13/2016 04:40:09:  Epoch[ 2 of 2]-Minibatch[   5-   5, 3.91%]: ce = 4.26283798 * 486; err = 0.87448560 * 486; time = 5.8439s; samplesPerSecond = 83.2
07/13/2016 04:40:09: Finished Epoch[ 2 of 2]: [Training] ce = 4.25929019 * 2888; err = 0.87673130 * 2888; totalSamplesSeen = 5492; learningRatePerSample = 0.025; epochTime=37.7843s
07/13/2016 04:40:10: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160713043135.556732\Speech\LSTM_FullUtterance@debug_gpu/models/cntkSpeech.dnn'
07/13/2016 04:40:10: CNTKCommandTrainEnd: speechTrain

07/13/2016 04:40:10: Action "train" complete.

07/13/2016 04:40:10: __COMPLETED__