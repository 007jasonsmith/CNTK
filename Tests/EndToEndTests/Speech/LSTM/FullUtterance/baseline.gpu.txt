CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/debug/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/FullUtterance/../cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/FullUtterance/.. OutputDir=/tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu DeviceId=0 timestamping=true Truncated=false speechTrain=[reader=[nbruttsineachrecurrentiter=2]] speechTrain=[SGD=[epochSize=2560]] speechTrain=[SGD=[maxEpochs=2]] speechTrain=[SGD=[numMBsToShowResult=1]] shareNodeValueMatrices=true
-------------------------------------------------------------------
Build info: 

		Built time: Jul 13 2016 11:58:00
		Last modified date: Tue Jul 12 04:28:35 2016
		Build type: debug
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 50bb4c8afbc87c14548a5b5f315a064186a5cb5f
		Built by philly on 2bc22072e267
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
07/13/2016 12:21:41: -------------------------------------------------------------------
07/13/2016 12:21:41: Build info: 

07/13/2016 12:21:41: 		Built time: Jul 13 2016 11:58:00
07/13/2016 12:21:41: 		Last modified date: Tue Jul 12 04:28:35 2016
07/13/2016 12:21:41: 		Build type: debug
07/13/2016 12:21:41: 		Build target: GPU
07/13/2016 12:21:41: 		With 1bit-SGD: no
07/13/2016 12:21:41: 		Math lib: mkl
07/13/2016 12:21:41: 		CUDA_PATH: /usr/local/cuda-7.5
07/13/2016 12:21:41: 		CUB_PATH: /usr/local/cub-1.4.1
07/13/2016 12:21:41: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/13/2016 12:21:41: 		Build Branch: HEAD
07/13/2016 12:21:41: 		Build SHA1: 50bb4c8afbc87c14548a5b5f315a064186a5cb5f
07/13/2016 12:21:41: 		Built by philly on 2bc22072e267
07/13/2016 12:21:41: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
07/13/2016 12:21:41: -------------------------------------------------------------------
07/13/2016 12:21:42: -------------------------------------------------------------------
07/13/2016 12:21:42: GPU info:

07/13/2016 12:21:42: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 12:21:42: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 12:21:42: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 12:21:42: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/13/2016 12:21:42: -------------------------------------------------------------------

07/13/2016 12:21:42: Running on localhost at 2016/07/13 12:21:42
07/13/2016 12:21:42: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/debug/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/FullUtterance/../cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/FullUtterance/..  OutputDir=/tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu  DeviceId=0  timestamping=true  Truncated=false  speechTrain=[reader=[nbruttsineachrecurrentiter=2]]  speechTrain=[SGD=[epochSize=2560]]  speechTrain=[SGD=[maxEpochs=2]]  speechTrain=[SGD=[numMBsToShowResult=1]]  shareNodeValueMatrices=true



07/13/2016 12:21:42: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/13/2016 12:21:42: precision = "float"
deviceId = $DeviceId$
command = speechTrain
// Note: These options are overridden from the command line in some test cases.
frameMode = false
truncated = true
parallelTrain = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        Stabilize (x, enabled=true) =
            if enabled
            then [
beta = Exp (BS.Parameters.BiasParam ((1))) 
                result = beta .* x
            ].result
            else x
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        ce  = /*Pass*/ SumElements (ReduceLogSum (z) - TransposeTimes (labels,          z),  tag='criterion')  // manually-defined per-sample objective
        err = /*Pass*/ SumElements (BS.Constants.One - TransposeTimes (labels, Hardmax (z)), tag='evaluation') // also track frame errors
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output') // using Pass() since we can't assign a tag to x - y
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/FullUtterance/..
OutputDir=/tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu
DeviceId=0
timestamping=true
Truncated=false
speechTrain=[reader=[nbruttsineachrecurrentiter=2]]
speechTrain=[SGD=[epochSize=2560]]
speechTrain=[SGD=[maxEpochs=2]]
speechTrain=[SGD=[numMBsToShowResult=1]]
shareNodeValueMatrices=true

07/13/2016 12:21:42: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/13/2016 12:21:42: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/13/2016 12:21:42: precision = "float"
deviceId = 0
command = speechTrain
// Note: These options are overridden from the command line in some test cases.
frameMode = false
truncated = true
parallelTrain = false
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        Stabilize (x, enabled=true) =
            if enabled
            then [
beta = Exp (BS.Parameters.BiasParam ((1))) 
                result = beta .* x
            ].result
            else x
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        ce  = /*Pass*/ SumElements (ReduceLogSum (z) - TransposeTimes (labels,          z),  tag='criterion')  // manually-defined per-sample objective
        err = /*Pass*/ SumElements (BS.Constants.One - TransposeTimes (labels, Hardmax (z)), tag='evaluation') // also track frame errors
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output') // using Pass() since we can't assign a tag to x - y
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/FullUtterance/..
OutputDir=/tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu
DeviceId=0
timestamping=true
Truncated=false
speechTrain=[reader=[nbruttsineachrecurrentiter=2]]
speechTrain=[SGD=[epochSize=2560]]
speechTrain=[SGD=[maxEpochs=2]]
speechTrain=[SGD=[numMBsToShowResult=1]]
shareNodeValueMatrices=true

07/13/2016 12:21:42: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/13/2016 12:21:42: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:// Note: These options are overridden from the command line in some test cases.=true
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/FullUtterance/..
configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:frameMode=false
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu
configparameters: cntk.cntk:shareNodeValueMatrices=true
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        Stabilize (x, enabled=true) =
            if enabled
            then [
beta = Exp (BS.Parameters.BiasParam ((1))) 
                result = beta .* x
            ].result
            else x
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        ce  = /*Pass*/ SumElements (ReduceLogSum (z) - TransposeTimes (labels,          z),  tag='criterion')  // manually-defined per-sample objective
        err = /*Pass*/ SumElements (BS.Constants.One - TransposeTimes (labels, Hardmax (z)), tag='evaluation') // also track frame errors
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output') // using Pass() since we can't assign a tag to x - y
    ]
] [reader=[nbruttsineachrecurrentiter=2]] [SGD=[epochSize=2560]] [SGD=[maxEpochs=2]] [SGD=[numMBsToShowResult=1]]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:truncated=false
07/13/2016 12:21:42: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/13/2016 12:21:42: Commands: speechTrain
07/13/2016 12:21:42: Precision = "float"
07/13/2016 12:21:42: CNTKModelPath: /tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu/models/cntkSpeech.dnn
07/13/2016 12:21:42: CNTKCommandTrainInfo: speechTrain : 2
07/13/2016 12:21:42: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 2

07/13/2016 12:21:42: ##############################################################################
07/13/2016 12:21:42: #                                                                            #
07/13/2016 12:21:42: # Action "train"                                                             #
07/13/2016 12:21:42: #                                                                            #
07/13/2016 12:21:42: ##############################################################################

07/13/2016 12:21:42: CNTKCommandTrainBegin: speechTrain
reading script file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.scp ... 948 entries
total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/13/2016 12:21:42: Creating virgin network.

Post-processing network...

6 roots:
	ScaledLogLikelihood = Pass()
	ce = SumElements()
	err = SumElements()
	featNorm.invStdDevVector = InvStdDev()
	featNorm.meanVector = Mean()
	logPrior._ = Mean()

Loop[0] --> Loop_LSTMoutput[1].lstmState.h.htp -> 35 nodes

	LSTMoutput[1].prevState.h	LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0]	LSTMoutput[1].prevState.c	LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.ft._	LSTMoutput[1].lstmState._privateInnards.ft
	LSTMoutput[1].lstmState._privateInnards.bft	LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.it._	LSTMoutput[1].lstmState._privateInnards.it	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[1].lstmState._privateInnards.bit	LSTMoutput[1].lstmState._privateInnards.ct
	LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.ot._
	LSTMoutput[1].lstmState._privateInnards.ot	LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[1].lstmState._privateInnards.ht
	LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[1].lstmState.h.htp

Loop[1] --> Loop_LSTMoutput[2].lstmState.h.htp -> 35 nodes

	LSTMoutput[2].prevState.h	LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0]	LSTMoutput[2].prevState.c	LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.ft._	LSTMoutput[2].lstmState._privateInnards.ft
	LSTMoutput[2].lstmState._privateInnards.bft	LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.it._	LSTMoutput[2].lstmState._privateInnards.it	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[2].lstmState._privateInnards.bit	LSTMoutput[2].lstmState._privateInnards.ct
	LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.ot._
	LSTMoutput[2].lstmState._privateInnards.ot	LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[2].lstmState._privateInnards.ht
	LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[2].lstmState.h.htp

Loop[2] --> Loop_LSTMoutput[3].lstmState.h.htp -> 35 nodes

	LSTMoutput[3].prevState.h	LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0]	LSTMoutput[3].prevState.c	LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.ft._	LSTMoutput[3].lstmState._privateInnards.ft
	LSTMoutput[3].lstmState._privateInnards.bft	LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.it._	LSTMoutput[3].lstmState._privateInnards.it	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[3].lstmState._privateInnards.bit	LSTMoutput[3].lstmState._privateInnards.ct
	LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.ot._
	LSTMoutput[3].lstmState._privateInnards.ot	LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[3].lstmState._privateInnards.ht
	LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[3].lstmState.h.htp

Validating network. 287 nodes to process in pass 1.

Validating --> W = LearnableParameter() :  -> [132 x 256]
Validating --> z.PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.PlusArgs[0].TimesArgs[1].beta = Exp (z.PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> features = InputValue() :  -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions (features) : [1 x 363 x *] -> [363 x 1 x *]
Validating --> feashift = Slice (realFeatures) : [363 x 1 x *] -> [33 x 1 x *]
Validating --> featNorm.meanVector = Mean (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm.invStdDevVector = InvStdDev (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (feashift, featNorm.meanVector, featNorm.invStdDevVector) : [33 x 1 x *], [33 x 1], [33 x 1] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._ = Plus (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[1].lstmState._privateInnards.ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft, LSTMoutput[1].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._ = Plus (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it = Sigmoid (LSTMoutput[1].lstmState._privateInnards.it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it, LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ct = Plus (LSTMoutput[1].lstmState._privateInnards.bft, LSTMoutput[1].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._ = Plus (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[1].lstmState._privateInnards.ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[1].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot, LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[1].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState.h.htp = Times (LSTMoutput[1].lstmState.h.Wmr, LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._ = Plus (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[2].lstmState._privateInnards.ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft, LSTMoutput[2].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._ = Plus (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it = Sigmoid (LSTMoutput[2].lstmState._privateInnards.it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it, LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ct = Plus (LSTMoutput[2].lstmState._privateInnards.bft, LSTMoutput[2].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._ = Plus (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[2].lstmState._privateInnards.ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[2].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot, LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[2].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState.h.htp = Times (LSTMoutput[2].lstmState.h.Wmr, LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._ = Plus (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[3].lstmState._privateInnards.ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft, LSTMoutput[3].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._ = Plus (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it = Sigmoid (LSTMoutput[3].lstmState._privateInnards.it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it, LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ct = Plus (LSTMoutput[3].lstmState._privateInnards.bft, LSTMoutput[3].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._ = Plus (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[3].lstmState._privateInnards.ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[3].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot, LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[3].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState.h.htp = Times (LSTMoutput[3].lstmState.h.Wmr, LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> z.PlusArgs[0].TimesArgs[1].result = ElementTimes (z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.PlusArgs[0] = Times (W, z.PlusArgs[0].TimesArgs[1].result) : [132 x 256], [256 x 1 x *] -> [132 x 1 x *]
Validating --> B = LearnableParameter() :  -> [132]
Validating --> z = Plus (z.PlusArgs[0], B) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> labels = InputValue() :  -> [132 x *]
Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior = Log (logPrior._) : [132] -> [132]
Validating --> ScaledLogLikelihood._ = Minus (z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> ScaledLogLikelihood = Pass (ScaledLogLikelihood._) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> ce.matrix.MinusArgs[0].out.input.MinusArgs[1] = LogSoftmax (z) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> ce.matrix.MinusArgs[0].out.input = Minus (z, ce.matrix.MinusArgs[0].out.input.MinusArgs[1]) : [132 x 1 x *], [132 x 1 x *] -> [132 x 1 x *]
Validating --> ce.matrix.MinusArgs[0].out = Slice (ce.matrix.MinusArgs[0].out.input) : [132 x 1 x *] -> [1 x 1 x *]
Validating --> ce.matrix.MinusArgs[1] = TransposeTimes (labels, z) : [132 x *], [132 x 1 x *] -> [1 x 1 x *]
Validating --> ce.matrix = Minus (ce.matrix.MinusArgs[0].out, ce.matrix.MinusArgs[1]) : [1 x 1 x *], [1 x 1 x *] -> [1 x 1 x *]
Validating --> ce = SumElements (ce.matrix) : [1 x 1 x *] -> [1]
Validating --> BS.Constants.One = LearnableParameter() :  -> [1]
Validating --> err.matrix.MinusArgs[1].rightMatrix = Hardmax (z) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> err.matrix.MinusArgs[1] = TransposeTimes (labels, err.matrix.MinusArgs[1].rightMatrix) : [132 x *], [132 x 1 x *] -> [1 x 1 x *]
Validating --> err.matrix = Minus (BS.Constants.One, err.matrix.MinusArgs[1]) : [1], [1 x 1 x *] -> [1 x 1 x *]
Validating --> err = SumElements (err.matrix) : [1 x 1 x *] -> [1]

Validating network. 197 nodes to process in pass 2.

Validating --> LSTMoutput[1].prevState.h = PastValue (LSTMoutput[1].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].prevState.c = PastValue (LSTMoutput[1].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].prevState.h = PastValue (LSTMoutput[2].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].prevState.c = PastValue (LSTMoutput[2].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].prevState.h = PastValue (LSTMoutput[3].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].prevState.c = PastValue (LSTMoutput[3].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]

Validating network. 45 nodes to process in pass 3.


Validating network, final pass.



131 out of 287 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/13/2016 12:21:44: Created model with 287 nodes on GPU 0.

07/13/2016 12:21:44: Training criterion node(s):
07/13/2016 12:21:44: 	ce = SumElements

07/13/2016 12:21:44: Evaluation criterion node(s):

07/13/2016 12:21:44: 	err = SumElements


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[BS.Constants.One Gradient[1]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [ScaledLogLikelihood._ Gradient[132 x 1 x *]] [err Gradient[1]] [err.matrix Gradient[1 x 1 x *]] [err.matrix.MinusArgs[1] Gradient[1 x 1 x *]] [err.matrix.MinusArgs[1].rightMatrix Gradient[132 x 1 x *]] [feashift Gradient[33 x 1 x *]] [featNorm Gradient[33 x 1 x *]] [featNorm.invStdDevVector Gradient[33 x 1]] [featNorm.meanVector Gradient[33 x 1]] [features Gradient[1 x 363 x *]] [labels Gradient[132 x *]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [realFeatures Gradient[363 x 1 x *]] }
0x7f345d611ba8: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7f345d611de8: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7f345d612028: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d612368: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7f345d6125a8: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7f345d6127e8: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d612b28: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7f345d615448: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0x7f345d616788: {[z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d616948: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
0x7f345d616b08: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d616cc8: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
0x7f345d616e88: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d617048: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
0x7f345d617208: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d619888: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7f345d619ac8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d619dc8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d61abc8: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7f345d61ae08: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7f345d61b048: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d61b388: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7f345d61b5c8: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7f345d61b808: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d61bb48: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7f345d61bd88: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7f345d61bfc8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d61c2c8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d61d0c8: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7f345d61d308: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7f345d61d548: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d61d888: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7f345d61dac8: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7f345d61dd08: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d61e048: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7f345d61e288: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7f345d61e4c8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d61e7c8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7f345d61f5c8: {[logPrior Value[132]] }
0x7f345d630ec8: {[feashift Value[33 x 1 x *]] }
0x7f345d630fe8: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] }
0x7f345d631f08: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] }
0x7f345d633a18: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d634118: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d634a08: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d634b68: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d634cc8: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d634e28: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState.h.Wmr Gradient[256 x 1024]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d634f88: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d6350e8: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d635248: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d6353a8: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d635508: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d6355a8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7f345d636f38: {[featNorm Value[33 x 1 x *]] [realFeatures Value[363 x 1 x *]] }
0x7f345d6371d8: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d637338: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7f345d637498: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d6375f8: {[LSTMoutput[1].lstmState._privateInnards.ft._ Value[1024 x 1 x *]] }
0x7f345d637758: {[LSTMoutput[1].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
0x7f345d6378b8: {[LSTMoutput[1].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
0x7f345d637a18: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d637b78: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d637cd8: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d637e38: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7f345d637f98: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d6380f8: {[LSTMoutput[1].lstmState._privateInnards.it._ Value[1024 x 1 x *]] }
0x7f345d638258: {[LSTMoutput[1].lstmState._privateInnards.it Value[1024 x 1 x *]] }
0x7f345d6383b8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d638518: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d638678: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d6387d8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x7f345d63aa08: {[LSTMoutput[1].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
0x7f345d63ab68: {[LSTMoutput[1].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
0x7f345d63acc8: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7f345d63ae28: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d63af88: {[LSTMoutput[1].lstmState._privateInnards.ot._ Value[1024 x 1 x *]] }
0x7f345d63b0e8: {[LSTMoutput[1].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
0x7f345d63b248: {[LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7f345d63b3a8: {[LSTMoutput[1].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
0x7f345d63b508: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
0x7f345d63b668: {[LSTMoutput[1].lstmState.h.htp Value[256 x 1 x *]] }
0x7f345d63b7c8: {[LSTMoutput[1].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [ce.matrix Gradient[1 x 1 x *]] [ce.matrix.MinusArgs[0].out.input Value[132 x 1 x *]] [ce.matrix.MinusArgs[1] Value[1 x 1 x *]] [err.matrix.MinusArgs[1] Value[1 x 1 x *]] [z Gradient[132 x 1 x *]] [z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7f345d63b928: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d63ba88: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d63bc48: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState.h.Wmr Gradient[256 x 1024]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d63be08: {[LSTMoutput[1].lstmState.h.htp Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d63bfc8: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d63c188: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d63c348: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] }
0x7f345d63c508: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d63c6c8: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d63c888: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7f345d63ca48: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d63cc08: {[LSTMoutput[2].lstmState._privateInnards.ft._ Value[1024 x 1 x *]] }
0x7f345d63cdc8: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
0x7f345d63cf88: {[LSTMoutput[2].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
0x7f345d63d148: {[LSTMoutput[1].lstmState._privateInnards.it Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d63d308: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d63d4c8: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d63d688: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7f345d63d848: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d63da08: {[LSTMoutput[2].lstmState._privateInnards.it._ Value[1024 x 1 x *]] }
0x7f345d63dbc8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it Value[1024 x 1 x *]] }
0x7f345d63dd88: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].prevState.h Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d63df48: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d63e108: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d63e2c8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x7f345d63e488: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7f345d63e648: {[LSTMoutput[2].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
0x7f345d63e808: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[2].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
0x7f345d63e9c8: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7f345d63eb88: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d63ed48: {[LSTMoutput[2].lstmState._privateInnards.ot._ Value[1024 x 1 x *]] }
0x7f345d63ef08: {[LSTMoutput[1].lstmState._privateInnards.ft._ Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
0x7f345d63f0c8: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7f345d63f288: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
0x7f345d63f448: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
0x7f345d63f608: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState.h.htp Value[256 x 1 x *]] }
0x7f345d63f7c8: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [W Gradient[132 x 256]] [z Value[132 x 1 x *]] }
0x7f345d63f988: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d63fb48: {[LSTMoutput[1].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState.h.htp Gradient[256 x 1 x *]] [ScaledLogLikelihood._ Value[132 x 1 x *]] [ce.matrix.MinusArgs[0].out.input.MinusArgs[1] Value[132 x 1 x *]] [z.PlusArgs[0] Value[132 x 1 x *]] }
0x7f345d63fd08: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState.h.Wmr Gradient[256 x 1024]] [z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d63fec8: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState.h.htp Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d640088: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d640248: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d640408: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] }
0x7f345d6405c8: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d640788: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d640948: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7f345d640b08: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d640cc8: {[LSTMoutput[3].lstmState._privateInnards.ft._ Value[1024 x 1 x *]] }
0x7f345d640e88: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
0x7f345d641048: {[LSTMoutput[3].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
0x7f345d641208: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d6413c8: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d641588: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d641748: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7f345d641908: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d641ac8: {[LSTMoutput[3].lstmState._privateInnards.it._ Value[1024 x 1 x *]] }
0x7f345d641c88: {[LSTMoutput[1].lstmState._privateInnards.it._ Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it Value[1024 x 1 x *]] }
0x7f345d641e48: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].prevState.h Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7f345d642008: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x7f345d6421c8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d642388: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x7f345d642548: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7f345d642708: {[LSTMoutput[3].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
0x7f345d6428c8: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
0x7f345d642a88: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7f345d642c48: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7f345d642e08: {[LSTMoutput[3].lstmState._privateInnards.ot._ Value[1024 x 1 x *]] }
0x7f345d642fc8: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._ Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
0x7f345d643188: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7f345d643348: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
0x7f345d643508: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
0x7f345d6436c8: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState.h.htp Value[256 x 1 x *]] }
0x7f345d643888: {[ce Gradient[1]] [ce.matrix.MinusArgs[0].out Value[1 x 1 x *]] [err.matrix Value[1 x 1 x *]] }
0x7f345d643a48: {[ce.matrix Value[1 x 1 x *]] [err.matrix.MinusArgs[1].rightMatrix Value[132 x 1 x *]] }
0x7f345d643c08: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [ce.matrix.MinusArgs[0].out Gradient[1 x 1 x *]] [ce.matrix.MinusArgs[0].out.input.MinusArgs[1] Gradient[132 x 1 x *]] [z.PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] }
0x7f345d643dc8: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] [ce.matrix.MinusArgs[0].out.input Gradient[132 x 1 x *]] [ce.matrix.MinusArgs[1] Gradient[1 x 1 x *]] }
0x7f345d643f88: {[B Gradient[132]] }
0x7f345d644148: {[z.PlusArgs[0] Gradient[132 x 1 x *]] [z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] }
0x7f345d644398: {[LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] }
0x7f345d644558: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x7f345d644718: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] }
0x7f345d6448d8: {[LSTMoutput[1].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._ Gradient[1024 x 1 x *]] }
0x7f345d644a98: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7f345d644c58: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7f345d644e18: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
0x7f345d644fd8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
0x7f345d645198: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
0x7f345d645358: {[LSTMoutput[1].prevState.c Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] }
0x7f345d645518: {[LSTMoutput[1].lstmState._privateInnards.ot._ Gradient[1024 x 1 x *]] [LSTMoutput[2].prevState.c Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] }
0x7f345d6456d8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it Gradient[1024 x 1 x *]] }
0x7f345d645898: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x7f345d645a58: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] }
0x7f345d645c18: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] }
0x7f345d645dd8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7f345d645f98: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7f345d646158: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] }
0x7f345d646318: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7f345d6464d8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.it._ Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7f345d646698: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] }
0x7f345d646858: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].prevState.h Gradient[256 x 1 x *]] }
0x7f345d646a18: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.it._ Gradient[1024 x 1 x *]] }
0x7f345d646bd8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7f345d646d98: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7f345d646f58: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
0x7f345d647118: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
0x7f345d6472d8: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
0x7f345d647498: {[LSTMoutput[1].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._ Gradient[1024 x 1 x *]] [LSTMoutput[3].prevState.c Gradient[1024 x 1 x *]] }
0x7f345d647658: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7f345d647818: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7f345d6479d8: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7f345d647b98: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7f345d647d58: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] }
0x7f345d647f18: {[LSTMoutput[1].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] }
0x7f345d6480d8: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._ Gradient[1024 x 1 x *]] }
0x7f345d648298: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7f345d648458: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7f345d648618: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
0x7f345d6487d8: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
0x7f345d648998: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
0x7f345d648b58: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7f345d648d18: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7f345d648ed8: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7f345d649098: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7f345d649258: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] }
0x7f345d649418: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7f345d6495d8: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7f345d649798: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7f345d649958: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7f345d649b18: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta._ Gradient[1]] }
0x7f345d649cd8: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] }
0x7f345d649e98: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7f345d64a4c8: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7f345d64a628: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7f345d64a788: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7f345d64a948: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta._ Gradient[1]] }
0x7f345d64ab08: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ Gradient[1]] }
0x7f345d64acc8: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x7f345d64ae88: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7f345d64b048: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7f345d64b208: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7f345d64b3c8: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta._ Gradient[1]] }
0x7f345da72ac8: {[W Value[132 x 256]] }
0x7f345da74bc8: {[labels Value[132 x *]] }
0x7f345da75148: {[z.PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345da77fb8: {[LSTMoutput[3].lstmState.h.Wmr Value[256 x 1024]] }
0x7f345da79d98: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta._ Value[1]] }
0x7f345da7bb28: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7f345da7c978: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
0x7f345da7d658: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7f345da7eed8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[2].prevState.h Value[256 x 1 x *]] }
0x7f345da7f258: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x7f345da7ff48: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345da82428: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[3].prevState.h Value[256 x 1 x *]] }
0x7f345da83368: {[LSTMoutput[2].lstmState.h.Wmr Value[256 x 1024]] }
0x7f345da84f78: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta._ Value[1]] }
0x7f345da85fd8: {[LSTMoutput[1].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] [LSTMoutput[2].prevState.c Value[1024 x 1 x *]] }
0x7f345da871d8: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
0x7f345da88a68: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7f345da8b028: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345da8e458: {[LSTMoutput[1].lstmState.h.Wmr Value[256 x 1024]] }
0x7f345da90058: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta._ Value[1]] }
0x7f345da92a48: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7f345da937c8: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x7f345da94e88: {[featNorm.meanVector Value[33 x 1]] }
0x7f345da953b8: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7f345da95ba8: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345da992c8: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7f345da9a218: {[features Value[1 x 363 x *]] }
0x7f345da9c848: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
0x7f345da9dbb8: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x7f345da9f2e8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ Gradient[1]] [LSTMoutput[1].prevState.h Value[256 x 1 x *]] }
0x7f345da9ff98: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x7f345daa21d8: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x7f345daa2a88: {[LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
0x7f345daa4ba8: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x7f345daa4e58: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7f345daa6308: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7f345daa7a68: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345daaaf88: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
0x7f345daaca68: {[LSTMoutput[1].prevState.c Value[1024 x 1 x *]] }
0x7f345daad5d8: {[LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
0x7f345daaf9c8: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x7f345daafd88: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7f345dab2038: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345dab2c88: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7f345dab4708: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7f345dab4858: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x7f345dab5588: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
0x7f345dab5f08: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x7f345dab76f8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x7f345dab7b28: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
0x7f345dabab58: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345dabc048: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7f345dabdc08: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345dac25b8: {[LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
0x7f345dac2c18: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x7f345dac3db8: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x7f345dac4a78: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7f345dac4e58: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7f345dac7958: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345dac8608: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7f345dacaf58: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
0x7f345dacd498: {[LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
0x7f345dacfb38: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7f345dad2228: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7f345dad2308: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345dad30a8: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7f345dad35a8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x7f345dad3938: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x7f345dad3a88: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7f345dad5908: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
0x7f345dad62b8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7f345dad7ec8: {[LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
0x7f345dadb148: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345dadc808: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7f345dade2d8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345dae2398: {[LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
0x7f345dae24f8: {[ce Value[1]] }
0x7f345dae3148: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7f345dae57b8: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7f345dae8118: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345dae88a8: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7f345dae9158: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7f345daeb5a8: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x7f345daeb6b8: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
0x7f345daedde8: {[LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
0x7f345daee748: {[LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] [LSTMoutput[3].prevState.c Value[1024 x 1 x *]] }
0x7f345daeff48: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7f345daf2328: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x7f345daf2a38: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345daf38d8: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7f345daf60b8: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ Value[1]] }
0x7f345daf85f8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7f345daf8698: {[LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ Value[1]] }
0x7f345dafb428: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7f345dafb968: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345dafe948: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ Value[1]] }
0x7f345dafff68: {[logPrior._ Value[132]] }
0x7f345f493658: {[err Value[1]] }
0x7f345f496688: {[BS.Constants.One Value[1]] }
0x7f3464581bb8: {[B Value[132]] }
0x7f34645bd7f8: {[featNorm.invStdDevVector Value[33 x 1]] }


07/13/2016 12:21:44: Precomputing --> 3 PreCompute nodes found.

07/13/2016 12:21:44: 	featNorm.meanVector = Mean()
07/13/2016 12:21:44: 	featNorm.invStdDevVector = InvStdDev()
07/13/2016 12:21:44: 	logPrior._ = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/13/2016 12:21:49: Precomputing --> Completed.


07/13/2016 12:21:49: Starting Epoch 1: learning rate per sample = 0.025000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..2560] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

07/13/2016 12:21:49: Starting minibatch loop.
07/13/2016 12:21:52:  Epoch[ 1 of 2]-Minibatch[   1-   1, 0.78%]: ce = 4.88244487 * 516; err = 0.99418605 * 516; time = 2.8591s; samplesPerSecond = 180.5
07/13/2016 12:21:54:  Epoch[ 1 of 2]-Minibatch[   2-   2, 1.56%]: ce = 4.49980351 * 456; err = 0.85087719 * 456; time = 2.1581s; samplesPerSecond = 211.3
07/13/2016 12:21:57:  Epoch[ 1 of 2]-Minibatch[   3-   3, 2.34%]: ce = 4.06728363 * 704; err = 0.81534091 * 704; time = 3.0496s; samplesPerSecond = 230.9
07/13/2016 12:21:59:  Epoch[ 1 of 2]-Minibatch[   4-   4, 3.12%]: ce = 4.57844851 * 566; err = 0.90282686 * 566; time = 2.3447s; samplesPerSecond = 241.4
07/13/2016 12:22:02:  Epoch[ 1 of 2]-Minibatch[   5-   5, 3.91%]: ce = 4.13724360 * 454; err = 0.93171806 * 454; time = 2.1071s; samplesPerSecond = 215.5
07/13/2016 12:22:02: Finished Epoch[ 1 of 2]: [Training] ce = 4.41555270 * 2696; err = 0.89354599 * 2696; totalSamplesSeen = 2696; learningRatePerSample = 0.025; epochTime=12.5311s
07/13/2016 12:22:02: SGD: Saving checkpoint model '/tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu/models/cntkSpeech.dnn.1'

07/13/2016 12:22:02: Starting Epoch 2: learning rate per sample = 0.025000  effective momentum = 0.900000  momentum as time constant = 189.8 samples
minibatchiterator: epoch 1: frames [2560..5120] (first utterance at frame 2598), data subset 0 of 1, with 1 datapasses

07/13/2016 12:22:02: Starting minibatch loop.
07/13/2016 12:22:05:  Epoch[ 2 of 2]-Minibatch[   1-   1, 0.78%]: ce = 4.17785953 * 554; err = 0.88086643 * 554; time = 2.5952s; samplesPerSecond = 213.5
07/13/2016 12:22:08:  Epoch[ 2 of 2]-Minibatch[   2-   2, 1.56%]: ce = 4.03689124 * 676; err = 0.86538462 * 676; time = 3.0230s; samplesPerSecond = 223.6
07/13/2016 12:22:10:  Epoch[ 2 of 2]-Minibatch[   3-   3, 2.34%]: ce = 4.08472861 * 496; err = 0.88911290 * 496; time = 2.1101s; samplesPerSecond = 235.1
07/13/2016 12:22:12:  Epoch[ 2 of 2]-Minibatch[   4-   4, 3.12%]: ce = 4.28329807 * 576; err = 0.93402778 * 576; time = 2.4930s; samplesPerSecond = 231.0
07/13/2016 12:22:15:  Epoch[ 2 of 2]-Minibatch[   5-   5, 3.91%]: ce = 4.22184682 * 596; err = 0.91778523 * 596; time = 2.4940s; samplesPerSecond = 239.0
07/13/2016 12:22:15: Finished Epoch[ 2 of 2]: [Training] ce = 4.15904018 * 2898; err = 0.89682540 * 2898; totalSamplesSeen = 5594; learningRatePerSample = 0.025; epochTime=12.7292s
07/13/2016 12:22:15: SGD: Saving checkpoint model '/tmp/cntk-test-20160713121813.700929/Speech/LSTM_FullUtterance@debug_gpu/models/cntkSpeech.dnn'
07/13/2016 12:22:15: CNTKCommandTrainEnd: speechTrain

07/13/2016 12:22:15: Action "train" complete.

07/13/2016 12:22:15: __COMPLETED__