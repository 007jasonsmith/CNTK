=== Running /cygdrive/c/R/CNTK/x64/release/cntk.exe configFile=C:\R\CNTK\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk currentDirectory=C:\R\CNTK\Tests\EndToEndTests\Speech\Data RunDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu DataDir=C:\R\CNTK\Tests\EndToEndTests\Speech\Data ConfigDir=C:\R\CNTK\Tests\EndToEndTests\Speech\QuickE2E OutputDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu DeviceId=0 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Apr 21 2016 13:57:30
		Last modified date: Wed Apr 20 16:13:57 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: yes
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\R\cub-1.4.1
		CUDNN_PATH: C:\R\cudnn-7.0-win-x64-v4.0-prod\cuda
		Build Branch: mahilleb/SpeechSimpleDeterm
		Build SHA1: 5982b77c1bec6867b87921af71bcc33528a191e7 (modified)
		Built by mahilleb on mahilleb57
		Build Path: C:\R\CNTK\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\R\CNTK\Tests\EndToEndTests\Speech\Data
04/25/2016 08:15:33: -------------------------------------------------------------------
04/25/2016 08:15:33: Build info: 

04/25/2016 08:15:33: 		Built time: Apr 21 2016 13:57:30
04/25/2016 08:15:33: 		Last modified date: Wed Apr 20 16:13:57 2016
04/25/2016 08:15:33: 		Build type: Release
04/25/2016 08:15:33: 		Build target: GPU
04/25/2016 08:15:33: 		With 1bit-SGD: yes
04/25/2016 08:15:33: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
04/25/2016 08:15:33: 		CUB_PATH: C:\R\cub-1.4.1
04/25/2016 08:15:33: 		CUDNN_PATH: C:\R\cudnn-7.0-win-x64-v4.0-prod\cuda
04/25/2016 08:15:33: 		Build Branch: mahilleb/SpeechSimpleDeterm
04/25/2016 08:15:33: 		Build SHA1: 5982b77c1bec6867b87921af71bcc33528a191e7 (modified)
04/25/2016 08:15:33: 		Built by mahilleb on mahilleb57
04/25/2016 08:15:33: 		Build Path: C:\R\CNTK\Source\CNTK\
04/25/2016 08:15:33: -------------------------------------------------------------------

04/25/2016 08:15:33: Running on mahilleb57 at 2016/04/25 08:15:33
04/25/2016 08:15:33: Command line: 
C:\R\CNTK\x64\release\cntk.exe  configFile=C:\R\CNTK\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk  currentDirectory=C:\R\CNTK\Tests\EndToEndTests\Speech\Data  RunDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu  DataDir=C:\R\CNTK\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\R\CNTK\Tests\EndToEndTests\Speech\QuickE2E  OutputDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu  DeviceId=0  timestamping=true



04/25/2016 08:15:33: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/25/2016 08:15:33: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\R\CNTK\Tests\EndToEndTests\Speech\Data
RunDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu
DataDir=C:\R\CNTK\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\R\CNTK\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true

04/25/2016 08:15:33: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/25/2016 08:15:33: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/25/2016 08:15:33: precision = "float"
command = speechTrain
deviceId = 0
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\R\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\R\CNTK\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\R\CNTK\Tests\EndToEndTests\Speech\Data
RunDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu
DataDir=C:\R\CNTK\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\R\CNTK\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true

04/25/2016 08:15:33: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/25/2016 08:15:33: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=C:\R\CNTK\Tests\EndToEndTests\Speech\QuickE2E
configparameters: cntk.cntk:currentDirectory=C:\R\CNTK\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=C:\R\CNTK\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:firstMBsToShowResult=4
configparameters: cntk.cntk:makeMode=false
configparameters: cntk.cntk:OutputDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\R\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\R\CNTK\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
04/25/2016 08:15:33: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/25/2016 08:15:33: Commands: speechTrain
04/25/2016 08:15:33: Precision = "float"
04/25/2016 08:15:33: CNTKModelPath: C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn
04/25/2016 08:15:33: CNTKCommandTrainInfo: speechTrain : 3
04/25/2016 08:15:33: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

04/25/2016 08:15:33: ##############################################################################
04/25/2016 08:15:33: #                                                                            #
04/25/2016 08:15:33: # Action "train"                                                             #
04/25/2016 08:15:33: #                                                                            #
04/25/2016 08:15:33: ##############################################################################

04/25/2016 08:15:33: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using GPU 0
reading script file glob_0000.scp ... 948 entries
total 132 state names in state list C:\R\CNTK\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file C:\R\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

04/25/2016 08:15:33: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/25/2016 08:15:34: Created model with 25 nodes on GPU 0.

04/25/2016 08:15:34: Training criterion node(s):
04/25/2016 08:15:34: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

04/25/2016 08:15:34: Evaluation criterion node(s):

04/25/2016 08:15:34: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

04/25/2016 08:15:34: Precomputing --> 3 PreCompute nodes found.

04/25/2016 08:15:34: 	MeanOfFeatures = Mean()
04/25/2016 08:15:34: 	InvStdOfFeatures = InvStdDev()
04/25/2016 08:15:34: 	Prior = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

04/25/2016 08:15:36: Precomputing --> Completed.


04/25/2016 08:15:36: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

04/25/2016 08:15:36: Starting minibatch loop.
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[   1-   1, 0.31%]: SamplesSeen = 64; TrainLossPerSample =  4.78978062; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.0053s; SamplesPerSecond = 12093.7
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[   2-   2, 0.63%]: SamplesSeen = 64; TrainLossPerSample =  4.63828182; EvalErr[0]PerSample = 0.95312500; TotalTime = 0.0015s; SamplesPerSecond = 41639.6
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[   3-   3, 0.94%]: SamplesSeen = 64; TrainLossPerSample =  4.21404552; EvalErr[0]PerSample = 0.92187500; TotalTime = 0.0015s; SamplesPerSecond = 41967.2
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[   4-   4, 1.25%]: SamplesSeen = 64; TrainLossPerSample =  4.64487553; EvalErr[0]PerSample = 0.85937500; TotalTime = 0.0015s; SamplesPerSecond = 42553.2
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[   5-  10, 3.13%]: SamplesSeen = 384; TrainLossPerSample =  4.37960243; EvalErr[0]PerSample = 0.91927083; TotalTime = 0.0079s; SamplesPerSecond = 48332.3
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.22315750; EvalErr[0]PerSample = 0.90156250; TotalTime = 0.0131s; SamplesPerSecond = 48695.1
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.95180664; EvalErr[0]PerSample = 0.84687500; TotalTime = 0.0130s; SamplesPerSecond = 49378.9
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.94158020; EvalErr[0]PerSample = 0.89843750; TotalTime = 0.0128s; SamplesPerSecond = 49840.4
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.63%]: SamplesSeen = 640; TrainLossPerSample =  3.85668945; EvalErr[0]PerSample = 0.91093750; TotalTime = 0.0130s; SamplesPerSecond = 49264.9
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.72866364; EvalErr[0]PerSample = 0.89531250; TotalTime = 0.0129s; SamplesPerSecond = 49581.7
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.51809235; EvalErr[0]PerSample = 0.82968750; TotalTime = 0.0130s; SamplesPerSecond = 49398.0
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.48455200; EvalErr[0]PerSample = 0.80781250; TotalTime = 0.0129s; SamplesPerSecond = 49801.6
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.13%]: SamplesSeen = 640; TrainLossPerSample =  3.33829346; EvalErr[0]PerSample = 0.76875000; TotalTime = 0.0129s; SamplesPerSecond = 49716.5
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.50167236; EvalErr[0]PerSample = 0.79843750; TotalTime = 0.0129s; SamplesPerSecond = 49639.3
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.22861633; EvalErr[0]PerSample = 0.80000000; TotalTime = 0.0128s; SamplesPerSecond = 49906.4
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.32616882; EvalErr[0]PerSample = 0.79062500; TotalTime = 0.0129s; SamplesPerSecond = 49593.2
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.63%]: SamplesSeen = 640; TrainLossPerSample =  3.16897583; EvalErr[0]PerSample = 0.77968750; TotalTime = 0.0129s; SamplesPerSecond = 49755.1
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.08891907; EvalErr[0]PerSample = 0.77656250; TotalTime = 0.0128s; SamplesPerSecond = 49922.0
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.06005249; EvalErr[0]PerSample = 0.72968750; TotalTime = 0.0129s; SamplesPerSecond = 49570.1
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  2.91128540; EvalErr[0]PerSample = 0.69531250; TotalTime = 0.0128s; SamplesPerSecond = 49836.5
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.13%]: SamplesSeen = 640; TrainLossPerSample =  2.90172119; EvalErr[0]PerSample = 0.72968750; TotalTime = 0.0129s; SamplesPerSecond = 49662.5
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.73261719; EvalErr[0]PerSample = 0.65312500; TotalTime = 0.0131s; SamplesPerSecond = 49027.1
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.66515503; EvalErr[0]PerSample = 0.68437500; TotalTime = 0.0123s; SamplesPerSecond = 52189.5
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.67383423; EvalErr[0]PerSample = 0.66406250; TotalTime = 0.0134s; SamplesPerSecond = 47640.3
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.63%]: SamplesSeen = 640; TrainLossPerSample =  2.52869263; EvalErr[0]PerSample = 0.63593750; TotalTime = 0.0123s; SamplesPerSecond = 51969.1
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.60032349; EvalErr[0]PerSample = 0.66718750; TotalTime = 0.0133s; SamplesPerSecond = 47968.8
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.51134033; EvalErr[0]PerSample = 0.64843750; TotalTime = 0.0122s; SamplesPerSecond = 52291.9
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.45362549; EvalErr[0]PerSample = 0.63750000; TotalTime = 0.0122s; SamplesPerSecond = 52266.2
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.13%]: SamplesSeen = 640; TrainLossPerSample =  2.41640015; EvalErr[0]PerSample = 0.61562500; TotalTime = 0.0122s; SamplesPerSecond = 52296.1
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.39745483; EvalErr[0]PerSample = 0.62812500; TotalTime = 0.0123s; SamplesPerSecond = 52151.2
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.16415405; EvalErr[0]PerSample = 0.56718750; TotalTime = 0.0123s; SamplesPerSecond = 52057.9
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.30347290; EvalErr[0]PerSample = 0.63593750; TotalTime = 0.0123s; SamplesPerSecond = 51931.2
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.63%]: SamplesSeen = 640; TrainLossPerSample =  2.24398804; EvalErr[0]PerSample = 0.60937500; TotalTime = 0.0123s; SamplesPerSecond = 52142.7
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.15322266; EvalErr[0]PerSample = 0.57968750; TotalTime = 0.0123s; SamplesPerSecond = 52007.2
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.21664429; EvalErr[0]PerSample = 0.59531250; TotalTime = 0.0126s; SamplesPerSecond = 50927.0
04/25/2016 08:15:36:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.25246582; EvalErr[0]PerSample = 0.60156250; TotalTime = 0.0123s; SamplesPerSecond = 51943.8
04/25/2016 08:15:36: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 3.0000031; TotalSamplesSeen = 20480; EvalErrPerSample = 0.72836914; AvgLearningRatePerSample = 0.015625; EpochTime=0.414063
04/25/2016 08:15:36: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn.1'

04/25/2016 08:15:36: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 1, with 1 datapasses

04/25/2016 08:15:36: Starting minibatch loop.
04/25/2016 08:15:36:  Epoch[ 2 of 3]-Minibatch[   1-   1, 1.25%]: SamplesSeen = 256; TrainLossPerSample =  2.13327336; EvalErr[0]PerSample = 0.55859375; TotalTime = 0.0074s; SamplesPerSecond = 34441.0
04/25/2016 08:15:36:  Epoch[ 2 of 3]-Minibatch[   2-   2, 2.50%]: SamplesSeen = 256; TrainLossPerSample =  2.19091487; EvalErr[0]PerSample = 0.58203125; TotalTime = 0.0023s; SamplesPerSecond = 109589.0
04/25/2016 08:15:36:  Epoch[ 2 of 3]-Minibatch[   3-   3, 3.75%]: SamplesSeen = 256; TrainLossPerSample =  2.02367640; EvalErr[0]PerSample = 0.54296875; TotalTime = 0.0024s; SamplesPerSecond = 108336.9
04/25/2016 08:15:36:  Epoch[ 2 of 3]-Minibatch[   4-   4, 5.00%]: SamplesSeen = 256; TrainLossPerSample =  2.03856611; EvalErr[0]PerSample = 0.55078125; TotalTime = 0.0023s; SamplesPerSecond = 111207.6
04/25/2016 08:15:36:  Epoch[ 2 of 3]-Minibatch[   5-  10, 12.50%]: SamplesSeen = 1536; TrainLossPerSample =  2.07146072; EvalErr[0]PerSample = 0.55859375; TotalTime = 0.0107s; SamplesPerSecond = 143163.4
04/25/2016 08:15:36:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.98395710; EvalErr[0]PerSample = 0.54257813; TotalTime = 0.0176s; SamplesPerSecond = 145661.5
04/25/2016 08:15:36:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.98575516; EvalErr[0]PerSample = 0.54492188; TotalTime = 0.0176s; SamplesPerSecond = 145620.0
04/25/2016 08:15:36:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.90485115; EvalErr[0]PerSample = 0.53164062; TotalTime = 0.0175s; SamplesPerSecond = 146469.8
04/25/2016 08:15:36:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.88324280; EvalErr[0]PerSample = 0.52539063; TotalTime = 0.0175s; SamplesPerSecond = 146612.5
04/25/2016 08:15:36:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.89109268; EvalErr[0]PerSample = 0.53359375; TotalTime = 0.0175s; SamplesPerSecond = 146369.4
04/25/2016 08:15:36:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.89496002; EvalErr[0]PerSample = 0.52890625; TotalTime = 0.0174s; SamplesPerSecond = 146923.8
04/25/2016 08:15:36:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.85944366; EvalErr[0]PerSample = 0.52265625; TotalTime = 0.0174s; SamplesPerSecond = 147151.8
04/25/2016 08:15:36: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 1.9356028; TotalSamplesSeen = 40960; EvalErrPerSample = 0.53603516; AvgLearningRatePerSample = 0.001953125; EpochTime=0.149622
04/25/2016 08:15:36: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn.2'

04/25/2016 08:15:36: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses

04/25/2016 08:15:36: Starting minibatch loop.
04/25/2016 08:15:36:  Epoch[ 3 of 3]-Minibatch[   1-   1, 5.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.83962882; EvalErr[0]PerSample = 0.51660156; TotalTime = 0.0277s; SamplesPerSecond = 37023.6
04/25/2016 08:15:36:  Epoch[ 3 of 3]-Minibatch[   2-   2, 10.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.87452972; EvalErr[0]PerSample = 0.52343750; TotalTime = 0.0060s; SamplesPerSecond = 171094.4
04/25/2016 08:15:36:  Epoch[ 3 of 3]-Minibatch[   3-   3, 15.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.86299515; EvalErr[0]PerSample = 0.52539063; TotalTime = 0.0058s; SamplesPerSecond = 175824.2
04/25/2016 08:15:36:  Epoch[ 3 of 3]-Minibatch[   4-   4, 20.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.81465721; EvalErr[0]PerSample = 0.53320313; TotalTime = 0.0058s; SamplesPerSecond = 177438.9
04/25/2016 08:15:36:  Epoch[ 3 of 3]-Minibatch[   5-  10, 50.00%]: SamplesSeen = 6144; TrainLossPerSample =  1.88057907; EvalErr[0]PerSample = 0.51985677; TotalTime = 0.0265s; SamplesPerSecond = 231578.2
04/25/2016 08:15:36:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.87358780; EvalErr[0]PerSample = 0.51542969; TotalTime = 0.0429s; SamplesPerSecond = 238900.7
04/25/2016 08:15:36: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.8705582; TotalSamplesSeen = 61440; EvalErrPerSample = 0.51860352; AvgLearningRatePerSample = 9.7656251e-005; EpochTime=0.119552
04/25/2016 08:15:36: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn'
04/25/2016 08:15:37: CNTKCommandTrainEnd: speechTrain

04/25/2016 08:15:37: Action "train" complete.

04/25/2016 08:15:37: __COMPLETED__
=== Deleting last epoch data
==== Re-running from checkpoint
=== Running /cygdrive/c/R/CNTK/x64/release/cntk.exe configFile=C:\R\CNTK\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk currentDirectory=C:\R\CNTK\Tests\EndToEndTests\Speech\Data RunDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu DataDir=C:\R\CNTK\Tests\EndToEndTests\Speech\Data ConfigDir=C:\R\CNTK\Tests\EndToEndTests\Speech\QuickE2E OutputDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu DeviceId=0 timestamping=true makeMode=true
-------------------------------------------------------------------
Build info: 

		Built time: Apr 21 2016 13:57:30
		Last modified date: Wed Apr 20 16:13:57 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: yes
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\R\cub-1.4.1
		CUDNN_PATH: C:\R\cudnn-7.0-win-x64-v4.0-prod\cuda
		Build Branch: mahilleb/SpeechSimpleDeterm
		Build SHA1: 5982b77c1bec6867b87921af71bcc33528a191e7 (modified)
		Built by mahilleb on mahilleb57
		Build Path: C:\R\CNTK\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\R\CNTK\Tests\EndToEndTests\Speech\Data
04/25/2016 08:15:37: -------------------------------------------------------------------
04/25/2016 08:15:37: Build info: 

04/25/2016 08:15:37: 		Built time: Apr 21 2016 13:57:30
04/25/2016 08:15:37: 		Last modified date: Wed Apr 20 16:13:57 2016
04/25/2016 08:15:37: 		Build type: Release
04/25/2016 08:15:37: 		Build target: GPU
04/25/2016 08:15:37: 		With 1bit-SGD: yes
04/25/2016 08:15:37: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
04/25/2016 08:15:37: 		CUB_PATH: C:\R\cub-1.4.1
04/25/2016 08:15:37: 		CUDNN_PATH: C:\R\cudnn-7.0-win-x64-v4.0-prod\cuda
04/25/2016 08:15:37: 		Build Branch: mahilleb/SpeechSimpleDeterm
04/25/2016 08:15:37: 		Build SHA1: 5982b77c1bec6867b87921af71bcc33528a191e7 (modified)
04/25/2016 08:15:37: 		Built by mahilleb on mahilleb57
04/25/2016 08:15:37: 		Build Path: C:\R\CNTK\Source\CNTK\
04/25/2016 08:15:37: -------------------------------------------------------------------

04/25/2016 08:15:37: Running on mahilleb57 at 2016/04/25 08:15:37
04/25/2016 08:15:37: Command line: 
C:\R\CNTK\x64\release\cntk.exe  configFile=C:\R\CNTK\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk  currentDirectory=C:\R\CNTK\Tests\EndToEndTests\Speech\Data  RunDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu  DataDir=C:\R\CNTK\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\R\CNTK\Tests\EndToEndTests\Speech\QuickE2E  OutputDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu  DeviceId=0  timestamping=true  makeMode=true



04/25/2016 08:15:37: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/25/2016 08:15:37: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\R\CNTK\Tests\EndToEndTests\Speech\Data
RunDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu
DataDir=C:\R\CNTK\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\R\CNTK\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true
makeMode=true

04/25/2016 08:15:37: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/25/2016 08:15:37: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/25/2016 08:15:37: precision = "float"
command = speechTrain
deviceId = 0
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\R\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\R\CNTK\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\R\CNTK\Tests\EndToEndTests\Speech\Data
RunDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu
DataDir=C:\R\CNTK\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\R\CNTK\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true
makeMode=true

04/25/2016 08:15:37: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/25/2016 08:15:37: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=C:\R\CNTK\Tests\EndToEndTests\Speech\QuickE2E
configparameters: cntk.cntk:currentDirectory=C:\R\CNTK\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=C:\R\CNTK\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:firstMBsToShowResult=4
configparameters: cntk.cntk:makeMode=true
configparameters: cntk.cntk:OutputDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\R\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\R\CNTK\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
04/25/2016 08:15:37: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/25/2016 08:15:37: Commands: speechTrain
04/25/2016 08:15:37: Precision = "float"
04/25/2016 08:15:37: CNTKModelPath: C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn
04/25/2016 08:15:37: CNTKCommandTrainInfo: speechTrain : 3
04/25/2016 08:15:37: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

04/25/2016 08:15:37: ##############################################################################
04/25/2016 08:15:37: #                                                                            #
04/25/2016 08:15:37: # Action "train"                                                             #
04/25/2016 08:15:37: #                                                                            #
04/25/2016 08:15:37: ##############################################################################

04/25/2016 08:15:37: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using GPU 0
reading script file glob_0000.scp ... 948 entries
total 132 state names in state list C:\R\CNTK\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file C:\R\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

04/25/2016 08:15:38: Starting from checkpoint. Loading network from 'C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn.2'.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> MeanOfFeatures = Mean (features) : [363 x *1] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *1] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *1], [363], [363] -> [363 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *1] -> [132 x 1 x *1]
Validating --> Prior = Mean (labels) : [132 x *1] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *1], [132] -> [132 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/25/2016 08:15:38: Loaded model with 25 nodes on GPU 0.

04/25/2016 08:15:38: Training criterion node(s):
04/25/2016 08:15:38: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

04/25/2016 08:15:38: Evaluation criterion node(s):

04/25/2016 08:15:38: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.
04/25/2016 08:15:38: No PreCompute nodes found, skipping PreCompute step.

04/25/2016 08:15:38: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

04/25/2016 08:15:39: Starting minibatch loop.
04/25/2016 08:15:39:  Epoch[ 3 of 3]-Minibatch[   1-   1, 5.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.83962882; EvalErr[0]PerSample = 0.51660156; TotalTime = 0.1580s; SamplesPerSecond = 6480.5
04/25/2016 08:15:39:  Epoch[ 3 of 3]-Minibatch[   2-   2, 10.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.87452972; EvalErr[0]PerSample = 0.52343750; TotalTime = 0.0066s; SamplesPerSecond = 155386.9
04/25/2016 08:15:39:  Epoch[ 3 of 3]-Minibatch[   3-   3, 15.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.86299515; EvalErr[0]PerSample = 0.52539063; TotalTime = 0.0059s; SamplesPerSecond = 172710.4
04/25/2016 08:15:39:  Epoch[ 3 of 3]-Minibatch[   4-   4, 20.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.81465721; EvalErr[0]PerSample = 0.53320313; TotalTime = 0.0058s; SamplesPerSecond = 177839.5
04/25/2016 08:15:39:  Epoch[ 3 of 3]-Minibatch[   5-  10, 50.00%]: SamplesSeen = 6144; TrainLossPerSample =  1.88057907; EvalErr[0]PerSample = 0.51985677; TotalTime = 0.0258s; SamplesPerSecond = 238111.8
04/25/2016 08:15:39:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.87358780; EvalErr[0]PerSample = 0.51542969; TotalTime = 0.0416s; SamplesPerSecond = 246396.7
04/25/2016 08:15:39: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.8705582; TotalSamplesSeen = 61440; EvalErrPerSample = 0.51860352; AvgLearningRatePerSample = 9.7656251e-005; EpochTime=0.382835
04/25/2016 08:15:39: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160425091532.393583\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn'
04/25/2016 08:15:39: CNTKCommandTrainEnd: speechTrain

04/25/2016 08:15:39: Action "train" complete.

04/25/2016 08:15:39: __COMPLETED__