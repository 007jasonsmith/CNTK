=== Running /home/mahilleb/CNTK/build/gpu/release/bin/cntk configFile=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E/cntk.cntk currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu DeviceId=-1 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Apr 25 2016 08:19:03
		Last modified date: Tue Apr  5 14:19:05 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: mahilleb/LogFix
		Build SHA1: 67d79c927bc37740214b7882248d22d71c8a19d7
		Built by mahilleb on atleneu04
		Build Path: /home/mahilleb/CNTK
-------------------------------------------------------------------
Changed current directory to /home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
04/25/2016 08:23:47: -------------------------------------------------------------------
04/25/2016 08:23:47: Build info: 

04/25/2016 08:23:47: 		Built time: Apr 25 2016 08:19:03
04/25/2016 08:23:47: 		Last modified date: Tue Apr  5 14:19:05 2016
04/25/2016 08:23:47: 		Build type: release
04/25/2016 08:23:47: 		Build target: GPU
04/25/2016 08:23:47: 		With 1bit-SGD: no
04/25/2016 08:23:47: 		Math lib: acml
04/25/2016 08:23:47: 		CUDA_PATH: /usr/local/cuda-7.0
04/25/2016 08:23:47: 		CUB_PATH: /usr/local/cub-1.4.1
04/25/2016 08:23:47: 		CUDNN_PATH: /usr/local/cudnn-4.0
04/25/2016 08:23:47: 		Build Branch: mahilleb/LogFix
04/25/2016 08:23:47: 		Build SHA1: 67d79c927bc37740214b7882248d22d71c8a19d7
04/25/2016 08:23:47: 		Built by mahilleb on atleneu04
04/25/2016 08:23:47: 		Build Path: /home/mahilleb/CNTK
04/25/2016 08:23:47: -------------------------------------------------------------------

04/25/2016 08:23:47: Running on localhost at 2016/04/25 08:23:47
04/25/2016 08:23:47: Command line: 
/home/mahilleb/CNTK/build/gpu/release/bin/cntk  configFile=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E/cntk.cntk  currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu  DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E  OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu  DeviceId=-1  timestamping=true



04/25/2016 08:23:47: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/25/2016 08:23:47: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu
DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E
OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu
DeviceId=-1
timestamping=true

04/25/2016 08:23:47: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/25/2016 08:23:47: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/25/2016 08:23:47: precision = "float"
command = speechTrain
deviceId = -1
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu
DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E
OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu
DeviceId=-1
timestamping=true

04/25/2016 08:23:47: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/25/2016 08:23:47: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E
configparameters: cntk.cntk:currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:firstMBsToShowResult=4
configparameters: cntk.cntk:makeMode=false
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
04/25/2016 08:23:47: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/25/2016 08:23:47: Commands: speechTrain
04/25/2016 08:23:47: Precision = "float"
04/25/2016 08:23:47: CNTKModelPath: /tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn
04/25/2016 08:23:47: CNTKCommandTrainInfo: speechTrain : 3
04/25/2016 08:23:47: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

04/25/2016 08:23:47: ##############################################################################
04/25/2016 08:23:47: #                                                                            #
04/25/2016 08:23:47: # Action "train"                                                             #
04/25/2016 08:23:47: #                                                                            #
04/25/2016 08:23:47: ##############################################################################

04/25/2016 08:23:47: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using CPU
reading script file glob_0000.scp ... 948 entries
total 132 state names in state list /home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/state.list
htkmlfreader: reading MLF file /home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

04/25/2016 08:23:47: Creating virgin network.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/25/2016 08:23:47: Created model with 25 nodes on CPU.

04/25/2016 08:23:47: Training criterion node(s):
04/25/2016 08:23:47: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

04/25/2016 08:23:47: Evaluation criterion node(s):

04/25/2016 08:23:47: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

04/25/2016 08:23:47: Precomputing --> 3 PreCompute nodes found.

04/25/2016 08:23:47: 	MeanOfFeatures = Mean()
04/25/2016 08:23:47: 	InvStdOfFeatures = InvStdDev()
04/25/2016 08:23:47: 	Prior = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

04/25/2016 08:23:48: Precomputing --> Completed.


04/25/2016 08:23:48: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

04/25/2016 08:23:48: Starting minibatch loop.
04/25/2016 08:23:48:  Epoch[ 1 of 3]-Minibatch[   1-   1, 0.31%]: SamplesSeen = 64; TrainLossPerSample =  4.89423275; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.0066s; SamplesPerSecond = 9739.8
04/25/2016 08:23:48:  Epoch[ 1 of 3]-Minibatch[   2-   2, 0.62%]: SamplesSeen = 64; TrainLossPerSample =  4.50751019; EvalErr[0]PerSample = 0.85937500; TotalTime = 0.0044s; SamplesPerSecond = 14618.5
04/25/2016 08:23:48:  Epoch[ 1 of 3]-Minibatch[   3-   3, 0.94%]: SamplesSeen = 64; TrainLossPerSample =  4.17472839; EvalErr[0]PerSample = 0.90625000; TotalTime = 0.0043s; SamplesPerSecond = 14838.9
04/25/2016 08:23:48:  Epoch[ 1 of 3]-Minibatch[   4-   4, 1.25%]: SamplesSeen = 64; TrainLossPerSample =  4.78956795; EvalErr[0]PerSample = 0.87500000; TotalTime = 0.0043s; SamplesPerSecond = 14876.8
04/25/2016 08:23:48:  Epoch[ 1 of 3]-Minibatch[   5-  10, 3.12%]: SamplesSeen = 384; TrainLossPerSample =  4.25869179; EvalErr[0]PerSample = 0.89062500; TotalTime = 0.0257s; SamplesPerSecond = 14940.5
04/25/2016 08:23:48:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.16675568; EvalErr[0]PerSample = 0.87187500; TotalTime = 0.0428s; SamplesPerSecond = 14942.1
04/25/2016 08:23:48:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.98684082; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.0429s; SamplesPerSecond = 14925.0
04/25/2016 08:23:48:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.86595383; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.0428s; SamplesPerSecond = 14962.7
04/25/2016 08:23:48:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.62%]: SamplesSeen = 640; TrainLossPerSample =  3.81007080; EvalErr[0]PerSample = 0.88593750; TotalTime = 0.0428s; SamplesPerSecond = 14949.4
04/25/2016 08:23:48:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.73428192; EvalErr[0]PerSample = 0.87656250; TotalTime = 0.0429s; SamplesPerSecond = 14932.0
04/25/2016 08:23:48:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.57475586; EvalErr[0]PerSample = 0.81875000; TotalTime = 0.0428s; SamplesPerSecond = 14945.9
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.43591919; EvalErr[0]PerSample = 0.80781250; TotalTime = 0.0428s; SamplesPerSecond = 14955.7
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.12%]: SamplesSeen = 640; TrainLossPerSample =  3.36042786; EvalErr[0]PerSample = 0.77343750; TotalTime = 0.0429s; SamplesPerSecond = 14919.5
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.39383850; EvalErr[0]PerSample = 0.85156250; TotalTime = 0.0428s; SamplesPerSecond = 14944.9
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.25078430; EvalErr[0]PerSample = 0.76406250; TotalTime = 0.0451s; SamplesPerSecond = 14192.6
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.35325317; EvalErr[0]PerSample = 0.79375000; TotalTime = 0.0428s; SamplesPerSecond = 14958.2
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.62%]: SamplesSeen = 640; TrainLossPerSample =  3.19606934; EvalErr[0]PerSample = 0.76875000; TotalTime = 0.0428s; SamplesPerSecond = 14950.1
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.06110535; EvalErr[0]PerSample = 0.73125000; TotalTime = 0.0428s; SamplesPerSecond = 14961.0
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.05118713; EvalErr[0]PerSample = 0.75625000; TotalTime = 0.0428s; SamplesPerSecond = 14969.4
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  3.02474365; EvalErr[0]PerSample = 0.74062500; TotalTime = 0.0428s; SamplesPerSecond = 14953.6
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.12%]: SamplesSeen = 640; TrainLossPerSample =  2.89902954; EvalErr[0]PerSample = 0.70781250; TotalTime = 0.0428s; SamplesPerSecond = 14954.7
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.75173340; EvalErr[0]PerSample = 0.68125000; TotalTime = 0.0428s; SamplesPerSecond = 14944.9
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.83969116; EvalErr[0]PerSample = 0.71875000; TotalTime = 0.0427s; SamplesPerSecond = 14971.5
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.62870483; EvalErr[0]PerSample = 0.65468750; TotalTime = 0.0428s; SamplesPerSecond = 14946.3
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.62%]: SamplesSeen = 640; TrainLossPerSample =  2.66655273; EvalErr[0]PerSample = 0.67187500; TotalTime = 0.0436s; SamplesPerSecond = 14689.3
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.61327515; EvalErr[0]PerSample = 0.65937500; TotalTime = 0.0428s; SamplesPerSecond = 14936.9
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.53099976; EvalErr[0]PerSample = 0.63750000; TotalTime = 0.0428s; SamplesPerSecond = 14962.0
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.43747559; EvalErr[0]PerSample = 0.64375000; TotalTime = 0.0428s; SamplesPerSecond = 14960.6
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.12%]: SamplesSeen = 640; TrainLossPerSample =  2.41107178; EvalErr[0]PerSample = 0.65312500; TotalTime = 0.0428s; SamplesPerSecond = 14949.4
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.48898926; EvalErr[0]PerSample = 0.63750000; TotalTime = 0.0428s; SamplesPerSecond = 14942.8
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.34965820; EvalErr[0]PerSample = 0.61093750; TotalTime = 0.0428s; SamplesPerSecond = 14954.7
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.23708496; EvalErr[0]PerSample = 0.57812500; TotalTime = 0.0428s; SamplesPerSecond = 14969.0
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.62%]: SamplesSeen = 640; TrainLossPerSample =  2.33135376; EvalErr[0]PerSample = 0.62031250; TotalTime = 0.0428s; SamplesPerSecond = 14954.3
04/25/2016 08:23:49:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.21607666; EvalErr[0]PerSample = 0.62812500; TotalTime = 0.0428s; SamplesPerSecond = 14953.3
04/25/2016 08:23:50:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.29110107; EvalErr[0]PerSample = 0.60625000; TotalTime = 0.0428s; SamplesPerSecond = 14959.2
04/25/2016 08:23:50:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.20535278; EvalErr[0]PerSample = 0.57500000; TotalTime = 0.0426s; SamplesPerSecond = 15010.4
04/25/2016 08:23:50: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 3.0173737; TotalSamplesSeen = 20480; EvalErrPerSample = 0.73061523; AvgLearningRatePerSample = 0.015625; EpochTime=1.38321
04/25/2016 08:23:50: SGD: Saving checkpoint model '/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn.1'

04/25/2016 08:23:50: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 1, with 1 datapasses

04/25/2016 08:23:50: Starting minibatch loop.
04/25/2016 08:23:50:  Epoch[ 2 of 3]-Minibatch[   1-   1, 1.25%]: SamplesSeen = 256; TrainLossPerSample =  2.24832439; EvalErr[0]PerSample = 0.59375000; TotalTime = 0.0149s; SamplesPerSecond = 17124.9
04/25/2016 08:23:50:  Epoch[ 2 of 3]-Minibatch[   2-   2, 2.50%]: SamplesSeen = 256; TrainLossPerSample =  2.16793251; EvalErr[0]PerSample = 0.59765625; TotalTime = 0.0138s; SamplesPerSecond = 18600.6
04/25/2016 08:23:50:  Epoch[ 2 of 3]-Minibatch[   3-   3, 3.75%]: SamplesSeen = 256; TrainLossPerSample =  2.14037228; EvalErr[0]PerSample = 0.58203125; TotalTime = 0.0137s; SamplesPerSecond = 18664.3
04/25/2016 08:23:50:  Epoch[ 2 of 3]-Minibatch[   4-   4, 5.00%]: SamplesSeen = 256; TrainLossPerSample =  2.08487034; EvalErr[0]PerSample = 0.51171875; TotalTime = 0.0137s; SamplesPerSecond = 18686.1
04/25/2016 08:23:50:  Epoch[ 2 of 3]-Minibatch[   5-  10, 12.50%]: SamplesSeen = 1536; TrainLossPerSample =  1.98826933; EvalErr[0]PerSample = 0.53580729; TotalTime = 0.0822s; SamplesPerSecond = 18675.5
04/25/2016 08:23:50:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.02925396; EvalErr[0]PerSample = 0.54648438; TotalTime = 0.1370s; SamplesPerSecond = 18686.3
04/25/2016 08:23:50:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.02826538; EvalErr[0]PerSample = 0.54843750; TotalTime = 0.1369s; SamplesPerSecond = 18698.1
04/25/2016 08:23:50:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.97095795; EvalErr[0]PerSample = 0.54140625; TotalTime = 0.1370s; SamplesPerSecond = 18682.3
04/25/2016 08:23:50:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.94550018; EvalErr[0]PerSample = 0.53867188; TotalTime = 0.1369s; SamplesPerSecond = 18695.5
04/25/2016 08:23:50:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.01561737; EvalErr[0]PerSample = 0.54414063; TotalTime = 0.1369s; SamplesPerSecond = 18700.5
04/25/2016 08:23:51:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.94069901; EvalErr[0]PerSample = 0.52500000; TotalTime = 0.1370s; SamplesPerSecond = 18687.2
04/25/2016 08:23:51:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.94857330; EvalErr[0]PerSample = 0.54023438; TotalTime = 0.1363s; SamplesPerSecond = 18786.5
04/25/2016 08:23:51: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 1.9919973; TotalSamplesSeen = 40960; EvalErrPerSample = 0.54179687; AvgLearningRatePerSample = 0.001953125; EpochTime=1.10025
04/25/2016 08:23:51: SGD: Saving checkpoint model '/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn.2'

04/25/2016 08:23:51: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses

04/25/2016 08:23:51: Starting minibatch loop.
04/25/2016 08:23:51:  Epoch[ 3 of 3]-Minibatch[   1-   1, 5.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.91726470; EvalErr[0]PerSample = 0.52929688; TotalTime = 0.0571s; SamplesPerSecond = 17945.1
04/25/2016 08:23:51:  Epoch[ 3 of 3]-Minibatch[   2-   2, 10.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.86399198; EvalErr[0]PerSample = 0.51757812; TotalTime = 0.0493s; SamplesPerSecond = 20771.2
04/25/2016 08:23:51:  Epoch[ 3 of 3]-Minibatch[   3-   3, 15.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.97110939; EvalErr[0]PerSample = 0.54492188; TotalTime = 0.0493s; SamplesPerSecond = 20759.8
04/25/2016 08:23:51:  Epoch[ 3 of 3]-Minibatch[   4-   4, 20.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.98705530; EvalErr[0]PerSample = 0.54394531; TotalTime = 0.0493s; SamplesPerSecond = 20765.7
04/25/2016 08:23:51:  Epoch[ 3 of 3]-Minibatch[   5-  10, 50.00%]: SamplesSeen = 6144; TrainLossPerSample =  1.90919916; EvalErr[0]PerSample = 0.52555339; TotalTime = 0.2961s; SamplesPerSecond = 20751.1
04/25/2016 08:23:52:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.91066761; EvalErr[0]PerSample = 0.52783203; TotalTime = 0.4903s; SamplesPerSecond = 20885.1
04/25/2016 08:23:52: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.9150646; TotalSamplesSeen = 61440; EvalErrPerSample = 0.52836914; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=0.996354
04/25/2016 08:23:52: SGD: Saving checkpoint model '/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn'
04/25/2016 08:23:52: CNTKCommandTrainEnd: speechTrain

04/25/2016 08:23:52: Action "train" complete.

04/25/2016 08:23:52: __COMPLETED__
=== Deleting last epoch data
==== Re-running from checkpoint
=== Running /home/mahilleb/CNTK/build/gpu/release/bin/cntk configFile=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E/cntk.cntk currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu DeviceId=-1 timestamping=true makeMode=true
-------------------------------------------------------------------
Build info: 

		Built time: Apr 25 2016 08:19:03
		Last modified date: Tue Apr  5 14:19:05 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: mahilleb/LogFix
		Build SHA1: 67d79c927bc37740214b7882248d22d71c8a19d7
		Built by mahilleb on atleneu04
		Build Path: /home/mahilleb/CNTK
-------------------------------------------------------------------
Changed current directory to /home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
04/25/2016 08:23:52: -------------------------------------------------------------------
04/25/2016 08:23:52: Build info: 

04/25/2016 08:23:52: 		Built time: Apr 25 2016 08:19:03
04/25/2016 08:23:52: 		Last modified date: Tue Apr  5 14:19:05 2016
04/25/2016 08:23:52: 		Build type: release
04/25/2016 08:23:52: 		Build target: GPU
04/25/2016 08:23:52: 		With 1bit-SGD: no
04/25/2016 08:23:52: 		Math lib: acml
04/25/2016 08:23:52: 		CUDA_PATH: /usr/local/cuda-7.0
04/25/2016 08:23:52: 		CUB_PATH: /usr/local/cub-1.4.1
04/25/2016 08:23:52: 		CUDNN_PATH: /usr/local/cudnn-4.0
04/25/2016 08:23:52: 		Build Branch: mahilleb/LogFix
04/25/2016 08:23:52: 		Build SHA1: 67d79c927bc37740214b7882248d22d71c8a19d7
04/25/2016 08:23:52: 		Built by mahilleb on atleneu04
04/25/2016 08:23:52: 		Build Path: /home/mahilleb/CNTK
04/25/2016 08:23:52: -------------------------------------------------------------------

04/25/2016 08:23:52: Running on localhost at 2016/04/25 08:23:52
04/25/2016 08:23:52: Command line: 
/home/mahilleb/CNTK/build/gpu/release/bin/cntk  configFile=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E/cntk.cntk  currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu  DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E  OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu  DeviceId=-1  timestamping=true  makeMode=true



04/25/2016 08:23:52: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/25/2016 08:23:52: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu
DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E
OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu
DeviceId=-1
timestamping=true
makeMode=true

04/25/2016 08:23:52: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/25/2016 08:23:52: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/25/2016 08:23:52: precision = "float"
command = speechTrain
deviceId = -1
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu
DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E
OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu
DeviceId=-1
timestamping=true
makeMode=true

04/25/2016 08:23:52: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/25/2016 08:23:52: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E
configparameters: cntk.cntk:currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:firstMBsToShowResult=4
configparameters: cntk.cntk:makeMode=true
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
04/25/2016 08:23:52: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/25/2016 08:23:52: Commands: speechTrain
04/25/2016 08:23:52: Precision = "float"
04/25/2016 08:23:52: CNTKModelPath: /tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn
04/25/2016 08:23:52: CNTKCommandTrainInfo: speechTrain : 3
04/25/2016 08:23:52: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

04/25/2016 08:23:52: ##############################################################################
04/25/2016 08:23:52: #                                                                            #
04/25/2016 08:23:52: # Action "train"                                                             #
04/25/2016 08:23:52: #                                                                            #
04/25/2016 08:23:52: ##############################################################################

04/25/2016 08:23:52: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using CPU
reading script file glob_0000.scp ... 948 entries
total 132 state names in state list /home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/state.list
htkmlfreader: reading MLF file /home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

04/25/2016 08:23:52: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn.2'.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> MeanOfFeatures = Mean (features) : [363 x *1] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *1] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *1], [363], [363] -> [363 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *1] -> [132 x 1 x *1]
Validating --> Prior = Mean (labels) : [132 x *1] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *1], [132] -> [132 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/25/2016 08:23:52: Loaded model with 25 nodes on CPU.

04/25/2016 08:23:52: Training criterion node(s):
04/25/2016 08:23:52: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

04/25/2016 08:23:52: Evaluation criterion node(s):

04/25/2016 08:23:52: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.
04/25/2016 08:23:52: No PreCompute nodes found, skipping PreCompute step.

04/25/2016 08:23:52: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

04/25/2016 08:23:52: Starting minibatch loop.
04/25/2016 08:23:52:  Epoch[ 3 of 3]-Minibatch[   1-   1, 5.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.91726470; EvalErr[0]PerSample = 0.52929688; TotalTime = 0.0787s; SamplesPerSecond = 13007.3
04/25/2016 08:23:52:  Epoch[ 3 of 3]-Minibatch[   2-   2, 10.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.86399198; EvalErr[0]PerSample = 0.51757812; TotalTime = 0.0489s; SamplesPerSecond = 20939.0
04/25/2016 08:23:52:  Epoch[ 3 of 3]-Minibatch[   3-   3, 15.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.97110939; EvalErr[0]PerSample = 0.54492188; TotalTime = 0.0490s; SamplesPerSecond = 20890.7
04/25/2016 08:23:52:  Epoch[ 3 of 3]-Minibatch[   4-   4, 20.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.98705530; EvalErr[0]PerSample = 0.54394531; TotalTime = 0.0491s; SamplesPerSecond = 20866.9
04/25/2016 08:23:53:  Epoch[ 3 of 3]-Minibatch[   5-  10, 50.00%]: SamplesSeen = 6144; TrainLossPerSample =  1.90919916; EvalErr[0]PerSample = 0.52555339; TotalTime = 0.2946s; SamplesPerSecond = 20855.6
04/25/2016 08:23:53:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.91066761; EvalErr[0]PerSample = 0.52783203; TotalTime = 0.4886s; SamplesPerSecond = 20959.6
04/25/2016 08:23:53: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.9150646; TotalSamplesSeen = 61440; EvalErrPerSample = 0.52836914; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.07498
04/25/2016 08:23:53: SGD: Saving checkpoint model '/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn'
04/25/2016 08:23:53: CNTKCommandTrainEnd: speechTrain

04/25/2016 08:23:53: Action "train" complete.

04/25/2016 08:23:53: __COMPLETED__