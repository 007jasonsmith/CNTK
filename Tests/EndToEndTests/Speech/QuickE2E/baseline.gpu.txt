=== Running /home/mahilleb/CNTK/build/gpu/release/bin/cntk configFile=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E/cntk.cntk currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu DeviceId=0 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Apr 25 2016 08:19:03
		Last modified date: Tue Apr  5 14:19:05 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: mahilleb/LogFix
		Build SHA1: 67d79c927bc37740214b7882248d22d71c8a19d7
		Built by mahilleb on atleneu04
		Build Path: /home/mahilleb/CNTK
-------------------------------------------------------------------
Changed current directory to /home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
04/25/2016 08:23:53: -------------------------------------------------------------------
04/25/2016 08:23:53: Build info: 

04/25/2016 08:23:53: 		Built time: Apr 25 2016 08:19:03
04/25/2016 08:23:53: 		Last modified date: Tue Apr  5 14:19:05 2016
04/25/2016 08:23:53: 		Build type: release
04/25/2016 08:23:53: 		Build target: GPU
04/25/2016 08:23:53: 		With 1bit-SGD: no
04/25/2016 08:23:53: 		Math lib: acml
04/25/2016 08:23:53: 		CUDA_PATH: /usr/local/cuda-7.0
04/25/2016 08:23:53: 		CUB_PATH: /usr/local/cub-1.4.1
04/25/2016 08:23:53: 		CUDNN_PATH: /usr/local/cudnn-4.0
04/25/2016 08:23:53: 		Build Branch: mahilleb/LogFix
04/25/2016 08:23:53: 		Build SHA1: 67d79c927bc37740214b7882248d22d71c8a19d7
04/25/2016 08:23:53: 		Built by mahilleb on atleneu04
04/25/2016 08:23:53: 		Build Path: /home/mahilleb/CNTK
04/25/2016 08:23:53: -------------------------------------------------------------------

04/25/2016 08:23:53: Running on localhost at 2016/04/25 08:23:53
04/25/2016 08:23:53: Command line: 
/home/mahilleb/CNTK/build/gpu/release/bin/cntk  configFile=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E/cntk.cntk  currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu  DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E  OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu  DeviceId=0  timestamping=true



04/25/2016 08:23:53: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/25/2016 08:23:53: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu
DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E
OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true

04/25/2016 08:23:53: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/25/2016 08:23:53: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/25/2016 08:23:53: precision = "float"
command = speechTrain
deviceId = 0
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu
DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E
OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true

04/25/2016 08:23:53: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/25/2016 08:23:53: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E
configparameters: cntk.cntk:currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:firstMBsToShowResult=4
configparameters: cntk.cntk:makeMode=false
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
04/25/2016 08:23:53: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/25/2016 08:23:53: Commands: speechTrain
04/25/2016 08:23:53: Precision = "float"
04/25/2016 08:23:53: CNTKModelPath: /tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn
04/25/2016 08:23:53: CNTKCommandTrainInfo: speechTrain : 3
04/25/2016 08:23:53: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

04/25/2016 08:23:53: ##############################################################################
04/25/2016 08:23:53: #                                                                            #
04/25/2016 08:23:53: # Action "train"                                                             #
04/25/2016 08:23:53: #                                                                            #
04/25/2016 08:23:53: ##############################################################################

04/25/2016 08:23:53: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using GPU 0
reading script file glob_0000.scp ... 948 entries
total 132 state names in state list /home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/state.list
htkmlfreader: reading MLF file /home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

04/25/2016 08:23:53: Creating virgin network.
SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/25/2016 08:23:54: Created model with 25 nodes on GPU 0.

04/25/2016 08:23:54: Training criterion node(s):
04/25/2016 08:23:54: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

04/25/2016 08:23:54: Evaluation criterion node(s):

04/25/2016 08:23:54: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

04/25/2016 08:23:54: Precomputing --> 3 PreCompute nodes found.

04/25/2016 08:23:54: 	MeanOfFeatures = Mean()
04/25/2016 08:23:54: 	InvStdOfFeatures = InvStdDev()
04/25/2016 08:23:54: 	Prior = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

04/25/2016 08:23:55: Precomputing --> Completed.


04/25/2016 08:23:55: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

04/25/2016 08:23:55: Starting minibatch loop.
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[   1-   1, 0.31%]: SamplesSeen = 64; TrainLossPerSample =  4.75783300; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.0026s; SamplesPerSecond = 24492.9
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[   2-   2, 0.62%]: SamplesSeen = 64; TrainLossPerSample =  4.48598528; EvalErr[0]PerSample = 0.90625000; TotalTime = 0.0012s; SamplesPerSecond = 54237.3
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[   3-   3, 0.94%]: SamplesSeen = 64; TrainLossPerSample =  4.14343166; EvalErr[0]PerSample = 0.90625000; TotalTime = 0.0011s; SamplesPerSecond = 55749.1
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[   4-   4, 1.25%]: SamplesSeen = 64; TrainLossPerSample =  4.80110264; EvalErr[0]PerSample = 0.87500000; TotalTime = 0.0011s; SamplesPerSecond = 55944.1
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[   5-  10, 3.12%]: SamplesSeen = 384; TrainLossPerSample =  4.17086315; EvalErr[0]PerSample = 0.88541667; TotalTime = 0.0063s; SamplesPerSecond = 61097.9
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.15070953; EvalErr[0]PerSample = 0.86718750; TotalTime = 0.0105s; SamplesPerSecond = 60894.4
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.99901123; EvalErr[0]PerSample = 0.87656250; TotalTime = 0.0105s; SamplesPerSecond = 61167.9
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.86945953; EvalErr[0]PerSample = 0.87656250; TotalTime = 0.0104s; SamplesPerSecond = 61296.8
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.62%]: SamplesSeen = 640; TrainLossPerSample =  3.80219574; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.0104s; SamplesPerSecond = 61432.1
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.72890930; EvalErr[0]PerSample = 0.86875000; TotalTime = 0.0105s; SamplesPerSecond = 60987.2
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.56186981; EvalErr[0]PerSample = 0.82343750; TotalTime = 0.0104s; SamplesPerSecond = 61273.3
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.42790527; EvalErr[0]PerSample = 0.80781250; TotalTime = 0.0105s; SamplesPerSecond = 61150.4
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.12%]: SamplesSeen = 640; TrainLossPerSample =  3.33928528; EvalErr[0]PerSample = 0.77343750; TotalTime = 0.0104s; SamplesPerSecond = 61326.2
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.36398926; EvalErr[0]PerSample = 0.84375000; TotalTime = 0.0104s; SamplesPerSecond = 61326.2
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.21223450; EvalErr[0]PerSample = 0.75312500; TotalTime = 0.0105s; SamplesPerSecond = 61080.4
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.31265564; EvalErr[0]PerSample = 0.78750000; TotalTime = 0.0105s; SamplesPerSecond = 61127.0
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.62%]: SamplesSeen = 640; TrainLossPerSample =  3.14082031; EvalErr[0]PerSample = 0.74687500; TotalTime = 0.0104s; SamplesPerSecond = 61337.9
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.00689697; EvalErr[0]PerSample = 0.69687500; TotalTime = 0.0104s; SamplesPerSecond = 61261.6
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.00495911; EvalErr[0]PerSample = 0.72343750; TotalTime = 0.0105s; SamplesPerSecond = 61173.8
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  2.97858887; EvalErr[0]PerSample = 0.73906250; TotalTime = 0.0105s; SamplesPerSecond = 61220.6
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.12%]: SamplesSeen = 640; TrainLossPerSample =  2.85686035; EvalErr[0]PerSample = 0.70781250; TotalTime = 0.0105s; SamplesPerSecond = 61138.7
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.69053345; EvalErr[0]PerSample = 0.67187500; TotalTime = 0.0105s; SamplesPerSecond = 61027.9
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.78653564; EvalErr[0]PerSample = 0.70468750; TotalTime = 0.0105s; SamplesPerSecond = 61179.6
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.57702026; EvalErr[0]PerSample = 0.64843750; TotalTime = 0.0105s; SamplesPerSecond = 61167.9
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.62%]: SamplesSeen = 640; TrainLossPerSample =  2.61571655; EvalErr[0]PerSample = 0.66406250; TotalTime = 0.0104s; SamplesPerSecond = 61249.9
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.55236206; EvalErr[0]PerSample = 0.65781250; TotalTime = 0.0105s; SamplesPerSecond = 61156.2
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.48211670; EvalErr[0]PerSample = 0.62500000; TotalTime = 0.0105s; SamplesPerSecond = 61033.8
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.38778687; EvalErr[0]PerSample = 0.62812500; TotalTime = 0.0105s; SamplesPerSecond = 60935.0
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.12%]: SamplesSeen = 640; TrainLossPerSample =  2.36900635; EvalErr[0]PerSample = 0.64843750; TotalTime = 0.0105s; SamplesPerSecond = 61144.5
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.43967285; EvalErr[0]PerSample = 0.63281250; TotalTime = 0.0105s; SamplesPerSecond = 61167.9
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.30281982; EvalErr[0]PerSample = 0.61250000; TotalTime = 0.0105s; SamplesPerSecond = 61004.7
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.19668579; EvalErr[0]PerSample = 0.55937500; TotalTime = 0.0104s; SamplesPerSecond = 61385.0
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.62%]: SamplesSeen = 640; TrainLossPerSample =  2.28980103; EvalErr[0]PerSample = 0.60468750; TotalTime = 0.0105s; SamplesPerSecond = 61121.2
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.17750854; EvalErr[0]PerSample = 0.62187500; TotalTime = 0.0104s; SamplesPerSecond = 61337.9
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.26263428; EvalErr[0]PerSample = 0.59687500; TotalTime = 0.0104s; SamplesPerSecond = 61349.7
04/25/2016 08:23:55:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.15072632; EvalErr[0]PerSample = 0.56250000; TotalTime = 0.0105s; SamplesPerSecond = 61097.9
04/25/2016 08:23:55: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 2.9799572; TotalSamplesSeen = 20480; EvalErrPerSample = 0.72216797; AvgLearningRatePerSample = 0.015625; EpochTime=0.33846
04/25/2016 08:23:55: SGD: Saving checkpoint model '/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn.1'

04/25/2016 08:23:55: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 1, with 1 datapasses

04/25/2016 08:23:55: Starting minibatch loop.
04/25/2016 08:23:55:  Epoch[ 2 of 3]-Minibatch[   1-   1, 1.25%]: SamplesSeen = 256; TrainLossPerSample =  2.20593667; EvalErr[0]PerSample = 0.60937500; TotalTime = 0.0034s; SamplesPerSecond = 76054.7
04/25/2016 08:23:55:  Epoch[ 2 of 3]-Minibatch[   2-   2, 2.50%]: SamplesSeen = 256; TrainLossPerSample =  2.13935256; EvalErr[0]PerSample = 0.59765625; TotalTime = 0.0019s; SamplesPerSecond = 137118.4
04/25/2016 08:23:55:  Epoch[ 2 of 3]-Minibatch[   3-   3, 3.75%]: SamplesSeen = 256; TrainLossPerSample =  2.10565710; EvalErr[0]PerSample = 0.59375000; TotalTime = 0.0018s; SamplesPerSecond = 138753.4
04/25/2016 08:23:55:  Epoch[ 2 of 3]-Minibatch[   4-   4, 5.00%]: SamplesSeen = 256; TrainLossPerSample =  2.04566240; EvalErr[0]PerSample = 0.50781250; TotalTime = 0.0019s; SamplesPerSecond = 138378.4
04/25/2016 08:23:55:  Epoch[ 2 of 3]-Minibatch[   5-  10, 12.50%]: SamplesSeen = 1536; TrainLossPerSample =  1.94387404; EvalErr[0]PerSample = 0.51757812; TotalTime = 0.0095s; SamplesPerSecond = 160837.7
04/25/2016 08:23:55:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.98818569; EvalErr[0]PerSample = 0.54296875; TotalTime = 0.0158s; SamplesPerSecond = 162529.4
04/25/2016 08:23:55:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.98698120; EvalErr[0]PerSample = 0.54140625; TotalTime = 0.0158s; SamplesPerSecond = 162457.2
04/25/2016 08:23:55:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.93126144; EvalErr[0]PerSample = 0.52773437; TotalTime = 0.0158s; SamplesPerSecond = 162323.3
04/25/2016 08:23:55:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.90067825; EvalErr[0]PerSample = 0.52656250; TotalTime = 0.0157s; SamplesPerSecond = 162674.0
04/25/2016 08:23:55:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.97115860; EvalErr[0]PerSample = 0.54140625; TotalTime = 0.0158s; SamplesPerSecond = 162508.7
04/25/2016 08:23:55:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.89518127; EvalErr[0]PerSample = 0.52031250; TotalTime = 0.0157s; SamplesPerSecond = 162881.0
04/25/2016 08:23:55:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.90450439; EvalErr[0]PerSample = 0.53164062; TotalTime = 0.0157s; SamplesPerSecond = 162632.6
04/25/2016 08:23:55: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 1.949242; TotalSamplesSeen = 40960; EvalErrPerSample = 0.53417969; AvgLearningRatePerSample = 0.001953125; EpochTime=0.13009
04/25/2016 08:23:55: SGD: Saving checkpoint model '/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn.2'

04/25/2016 08:23:55: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses

04/25/2016 08:23:55: Starting minibatch loop.
04/25/2016 08:23:55:  Epoch[ 3 of 3]-Minibatch[   1-   1, 5.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.87319541; EvalErr[0]PerSample = 0.52148438; TotalTime = 0.0087s; SamplesPerSecond = 117714.7
04/25/2016 08:23:55:  Epoch[ 3 of 3]-Minibatch[   2-   2, 10.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.81577802; EvalErr[0]PerSample = 0.51074219; TotalTime = 0.0052s; SamplesPerSecond = 196432.0
04/25/2016 08:23:55:  Epoch[ 3 of 3]-Minibatch[   3-   3, 15.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.92167187; EvalErr[0]PerSample = 0.53027344; TotalTime = 0.0051s; SamplesPerSecond = 199260.6
04/25/2016 08:23:55:  Epoch[ 3 of 3]-Minibatch[   4-   4, 20.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.93823242; EvalErr[0]PerSample = 0.52832031; TotalTime = 0.0052s; SamplesPerSecond = 197874.4
04/25/2016 08:23:55:  Epoch[ 3 of 3]-Minibatch[   5-  10, 50.00%]: SamplesSeen = 6144; TrainLossPerSample =  1.86451785; EvalErr[0]PerSample = 0.51708984; TotalTime = 0.0254s; SamplesPerSecond = 241632.9
04/25/2016 08:23:55:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.86656265; EvalErr[0]PerSample = 0.51748047; TotalTime = 0.0415s; SamplesPerSecond = 246574.7
04/25/2016 08:23:55: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.8700806; TotalSamplesSeen = 61440; EvalErrPerSample = 0.5184082; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=0.093881
04/25/2016 08:23:55: SGD: Saving checkpoint model '/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn'
04/25/2016 08:23:56: CNTKCommandTrainEnd: speechTrain

04/25/2016 08:23:56: Action "train" complete.

04/25/2016 08:23:56: __COMPLETED__
=== Deleting last epoch data
==== Re-running from checkpoint
=== Running /home/mahilleb/CNTK/build/gpu/release/bin/cntk configFile=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E/cntk.cntk currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu DeviceId=0 timestamping=true makeMode=true
-------------------------------------------------------------------
Build info: 

		Built time: Apr 25 2016 08:19:03
		Last modified date: Tue Apr  5 14:19:05 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: mahilleb/LogFix
		Build SHA1: 67d79c927bc37740214b7882248d22d71c8a19d7
		Built by mahilleb on atleneu04
		Build Path: /home/mahilleb/CNTK
-------------------------------------------------------------------
Changed current directory to /home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
04/25/2016 08:23:56: -------------------------------------------------------------------
04/25/2016 08:23:56: Build info: 

04/25/2016 08:23:56: 		Built time: Apr 25 2016 08:19:03
04/25/2016 08:23:56: 		Last modified date: Tue Apr  5 14:19:05 2016
04/25/2016 08:23:56: 		Build type: release
04/25/2016 08:23:56: 		Build target: GPU
04/25/2016 08:23:56: 		With 1bit-SGD: no
04/25/2016 08:23:56: 		Math lib: acml
04/25/2016 08:23:56: 		CUDA_PATH: /usr/local/cuda-7.0
04/25/2016 08:23:56: 		CUB_PATH: /usr/local/cub-1.4.1
04/25/2016 08:23:56: 		CUDNN_PATH: /usr/local/cudnn-4.0
04/25/2016 08:23:56: 		Build Branch: mahilleb/LogFix
04/25/2016 08:23:56: 		Build SHA1: 67d79c927bc37740214b7882248d22d71c8a19d7
04/25/2016 08:23:56: 		Built by mahilleb on atleneu04
04/25/2016 08:23:56: 		Build Path: /home/mahilleb/CNTK
04/25/2016 08:23:56: -------------------------------------------------------------------

04/25/2016 08:23:56: Running on localhost at 2016/04/25 08:23:56
04/25/2016 08:23:56: Command line: 
/home/mahilleb/CNTK/build/gpu/release/bin/cntk  configFile=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E/cntk.cntk  currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu  DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E  OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu  DeviceId=0  timestamping=true  makeMode=true



04/25/2016 08:23:56: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/25/2016 08:23:56: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu
DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E
OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true
makeMode=true

04/25/2016 08:23:56: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/25/2016 08:23:56: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/25/2016 08:23:56: precision = "float"
command = speechTrain
deviceId = 0
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu
DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E
OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true
makeMode=true

04/25/2016 08:23:56: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/25/2016 08:23:56: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/QuickE2E
configparameters: cntk.cntk:currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:firstMBsToShowResult=4
configparameters: cntk.cntk:makeMode=true
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
04/25/2016 08:23:56: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/25/2016 08:23:56: Commands: speechTrain
04/25/2016 08:23:56: Precision = "float"
04/25/2016 08:23:56: CNTKModelPath: /tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn
04/25/2016 08:23:56: CNTKCommandTrainInfo: speechTrain : 3
04/25/2016 08:23:56: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

04/25/2016 08:23:56: ##############################################################################
04/25/2016 08:23:56: #                                                                            #
04/25/2016 08:23:56: # Action "train"                                                             #
04/25/2016 08:23:56: #                                                                            #
04/25/2016 08:23:56: ##############################################################################

04/25/2016 08:23:56: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using GPU 0
reading script file glob_0000.scp ... 948 entries
total 132 state names in state list /home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/state.list
htkmlfreader: reading MLF file /home/mahilleb/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

04/25/2016 08:23:56: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn.2'.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> MeanOfFeatures = Mean (features) : [363 x *1] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *1] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *1], [363], [363] -> [363 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *1] -> [132 x 1 x *1]
Validating --> Prior = Mean (labels) : [132 x *1] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *1], [132] -> [132 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/25/2016 08:23:57: Loaded model with 25 nodes on GPU 0.

04/25/2016 08:23:57: Training criterion node(s):
04/25/2016 08:23:57: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

04/25/2016 08:23:57: Evaluation criterion node(s):

04/25/2016 08:23:57: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.
04/25/2016 08:23:57: No PreCompute nodes found, skipping PreCompute step.

04/25/2016 08:23:57: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

04/25/2016 08:23:57: Starting minibatch loop.
04/25/2016 08:23:57:  Epoch[ 3 of 3]-Minibatch[   1-   1, 5.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.87319541; EvalErr[0]PerSample = 0.52148438; TotalTime = 0.0883s; SamplesPerSecond = 11600.1
04/25/2016 08:23:57:  Epoch[ 3 of 3]-Minibatch[   2-   2, 10.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.81577802; EvalErr[0]PerSample = 0.51074219; TotalTime = 0.0060s; SamplesPerSecond = 170269.4
04/25/2016 08:23:57:  Epoch[ 3 of 3]-Minibatch[   3-   3, 15.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.92167187; EvalErr[0]PerSample = 0.53027344; TotalTime = 0.0057s; SamplesPerSecond = 179460.2
04/25/2016 08:23:57:  Epoch[ 3 of 3]-Minibatch[   4-   4, 20.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.93823242; EvalErr[0]PerSample = 0.52832031; TotalTime = 0.0057s; SamplesPerSecond = 180695.3
04/25/2016 08:23:57:  Epoch[ 3 of 3]-Minibatch[   5-  10, 50.00%]: SamplesSeen = 6144; TrainLossPerSample =  1.86451785; EvalErr[0]PerSample = 0.51708984; TotalTime = 0.0275s; SamplesPerSecond = 223784.4
04/25/2016 08:23:57:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.86656265; EvalErr[0]PerSample = 0.51748047; TotalTime = 0.0448s; SamplesPerSecond = 228729.7
04/25/2016 08:23:57: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.8700806; TotalSamplesSeen = 61440; EvalErrPerSample = 0.5184082; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=0.25841
04/25/2016 08:23:57: SGD: Saving checkpoint model '/tmp/cntk-test-20160425082347.637220/Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn'
04/25/2016 08:23:57: CNTKCommandTrainEnd: speechTrain

04/25/2016 08:23:57: Action "train" complete.

04/25/2016 08:23:57: __COMPLETED__