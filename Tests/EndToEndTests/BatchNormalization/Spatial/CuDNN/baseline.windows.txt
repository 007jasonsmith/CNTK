CPU info:
    CPU Model Name: Intel(R) Core(TM) i7-6820HQ CPU @ 2.70GHz
    Hardware threads: 8
    Total Memory: 33417320 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/Users/mahilleb/Repos/CNTK/x64/release/cntk.exe configFile=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\BatchNormalization\Spatial/02_BatchNormConv.cntk currentDirectory=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData RunDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu DataDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\BatchNormalization\Spatial OutputDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu DeviceId=0 timestamping=true batchNormalizationEngine=cudnn
-------------------------------------------------------------------
Build info: 

		Built time: Aug 22 2016 17:36:51
		Last modified date: Fri Aug 19 10:26:01 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\R\cub-1.4.1
		CUDNN_PATH: C:\R\cudnn-7.5-windows10-x64-v5.0-ga\cuda
		Build Branch: mahilleb/CuDnn5Test
		Build SHA1: db500985aff6d7d67b90c1d0dedcbcd7f8ae7b96 (modified)
		Built by mahilleb on mahilleb42
		Build Path: C:\Users\mahilleb\Repos\CNTK\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData
08/22/2016 16:47:01: -------------------------------------------------------------------
08/22/2016 16:47:01: Build info: 

08/22/2016 16:47:01: 		Built time: Aug 22 2016 17:36:51
08/22/2016 16:47:01: 		Last modified date: Fri Aug 19 10:26:01 2016
08/22/2016 16:47:01: 		Build type: Release
08/22/2016 16:47:01: 		Build target: GPU
08/22/2016 16:47:01: 		With 1bit-SGD: yes
08/22/2016 16:47:01: 		Math lib: mkl
08/22/2016 16:47:01: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/22/2016 16:47:01: 		CUB_PATH: C:\R\cub-1.4.1
08/22/2016 16:47:01: 		CUDNN_PATH: C:\R\cudnn-7.5-windows10-x64-v5.0-ga\cuda
08/22/2016 16:47:01: 		Build Branch: mahilleb/CuDnn5Test
08/22/2016 16:47:01: 		Build SHA1: db500985aff6d7d67b90c1d0dedcbcd7f8ae7b96 (modified)
08/22/2016 16:47:01: 		Built by mahilleb on mahilleb42
08/22/2016 16:47:01: 		Build Path: C:\Users\mahilleb\Repos\CNTK\Source\CNTK\
08/22/2016 16:47:01: -------------------------------------------------------------------
08/22/2016 16:47:01: -------------------------------------------------------------------
08/22/2016 16:47:01: GPU info:

08/22/2016 16:47:01: 		Device[0]: cores = 960; computeCapability = 5.0; type = "Quadro M2000M"; memory = 4096 MB
08/22/2016 16:47:01: -------------------------------------------------------------------

08/22/2016 16:47:01: Running on mahilleb42 at 2016/08/22 16:47:01
08/22/2016 16:47:01: Command line: 
C:\Users\mahilleb\Repos\CNTK\x64\release\cntk.exe  configFile=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\BatchNormalization\Spatial/02_BatchNormConv.cntk  currentDirectory=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData  RunDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu  DataDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData  ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\BatchNormalization\Spatial  OutputDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu  DeviceId=0  timestamping=true  batchNormalizationEngine=cudnn



08/22/2016 16:47:01: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/22/2016 16:47:01: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
batchNormalizationEngine = "testMustOverrideBatchNormalizationEngine"
initOnCPUOnly=true
command = Train:Test
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "$ModelDir$/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 1024
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 2
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "$ModelDir$/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData
RunDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu
DataDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData
ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\BatchNormalization\Spatial
OutputDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu
DeviceId=0
timestamping=true
batchNormalizationEngine=cudnn

08/22/2016 16:47:01: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/22/2016 16:47:01: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/22/2016 16:47:01: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu/Models"
ndlMacros = "C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\BatchNormalization\Spatial/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
batchNormalizationEngine = "testMustOverrideBatchNormalizationEngine"
initOnCPUOnly=true
command = Train:Test
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\BatchNormalization\Spatial/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 1024
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 2
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData
RunDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu
DataDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData
ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\BatchNormalization\Spatial
OutputDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu
DeviceId=0
timestamping=true
batchNormalizationEngine=cudnn

08/22/2016 16:47:01: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/22/2016 16:47:01: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 02_BatchNormConv.cntk:batchNormalizationEngine=cudnn
configparameters: 02_BatchNormConv.cntk:command=Train:Test
configparameters: 02_BatchNormConv.cntk:ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\BatchNormalization\Spatial
configparameters: 02_BatchNormConv.cntk:currentDirectory=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData
configparameters: 02_BatchNormConv.cntk:DataDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData
configparameters: 02_BatchNormConv.cntk:deviceId=0
configparameters: 02_BatchNormConv.cntk:imageLayout=cudnn
configparameters: 02_BatchNormConv.cntk:initOnCPUOnly=true
configparameters: 02_BatchNormConv.cntk:ModelDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu/Models
configparameters: 02_BatchNormConv.cntk:ndlMacros=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\BatchNormalization\Spatial/Macros.ndl
configparameters: 02_BatchNormConv.cntk:numMBsToShowResult=500
configparameters: 02_BatchNormConv.cntk:OutputDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu
configparameters: 02_BatchNormConv.cntk:precision=float
configparameters: 02_BatchNormConv.cntk:RootDir=.
configparameters: 02_BatchNormConv.cntk:RunDir=C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu
configparameters: 02_BatchNormConv.cntk:Test=[
    action = "test"
    modelPath = "C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]

configparameters: 02_BatchNormConv.cntk:timestamping=true
configparameters: 02_BatchNormConv.cntk:traceLevel=1
configparameters: 02_BatchNormConv.cntk:Train=[
    action = "train"
    modelPath = "C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\BatchNormalization\Spatial/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 1024
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 2
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu\TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]

08/22/2016 16:47:01: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/22/2016 16:47:01: Commands: Train Test
08/22/2016 16:47:01: Precision = "float"
08/22/2016 16:47:01: CNTKModelPath: C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu/Models/02_BatchNormConv
08/22/2016 16:47:01: CNTKCommandTrainInfo: Train : 2
08/22/2016 16:47:01: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 2

08/22/2016 16:47:01: ##############################################################################
08/22/2016 16:47:01: #                                                                            #
08/22/2016 16:47:01: # Action "train"                                                             #
08/22/2016 16:47:01: #                                                                            #
08/22/2016 16:47:01: ##############################################################################

08/22/2016 16:47:01: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0

08/22/2016 16:47:02: Creating virgin network.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
Node 'b' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 0.000000.
Node 'sc' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 0.000000.
Node 'm' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 0.000000.
Node 'var' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 0.000000.
Node 'h1.W' (LearnableParameter operation): Initializing Parameter[64 x 15 x 15 x 3] <- 0.000000.
Node 'h1.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'OutputNodes.W' (LearnableParameter operation): Initializing Parameter[10 x 64] <- 0.000000.
Node 'OutputNodes.b' (LearnableParameter operation): Initializing Parameter[10] <- 0.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'b' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 0.000000.
Node 'sc' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 1.000000.
Node 'm' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 0.000000.
Node 'var' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 0.000000.
Node 'h1.W' (LearnableParameter operation): Initializing Parameter[64 x 15 x 15 x 3] <- gaussian(seed=1, range=0.007698*12.000000, onCPU=false).
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
Node 'h1.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'OutputNodes.W' (LearnableParameter operation): Initializing Parameter[10 x 64] <- gaussian(seed=2, range=0.025000*1.500000, onCPU=false).
Node 'OutputNodes.b' (LearnableParameter operation): Initializing Parameter[10] <- 0.000000.

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 22 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 15 x 15 x 3]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Validating --> sc = LearnableParameter() :  -> [3 x 1]
Validating --> b = LearnableParameter() :  -> [3 x 1]
Validating --> m = LearnableParameter() :  -> [3 x 1]
Validating --> var = LearnableParameter() :  -> [3 x 1]
Validating --> y = BatchNormalization (featScaled, sc, b, m, var) : [32 x 32 x 3 x *], [3 x 1], [3 x 1], [3 x 1], [3 x 1] -> [32 x 32 x 3 x *]
Validating --> conv1 = RectifiedLinear (y) : [32 x 32 x 3 x *] -> [32 x 32 x 3 x *]
Validating --> pool1 = MaxPooling (conv1) : [32 x 32 x 3 x *] -> [15 x 15 x 3 x *]
Validating --> h1.t = Times (h1.W, pool1) : [64 x 15 x 15 x 3], [15 x 15 x 3 x *] -> [64 x *]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.z = Plus (h1.t, h1.b) : [64 x *], [64 x 1] -> [64 x 1 x *]
Validating --> h1.y = RectifiedLinear (h1.z) : [64 x 1 x *] -> [64 x 1 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x 1 x *] -> [10 x 1 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x 1 x *], [10] -> [10 x 1 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 11 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 15 x 15 x 3, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 22 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/22/2016 16:47:02: Created model with 22 nodes on GPU 0.

08/22/2016 16:47:02: Training criterion node(s):
08/22/2016 16:47:02: 	CE = CrossEntropyWithSoftmax

08/22/2016 16:47:02: Evaluation criterion node(s):
08/22/2016 16:47:02: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 37 matrices, 18 are shared as 8, and 19 are not shared.

	{ OutputNodes.t : [10 x 1 x *]
	  h1.z : [64 x 1 x *] (gradient)
	  pool1 : [15 x 15 x 3 x *] (gradient) }
	{ h1.W : [64 x 15 x 15 x 3] (gradient)
	  h1.z : [64 x 1 x *] }
	{ h1.b : [64 x 1] (gradient)
	  h1.y : [64 x 1 x *] (gradient) }
	{ b : [3 x 1] (gradient)
	  conv1 : [32 x 32 x 3 x *] (gradient)
	  h1.t : [64 x *] }
	{ OutputNodes.W : [10 x 64] (gradient)
	  OutputNodes.z : [10 x 1 x *] (gradient) }
	{ conv1 : [32 x 32 x 3 x *]
	  sc : [3 x 1] (gradient) }
	{ h1.t : [64 x *] (gradient)
	  h1.y : [64 x 1 x *] }
	{ pool1 : [15 x 15 x 3 x *]
	  y : [32 x 32 x 3 x *] (gradient) }


08/22/2016 16:47:02: Training 43920 parameters in 6 out of 6 parameter tensors and 15 nodes with gradient:

08/22/2016 16:47:02: 	Node 'OutputNodes.W' (LearnableParameter operation) : [10 x 64]
08/22/2016 16:47:02: 	Node 'OutputNodes.b' (LearnableParameter operation) : [10]
08/22/2016 16:47:02: 	Node 'b' (LearnableParameter operation) : [3 x 1]
08/22/2016 16:47:02: 	Node 'h1.W' (LearnableParameter operation) : [64 x 15 x 15 x 3]
08/22/2016 16:47:02: 	Node 'h1.b' (LearnableParameter operation) : [64 x 1]
08/22/2016 16:47:02: 	Node 'sc' (LearnableParameter operation) : [3 x 1]

08/22/2016 16:47:02: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

08/22/2016 16:47:02: Starting Epoch 1: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..1024] (first sequence at sample 0), data subset 0 of 1

08/22/2016 16:47:02: Starting minibatch loop.
08/22/2016 16:47:06: Finished Epoch[ 1 of 2]: [Training] CE = 2.32421112 * 1024; Err = 0.87109375 * 1024; totalSamplesSeen = 1024; learningRatePerSample = 0.00046874999; epochTime=4.11732s
08/22/2016 16:47:06: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu/Models/02_BatchNormConv.1'

08/22/2016 16:47:06: Starting Epoch 2: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 1: frames [1024..2048] (first sequence at sample 1024), data subset 0 of 1

08/22/2016 16:47:06: Starting minibatch loop.
08/22/2016 16:47:06: Finished Epoch[ 2 of 2]: [Training] CE = 2.24204946 * 1024; Err = 0.84375000 * 1024; totalSamplesSeen = 2048; learningRatePerSample = 0.00046874999; epochTime=0.053071s
08/22/2016 16:47:06: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160822174612.125245\BatchNormalization\Spatial_CuDNN@release_gpu/Models/02_BatchNormConv'
08/22/2016 16:47:06: CNTKCommandTrainEnd: Train

08/22/2016 16:47:06: Action "train" complete.


08/22/2016 16:47:06: ##############################################################################
08/22/2016 16:47:06: #                                                                            #
08/22/2016 16:47:06: # Action "test"                                                              #
08/22/2016 16:47:06: #                                                                            #
08/22/2016 16:47:06: ##############################################################################

INFO: y: initialized samplesSeen from mbCount when loading pre-CuDNNv5 model

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 22 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 15 x 15 x 3]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> sc = LearnableParameter() :  -> [3 x 1]
Validating --> b = LearnableParameter() :  -> [3 x 1]
Validating --> m = LearnableParameter() :  -> [3 x 1]
Validating --> var = LearnableParameter() :  -> [3 x 1]
Validating --> y = BatchNormalization (featScaled, sc, b, m, var) : [32 x 32 x 3 x *1], [3 x 1], [3 x 1], [3 x 1], [3 x 1] -> [32 x 32 x 3 x *1]
Validating --> conv1 = RectifiedLinear (y) : [32 x 32 x 3 x *1] -> [32 x 32 x 3 x *1]
Validating --> pool1 = MaxPooling (conv1) : [32 x 32 x 3 x *1] -> [15 x 15 x 3 x *1]
Validating --> h1.t = Times (h1.W, pool1) : [64 x 15 x 15 x 3], [15 x 15 x 3 x *1] -> [64 x *1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.z = Plus (h1.t, h1.b) : [64 x *1], [64 x 1] -> [64 x 1 x *1]
Validating --> h1.y = RectifiedLinear (h1.z) : [64 x 1 x *1] -> [64 x 1 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x 1 x *1] -> [10 x 1 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x 1 x *1], [10] -> [10 x 1 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 11 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 15 x 15 x 3, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 22 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 22 matrices, 0 are shared as 0, and 22 are not shared.


BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
08/22/2016 16:47:08: Minibatch[1-500]: Err = 0.81025000 * 8000; CE = 2.19966818 * 8000
08/22/2016 16:47:08: Minibatch[501-625]: Err = 0.82000000 * 2000; CE = 2.20878254 * 2000
08/22/2016 16:47:08: Final Results: Minibatch[1-625]: Err = 0.81220000 * 10000; CE = 2.20149105 * 10000; perplexity = 9.03848028

08/22/2016 16:47:08: Action "test" complete.

08/22/2016 16:47:08: __COMPLETED__