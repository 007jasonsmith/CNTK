=== Running /home/mahilleb/CNTK/build/gpu/release/bin/cntk configFile=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E/cntk.cntk currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data RunDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E OutputDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu DeviceId=-1 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Apr  6 2016 15:52:46
		Last modified date: Tue Apr  5 14:19:05 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: mahilleb/MNISTLinux
		Build SHA1: ad5c8cd8002553a87d462a9a1ddcdabf2c84f519 (modified)
		Built by mahilleb on atleneu04
		Build Path: /home/mahilleb/CNTK
-------------------------------------------------------------------
Changed current directory to /home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data
04/08/2016 16:06:30: -------------------------------------------------------------------
04/08/2016 16:06:30: Build info: 

04/08/2016 16:06:30: 		Built time: Apr  6 2016 15:52:46
04/08/2016 16:06:30: 		Last modified date: Tue Apr  5 14:19:05 2016
04/08/2016 16:06:30: 		Build type: release
04/08/2016 16:06:30: 		Build target: GPU
04/08/2016 16:06:30: 		With 1bit-SGD: no
04/08/2016 16:06:30: 		Math lib: acml
04/08/2016 16:06:30: 		CUDA_PATH: /usr/local/cuda-7.0
04/08/2016 16:06:30: 		CUB_PATH: /usr/local/cub-1.4.1
04/08/2016 16:06:30: 		CUDNN_PATH: /usr/local/cudnn-4.0
04/08/2016 16:06:30: 		Build Branch: mahilleb/MNISTLinux
04/08/2016 16:06:30: 		Build SHA1: ad5c8cd8002553a87d462a9a1ddcdabf2c84f519 (modified)
04/08/2016 16:06:30: 		Built by mahilleb on atleneu04
04/08/2016 16:06:30: 		Build Path: /home/mahilleb/CNTK
04/08/2016 16:06:30: -------------------------------------------------------------------

04/08/2016 16:06:30: Running on localhost at 2016/04/08 16:06:30
04/08/2016 16:06:30: Command line: 
/home/mahilleb/CNTK/build/gpu/release/bin/cntk  configFile=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E/cntk.cntk  currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data  RunDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu  DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data  ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E  OutputDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu  DeviceId=-1  timestamping=true



04/08/2016 16:06:30: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/08/2016 16:06:30: precision = "float"
command = train:test
deviceId = $DeviceId$
ndlMacros = "$ConfigDir$/Macros.ndl"
parallelTrain = false
numCPUThreads = 8
initOnCpuOnly = true
train = [
    action = "train"
    modelPath = "$RunDir$/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same rnadomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=false)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = Plus(conv, convB);
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            t = Times(W, x)
            z = Plus(t, b)
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            t = Times(W, x)
            out = Plus(t, b)
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, 25, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, 400, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
        outputNodes = ol
    ]
    SGD = [
        epochSize = 100
        minibatchSize = 10
        learningRatesPerMB = 0.05
        momentumPerMB = 0*10:0.7
        maxEpochs = 12
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "$DataDir$/Train.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "$DataDir$/labelsmap.txt"
        ]
    ]    
]
test = [
    action = "test"
    modelPath = "$RunDir$/models/cntk.dnn"
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/Convolution.ndl"
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "$DataDir$/Test.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "$DataDir$/labelsmap.txt"
        ]
    ]    
]
currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data
RunDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu
DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data
ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E
OutputDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu
DeviceId=-1
timestamping=true

04/08/2016 16:06:30: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/08/2016 16:06:30: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/08/2016 16:06:30: precision = "float"
command = train:test
deviceId = -1
ndlMacros = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E/Macros.ndl"
parallelTrain = false
numCPUThreads = 8
initOnCpuOnly = true
train = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same rnadomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=false)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = Plus(conv, convB);
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            t = Times(W, x)
            z = Plus(t, b)
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            t = Times(W, x)
            out = Plus(t, b)
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, 25, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, 400, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
        outputNodes = ol
    ]
    SGD = [
        epochSize = 100
        minibatchSize = 10
        learningRatesPerMB = 0.05
        momentumPerMB = 0*10:0.7
        maxEpochs = 12
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/Train.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/labelsmap.txt"
        ]
    ]    
]
test = [
    action = "test"
    modelPath = "/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn"
    NDLNetworkBuilder = [
        networkDescription = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E/Convolution.ndl"
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/Test.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/labelsmap.txt"
        ]
    ]    
]
currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data
RunDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu
DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data
ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E
OutputDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu
DeviceId=-1
timestamping=true

04/08/2016 16:06:30: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/08/2016 16:06:30: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=train:test
configparameters: cntk.cntk:ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E
configparameters: cntk.cntk:currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data
configparameters: cntk.cntk:DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:initOnCpuOnly=true
configparameters: cntk.cntk:ndlMacros=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E/Macros.ndl
configparameters: cntk.cntk:numCPUThreads=8
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu
configparameters: cntk.cntk:test=[
    action = "test"
    modelPath = "/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn"
    NDLNetworkBuilder = [
        networkDescription = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E/Convolution.ndl"
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/Test.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/labelsmap.txt"
        ]
    ]    
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:train=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same rnadomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=false)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = Plus(conv, convB);
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            t = Times(W, x)
            z = Plus(t, b)
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            t = Times(W, x)
            out = Plus(t, b)
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, 25, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, 400, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
        outputNodes = ol
    ]
    SGD = [
        epochSize = 100
        minibatchSize = 10
        learningRatesPerMB = 0.05
        momentumPerMB = 0*10:0.7
        maxEpochs = 12
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/Train.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/labelsmap.txt"
        ]
    ]    
]

04/08/2016 16:06:30: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/08/2016 16:06:30: Commands: train test
04/08/2016 16:06:30: Precision = "float"
04/08/2016 16:06:30: Using 8 CPU threads.
04/08/2016 16:06:30: CNTKModelPath: /tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn
04/08/2016 16:06:30: CNTKCommandTrainInfo: train : 12
04/08/2016 16:06:30: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 12

04/08/2016 16:06:30: ##############################################################################
04/08/2016 16:06:30: #                                                                            #
04/08/2016 16:06:30: # Action "train"                                                             #
04/08/2016 16:06:30: #                                                                            #
04/08/2016 16:06:30: ##############################################################################

04/08/2016 16:06:30: CNTKCommandTrainBegin: train
Reading UCI file /home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/Train.txt

04/08/2016 16:06:30: Creating virgin network.

Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()

Validating network. 27 nodes to process in pass 1.


Validating network. 16 nodes to process in pass 2.


Validating network, final pass.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 4 x 4 x 32]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]

Using reference convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [24 x 24 x 16 x *]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *], [1 x 1 x 16] -> [24 x 24 x 16 x *]
Validating --> conv1_act.out = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *] -> [24 x 24 x 16 x *]

Using reference convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> pool1 = MaxPooling (conv1_act.out) : [24 x 24 x 16 x *] -> [12 x 12 x 16 x *]

Using reference convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *] -> [8 x 8 x 32 x *]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *], [1 x 1 x 32] -> [8 x 8 x 32 x *]
Validating --> conv2_act.out = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *] -> [8 x 8 x 32 x *]

Using reference convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> pool2 = AveragePooling (conv2_act.out) : [8 x 8 x 32 x *] -> [4 x 4 x 32 x *]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 4 x 4 x 32], [4 x 4 x 32 x *] -> [128 x *]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *], [128] -> [128 x *]
Validating --> h1.out = Sigmoid (h1.z) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.out) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.out = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/08/2016 16:06:31: Created model with 27 nodes on CPU.

04/08/2016 16:06:31: Training criterion node(s):
04/08/2016 16:06:31: 	ce = CrossEntropyWithSoftmax

04/08/2016 16:06:31: Evaluation criterion node(s):

04/08/2016 16:06:31: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.
04/08/2016 16:06:31: No PreCompute nodes found, skipping PreCompute step.

04/08/2016 16:06:31: Starting Epoch 1: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
UCIFastReader: Starting at epoch 0, counting lines to determine record count...
 1000 records found.
starting epoch 0 at record count 0, and file position 0
already there from last epoch

04/08/2016 16:06:31: Starting minibatch loop.
RandomOrdering: 21 retries for 100 elements (21.0%) to ensure window condition
RandomOrdering: recached sequence for seed 0: 38, 46, ...
04/08/2016 16:06:31:  Epoch[ 1 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.41888260; EvalErr[0]PerSample = 0.94000000; TotalTime = 0.3777s; SamplesPerSecond = 264.7
04/08/2016 16:06:31: Finished Epoch[ 1 of 12]: [Training Set] TrainLossPerSample = 2.4188826; TotalSamplesSeen = 100; EvalErrPerSample = 0.94; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.406316
04/08/2016 16:06:31: SGD: Saving checkpoint model '/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn.1'

04/08/2016 16:06:31: Starting Epoch 2: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
starting epoch 1 at record count 100, and file position 100
already there from last epoch

04/08/2016 16:06:31: Starting minibatch loop.
RandomOrdering: 21 retries for 100 elements (21.0%) to ensure window condition
RandomOrdering: recached sequence for seed 1: 38, 46, ...
04/08/2016 16:06:31:  Epoch[ 2 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.38036209; EvalErr[0]PerSample = 0.89000000; TotalTime = 0.3200s; SamplesPerSecond = 312.5
04/08/2016 16:06:31: Finished Epoch[ 2 of 12]: [Training Set] TrainLossPerSample = 2.380362; TotalSamplesSeen = 200; EvalErrPerSample = 0.88999999; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.320106
04/08/2016 16:06:31: SGD: Saving checkpoint model '/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn.2'

04/08/2016 16:06:31: Starting Epoch 3: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
starting epoch 2 at record count 200, and file position 200
already there from last epoch

04/08/2016 16:06:31: Starting minibatch loop.
RandomOrdering: 30 retries for 100 elements (30.0%) to ensure window condition
RandomOrdering: recached sequence for seed 2: 34, 6, ...
04/08/2016 16:06:32:  Epoch[ 3 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.30691956; EvalErr[0]PerSample = 0.85000000; TotalTime = 0.3093s; SamplesPerSecond = 323.3
04/08/2016 16:06:32: Finished Epoch[ 3 of 12]: [Training Set] TrainLossPerSample = 2.3069196; TotalSamplesSeen = 300; EvalErrPerSample = 0.84999996; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.309334
04/08/2016 16:06:32: SGD: Saving checkpoint model '/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn.3'

04/08/2016 16:06:32: Starting Epoch 4: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
starting epoch 3 at record count 300, and file position 300
already there from last epoch

04/08/2016 16:06:32: Starting minibatch loop.
RandomOrdering: 14 retries for 100 elements (14.0%) to ensure window condition
RandomOrdering: recached sequence for seed 3: 35, 34, ...
04/08/2016 16:06:32:  Epoch[ 4 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.35804520; EvalErr[0]PerSample = 0.92000000; TotalTime = 0.3091s; SamplesPerSecond = 323.5
04/08/2016 16:06:32: Finished Epoch[ 4 of 12]: [Training Set] TrainLossPerSample = 2.3580451; TotalSamplesSeen = 400; EvalErrPerSample = 0.91999996; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.30917
04/08/2016 16:06:32: SGD: Saving checkpoint model '/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn.4'

04/08/2016 16:06:32: Starting Epoch 5: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
starting epoch 4 at record count 400, and file position 400
already there from last epoch

04/08/2016 16:06:32: Starting minibatch loop.
RandomOrdering: 13 retries for 100 elements (13.0%) to ensure window condition
RandomOrdering: recached sequence for seed 4: 30, 23, ...
04/08/2016 16:06:32:  Epoch[ 5 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.28403503; EvalErr[0]PerSample = 0.88000000; TotalTime = 0.3090s; SamplesPerSecond = 323.6
04/08/2016 16:06:32: Finished Epoch[ 5 of 12]: [Training Set] TrainLossPerSample = 2.284035; TotalSamplesSeen = 500; EvalErrPerSample = 0.88; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.309059
04/08/2016 16:06:32: SGD: Saving checkpoint model '/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn.5'

04/08/2016 16:06:32: Starting Epoch 6: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
starting epoch 5 at record count 500, and file position 500
already there from last epoch

04/08/2016 16:06:32: Starting minibatch loop.
RandomOrdering: 25 retries for 100 elements (25.0%) to ensure window condition
RandomOrdering: recached sequence for seed 5: 33, 43, ...
04/08/2016 16:06:33:  Epoch[ 6 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.33544937; EvalErr[0]PerSample = 0.93000000; TotalTime = 0.3092s; SamplesPerSecond = 323.4
04/08/2016 16:06:33: Finished Epoch[ 6 of 12]: [Training Set] TrainLossPerSample = 2.3354492; TotalSamplesSeen = 600; EvalErrPerSample = 0.93000001; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.309304
04/08/2016 16:06:33: SGD: Saving checkpoint model '/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn.6'

04/08/2016 16:06:33: Starting Epoch 7: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
starting epoch 6 at record count 600, and file position 600
already there from last epoch

04/08/2016 16:06:33: Starting minibatch loop.
RandomOrdering: 14 retries for 100 elements (14.0%) to ensure window condition
RandomOrdering: recached sequence for seed 6: 12, 17, ...
04/08/2016 16:06:33:  Epoch[ 7 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.30070969; EvalErr[0]PerSample = 0.86000000; TotalTime = 0.3920s; SamplesPerSecond = 255.1
04/08/2016 16:06:33: Finished Epoch[ 7 of 12]: [Training Set] TrainLossPerSample = 2.3007097; TotalSamplesSeen = 700; EvalErrPerSample = 0.85999995; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.392042
04/08/2016 16:06:33: SGD: Saving checkpoint model '/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn.7'

04/08/2016 16:06:33: Starting Epoch 8: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
starting epoch 7 at record count 700, and file position 700
already there from last epoch

04/08/2016 16:06:33: Starting minibatch loop.
RandomOrdering: 14 retries for 100 elements (14.0%) to ensure window condition
RandomOrdering: recached sequence for seed 7: 40, 7, ...
04/08/2016 16:06:34:  Epoch[ 8 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.25841858; EvalErr[0]PerSample = 0.88000000; TotalTime = 0.4428s; SamplesPerSecond = 225.8
04/08/2016 16:06:34: Finished Epoch[ 8 of 12]: [Training Set] TrainLossPerSample = 2.2584186; TotalSamplesSeen = 800; EvalErrPerSample = 0.88; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.442893
04/08/2016 16:06:34: SGD: Saving checkpoint model '/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn.8'

04/08/2016 16:06:34: Starting Epoch 9: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
starting epoch 8 at record count 800, and file position 800
already there from last epoch

04/08/2016 16:06:34: Starting minibatch loop.
RandomOrdering: 17 retries for 100 elements (17.0%) to ensure window condition
RandomOrdering: recached sequence for seed 8: 8, 48, ...
04/08/2016 16:06:34:  Epoch[ 9 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.09995865; EvalErr[0]PerSample = 0.71000000; TotalTime = 0.4424s; SamplesPerSecond = 226.0
04/08/2016 16:06:34: Finished Epoch[ 9 of 12]: [Training Set] TrainLossPerSample = 2.0999587; TotalSamplesSeen = 900; EvalErrPerSample = 0.70999998; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.442495
04/08/2016 16:06:34: SGD: Saving checkpoint model '/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn.9'

04/08/2016 16:06:34: Starting Epoch 10: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
starting epoch 9 at record count 900, and file position 900
already there from last epoch

04/08/2016 16:06:34: Starting minibatch loop.
RandomOrdering: 21 retries for 100 elements (21.0%) to ensure window condition
RandomOrdering: recached sequence for seed 9: 14, 26, ...
04/08/2016 16:06:34:  Epoch[10 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  1.96605164; EvalErr[0]PerSample = 0.60000000; TotalTime = 0.4426s; SamplesPerSecond = 225.9
04/08/2016 16:06:34: Finished Epoch[10 of 12]: [Training Set] TrainLossPerSample = 1.9660516; TotalSamplesSeen = 1000; EvalErrPerSample = 0.59999996; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.442683
04/08/2016 16:06:34: SGD: Saving checkpoint model '/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn.10'

04/08/2016 16:06:34: Starting Epoch 11: learning rate per sample = 0.005000  effective momentum = 0.700000  momentum as time constant = 28.0 samples
starting epoch 10 at record count 1000, and file position 0
already there from last epoch

04/08/2016 16:06:34: Starting minibatch loop.
RandomOrdering: 31 retries for 100 elements (31.0%) to ensure window condition
RandomOrdering: recached sequence for seed 10: 22, 4, ...
04/08/2016 16:06:35:  Epoch[11 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  1.78244659; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.4125s; SamplesPerSecond = 242.4
04/08/2016 16:06:35: Finished Epoch[11 of 12]: [Training Set] TrainLossPerSample = 1.7824465; TotalSamplesSeen = 1100; EvalErrPerSample = 0.47999999; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.412562
04/08/2016 16:06:35: SGD: Saving checkpoint model '/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn.11'

04/08/2016 16:06:35: Starting Epoch 12: learning rate per sample = 0.005000  effective momentum = 0.700000  momentum as time constant = 28.0 samples
starting epoch 11 at record count 1100, and file position 100
already there from last epoch

04/08/2016 16:06:35: Starting minibatch loop.
RandomOrdering: 17 retries for 100 elements (17.0%) to ensure window condition
RandomOrdering: recached sequence for seed 11: 2, 40, ...
04/08/2016 16:06:35:  Epoch[12 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  1.49695053; EvalErr[0]PerSample = 0.15000000; TotalTime = 0.4377s; SamplesPerSecond = 228.4
04/08/2016 16:06:35: Finished Epoch[12 of 12]: [Training Set] TrainLossPerSample = 1.4969505; TotalSamplesSeen = 1200; EvalErrPerSample = 0.14999999; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.43785
04/08/2016 16:06:35: SGD: Saving checkpoint model '/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn'
04/08/2016 16:06:35: CNTKCommandTrainEnd: train

04/08/2016 16:06:35: Action "train" complete.


04/08/2016 16:06:35: ##############################################################################
04/08/2016 16:06:35: #                                                                            #
04/08/2016 16:06:35: # Action "test"                                                              #
04/08/2016 16:06:35: #                                                                            #
04/08/2016 16:06:35: ##############################################################################


Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()

Validating network. 27 nodes to process in pass 1.


Validating network. 16 nodes to process in pass 2.


Validating network, final pass.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 4 x 4 x 32]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]

Using reference convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [24 x 24 x 16 x *]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *], [1 x 1 x 16] -> [24 x 24 x 16 x *]
Validating --> conv1_act.out = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *] -> [24 x 24 x 16 x *]

Using reference convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> pool1 = MaxPooling (conv1_act.out) : [24 x 24 x 16 x *] -> [12 x 12 x 16 x *]

Using reference convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *] -> [8 x 8 x 32 x *]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *], [1 x 1 x 32] -> [8 x 8 x 32 x *]
Validating --> conv2_act.out = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *] -> [8 x 8 x 32 x *]

Using reference convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> pool2 = AveragePooling (conv2_act.out) : [8 x 8 x 32 x *] -> [4 x 4 x 32 x *]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 4 x 4 x 32], [4 x 4 x 32 x *] -> [128 x *]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *], [128] -> [128 x *]
Validating --> h1.out = Sigmoid (h1.z) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.out) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.out = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.
starting epoch 0 at record count 0, and file position 0
already there from last epoch
RandomOrdering: 21 retries for 100 elements (21.0%) to ensure window condition
RandomOrdering: recached sequence for seed 0: 38, 46, ...
Final Results: Minibatch[1-1]: SamplesSeen = 100    err: ErrorPrediction/Sample = 0    ce: CrossEntropyWithSoftmax/Sample = 1.2843167    Perplexity = 3.6121989    

04/08/2016 16:06:35: Action "test" complete.

04/08/2016 16:06:35: __COMPLETED__
=== Deleting last epoch data
==== Re-running from checkpoint
=== Running /home/mahilleb/CNTK/build/gpu/release/bin/cntk configFile=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E/cntk.cntk currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data RunDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E OutputDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu DeviceId=-1 timestamping=true makeMode=true
-------------------------------------------------------------------
Build info: 

		Built time: Apr  6 2016 15:52:46
		Last modified date: Tue Apr  5 14:19:05 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: mahilleb/MNISTLinux
		Build SHA1: ad5c8cd8002553a87d462a9a1ddcdabf2c84f519 (modified)
		Built by mahilleb on atleneu04
		Build Path: /home/mahilleb/CNTK
-------------------------------------------------------------------
Changed current directory to /home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data
04/08/2016 16:06:36: -------------------------------------------------------------------
04/08/2016 16:06:36: Build info: 

04/08/2016 16:06:36: 		Built time: Apr  6 2016 15:52:46
04/08/2016 16:06:36: 		Last modified date: Tue Apr  5 14:19:05 2016
04/08/2016 16:06:36: 		Build type: release
04/08/2016 16:06:36: 		Build target: GPU
04/08/2016 16:06:36: 		With 1bit-SGD: no
04/08/2016 16:06:36: 		Math lib: acml
04/08/2016 16:06:36: 		CUDA_PATH: /usr/local/cuda-7.0
04/08/2016 16:06:36: 		CUB_PATH: /usr/local/cub-1.4.1
04/08/2016 16:06:36: 		CUDNN_PATH: /usr/local/cudnn-4.0
04/08/2016 16:06:36: 		Build Branch: mahilleb/MNISTLinux
04/08/2016 16:06:36: 		Build SHA1: ad5c8cd8002553a87d462a9a1ddcdabf2c84f519 (modified)
04/08/2016 16:06:36: 		Built by mahilleb on atleneu04
04/08/2016 16:06:36: 		Build Path: /home/mahilleb/CNTK
04/08/2016 16:06:36: -------------------------------------------------------------------

04/08/2016 16:06:36: Running on localhost at 2016/04/08 16:06:36
04/08/2016 16:06:36: Command line: 
/home/mahilleb/CNTK/build/gpu/release/bin/cntk  configFile=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E/cntk.cntk  currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data  RunDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu  DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data  ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E  OutputDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu  DeviceId=-1  timestamping=true  makeMode=true



04/08/2016 16:06:36: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/08/2016 16:06:36: precision = "float"
command = train:test
deviceId = $DeviceId$
ndlMacros = "$ConfigDir$/Macros.ndl"
parallelTrain = false
numCPUThreads = 8
initOnCpuOnly = true
train = [
    action = "train"
    modelPath = "$RunDir$/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same rnadomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=false)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = Plus(conv, convB);
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            t = Times(W, x)
            z = Plus(t, b)
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            t = Times(W, x)
            out = Plus(t, b)
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, 25, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, 400, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
        outputNodes = ol
    ]
    SGD = [
        epochSize = 100
        minibatchSize = 10
        learningRatesPerMB = 0.05
        momentumPerMB = 0*10:0.7
        maxEpochs = 12
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "$DataDir$/Train.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "$DataDir$/labelsmap.txt"
        ]
    ]    
]
test = [
    action = "test"
    modelPath = "$RunDir$/models/cntk.dnn"
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/Convolution.ndl"
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "$DataDir$/Test.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "$DataDir$/labelsmap.txt"
        ]
    ]    
]
currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data
RunDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu
DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data
ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E
OutputDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu
DeviceId=-1
timestamping=true
makeMode=true

04/08/2016 16:06:36: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/08/2016 16:06:36: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/08/2016 16:06:36: precision = "float"
command = train:test
deviceId = -1
ndlMacros = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E/Macros.ndl"
parallelTrain = false
numCPUThreads = 8
initOnCpuOnly = true
train = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same rnadomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=false)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = Plus(conv, convB);
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            t = Times(W, x)
            z = Plus(t, b)
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            t = Times(W, x)
            out = Plus(t, b)
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, 25, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, 400, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
        outputNodes = ol
    ]
    SGD = [
        epochSize = 100
        minibatchSize = 10
        learningRatesPerMB = 0.05
        momentumPerMB = 0*10:0.7
        maxEpochs = 12
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/Train.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/labelsmap.txt"
        ]
    ]    
]
test = [
    action = "test"
    modelPath = "/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn"
    NDLNetworkBuilder = [
        networkDescription = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E/Convolution.ndl"
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/Test.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/labelsmap.txt"
        ]
    ]    
]
currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data
RunDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu
DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data
ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E
OutputDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu
DeviceId=-1
timestamping=true
makeMode=true

04/08/2016 16:06:36: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/08/2016 16:06:36: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=train:test
configparameters: cntk.cntk:ConfigDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E
configparameters: cntk.cntk:currentDirectory=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data
configparameters: cntk.cntk:DataDir=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:initOnCpuOnly=true
configparameters: cntk.cntk:makeMode=true
configparameters: cntk.cntk:ndlMacros=/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E/Macros.ndl
configparameters: cntk.cntk:numCPUThreads=8
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu
configparameters: cntk.cntk:test=[
    action = "test"
    modelPath = "/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn"
    NDLNetworkBuilder = [
        networkDescription = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/QuickE2E/Convolution.ndl"
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/Test.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/labelsmap.txt"
        ]
    ]    
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:train=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same rnadomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=false)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = Plus(conv, convB);
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            t = Times(W, x)
            z = Plus(t, b)
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            t = Times(W, x)
            out = Plus(t, b)
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, 25, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, 400, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
        outputNodes = ol
    ]
    SGD = [
        epochSize = 100
        minibatchSize = 10
        learningRatesPerMB = 0.05
        momentumPerMB = 0*10:0.7
        maxEpochs = 12
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/Train.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "/home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/labelsmap.txt"
        ]
    ]    
]

04/08/2016 16:06:36: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/08/2016 16:06:36: Commands: train test
04/08/2016 16:06:36: Precision = "float"
04/08/2016 16:06:36: Using 8 CPU threads.
04/08/2016 16:06:36: CNTKModelPath: /tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn
04/08/2016 16:06:36: CNTKCommandTrainInfo: train : 12
04/08/2016 16:06:36: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 12

04/08/2016 16:06:36: ##############################################################################
04/08/2016 16:06:36: #                                                                            #
04/08/2016 16:06:36: # Action "train"                                                             #
04/08/2016 16:06:36: #                                                                            #
04/08/2016 16:06:36: ##############################################################################

04/08/2016 16:06:36: CNTKCommandTrainBegin: train
Reading UCI file /home/mahilleb/CNTK/Tests/EndToEndTests/Image/Data/Train.txt

04/08/2016 16:06:36: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn.11'.

Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()

Validating network. 27 nodes to process in pass 1.


Validating network. 16 nodes to process in pass 2.


Validating network, final pass.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 4 x 4 x 32]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]

Using reference convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [24 x 24 x 16 x *]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *], [1 x 1 x 16] -> [24 x 24 x 16 x *]
Validating --> conv1_act.out = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *] -> [24 x 24 x 16 x *]

Using reference convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> pool1 = MaxPooling (conv1_act.out) : [24 x 24 x 16 x *] -> [12 x 12 x 16 x *]

Using reference convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *] -> [8 x 8 x 32 x *]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *], [1 x 1 x 32] -> [8 x 8 x 32 x *]
Validating --> conv2_act.out = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *] -> [8 x 8 x 32 x *]

Using reference convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> pool2 = AveragePooling (conv2_act.out) : [8 x 8 x 32 x *] -> [4 x 4 x 32 x *]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 4 x 4 x 32], [4 x 4 x 32 x *] -> [128 x *]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *], [128] -> [128 x *]
Validating --> h1.out = Sigmoid (h1.z) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.out) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.out = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/08/2016 16:06:36: Loaded model with 27 nodes on CPU.

04/08/2016 16:06:36: Training criterion node(s):
04/08/2016 16:06:36: 	ce = CrossEntropyWithSoftmax

04/08/2016 16:06:36: Evaluation criterion node(s):

04/08/2016 16:06:36: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.
04/08/2016 16:06:36: No PreCompute nodes found, skipping PreCompute step.
04/08/2016 16:06:36: Warning: checkpoint file is missing. learning parameters will be initialized from 0

04/08/2016 16:06:36: Starting Epoch 12: learning rate per sample = 0.005000  effective momentum = 0.700000  momentum as time constant = 28.0 samples
UCIFastReader: Starting at epoch 11, counting lines to determine record count...
 1000 records found.
starting epoch 11 at record count 1100, and file position 100
reading from record 0 to 100 to be positioned properly for epoch

04/08/2016 16:06:36: Starting minibatch loop.
RandomOrdering: 17 retries for 100 elements (17.0%) to ensure window condition
RandomOrdering: recached sequence for seed 11: 2, 40, ...
04/08/2016 16:06:37:  Epoch[12 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  1.49395660; EvalErr[0]PerSample = 0.19000000; TotalTime = 0.3585s; SamplesPerSecond = 278.9
04/08/2016 16:06:37: Finished Epoch[12 of 12]: [Training Set] TrainLossPerSample = 1.4939566; TotalSamplesSeen = 100; EvalErrPerSample = 0.19; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.389069
04/08/2016 16:06:37: SGD: Saving checkpoint model '/tmp/cntk-test-20160408160630.342430/Image_QuickE2E@release_cpu/models/cntk.dnn'
04/08/2016 16:06:37: CNTKCommandTrainEnd: train

04/08/2016 16:06:37: Action "train" complete.


04/08/2016 16:06:37: ##############################################################################
04/08/2016 16:06:37: #                                                                            #
04/08/2016 16:06:37: # Action "test"                                                              #
04/08/2016 16:06:37: #                                                                            #
04/08/2016 16:06:37: ##############################################################################


Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()

Validating network. 27 nodes to process in pass 1.


Validating network. 16 nodes to process in pass 2.


Validating network, final pass.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 4 x 4 x 32]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]

Using reference convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [24 x 24 x 16 x *]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *], [1 x 1 x 16] -> [24 x 24 x 16 x *]
Validating --> conv1_act.out = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *] -> [24 x 24 x 16 x *]

Using reference convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> pool1 = MaxPooling (conv1_act.out) : [24 x 24 x 16 x *] -> [12 x 12 x 16 x *]

Using reference convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *] -> [8 x 8 x 32 x *]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *], [1 x 1 x 32] -> [8 x 8 x 32 x *]
Validating --> conv2_act.out = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *] -> [8 x 8 x 32 x *]

Using reference convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> pool2 = AveragePooling (conv2_act.out) : [8 x 8 x 32 x *] -> [4 x 4 x 32 x *]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 4 x 4 x 32], [4 x 4 x 32 x *] -> [128 x *]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *], [128] -> [128 x *]
Validating --> h1.out = Sigmoid (h1.z) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.out) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.out = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.
starting epoch 0 at record count 0, and file position 0
already there from last epoch
RandomOrdering: 21 retries for 100 elements (21.0%) to ensure window condition
RandomOrdering: recached sequence for seed 0: 38, 46, ...
Final Results: Minibatch[1-1]: SamplesSeen = 100    err: ErrorPrediction/Sample = 0    ce: CrossEntropyWithSoftmax/Sample = 1.3290143    Perplexity = 3.7773182    

04/08/2016 16:06:37: Action "test" complete.

04/08/2016 16:06:37: __COMPLETED__