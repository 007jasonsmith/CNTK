CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3530 @ 2.80GHz
    Hardware threads: 4
    Total Memory: 12580404 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/debug/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu DeviceId=0 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 05:11:35
		Last modified date: Thu Jul 14 03:20:47 2016
		Build type: Debug
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
07/14/2016 05:47:41: -------------------------------------------------------------------
07/14/2016 05:47:41: Build info: 

07/14/2016 05:47:41: 		Built time: Jul 14 2016 05:11:35
07/14/2016 05:47:41: 		Last modified date: Thu Jul 14 03:20:47 2016
07/14/2016 05:47:41: 		Build type: Debug
07/14/2016 05:47:41: 		Build target: GPU
07/14/2016 05:47:41: 		With 1bit-SGD: no
07/14/2016 05:47:41: 		Math lib: mkl
07/14/2016 05:47:41: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
07/14/2016 05:47:41: 		CUB_PATH: C:\src\cub-1.4.1
07/14/2016 05:47:41: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
07/14/2016 05:47:41: 		Build Branch: HEAD
07/14/2016 05:47:41: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 05:47:41: 		Built by svcphil on liana-08-w
07/14/2016 05:47:41: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
07/14/2016 05:47:41: -------------------------------------------------------------------
07/14/2016 05:47:55: -------------------------------------------------------------------
07/14/2016 05:47:55: GPU info:

07/14/2016 05:47:55: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8090 MB
07/14/2016 05:47:55: -------------------------------------------------------------------

07/14/2016 05:47:55: Running on cntk-muc00 at 2016/07/14 05:47:55
07/14/2016 05:47:55: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu  DeviceId=0  timestamping=true



07/14/2016 05:47:55: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:47:55: precision = "float"
command = train:test
deviceId = $DeviceId$
parallelTrain = false
numCPUThreads = 8
train = [
    action = "train"
    modelPath = "$RunDir$/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=true)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = conv + convB;
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            z = W * x + b
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            out = W * x + b
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, kW1 * kH1, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, kW1 * kH1 * cMap1, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
    ]
    SGD = [
        epochSize = 1000
        minibatchSize = 100
        learningRatesPerSample=0.000002
        momentumAsTimeConstant=1000
        maxEpochs = 5
        keepCheckPointFiles = true
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    modelPath = "$RunDir$/models/cntk.dnn"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu
DeviceId=0
timestamping=true

07/14/2016 05:47:55: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:47:55: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:47:55: precision = "float"
command = train:test
deviceId = 0
parallelTrain = false
numCPUThreads = 8
train = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=true)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = conv + convB;
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            z = W * x + b
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            out = W * x + b
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, kW1 * kH1, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, kW1 * kH1 * cMap1, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
    ]
    SGD = [
        epochSize = 1000
        minibatchSize = 100
        learningRatesPerSample=0.000002
        momentumAsTimeConstant=1000
        maxEpochs = 5
        keepCheckPointFiles = true
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Train_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Test_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu
DeviceId=0
timestamping=true

07/14/2016 05:47:55: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:47:55: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=train:test
configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E
configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:numCPUThreads=8
configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu
configparameters: cntk.cntk:test=[
    action = "test"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Test_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:train=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=true)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = conv + convB;
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            z = W * x + b
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            out = W * x + b
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, kW1 * kH1, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, kW1 * kH1 * cMap1, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
    ]
    SGD = [
        epochSize = 1000
        minibatchSize = 100
        learningRatesPerSample=0.000002
        momentumAsTimeConstant=1000
        maxEpochs = 5
        keepCheckPointFiles = true
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Train_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

07/14/2016 05:47:55: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 05:47:55: Commands: train test
07/14/2016 05:47:55: Precision = "float"
07/14/2016 05:47:55: Using 4 CPU threads.
07/14/2016 05:47:55: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn
07/14/2016 05:47:55: CNTKCommandTrainInfo: train : 5
07/14/2016 05:47:55: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5

07/14/2016 05:47:55: ##############################################################################
07/14/2016 05:47:55: #                                                                            #
07/14/2016 05:47:55: # Action "train"                                                             #
07/14/2016 05:47:55: #                                                                            #
07/14/2016 05:47:55: ##############################################################################

07/14/2016 05:47:55: CNTKCommandTrainBegin: train
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/14/2016 05:47:56: Creating virgin network.

Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 4 x 4 x 32]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [24 x 24 x 16 x *]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *], [1 x 1 x 16] -> [24 x 24 x 16 x *]
Validating --> conv1_act.out = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *] -> [24 x 24 x 16 x *]
Validating --> pool1 = MaxPooling (conv1_act.out) : [24 x 24 x 16 x *] -> [12 x 12 x 16 x *]
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *] -> [8 x 8 x 32 x *]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *], [1 x 1 x 32] -> [8 x 8 x 32 x *]
Validating --> conv2_act.out = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *] -> [8 x 8 x 32 x *]
Validating --> pool2 = AveragePooling (conv2_act.out) : [8 x 8 x 32 x *] -> [4 x 4 x 32 x *]
Validating --> h1.z.PlusArgs[0] = Times (h1.W, pool2) : [128 x 4 x 4 x 32], [4 x 4 x 32 x *] -> [128 x *]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.z.PlusArgs[0], h1.b) : [128 x *], [128] -> [128 x *]
Validating --> h1.out = Sigmoid (h1.z) : [128 x *] -> [128 x *]
Validating --> ol.out.PlusArgs[0] = Times (ol.W, h1.out) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.out = Plus (ol.out.PlusArgs[0], ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1_act.conv: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2_act.conv: using cuDNN convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

pool2: using cuDNN convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 05:47:57: Created model with 27 nodes on GPU 0.

07/14/2016 05:47:57: Training criterion node(s):
07/14/2016 05:47:57: 	ce = CrossEntropyWithSoftmax

07/14/2016 05:47:57: Evaluation criterion node(s):

07/14/2016 05:47:57: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[err Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *]] [features Gradient[28 x 28 x 1 x *]] [labels Gradient[10 x *]] }
000000693014C240: {[err Value[1]] }
000000693014C310: {[conv2_act.conv Gradient[8 x 8 x 32 x *]] [conv2_act.out Value[8 x 8 x 32 x *]] }
000000693014C650: {[h1.out Value[128 x *]] [h1.z.PlusArgs[0] Gradient[128 x *]] }
000000693014C720: {[conv1_act.conv Value[24 x 24 x 16 x *]] }
000000693014CC00: {[conv1_act.convPlusB Value[24 x 24 x 16 x *]] [conv1_act.convW Gradient[16 x 25]] }
000000693014CCD0: {[h1.z Gradient[128 x *]] [ol.out.PlusArgs[0] Value[10 x *]] [pool2 Gradient[4 x 4 x 32 x *]] }
000000693014CF40: {[conv2_act.convPlusB Gradient[8 x 8 x 32 x *]] [pool1 Gradient[12 x 12 x 16 x *]] [pool2 Value[4 x 4 x 32 x *]] }
000000693014D0E0: {[h1.b Gradient[128]] [h1.out Gradient[128 x *]] [ol.out Gradient[10 x 1 x *]] }
000000693014D280: {[ol.out.PlusArgs[0] Gradient[10 x *]] }
000000693014D350: {[ce Value[1]] }
000000693014D900: {[ol.W Gradient[10 x 128]] [ol.out Value[10 x 1 x *]] }
000000693014DB70: {[ce Gradient[1]] }
000000693014DD10: {[ol.b Gradient[10 x 1]] }
000000693014DEB0: {[conv2_act.convB Gradient[1 x 1 x 32]] [conv2_act.out Gradient[8 x 8 x 32 x *]] [h1.z.PlusArgs[0] Value[128 x *]] }
000000693014E050: {[h1.W Gradient[128 x 4 x 4 x 32]] [h1.z Value[128 x *]] }
000000693014E120: {[conv1_act.convB Gradient[1 x 1 x 16]] [conv1_act.out Gradient[24 x 24 x 16 x *]] }
000000693014E2C0: {[featScaled Value[28 x 28 x 1 x *]] }
000000693014E460: {[conv1_act.convPlusB Gradient[24 x 24 x 16 x *]] [pool1 Value[12 x 12 x 16 x *]] }
000000693014E7A0: {[conv2_act.convPlusB Value[8 x 8 x 32 x *]] [conv2_act.convW Gradient[32 x 400]] }
000000693014EC80: {[conv1_act.conv Gradient[24 x 24 x 16 x *]] [conv1_act.out Value[24 x 24 x 16 x *]] }
000000693014ED50: {[conv2_act.conv Value[8 x 8 x 32 x *]] }
00000069317948C0: {[featScale Value[1 x 1]] }
0000006931794C00: {[conv2_act.convW Value[32 x 400]] }
0000006931794F40: {[conv2_act.convB Value[1 x 1 x 32]] }
00000069317950E0: {[h1.W Value[128 x 4 x 4 x 32]] }
00000069317951B0: {[h1.b Value[128]] }
00000069317955C0: {[ol.b Value[10 x 1]] }
0000006931795690: {[ol.W Value[10 x 128]] }
0000006931795830: {[conv1_act.convB Value[1 x 1 x 16]] }
0000006931795AA0: {[features Value[28 x 28 x 1 x *]] }
0000006956CFDF30: {[conv1_act.convW Value[16 x 25]] }
00000069583941F0: {[labels Value[10 x *]] }

07/14/2016 05:47:57: No PreCompute nodes found, skipping PreCompute step.

07/14/2016 05:47:57: Starting Epoch 1: learning rate per sample = 0.000002  effective momentum = 0.904837  momentum as time constant = 1000.0 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..1000] (first sequence at sample 0), data subset 0 of 1

07/14/2016 05:47:57: Starting minibatch loop.
07/14/2016 05:47:58:  Epoch[ 1 of 5]-Minibatch[   1-  10, 100.00%]: ce = 2.34056128 * 1000; err = 0.90000000 * 1000; time = 1.2044s; samplesPerSecond = 830.3
07/14/2016 05:47:58: Finished Epoch[ 1 of 5]: [Training] ce = 2.34056128 * 1000; err = 0.90000000 * 1000; totalSamplesSeen = 1000; learningRatePerSample = 2e-006; epochTime=1.22436s
07/14/2016 05:47:58: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn.1'

07/14/2016 05:47:58: Starting Epoch 2: learning rate per sample = 0.000002  effective momentum = 0.904837  momentum as time constant = 1000.0 samples
BlockRandomizer::StartEpoch: epoch 1: frames [1000..2000] (first sequence at sample 1000), data subset 0 of 1

07/14/2016 05:47:58: Starting minibatch loop.
07/14/2016 05:47:58:  Epoch[ 2 of 5]-Minibatch[   1-  10, 100.00%]: ce = 2.33912402 * 1000; err = 0.90000000 * 1000; time = 0.0783s; samplesPerSecond = 12772.0
07/14/2016 05:47:58: Finished Epoch[ 2 of 5]: [Training] ce = 2.33912402 * 1000; err = 0.90000000 * 1000; totalSamplesSeen = 2000; learningRatePerSample = 2e-006; epochTime=0.08496s
07/14/2016 05:47:58: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn.2'

07/14/2016 05:47:58: Starting Epoch 3: learning rate per sample = 0.000002  effective momentum = 0.904837  momentum as time constant = 1000.0 samples
BlockRandomizer::StartEpoch: epoch 2: frames [2000..3000] (first sequence at sample 2000), data subset 0 of 1

07/14/2016 05:47:58: Starting minibatch loop.
07/14/2016 05:47:58:  Epoch[ 3 of 5]-Minibatch[   1-  10, 100.00%]: ce = 2.33697266 * 1000; err = 0.90000000 * 1000; time = 0.0776s; samplesPerSecond = 12894.9
07/14/2016 05:47:58: Finished Epoch[ 3 of 5]: [Training] ce = 2.33697266 * 1000; err = 0.90000000 * 1000; totalSamplesSeen = 3000; learningRatePerSample = 2e-006; epochTime=0.084158s
07/14/2016 05:47:58: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn.3'

07/14/2016 05:47:58: Starting Epoch 4: learning rate per sample = 0.000002  effective momentum = 0.904837  momentum as time constant = 1000.0 samples
BlockRandomizer::StartEpoch: epoch 3: frames [3000..4000] (first sequence at sample 3000), data subset 0 of 1

07/14/2016 05:47:58: Starting minibatch loop.
07/14/2016 05:47:58:  Epoch[ 4 of 5]-Minibatch[   1-  10, 100.00%]: ce = 2.33485522 * 1000; err = 0.90000000 * 1000; time = 0.0774s; samplesPerSecond = 12919.6
07/14/2016 05:47:58: Finished Epoch[ 4 of 5]: [Training] ce = 2.33485522 * 1000; err = 0.90000000 * 1000; totalSamplesSeen = 4000; learningRatePerSample = 2e-006; epochTime=0.083983s
07/14/2016 05:47:58: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn.4'

07/14/2016 05:47:58: Starting Epoch 5: learning rate per sample = 0.000002  effective momentum = 0.904837  momentum as time constant = 1000.0 samples
BlockRandomizer::StartEpoch: epoch 4: frames [4000..5000] (first sequence at sample 4000), data subset 0 of 1

07/14/2016 05:47:58: Starting minibatch loop.
07/14/2016 05:47:58:  Epoch[ 5 of 5]-Minibatch[   1-  10, 100.00%]: ce = 2.33271509 * 1000; err = 0.90000000 * 1000; time = 0.0773s; samplesPerSecond = 12932.6
07/14/2016 05:47:58: Finished Epoch[ 5 of 5]: [Training] ce = 2.33271509 * 1000; err = 0.90000000 * 1000; totalSamplesSeen = 5000; learningRatePerSample = 2e-006; epochTime=0.083899s
07/14/2016 05:47:58: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn'
07/14/2016 05:47:58: CNTKCommandTrainEnd: train

07/14/2016 05:47:58: Action "train" complete.


07/14/2016 05:47:58: ##############################################################################
07/14/2016 05:47:58: #                                                                            #
07/14/2016 05:47:58: # Action "test"                                                              #
07/14/2016 05:47:58: #                                                                            #
07/14/2016 05:47:58: ##############################################################################


Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 4 x 4 x 32]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [24 x 24 x 16 x *1]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *1], [1 x 1 x 16] -> [24 x 24 x 16 x *1]
Validating --> conv1_act.out = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *1] -> [24 x 24 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1_act.out) : [24 x 24 x 16 x *1] -> [12 x 12 x 16 x *1]
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *1] -> [8 x 8 x 32 x *1]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *1], [1 x 1 x 32] -> [8 x 8 x 32 x *1]
Validating --> conv2_act.out = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *1] -> [8 x 8 x 32 x *1]
Validating --> pool2 = AveragePooling (conv2_act.out) : [8 x 8 x 32 x *1] -> [4 x 4 x 32 x *1]
Validating --> h1.z.PlusArgs[0] = Times (h1.W, pool2) : [128 x 4 x 4 x 32], [4 x 4 x 32 x *1] -> [128 x *1]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.z.PlusArgs[0], h1.b) : [128 x *1], [128] -> [128 x *1]
Validating --> h1.out = Sigmoid (h1.z) : [128 x *1] -> [128 x *1]
Validating --> ol.out.PlusArgs[0] = Times (ol.W, h1.out) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.out = Plus (ol.out.PlusArgs[0], ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.out) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> err = ErrorPrediction (labels, ol.out) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1_act.conv: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2_act.conv: using cuDNN convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

pool2: using cuDNN convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[ce Gradient[1]] [conv1_act.conv Gradient[24 x 24 x 16 x *1]] [conv1_act.convB Gradient[1 x 1 x 16]] [conv1_act.convPlusB Gradient[24 x 24 x 16 x *1]] [conv1_act.convW Gradient[16 x 25]] [conv1_act.out Gradient[24 x 24 x 16 x *1]] [conv2_act.conv Gradient[8 x 8 x 32 x *1]] [conv2_act.convB Gradient[1 x 1 x 32]] [conv2_act.convPlusB Gradient[8 x 8 x 32 x *1]] [conv2_act.convW Gradient[32 x 400]] [conv2_act.out Gradient[8 x 8 x 32 x *1]] [err Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *1]] [features Gradient[28 x 28 x 1 x *1]] [h1.W Gradient[128 x 4 x 4 x 32]] [h1.b Gradient[128]] [h1.out Gradient[128 x *1]] [h1.z Gradient[128 x *1]] [h1.z.PlusArgs[0] Gradient[128 x *1]] [labels Gradient[10 x *1]] [ol.W Gradient[10 x 128]] [ol.b Gradient[10 x 1]] [ol.out Gradient[10 x 1 x *1]] [ol.out.PlusArgs[0] Gradient[10 x *1]] [pool1 Gradient[12 x 12 x 16 x *1]] [pool2 Gradient[4 x 4 x 32 x *1]] }
000000693014C580: {[conv1_act.convW Value[16 x 25]] }
000000693014C7F0: {[featScale Value[1 x 1]] }
000000693014C8C0: {[features Value[28 x 28 x 1 x *1]] }
000000693014C990: {[h1.b Value[128]] }
000000693014D420: {[conv1_act.convB Value[1 x 1 x 16]] }
000000693014E6D0: {[conv2_act.convB Value[1 x 1 x 32]] }
000000693014E940: {[conv2_act.convW Value[32 x 400]] }
000000693014F4A0: {[h1.W Value[128 x 4 x 4 x 32]] }
000000693014F570: {[err Value[1]] }
000000693014F640: {[featScaled Value[28 x 28 x 1 x *1]] }
000000693014F710: {[ol.W Value[10 x 128]] }
000000693014F7E0: {[ce Value[1]] }
000000693014F980: {[conv1_act.conv Value[24 x 24 x 16 x *1]] }
000000693014FB20: {[ol.b Value[10 x 1]] }
000000693014FBF0: {[conv1_act.convPlusB Value[24 x 24 x 16 x *1]] }
000000693014FCC0: {[conv1_act.out Value[24 x 24 x 16 x *1]] }
000000693014FE60: {[labels Value[10 x *1]] }
0000006940BAC860: {[ol.out.PlusArgs[0] Value[10 x *1]] }
0000006940BACAD0: {[ol.out Value[10 x 1 x *1]] }
0000006940BAD700: {[conv2_act.convPlusB Value[8 x 8 x 32 x *1]] }
0000006940BADB10: {[h1.z Value[128 x *1]] }
0000006940BAE190: {[conv2_act.out Value[8 x 8 x 32 x *1]] }
0000006940BAE670: {[pool2 Value[4 x 4 x 32 x *1]] }
0000006940BAE740: {[h1.out Value[128 x *1]] }
0000006940BAEC20: {[h1.z.PlusArgs[0] Value[128 x *1]] }
0000006956CFF520: {[pool1 Value[12 x 12 x 16 x *1]] }
0000006956CFF5F0: {[conv2_act.conv Value[8 x 8 x 32 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..100] (first sequence at sample 0), data subset 0 of 1
07/14/2016 05:47:59: Final Results: Minibatch[1-1]: err = 0.90000000 * 100; ce = 2.33150879 * 100; perplexity = 10.29346048

07/14/2016 05:47:59: Action "test" complete.

07/14/2016 05:47:59: __COMPLETED__
=== Deleting last epoch data
==== Re-running from checkpoint
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/debug/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu DeviceId=0 timestamping=true makeMode=true
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 05:11:35
		Last modified date: Thu Jul 14 03:20:47 2016
		Build type: Debug
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
07/14/2016 05:48:00: -------------------------------------------------------------------
07/14/2016 05:48:00: Build info: 

07/14/2016 05:48:00: 		Built time: Jul 14 2016 05:11:35
07/14/2016 05:48:00: 		Last modified date: Thu Jul 14 03:20:47 2016
07/14/2016 05:48:00: 		Build type: Debug
07/14/2016 05:48:00: 		Build target: GPU
07/14/2016 05:48:00: 		With 1bit-SGD: no
07/14/2016 05:48:00: 		Math lib: mkl
07/14/2016 05:48:00: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
07/14/2016 05:48:00: 		CUB_PATH: C:\src\cub-1.4.1
07/14/2016 05:48:00: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
07/14/2016 05:48:00: 		Build Branch: HEAD
07/14/2016 05:48:00: 		Build SHA1: 72bee394bf461e8f6f0feb593a8416c05f481957
07/14/2016 05:48:00: 		Built by svcphil on liana-08-w
07/14/2016 05:48:00: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
07/14/2016 05:48:00: -------------------------------------------------------------------
07/14/2016 05:48:01: -------------------------------------------------------------------
07/14/2016 05:48:01: GPU info:

07/14/2016 05:48:01: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8090 MB
07/14/2016 05:48:01: -------------------------------------------------------------------

07/14/2016 05:48:01: Running on cntk-muc00 at 2016/07/14 05:48:01
07/14/2016 05:48:01: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\debug\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu  DeviceId=0  timestamping=true  makeMode=true



07/14/2016 05:48:01: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:48:01: precision = "float"
command = train:test
deviceId = $DeviceId$
parallelTrain = false
numCPUThreads = 8
train = [
    action = "train"
    modelPath = "$RunDir$/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=true)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = conv + convB;
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            z = W * x + b
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            out = W * x + b
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, kW1 * kH1, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, kW1 * kH1 * cMap1, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
    ]
    SGD = [
        epochSize = 1000
        minibatchSize = 100
        learningRatesPerSample=0.000002
        momentumAsTimeConstant=1000
        maxEpochs = 5
        keepCheckPointFiles = true
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    modelPath = "$RunDir$/models/cntk.dnn"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu
DeviceId=0
timestamping=true
makeMode=true

07/14/2016 05:48:01: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:48:01: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 05:48:01: precision = "float"
command = train:test
deviceId = 0
parallelTrain = false
numCPUThreads = 8
train = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=true)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = conv + convB;
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            z = W * x + b
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            out = W * x + b
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, kW1 * kH1, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, kW1 * kH1 * cMap1, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
    ]
    SGD = [
        epochSize = 1000
        minibatchSize = 100
        learningRatesPerSample=0.000002
        momentumAsTimeConstant=1000
        maxEpochs = 5
        keepCheckPointFiles = true
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Train_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Test_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu
DeviceId=0
timestamping=true
makeMode=true

07/14/2016 05:48:01: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 05:48:01: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=train:test
configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E
configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:makeMode=true
configparameters: cntk.cntk:numCPUThreads=8
configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu
configparameters: cntk.cntk:test=[
    action = "test"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Test_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:train=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=true)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = conv + convB;
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            z = W * x + b
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            out = W * x + b
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, kW1 * kH1, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, kW1 * kH1 * cMap1, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
    ]
    SGD = [
        epochSize = 1000
        minibatchSize = 100
        learningRatesPerSample=0.000002
        momentumAsTimeConstant=1000
        maxEpochs = 5
        keepCheckPointFiles = true
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Train_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

07/14/2016 05:48:01: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 05:48:01: Commands: train test
07/14/2016 05:48:01: Precision = "float"
07/14/2016 05:48:01: Using 4 CPU threads.
07/14/2016 05:48:01: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn
07/14/2016 05:48:01: CNTKCommandTrainInfo: train : 5
07/14/2016 05:48:01: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5

07/14/2016 05:48:01: ##############################################################################
07/14/2016 05:48:01: #                                                                            #
07/14/2016 05:48:01: # Action "train"                                                             #
07/14/2016 05:48:01: #                                                                            #
07/14/2016 05:48:01: ##############################################################################

07/14/2016 05:48:01: CNTKCommandTrainBegin: train
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/14/2016 05:48:01: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn.4'.

Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 4 x 4 x 32]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [24 x 24 x 16 x *]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *], [1 x 1 x 16] -> [24 x 24 x 16 x *]
Validating --> conv1_act.out = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *] -> [24 x 24 x 16 x *]
Validating --> pool1 = MaxPooling (conv1_act.out) : [24 x 24 x 16 x *] -> [12 x 12 x 16 x *]
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *] -> [8 x 8 x 32 x *]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *], [1 x 1 x 32] -> [8 x 8 x 32 x *]
Validating --> conv2_act.out = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *] -> [8 x 8 x 32 x *]
Validating --> pool2 = AveragePooling (conv2_act.out) : [8 x 8 x 32 x *] -> [4 x 4 x 32 x *]
Validating --> h1.z.PlusArgs[0] = Times (h1.W, pool2) : [128 x 4 x 4 x 32], [4 x 4 x 32 x *] -> [128 x *]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.z.PlusArgs[0], h1.b) : [128 x *], [128] -> [128 x *]
Validating --> h1.out = Sigmoid (h1.z) : [128 x *] -> [128 x *]
Validating --> ol.out.PlusArgs[0] = Times (ol.W, h1.out) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.out = Plus (ol.out.PlusArgs[0], ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1_act.conv: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2_act.conv: using cuDNN convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

pool2: using cuDNN convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 05:48:02: Loaded model with 27 nodes on GPU 0.

07/14/2016 05:48:02: Training criterion node(s):
07/14/2016 05:48:02: 	ce = CrossEntropyWithSoftmax

07/14/2016 05:48:02: Evaluation criterion node(s):

07/14/2016 05:48:02: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[err Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *]] [features Gradient[28 x 28 x 1 x *]] [labels Gradient[10 x *]] }
00000030936F76E0: {[conv1_act.convW Value[16 x 25]] }
00000030936F77B0: {[featScale Value[1 x 1]] }
00000030936F7950: {[features Value[28 x 28 x 1 x *]] }
00000030936F7A20: {[h1.b Value[128]] }
00000030936F7BC0: {[conv2_act.convB Value[1 x 1 x 32]] }
00000030936F7D60: {[conv2_act.convW Value[32 x 400]] }
00000030936F7FD0: {[h1.W Value[128 x 4 x 4 x 32]] }
00000030936F8170: {[labels Value[10 x *]] }
00000030936F8240: {[ol.b Value[10 x 1]] }
000000309F9D8030: {[ce Value[1]] }
000000309F9D8100: {[featScaled Value[28 x 28 x 1 x *]] }
000000309F9D8850: {[conv1_act.convPlusB Value[24 x 24 x 16 x *]] [conv1_act.convW Gradient[16 x 25]] }
000000309F9D8920: {[conv1_act.conv Gradient[24 x 24 x 16 x *]] [conv1_act.out Value[24 x 24 x 16 x *]] }
000000309F9D8AC0: {[conv1_act.convPlusB Gradient[24 x 24 x 16 x *]] [pool1 Value[12 x 12 x 16 x *]] }
000000309F9D8B90: {[conv2_act.conv Value[8 x 8 x 32 x *]] }
000000309F9D8ED0: {[conv1_act.convB Gradient[1 x 1 x 16]] [conv1_act.out Gradient[24 x 24 x 16 x *]] }
000000309F9D9210: {[conv2_act.convPlusB Value[8 x 8 x 32 x *]] [conv2_act.convW Gradient[32 x 400]] }
000000309F9D92E0: {[conv2_act.conv Gradient[8 x 8 x 32 x *]] [conv2_act.out Value[8 x 8 x 32 x *]] }
000000309F9D93B0: {[conv2_act.convPlusB Gradient[8 x 8 x 32 x *]] [pool1 Gradient[12 x 12 x 16 x *]] [pool2 Value[4 x 4 x 32 x *]] }
000000309F9DA4C0: {[err Value[1]] }
000000309F9DA8D0: {[conv1_act.conv Value[24 x 24 x 16 x *]] }
000000309FE14CF0: {[h1.W Gradient[128 x 4 x 4 x 32]] [h1.z Value[128 x *]] }
000000309FE14F60: {[ol.b Gradient[10 x 1]] }
000000309FE15370: {[h1.b Gradient[128]] [h1.out Gradient[128 x *]] [ol.out Gradient[10 x 1 x *]] }
000000309FE16620: {[h1.out Value[128 x *]] [h1.z.PlusArgs[0] Gradient[128 x *]] }
000000309FE16A30: {[ol.W Gradient[10 x 128]] [ol.out Value[10 x 1 x *]] }
000000309FE16D70: {[ol.out.PlusArgs[0] Gradient[10 x *]] }
000000309FE16FE0: {[ce Gradient[1]] }
000000309FE17660: {[h1.z Gradient[128 x *]] [ol.out.PlusArgs[0] Value[10 x *]] [pool2 Gradient[4 x 4 x 32 x *]] }
00000030FC67C2A0: {[conv1_act.convB Value[1 x 1 x 16]] }
00000030FCDC4E40: {[ol.W Value[10 x 128]] }
00000030FCDC59A0: {[conv2_act.convB Gradient[1 x 1 x 32]] [conv2_act.out Gradient[8 x 8 x 32 x *]] [h1.z.PlusArgs[0] Value[128 x *]] }

07/14/2016 05:48:02: No PreCompute nodes found, skipping PreCompute step.

07/14/2016 05:48:02: Starting Epoch 5: learning rate per sample = 0.000002  effective momentum = 0.904837  momentum as time constant = 1000.0 samples
BlockRandomizer::StartEpoch: epoch 4: frames [4000..5000] (first sequence at sample 4000), data subset 0 of 1

07/14/2016 05:48:02: Starting minibatch loop.
07/14/2016 05:48:02:  Epoch[ 5 of 5]-Minibatch[   1-  10, 100.00%]: ce = 2.33271509 * 1000; err = 0.90000000 * 1000; time = 0.5417s; samplesPerSecond = 1846.1
07/14/2016 05:48:02: Finished Epoch[ 5 of 5]: [Training] ce = 2.33271509 * 1000; err = 0.90000000 * 1000; totalSamplesSeen = 5000; learningRatePerSample = 2e-006; epochTime=0.561779s
07/14/2016 05:48:02: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714054736.692919\Image_QuickE2E@debug_gpu/models/cntk.dnn'
07/14/2016 05:48:02: CNTKCommandTrainEnd: train

07/14/2016 05:48:02: Action "train" complete.


07/14/2016 05:48:02: ##############################################################################
07/14/2016 05:48:02: #                                                                            #
07/14/2016 05:48:02: # Action "test"                                                              #
07/14/2016 05:48:02: #                                                                            #
07/14/2016 05:48:02: ##############################################################################


Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 4 x 4 x 32]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [24 x 24 x 16 x *1]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *1], [1 x 1 x 16] -> [24 x 24 x 16 x *1]
Validating --> conv1_act.out = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *1] -> [24 x 24 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1_act.out) : [24 x 24 x 16 x *1] -> [12 x 12 x 16 x *1]
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *1] -> [8 x 8 x 32 x *1]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *1], [1 x 1 x 32] -> [8 x 8 x 32 x *1]
Validating --> conv2_act.out = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *1] -> [8 x 8 x 32 x *1]
Validating --> pool2 = AveragePooling (conv2_act.out) : [8 x 8 x 32 x *1] -> [4 x 4 x 32 x *1]
Validating --> h1.z.PlusArgs[0] = Times (h1.W, pool2) : [128 x 4 x 4 x 32], [4 x 4 x 32 x *1] -> [128 x *1]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.z.PlusArgs[0], h1.b) : [128 x *1], [128] -> [128 x *1]
Validating --> h1.out = Sigmoid (h1.z) : [128 x *1] -> [128 x *1]
Validating --> ol.out.PlusArgs[0] = Times (ol.W, h1.out) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.out = Plus (ol.out.PlusArgs[0], ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.out) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> err = ErrorPrediction (labels, ol.out) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1_act.conv: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2_act.conv: using cuDNN convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

pool2: using cuDNN convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[ce Gradient[1]] [conv1_act.conv Gradient[24 x 24 x 16 x *1]] [conv1_act.convB Gradient[1 x 1 x 16]] [conv1_act.convPlusB Gradient[24 x 24 x 16 x *1]] [conv1_act.convW Gradient[16 x 25]] [conv1_act.out Gradient[24 x 24 x 16 x *1]] [conv2_act.conv Gradient[8 x 8 x 32 x *1]] [conv2_act.convB Gradient[1 x 1 x 32]] [conv2_act.convPlusB Gradient[8 x 8 x 32 x *1]] [conv2_act.convW Gradient[32 x 400]] [conv2_act.out Gradient[8 x 8 x 32 x *1]] [err Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *1]] [features Gradient[28 x 28 x 1 x *1]] [h1.W Gradient[128 x 4 x 4 x 32]] [h1.b Gradient[128]] [h1.out Gradient[128 x *1]] [h1.z Gradient[128 x *1]] [h1.z.PlusArgs[0] Gradient[128 x *1]] [labels Gradient[10 x *1]] [ol.W Gradient[10 x 128]] [ol.b Gradient[10 x 1]] [ol.out Gradient[10 x 1 x *1]] [ol.out.PlusArgs[0] Gradient[10 x *1]] [pool1 Gradient[12 x 12 x 16 x *1]] [pool2 Gradient[4 x 4 x 32 x *1]] }
000000309FE14670: {[h1.z Value[128 x *1]] }
000000309FE14CF0: {[h1.z.PlusArgs[0] Value[128 x *1]] }
000000309FE151D0: {[conv2_act.convW Value[32 x 400]] }
000000309FE155E0: {[featScale Value[1 x 1]] }
000000309FE156B0: {[conv2_act.convPlusB Value[8 x 8 x 32 x *1]] }
000000309FE15D30: {[features Value[28 x 28 x 1 x *1]] }
000000309FE15E00: {[h1.W Value[128 x 4 x 4 x 32]] }
000000309FE15ED0: {[pool1 Value[12 x 12 x 16 x *1]] }
000000309FE15FA0: {[conv2_act.conv Value[8 x 8 x 32 x *1]] }
000000309FE16070: {[h1.out Value[128 x *1]] }
000000309FE163B0: {[featScaled Value[28 x 28 x 1 x *1]] }
000000309FE16550: {[ol.W Value[10 x 128]] }
000000309FE16620: {[ol.b Value[10 x 1]] }
000000309FE166F0: {[conv2_act.convB Value[1 x 1 x 32]] }
000000309FE16890: {[conv1_act.convW Value[16 x 25]] }
000000309FE16960: {[ol.out.PlusArgs[0] Value[10 x *1]] }
000000309FE16BD0: {[labels Value[10 x *1]] }
000000309FE16D70: {[conv1_act.convB Value[1 x 1 x 16]] }
000000309FE16E40: {[err Value[1]] }
000000309FE16F10: {[ce Value[1]] }
000000309FE16FE0: {[conv1_act.convPlusB Value[24 x 24 x 16 x *1]] }
000000309FE170B0: {[conv1_act.out Value[24 x 24 x 16 x *1]] }
000000309FE17180: {[pool2 Value[4 x 4 x 32 x *1]] }
000000309FE17250: {[ol.out Value[10 x 1 x *1]] }
000000309FE173F0: {[h1.b Value[128]] }
000000309FE178D0: {[conv1_act.conv Value[24 x 24 x 16 x *1]] }
000000309FE179A0: {[conv2_act.out Value[8 x 8 x 32 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..100] (first sequence at sample 0), data subset 0 of 1
07/14/2016 05:48:02: Final Results: Minibatch[1-1]: err = 0.90000000 * 100; ce = 2.33150879 * 100; perplexity = 10.29346048

07/14/2016 05:48:02: Action "test" complete.

07/14/2016 05:48:02: __COMPLETED__