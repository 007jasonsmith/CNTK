=== Running mpiexec -n 4 /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../../SimpleMultiGPU.config currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../.. DeviceId=0 numCPUThreads=3 precision=double SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: all 4 nodes responded
requestnodes [MPIWrapper]: using 4 out of 4 MPI nodes (4 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: all 4 nodes responded
requestnodes [MPIWrapper]: using 4 out of 4 MPI nodes (4 requested); we (3) are in (participating)
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: all 4 nodes responded
requestnodes [MPIWrapper]: using 4 out of 4 MPI nodes (4 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: all 4 nodes responded
requestnodes [MPIWrapper]: using 4 out of 4 MPI nodes (4 requested); we (2) are in (participating)
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (after change)]: all 4 nodes responded
mpihelper: we are cog 1 in a gearbox of 4
ping [mpihelper]: 4 nodes pinging each other
ping [requestnodes (after change)]: all 4 nodes responded
mpihelper: we are cog 3 in a gearbox of 4
ping [mpihelper]: 4 nodes pinging each other
ping [requestnodes (after change)]: all 4 nodes responded
mpihelper: we are cog 0 in a gearbox of 4
ping [mpihelper]: 4 nodes pinging each other
ping [requestnodes (after change)]: all 4 nodes responded
mpihelper: we are cog 2 in a gearbox of 4
ping [mpihelper]: 4 nodes pinging each other
ping [mpihelper]: all 4 nodes responded
ping [mpihelper]: all 4 nodes responded
ping [mpihelper]: all 4 nodes responded
ping [mpihelper]: all 4 nodes responded
Redirecting stderr to file /tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr_SimpleMultiGPU.logrank0
Redirecting stderr to file /tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr_SimpleMultiGPU.logrank1
Redirecting stderr to file /tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr_SimpleMultiGPU.logrank2
Redirecting stderr to file /tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr_SimpleMultiGPU.logrank3
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: Build info: 
MPI Rank 0: 
MPI Rank 0: 		Built time: Dec 10 2015 14:48:57
MPI Rank 0: 		Last modified date: Tue Dec  8 10:08:43 2015
MPI Rank 0: 		Build type: release
MPI Rank 0: 		Math lib: acml
MPI Rank 0: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 0: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 		Build Branch: master
MPI Rank 0: 		Build SHA1: 5e0017ac9c55c23d53cb524c8acb7d6d9bfd0269
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: running on localhost at 2015/12/10 16:10:54
MPI Rank 0: command line: 
MPI Rank 0: /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../../SimpleMultiGPU.config currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../.. DeviceId=0 numCPUThreads=3 precision=double SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr 
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: command = SimpleMultiGPU
MPI Rank 0: precision = "float"
MPI Rank 0: parallelTrain = true
MPI Rank 0: SimpleMultiGPU = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/Simple.dnn"
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 2:50*2:2
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 0 
MPI Rank 0:         minibatchSize = 25
MPI Rank 0:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 4
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 1
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "UCIFastReader"
MPI Rank 0:         file = "$DataDir$/SimpleDataTrain.txt"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "none"
MPI Rank 0:         verbosity = 1   
MPI Rank 0:         features = [
MPI Rank 0: dim = 2      
MPI Rank 0: start = 0    
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0: start = 2      
MPI Rank 0: dim = 1        
MPI Rank 0: labelDim = 2   
MPI Rank 0:             labelMappingFile = "$DataDir$/SimpleMapping.txt"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu
MPI Rank 0: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 0: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../..
MPI Rank 0: DeviceId=0
MPI Rank 0: numCPUThreads=3
MPI Rank 0: precision=double
MPI Rank 0: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 0: stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: deviceId = 0
MPI Rank 0: command = SimpleMultiGPU
MPI Rank 0: precision = "float"
MPI Rank 0: parallelTrain = true
MPI Rank 0: SimpleMultiGPU = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/models/Simple.dnn"
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 2:50*2:2
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 0 
MPI Rank 0:         minibatchSize = 25
MPI Rank 0:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 4
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 1
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "UCIFastReader"
MPI Rank 0:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "none"
MPI Rank 0:         verbosity = 1   
MPI Rank 0:         features = [
MPI Rank 0: dim = 2      
MPI Rank 0: start = 0    
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0: start = 2      
MPI Rank 0: dim = 1        
MPI Rank 0: labelDim = 2   
MPI Rank 0:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu
MPI Rank 0: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 0: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../..
MPI Rank 0: DeviceId=0
MPI Rank 0: numCPUThreads=3
MPI Rank 0: precision=double
MPI Rank 0: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 0: stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: SimpleMultiGPU.config:command=SimpleMultiGPU
MPI Rank 0: configparameters: SimpleMultiGPU.config:ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../..
MPI Rank 0: configparameters: SimpleMultiGPU.config:currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 0: configparameters: SimpleMultiGPU.config:DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 0: configparameters: SimpleMultiGPU.config:deviceId=0
MPI Rank 0: configparameters: SimpleMultiGPU.config:numCPUThreads=3
MPI Rank 0: configparameters: SimpleMultiGPU.config:parallelTrain=true
MPI Rank 0: configparameters: SimpleMultiGPU.config:precision=double
MPI Rank 0: configparameters: SimpleMultiGPU.config:RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu
MPI Rank 0: configparameters: SimpleMultiGPU.config:SimpleMultiGPU=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/models/Simple.dnn"
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 2:50*2:2
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 0 
MPI Rank 0:         minibatchSize = 25
MPI Rank 0:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 4
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 1
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "UCIFastReader"
MPI Rank 0:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "none"
MPI Rank 0:         verbosity = 1   
MPI Rank 0:         features = [
MPI Rank 0: dim = 2      
MPI Rank 0: start = 0    
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0: start = 2      
MPI Rank 0: dim = 1        
MPI Rank 0: labelDim = 2   
MPI Rank 0:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 0: 
MPI Rank 0: configparameters: SimpleMultiGPU.config:stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: command: SimpleMultiGPU 
MPI Rank 0: precision = double
MPI Rank 0: Using 3 CPU threads
MPI Rank 0: CNTKModelPath: /tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/models/Simple.dnn
MPI Rank 0: CNTKCommandTrainInfo: SimpleMultiGPU : 4
MPI Rank 0: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 0: CNTKCommandTrainBegin: SimpleMultiGPU
MPI Rank 0: SimpleNetworkBuilder Using GPU 0
MPI Rank 0: Reading UCI file /home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt
MPI Rank 0: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 7 roots:
MPI Rank 0: 	MeanOfFeatures = Mean
MPI Rank 0: 	InvStdOfFeatures = InvStdDev
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 	Prior = Mean
MPI Rank 0: 	ScaledLogLikelihood = Minus
MPI Rank 0: 	PosteriorProb = Softmax
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: SGD using GPU 0.
MPI Rank 0: 
MPI Rank 0: Training criterion node(s):
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: Evaluation criterion node(s):
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for gradient computing
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 0: 
MPI Rank 0: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 	NodeName: InvStdOfFeatures
MPI Rank 0: 	NodeName: MeanOfFeatures
MPI Rank 0: 	NodeName: Prior
MPI Rank 0: starting at epoch 0 counting lines to determine record count
MPI Rank 0: 
MPI Rank 0:  10000 records found
MPI Rank 0: starting epoch 0 at record count 0, and file position 0
MPI Rank 0: already there from last epoch
MPI Rank 0: 
MPI Rank 0: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 0: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 0: starting epoch 0 at record count 0, and file position 0
MPI Rank 0: already there from last epoch
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 4, NumGradientBits = 64).
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[   1-  10]: SamplesSeen = 250; TrainLossPerSample =  0.70050728; EvalErr[0]PerSample = 0.52400000; TotalTime = 0.0785s; SamplesPerSecond = 3184.8
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  11-  20]: SamplesSeen = 250; TrainLossPerSample =  0.71587568; EvalErr[0]PerSample = 0.52000000; TotalTime = 0.0746s; SamplesPerSecond = 3349.9
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  21-  30]: SamplesSeen = 250; TrainLossPerSample =  0.73013536; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  31-  40]: SamplesSeen = 250; TrainLossPerSample =  0.70130824; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0747s; SamplesPerSecond = 3348.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  41-  50]: SamplesSeen = 250; TrainLossPerSample =  0.70631806; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0747s; SamplesPerSecond = 3347.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  51-  60]: SamplesSeen = 250; TrainLossPerSample =  0.71556514; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.8
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  61-  70]: SamplesSeen = 250; TrainLossPerSample =  0.72085867; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0746s; SamplesPerSecond = 3351.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  71-  80]: SamplesSeen = 250; TrainLossPerSample =  0.79821406; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  81-  90]: SamplesSeen = 250; TrainLossPerSample =  0.69720437; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0746s; SamplesPerSecond = 3350.8
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  91- 100]: SamplesSeen = 250; TrainLossPerSample =  0.70729402; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 101- 110]: SamplesSeen = 250; TrainLossPerSample =  0.71394348; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 111- 120]: SamplesSeen = 250; TrainLossPerSample =  0.69528096; EvalErr[0]PerSample = 0.43600000; TotalTime = 0.0747s; SamplesPerSecond = 3346.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 121- 130]: SamplesSeen = 250; TrainLossPerSample =  0.70043910; EvalErr[0]PerSample = 0.44000000; TotalTime = 0.0746s; SamplesPerSecond = 3349.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 131- 140]: SamplesSeen = 250; TrainLossPerSample =  0.71843195; EvalErr[0]PerSample = 0.54800000; TotalTime = 0.0745s; SamplesPerSecond = 3357.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 141- 150]: SamplesSeen = 250; TrainLossPerSample =  0.72169305; EvalErr[0]PerSample = 0.48800000; TotalTime = 0.0746s; SamplesPerSecond = 3350.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 151- 160]: SamplesSeen = 250; TrainLossPerSample =  0.71791483; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0748s; SamplesPerSecond = 3344.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 161- 170]: SamplesSeen = 250; TrainLossPerSample =  0.74232732; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0748s; SamplesPerSecond = 3342.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 171- 180]: SamplesSeen = 250; TrainLossPerSample =  0.71922548; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0746s; SamplesPerSecond = 3352.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 181- 190]: SamplesSeen = 250; TrainLossPerSample =  0.71566133; EvalErr[0]PerSample = 0.48400000; TotalTime = 0.0746s; SamplesPerSecond = 3351.3
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 191- 200]: SamplesSeen = 250; TrainLossPerSample =  0.71749815; EvalErr[0]PerSample = 0.53200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 201- 210]: SamplesSeen = 250; TrainLossPerSample =  0.71930114; EvalErr[0]PerSample = 0.55600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.3
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 211- 220]: SamplesSeen = 250; TrainLossPerSample =  0.72170810; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 221- 230]: SamplesSeen = 250; TrainLossPerSample =  0.72065714; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0745s; SamplesPerSecond = 3357.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 231- 240]: SamplesSeen = 250; TrainLossPerSample =  0.71330342; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 241- 250]: SamplesSeen = 250; TrainLossPerSample =  0.69712330; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0747s; SamplesPerSecond = 3347.3
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 251- 260]: SamplesSeen = 250; TrainLossPerSample =  0.70211803; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0746s; SamplesPerSecond = 3351.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 261- 270]: SamplesSeen = 250; TrainLossPerSample =  0.70857019; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 271- 280]: SamplesSeen = 250; TrainLossPerSample =  0.69865626; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0746s; SamplesPerSecond = 3349.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 281- 290]: SamplesSeen = 250; TrainLossPerSample =  0.69417033; EvalErr[0]PerSample = 0.44800000; TotalTime = 0.0746s; SamplesPerSecond = 3351.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 291- 300]: SamplesSeen = 250; TrainLossPerSample =  0.69547586; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0747s; SamplesPerSecond = 3346.8
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 301- 310]: SamplesSeen = 250; TrainLossPerSample =  0.69495782; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0745s; SamplesPerSecond = 3353.8
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 311- 320]: SamplesSeen = 250; TrainLossPerSample =  0.68965743; EvalErr[0]PerSample = 0.42000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 321- 330]: SamplesSeen = 250; TrainLossPerSample =  0.69562855; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0747s; SamplesPerSecond = 3347.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 331- 340]: SamplesSeen = 250; TrainLossPerSample =  0.70809375; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0747s; SamplesPerSecond = 3347.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 341- 350]: SamplesSeen = 250; TrainLossPerSample =  0.69852997; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0747s; SamplesPerSecond = 3345.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 351- 360]: SamplesSeen = 250; TrainLossPerSample =  0.68448769; EvalErr[0]PerSample = 0.46000000; TotalTime = 0.0747s; SamplesPerSecond = 3345.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 361- 370]: SamplesSeen = 250; TrainLossPerSample =  0.68159609; EvalErr[0]PerSample = 0.46400000; TotalTime = 0.0747s; SamplesPerSecond = 3347.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 371- 380]: SamplesSeen = 250; TrainLossPerSample =  0.66837272; EvalErr[0]PerSample = 0.45600000; TotalTime = 0.0747s; SamplesPerSecond = 3347.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 381- 390]: SamplesSeen = 250; TrainLossPerSample =  0.66480500; EvalErr[0]PerSample = 0.33200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 391- 400]: SamplesSeen = 250; TrainLossPerSample =  0.64793720; EvalErr[0]PerSample = 0.39600000; TotalTime = 0.0747s; SamplesPerSecond = 3344.8
MPI Rank 0: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 0.70652116; EvalErrPerSample = 0.4934; AvgLearningRatePerSample = 0.02; EpochTime=2.9905
MPI Rank 0: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 0: starting epoch 1 at record count 10000, and file position 0
MPI Rank 0: already there from last epoch
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 4, NumGradientBits = 64).
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[   1-  10, 2.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.66297271; EvalErr[0]PerSample = 0.49200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.1
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  11-  20, 5.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.60421433; EvalErr[0]PerSample = 0.15600000; TotalTime = 0.0745s; SamplesPerSecond = 3355.2
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  21-  30, 7.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.57776098; EvalErr[0]PerSample = 0.20400000; TotalTime = 0.0744s; SamplesPerSecond = 3359.4
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  31-  40, 10.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.57075313; EvalErr[0]PerSample = 0.19200000; TotalTime = 0.0747s; SamplesPerSecond = 3348.3
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  41-  50, 12.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.53857250; EvalErr[0]PerSample = 0.16000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.6
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  51-  60, 15.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.51575308; EvalErr[0]PerSample = 0.16000000; TotalTime = 0.0747s; SamplesPerSecond = 3345.8
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  61-  70, 17.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.46360007; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0748s; SamplesPerSecond = 3340.5
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  71-  80, 20.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.43939162; EvalErr[0]PerSample = 0.14000000; TotalTime = 0.0748s; SamplesPerSecond = 3343.0
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  81-  90, 22.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.38285670; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0748s; SamplesPerSecond = 3343.8
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  91- 100, 25.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.33783250; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.9
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 101- 110, 27.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.30060340; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0744s; SamplesPerSecond = 3358.1
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 111- 120, 30.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.27074543; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0748s; SamplesPerSecond = 3344.5
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 121- 130, 32.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.22579667; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0748s; SamplesPerSecond = 3341.5
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 131- 140, 35.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.23038277; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0744s; SamplesPerSecond = 3358.2
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 141- 150, 37.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20249742; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0745s; SamplesPerSecond = 3354.0
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 151- 160, 40.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.23196002; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0746s; SamplesPerSecond = 3349.1
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 161- 170, 42.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19926723; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.8
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 171- 180, 45.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17553205; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0747s; SamplesPerSecond = 3348.2
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 181- 190, 47.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20627378; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0745s; SamplesPerSecond = 3355.3
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 191- 200, 50.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.22915289; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0747s; SamplesPerSecond = 3348.3
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 201- 210, 52.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19774548; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3352.2
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 211- 220, 55.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19459308; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0745s; SamplesPerSecond = 3354.1
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 221- 230, 57.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15793758; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0746s; SamplesPerSecond = 3349.2
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 231- 240, 60.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16358363; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0746s; SamplesPerSecond = 3351.3
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 241- 250, 62.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20081019; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0745s; SamplesPerSecond = 3353.5
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 251- 260, 65.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14635403; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0745s; SamplesPerSecond = 3356.5
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 261- 270, 67.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19047122; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0746s; SamplesPerSecond = 3349.9
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 271- 280, 70.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19571785; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3357.2
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 281- 290, 72.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17891536; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0746s; SamplesPerSecond = 3353.4
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 291- 300, 75.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13980267; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0746s; SamplesPerSecond = 3349.7
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 301- 310, 77.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17881647; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0746s; SamplesPerSecond = 3353.4
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 311- 320, 80.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13208886; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0748s; SamplesPerSecond = 3344.3
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 321- 330, 82.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15493189; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0745s; SamplesPerSecond = 3355.3
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 331- 340, 85.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19823895; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.5
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 341- 350, 87.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.13146498; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0746s; SamplesPerSecond = 3351.6
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 351- 360, 90.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14052468; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3352.0
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 361- 370, 92.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12801816; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0746s; SamplesPerSecond = 3352.2
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 371- 380, 95.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16700006; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3351.5
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 381- 390, 97.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20335808; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0745s; SamplesPerSecond = 3353.5
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 391- 400, 100.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14631413; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3352.5
MPI Rank 0: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 0.26781517; EvalErrPerSample = 0.1014; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.98557
MPI Rank 0: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 0: starting epoch 2 at record count 20000, and file position 0
MPI Rank 0: already there from last epoch
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 4, NumGradientBits = 64).
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[   1-  10, 2.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12781997; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0744s; SamplesPerSecond = 3359.8
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  11-  20, 5.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17668945; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0748s; SamplesPerSecond = 3343.3
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  21-  30, 7.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14515421; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  31-  40, 10.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.15912577; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0747s; SamplesPerSecond = 3348.4
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  41-  50, 12.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17005286; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0747s; SamplesPerSecond = 3348.8
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  51-  60, 15.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18343662; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.8
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  61-  70, 17.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14768688; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0747s; SamplesPerSecond = 3348.7
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  71-  80, 20.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18051867; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.4
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  81-  90, 22.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15846717; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.0
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  91- 100, 25.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14530734; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0746s; SamplesPerSecond = 3353.1
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 101- 110, 27.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.13585330; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0744s; SamplesPerSecond = 3359.4
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 111- 120, 30.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13773835; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3352.5
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 121- 130, 32.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.11677767; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0744s; SamplesPerSecond = 3358.9
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 131- 140, 35.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16726846; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0745s; SamplesPerSecond = 3357.4
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 141- 150, 37.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12883820; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0744s; SamplesPerSecond = 3358.4
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 151- 160, 40.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17338728; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0746s; SamplesPerSecond = 3353.5
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 161- 170, 42.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17523944; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3360.4
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 171- 180, 45.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14131285; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.5
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 181- 190, 47.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19189513; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0747s; SamplesPerSecond = 3346.5
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 191- 200, 50.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.20920764; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.6
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 201- 210, 52.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18434781; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3357.0
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 211- 220, 55.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18185125; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0745s; SamplesPerSecond = 3355.7
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 221- 230, 57.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14112907; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0744s; SamplesPerSecond = 3361.7
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 231- 240, 60.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14945583; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.2
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 241- 250, 62.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20227807; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.7
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 251- 260, 65.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12877544; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0744s; SamplesPerSecond = 3361.5
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 261- 270, 67.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18699253; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.5
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 271- 280, 70.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19561703; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0745s; SamplesPerSecond = 3354.9
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 281- 290, 72.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.16792520; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0745s; SamplesPerSecond = 3355.7
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 291- 300, 75.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12582208; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0745s; SamplesPerSecond = 3357.0
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 301- 310, 77.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17426202; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0743s; SamplesPerSecond = 3366.7
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 311- 320, 80.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12310390; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.7
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 321- 330, 82.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14804962; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.1
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 331- 340, 85.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19809667; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0744s; SamplesPerSecond = 3361.1
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 341- 350, 87.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12615132; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0744s; SamplesPerSecond = 3359.0
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 351- 360, 90.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13788489; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3357.4
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 361- 370, 92.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12806131; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3355.4
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 371- 380, 95.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16644406; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3359.3
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 381- 390, 97.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20590809; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3353.6
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 391- 400, 100.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14598417; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3353.5
MPI Rank 0: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 0.15974794; EvalErrPerSample = 0.0768; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.98194
MPI Rank 0: Starting Epoch 4: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 0: starting epoch 3 at record count 30000, and file position 0
MPI Rank 0: already there from last epoch
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 4, NumGradientBits = 64).
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[   1-  10, 2.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12359632; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.3
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  11-  20, 5.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18056814; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3351.9
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  21-  30, 7.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14218540; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.8
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  31-  40, 10.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.15627835; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3355.1
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  41-  50, 12.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.16903217; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3353.0
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  51-  60, 15.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18249928; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3353.3
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  61-  70, 17.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14477886; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.3
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  71-  80, 20.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18037574; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3352.7
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  81-  90, 22.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15857982; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0745s; SamplesPerSecond = 3356.7
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  91- 100, 25.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14475601; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0745s; SamplesPerSecond = 3354.7
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 101- 110, 27.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.13409513; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.3
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 111- 120, 30.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13725062; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3352.8
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 121- 130, 32.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.11563837; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0744s; SamplesPerSecond = 3360.1
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 131- 140, 35.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16874556; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0744s; SamplesPerSecond = 3359.4
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 141- 150, 37.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12774890; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0745s; SamplesPerSecond = 3356.3
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 151- 160, 40.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17148842; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0745s; SamplesPerSecond = 3357.6
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 161- 170, 42.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17599447; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3358.6
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 171- 180, 45.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14112030; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0744s; SamplesPerSecond = 3361.3
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 181- 190, 47.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19336367; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0746s; SamplesPerSecond = 3349.1
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 191- 200, 50.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.20887975; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0745s; SamplesPerSecond = 3356.1
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 201- 210, 52.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18484689; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3353.8
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 211- 220, 55.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18172436; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3351.9
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 221- 230, 57.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14079120; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0745s; SamplesPerSecond = 3357.1
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 231- 240, 60.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14940547; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0744s; SamplesPerSecond = 3359.2
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 241- 250, 62.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20327788; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0744s; SamplesPerSecond = 3358.1
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 251- 260, 65.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12800091; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0748s; SamplesPerSecond = 3343.9
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 261- 270, 67.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18736454; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.2
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 271- 280, 70.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19576131; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0743s; SamplesPerSecond = 3364.8
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 281- 290, 72.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.16579028; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0743s; SamplesPerSecond = 3362.9
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 291- 300, 75.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12479314; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0747s; SamplesPerSecond = 3348.6
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 301- 310, 77.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17331117; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3356.8
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 311- 320, 80.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12259767; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3354.9
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 321- 330, 82.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14755686; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0745s; SamplesPerSecond = 3354.6
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 331- 340, 85.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19815974; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0745s; SamplesPerSecond = 3357.0
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 341- 350, 87.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12586333; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.1
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 351- 360, 90.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13777500; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0746s; SamplesPerSecond = 3353.0
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 361- 370, 92.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12817677; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3354.8
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 371- 380, 95.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16645141; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3358.9
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 381- 390, 97.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20630344; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.2
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 391- 400, 100.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14607667; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0745s; SamplesPerSecond = 3355.3
MPI Rank 0: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 0.15927508; EvalErrPerSample = 0.0768; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.98189
MPI Rank 0: CNTKCommandTrainEnd: SimpleMultiGPU
MPI Rank 0: COMPLETED
MPI Rank 0: ~MPIWrapper
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: Build info: 
MPI Rank 1: 
MPI Rank 1: 		Built time: Dec 10 2015 14:48:57
MPI Rank 1: 		Last modified date: Tue Dec  8 10:08:43 2015
MPI Rank 1: 		Build type: release
MPI Rank 1: 		Math lib: acml
MPI Rank 1: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 1: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 		Build Branch: master
MPI Rank 1: 		Build SHA1: 5e0017ac9c55c23d53cb524c8acb7d6d9bfd0269
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: running on localhost at 2015/12/10 16:10:55
MPI Rank 1: command line: 
MPI Rank 1: /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../../SimpleMultiGPU.config currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../.. DeviceId=0 numCPUThreads=3 precision=double SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr 
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: command = SimpleMultiGPU
MPI Rank 1: precision = "float"
MPI Rank 1: parallelTrain = true
MPI Rank 1: SimpleMultiGPU = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/Simple.dnn"
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 2:50*2:2
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 0 
MPI Rank 1:         minibatchSize = 25
MPI Rank 1:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 4
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 1
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "UCIFastReader"
MPI Rank 1:         file = "$DataDir$/SimpleDataTrain.txt"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "none"
MPI Rank 1:         verbosity = 1   
MPI Rank 1:         features = [
MPI Rank 1: dim = 2      
MPI Rank 1: start = 0    
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1: start = 2      
MPI Rank 1: dim = 1        
MPI Rank 1: labelDim = 2   
MPI Rank 1:             labelMappingFile = "$DataDir$/SimpleMapping.txt"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu
MPI Rank 1: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 1: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../..
MPI Rank 1: DeviceId=0
MPI Rank 1: numCPUThreads=3
MPI Rank 1: precision=double
MPI Rank 1: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 1: stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: deviceId = 0
MPI Rank 1: command = SimpleMultiGPU
MPI Rank 1: precision = "float"
MPI Rank 1: parallelTrain = true
MPI Rank 1: SimpleMultiGPU = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/models/Simple.dnn"
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 2:50*2:2
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 0 
MPI Rank 1:         minibatchSize = 25
MPI Rank 1:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 4
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 1
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "UCIFastReader"
MPI Rank 1:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "none"
MPI Rank 1:         verbosity = 1   
MPI Rank 1:         features = [
MPI Rank 1: dim = 2      
MPI Rank 1: start = 0    
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1: start = 2      
MPI Rank 1: dim = 1        
MPI Rank 1: labelDim = 2   
MPI Rank 1:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu
MPI Rank 1: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 1: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../..
MPI Rank 1: DeviceId=0
MPI Rank 1: numCPUThreads=3
MPI Rank 1: precision=double
MPI Rank 1: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 1: stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: SimpleMultiGPU.config:command=SimpleMultiGPU
MPI Rank 1: configparameters: SimpleMultiGPU.config:ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../..
MPI Rank 1: configparameters: SimpleMultiGPU.config:currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 1: configparameters: SimpleMultiGPU.config:DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 1: configparameters: SimpleMultiGPU.config:deviceId=0
MPI Rank 1: configparameters: SimpleMultiGPU.config:numCPUThreads=3
MPI Rank 1: configparameters: SimpleMultiGPU.config:parallelTrain=true
MPI Rank 1: configparameters: SimpleMultiGPU.config:precision=double
MPI Rank 1: configparameters: SimpleMultiGPU.config:RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu
MPI Rank 1: configparameters: SimpleMultiGPU.config:SimpleMultiGPU=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/models/Simple.dnn"
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 2:50*2:2
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 0 
MPI Rank 1:         minibatchSize = 25
MPI Rank 1:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 4
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 1
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "UCIFastReader"
MPI Rank 1:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "none"
MPI Rank 1:         verbosity = 1   
MPI Rank 1:         features = [
MPI Rank 1: dim = 2      
MPI Rank 1: start = 0    
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1: start = 2      
MPI Rank 1: dim = 1        
MPI Rank 1: labelDim = 2   
MPI Rank 1:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 1: 
MPI Rank 1: configparameters: SimpleMultiGPU.config:stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: command: SimpleMultiGPU 
MPI Rank 1: precision = double
MPI Rank 1: Using 3 CPU threads
MPI Rank 1: CNTKModelPath: /tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/models/Simple.dnn
MPI Rank 1: CNTKCommandTrainInfo: SimpleMultiGPU : 4
MPI Rank 1: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 1: CNTKCommandTrainBegin: SimpleMultiGPU
MPI Rank 1: SimpleNetworkBuilder Using GPU 0
MPI Rank 1: Reading UCI file /home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt
MPI Rank 1: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 7 roots:
MPI Rank 1: 	InvStdOfFeatures = InvStdDev
MPI Rank 1: 	MeanOfFeatures = Mean
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 	Prior = Mean
MPI Rank 1: 	ScaledLogLikelihood = Minus
MPI Rank 1: 	PosteriorProb = Softmax
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node Prior, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node Prior, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: SGD using GPU 0.
MPI Rank 1: 
MPI Rank 1: Training criterion node(s):
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: Evaluation criterion node(s):
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for gradient computing
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 1: 
MPI Rank 1: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 	NodeName: InvStdOfFeatures
MPI Rank 1: 	NodeName: MeanOfFeatures
MPI Rank 1: 	NodeName: Prior
MPI Rank 1: starting at epoch 0 counting lines to determine record count
MPI Rank 1: 
MPI Rank 1:  10000 records found
MPI Rank 1: starting epoch 0 at record count 0, and file position 0
MPI Rank 1: already there from last epoch
MPI Rank 1: 
MPI Rank 1: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 1: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 1: starting epoch 0 at record count 0, and file position 0
MPI Rank 1: already there from last epoch
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 4, NumGradientBits = 64).
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[   1-  10]: SamplesSeen = 250; TrainLossPerSample =  0.70050728; EvalErr[0]PerSample = 0.52400000; TotalTime = 0.0785s; SamplesPerSecond = 3185.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  11-  20]: SamplesSeen = 250; TrainLossPerSample =  0.71587568; EvalErr[0]PerSample = 0.52000000; TotalTime = 0.0746s; SamplesPerSecond = 3349.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  21-  30]: SamplesSeen = 250; TrainLossPerSample =  0.73013536; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  31-  40]: SamplesSeen = 250; TrainLossPerSample =  0.70130824; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0747s; SamplesPerSecond = 3348.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  41-  50]: SamplesSeen = 250; TrainLossPerSample =  0.70631806; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0747s; SamplesPerSecond = 3347.1
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  51-  60]: SamplesSeen = 250; TrainLossPerSample =  0.71556514; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  61-  70]: SamplesSeen = 250; TrainLossPerSample =  0.72085867; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0746s; SamplesPerSecond = 3351.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  71-  80]: SamplesSeen = 250; TrainLossPerSample =  0.79821406; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  81-  90]: SamplesSeen = 250; TrainLossPerSample =  0.69720437; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0746s; SamplesPerSecond = 3350.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  91- 100]: SamplesSeen = 250; TrainLossPerSample =  0.70729402; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.1
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 101- 110]: SamplesSeen = 250; TrainLossPerSample =  0.71394348; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 111- 120]: SamplesSeen = 250; TrainLossPerSample =  0.69528096; EvalErr[0]PerSample = 0.43600000; TotalTime = 0.0747s; SamplesPerSecond = 3346.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 121- 130]: SamplesSeen = 250; TrainLossPerSample =  0.70043910; EvalErr[0]PerSample = 0.44000000; TotalTime = 0.0746s; SamplesPerSecond = 3350.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 131- 140]: SamplesSeen = 250; TrainLossPerSample =  0.71843195; EvalErr[0]PerSample = 0.54800000; TotalTime = 0.0745s; SamplesPerSecond = 3356.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 141- 150]: SamplesSeen = 250; TrainLossPerSample =  0.72169305; EvalErr[0]PerSample = 0.48800000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 151- 160]: SamplesSeen = 250; TrainLossPerSample =  0.71791483; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0748s; SamplesPerSecond = 3343.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 161- 170]: SamplesSeen = 250; TrainLossPerSample =  0.74232732; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0748s; SamplesPerSecond = 3342.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 171- 180]: SamplesSeen = 250; TrainLossPerSample =  0.71922548; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0746s; SamplesPerSecond = 3352.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 181- 190]: SamplesSeen = 250; TrainLossPerSample =  0.71566133; EvalErr[0]PerSample = 0.48400000; TotalTime = 0.0746s; SamplesPerSecond = 3351.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 191- 200]: SamplesSeen = 250; TrainLossPerSample =  0.71749815; EvalErr[0]PerSample = 0.53200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 201- 210]: SamplesSeen = 250; TrainLossPerSample =  0.71930114; EvalErr[0]PerSample = 0.55600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 211- 220]: SamplesSeen = 250; TrainLossPerSample =  0.72170810; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 221- 230]: SamplesSeen = 250; TrainLossPerSample =  0.72065714; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0745s; SamplesPerSecond = 3357.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 231- 240]: SamplesSeen = 250; TrainLossPerSample =  0.71330342; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 241- 250]: SamplesSeen = 250; TrainLossPerSample =  0.69712330; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0747s; SamplesPerSecond = 3347.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 251- 260]: SamplesSeen = 250; TrainLossPerSample =  0.70211803; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0746s; SamplesPerSecond = 3351.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 261- 270]: SamplesSeen = 250; TrainLossPerSample =  0.70857019; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 271- 280]: SamplesSeen = 250; TrainLossPerSample =  0.69865626; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0746s; SamplesPerSecond = 3349.1
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 281- 290]: SamplesSeen = 250; TrainLossPerSample =  0.69417033; EvalErr[0]PerSample = 0.44800000; TotalTime = 0.0746s; SamplesPerSecond = 3351.0
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 291- 300]: SamplesSeen = 250; TrainLossPerSample =  0.69547586; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0747s; SamplesPerSecond = 3346.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 301- 310]: SamplesSeen = 250; TrainLossPerSample =  0.69495782; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0745s; SamplesPerSecond = 3353.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 311- 320]: SamplesSeen = 250; TrainLossPerSample =  0.68965743; EvalErr[0]PerSample = 0.42000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 321- 330]: SamplesSeen = 250; TrainLossPerSample =  0.69562855; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0747s; SamplesPerSecond = 3347.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 331- 340]: SamplesSeen = 250; TrainLossPerSample =  0.70809375; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0747s; SamplesPerSecond = 3347.1
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 341- 350]: SamplesSeen = 250; TrainLossPerSample =  0.69852997; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0747s; SamplesPerSecond = 3345.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 351- 360]: SamplesSeen = 250; TrainLossPerSample =  0.68448769; EvalErr[0]PerSample = 0.46000000; TotalTime = 0.0747s; SamplesPerSecond = 3344.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 361- 370]: SamplesSeen = 250; TrainLossPerSample =  0.68159609; EvalErr[0]PerSample = 0.46400000; TotalTime = 0.0747s; SamplesPerSecond = 3347.1
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 371- 380]: SamplesSeen = 250; TrainLossPerSample =  0.66837272; EvalErr[0]PerSample = 0.45600000; TotalTime = 0.0747s; SamplesPerSecond = 3347.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 381- 390]: SamplesSeen = 250; TrainLossPerSample =  0.66480500; EvalErr[0]PerSample = 0.33200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.1
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 391- 400]: SamplesSeen = 250; TrainLossPerSample =  0.64793720; EvalErr[0]PerSample = 0.39600000; TotalTime = 0.0747s; SamplesPerSecond = 3344.9
MPI Rank 1: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 0.70652116; EvalErrPerSample = 0.4934; AvgLearningRatePerSample = 0.02; EpochTime=2.9903
MPI Rank 1: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 1: starting epoch 1 at record count 10000, and file position 0
MPI Rank 1: already there from last epoch
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 4, NumGradientBits = 64).
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[   1-  10, 2.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.66297271; EvalErr[0]PerSample = 0.49200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.0
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  11-  20, 5.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.60421433; EvalErr[0]PerSample = 0.15600000; TotalTime = 0.0745s; SamplesPerSecond = 3355.2
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  21-  30, 7.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.57776098; EvalErr[0]PerSample = 0.20400000; TotalTime = 0.0744s; SamplesPerSecond = 3359.4
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  31-  40, 10.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.57075313; EvalErr[0]PerSample = 0.19200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.3
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  41-  50, 12.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.53857250; EvalErr[0]PerSample = 0.16000000; TotalTime = 0.0746s; SamplesPerSecond = 3351.7
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  51-  60, 15.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.51575308; EvalErr[0]PerSample = 0.16000000; TotalTime = 0.0747s; SamplesPerSecond = 3345.8
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  61-  70, 17.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.46360007; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0748s; SamplesPerSecond = 3340.5
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  71-  80, 20.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.43939162; EvalErr[0]PerSample = 0.14000000; TotalTime = 0.0748s; SamplesPerSecond = 3342.9
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  81-  90, 22.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.38285670; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0748s; SamplesPerSecond = 3343.7
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  91- 100, 25.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.33783250; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.9
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 101- 110, 27.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.30060340; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0744s; SamplesPerSecond = 3358.1
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 111- 120, 30.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.27074543; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0747s; SamplesPerSecond = 3344.5
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 121- 130, 32.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.22579667; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0748s; SamplesPerSecond = 3341.5
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 131- 140, 35.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.23038277; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0744s; SamplesPerSecond = 3358.1
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 141- 150, 37.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20249742; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0745s; SamplesPerSecond = 3354.2
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 151- 160, 40.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.23196002; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0746s; SamplesPerSecond = 3349.1
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 161- 170, 42.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19926723; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.8
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 171- 180, 45.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17553205; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.6
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 181- 190, 47.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20627378; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0746s; SamplesPerSecond = 3353.0
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 191- 200, 50.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.22915289; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0747s; SamplesPerSecond = 3348.4
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 201- 210, 52.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19774548; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3352.2
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 211- 220, 55.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19459308; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0745s; SamplesPerSecond = 3354.0
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 221- 230, 57.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15793758; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0746s; SamplesPerSecond = 3349.1
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 231- 240, 60.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16358363; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0746s; SamplesPerSecond = 3351.2
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 241- 250, 62.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20081019; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0746s; SamplesPerSecond = 3353.4
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 251- 260, 65.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14635403; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0745s; SamplesPerSecond = 3356.5
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 261- 270, 67.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19047122; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0746s; SamplesPerSecond = 3349.9
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 271- 280, 70.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19571785; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3357.2
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 281- 290, 72.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17891536; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0746s; SamplesPerSecond = 3353.4
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 291- 300, 75.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13980267; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0746s; SamplesPerSecond = 3349.7
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 301- 310, 77.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17881647; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0745s; SamplesPerSecond = 3353.5
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 311- 320, 80.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13208886; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0748s; SamplesPerSecond = 3344.3
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 321- 330, 82.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15493189; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0745s; SamplesPerSecond = 3355.3
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 331- 340, 85.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19823895; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.6
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 341- 350, 87.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.13146498; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0746s; SamplesPerSecond = 3351.7
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 351- 360, 90.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14052468; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3351.9
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 361- 370, 92.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12801816; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3353.5
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 371- 380, 95.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16700006; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 381- 390, 97.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20335808; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0745s; SamplesPerSecond = 3353.5
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 391- 400, 100.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14631413; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3352.3
MPI Rank 1: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 0.26781517; EvalErrPerSample = 0.1014; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.98538
MPI Rank 1: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 1: starting epoch 2 at record count 20000, and file position 0
MPI Rank 1: already there from last epoch
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 4, NumGradientBits = 64).
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[   1-  10, 2.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12781997; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0744s; SamplesPerSecond = 3359.8
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  11-  20, 5.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17668945; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0748s; SamplesPerSecond = 3343.2
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  21-  30, 7.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14515421; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  31-  40, 10.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.15912577; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0747s; SamplesPerSecond = 3348.4
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  41-  50, 12.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17005286; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0747s; SamplesPerSecond = 3348.7
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  51-  60, 15.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18343662; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0746s; SamplesPerSecond = 3353.0
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  61-  70, 17.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14768688; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0747s; SamplesPerSecond = 3348.7
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  71-  80, 20.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18051867; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.1
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  81-  90, 22.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15846717; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.1
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  91- 100, 25.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14530734; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0746s; SamplesPerSecond = 3353.0
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 101- 110, 27.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.13585330; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0744s; SamplesPerSecond = 3359.4
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 111- 120, 30.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13773835; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3352.5
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 121- 130, 32.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.11677767; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0744s; SamplesPerSecond = 3358.9
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 131- 140, 35.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16726846; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0745s; SamplesPerSecond = 3357.2
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 141- 150, 37.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12883820; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0744s; SamplesPerSecond = 3358.4
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 151- 160, 40.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17338728; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3353.5
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 161- 170, 42.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17523944; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3360.4
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 171- 180, 45.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14131285; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.5
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 181- 190, 47.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19189513; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0747s; SamplesPerSecond = 3346.6
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 191- 200, 50.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.20920764; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.6
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 201- 210, 52.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18434781; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3356.9
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 211- 220, 55.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18185125; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0745s; SamplesPerSecond = 3355.6
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 221- 230, 57.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14112907; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0744s; SamplesPerSecond = 3361.7
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 231- 240, 60.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14945583; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.2
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 241- 250, 62.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20227807; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.6
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 251- 260, 65.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12877544; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0744s; SamplesPerSecond = 3361.5
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 261- 270, 67.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18699253; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.6
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 271- 280, 70.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19561703; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0745s; SamplesPerSecond = 3355.0
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 281- 290, 72.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.16792520; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0745s; SamplesPerSecond = 3355.8
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 291- 300, 75.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12582208; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0745s; SamplesPerSecond = 3357.8
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 301- 310, 77.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17426202; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0743s; SamplesPerSecond = 3365.6
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 311- 320, 80.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12310390; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.7
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 321- 330, 82.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14804962; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.2
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 331- 340, 85.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19809667; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0744s; SamplesPerSecond = 3361.1
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 341- 350, 87.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12615132; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0744s; SamplesPerSecond = 3359.1
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 351- 360, 90.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13788489; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3357.4
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 361- 370, 92.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12806131; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3355.5
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 371- 380, 95.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16644406; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3359.2
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 381- 390, 97.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20590809; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3353.6
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 391- 400, 100.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14598417; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3353.4
MPI Rank 1: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 0.15974794; EvalErrPerSample = 0.0768; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.98205
MPI Rank 1: Starting Epoch 4: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 1: starting epoch 3 at record count 30000, and file position 0
MPI Rank 1: already there from last epoch
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 4, NumGradientBits = 64).
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[   1-  10, 2.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12359632; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.1
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  11-  20, 5.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18056814; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3352.0
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  21-  30, 7.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14218540; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.7
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  31-  40, 10.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.15627835; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3355.0
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  41-  50, 12.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.16903217; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3353.0
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  51-  60, 15.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18249928; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3353.2
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  61-  70, 17.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14477886; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.1
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  71-  80, 20.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18037574; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3353.0
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  81-  90, 22.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15857982; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0745s; SamplesPerSecond = 3356.6
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  91- 100, 25.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14475601; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0745s; SamplesPerSecond = 3354.6
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 101- 110, 27.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.13409513; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.3
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 111- 120, 30.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13725062; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3352.6
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 121- 130, 32.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.11563837; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0744s; SamplesPerSecond = 3360.3
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 131- 140, 35.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16874556; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0744s; SamplesPerSecond = 3359.6
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 141- 150, 37.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12774890; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0745s; SamplesPerSecond = 3356.5
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 151- 160, 40.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17148842; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0745s; SamplesPerSecond = 3357.6
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 161- 170, 42.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17599447; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3358.8
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 171- 180, 45.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14112030; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0744s; SamplesPerSecond = 3361.3
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 181- 190, 47.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19336367; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0747s; SamplesPerSecond = 3349.0
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 191- 200, 50.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.20887975; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0745s; SamplesPerSecond = 3356.1
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 201- 210, 52.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18484689; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3353.9
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 211- 220, 55.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18172436; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3351.8
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 221- 230, 57.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14079120; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0744s; SamplesPerSecond = 3358.2
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 231- 240, 60.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14940547; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0744s; SamplesPerSecond = 3358.3
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 241- 250, 62.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20327788; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0744s; SamplesPerSecond = 3358.1
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 251- 260, 65.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12800091; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0748s; SamplesPerSecond = 3343.9
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 261- 270, 67.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18736454; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.3
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 271- 280, 70.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19576131; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0743s; SamplesPerSecond = 3364.8
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 281- 290, 72.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.16579028; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0743s; SamplesPerSecond = 3363.0
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 291- 300, 75.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12479314; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0747s; SamplesPerSecond = 3348.5
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 301- 310, 77.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17331117; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3356.7
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 311- 320, 80.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12259767; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3355.0
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 321- 330, 82.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14755686; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0745s; SamplesPerSecond = 3354.6
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 331- 340, 85.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19815974; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.9
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 341- 350, 87.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12586333; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.2
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 351- 360, 90.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13777500; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0746s; SamplesPerSecond = 3352.8
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 361- 370, 92.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12817677; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3354.7
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 371- 380, 95.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16645141; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3358.9
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 381- 390, 97.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20630344; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.1
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 391- 400, 100.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14607667; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0745s; SamplesPerSecond = 3355.3
MPI Rank 1: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 0.15927508; EvalErrPerSample = 0.0768; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.98168
MPI Rank 1: CNTKCommandTrainEnd: SimpleMultiGPU
MPI Rank 1: COMPLETED
MPI Rank 1: ~MPIWrapper
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: Build info: 
MPI Rank 2: 
MPI Rank 2: 		Built time: Dec 10 2015 14:48:57
MPI Rank 2: 		Last modified date: Tue Dec  8 10:08:43 2015
MPI Rank 2: 		Build type: release
MPI Rank 2: 		Math lib: acml
MPI Rank 2: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 2: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 2: 		Build Branch: master
MPI Rank 2: 		Build SHA1: 5e0017ac9c55c23d53cb524c8acb7d6d9bfd0269
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: running on localhost at 2015/12/10 16:10:55
MPI Rank 2: command line: 
MPI Rank 2: /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../../SimpleMultiGPU.config currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../.. DeviceId=0 numCPUThreads=3 precision=double SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr 
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: deviceId = $DeviceId$
MPI Rank 2: command = SimpleMultiGPU
MPI Rank 2: precision = "float"
MPI Rank 2: parallelTrain = true
MPI Rank 2: SimpleMultiGPU = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "$RunDir$/models/Simple.dnn"
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 2:50*2:2
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 0 
MPI Rank 2:         minibatchSize = 25
MPI Rank 2:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 2:         momentumPerMB = 0.9
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 4
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 1
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "UCIFastReader"
MPI Rank 2:         file = "$DataDir$/SimpleDataTrain.txt"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "none"
MPI Rank 2:         verbosity = 1   
MPI Rank 2:         features = [
MPI Rank 2: dim = 2      
MPI Rank 2: start = 0    
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2: start = 2      
MPI Rank 2: dim = 1        
MPI Rank 2: labelDim = 2   
MPI Rank 2:             labelMappingFile = "$DataDir$/SimpleMapping.txt"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu
MPI Rank 2: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 2: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../..
MPI Rank 2: DeviceId=0
MPI Rank 2: numCPUThreads=3
MPI Rank 2: precision=double
MPI Rank 2: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 2: stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: deviceId = 0
MPI Rank 2: command = SimpleMultiGPU
MPI Rank 2: precision = "float"
MPI Rank 2: parallelTrain = true
MPI Rank 2: SimpleMultiGPU = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/models/Simple.dnn"
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 2:50*2:2
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 0 
MPI Rank 2:         minibatchSize = 25
MPI Rank 2:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 2:         momentumPerMB = 0.9
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 4
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 1
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "UCIFastReader"
MPI Rank 2:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "none"
MPI Rank 2:         verbosity = 1   
MPI Rank 2:         features = [
MPI Rank 2: dim = 2      
MPI Rank 2: start = 0    
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2: start = 2      
MPI Rank 2: dim = 1        
MPI Rank 2: labelDim = 2   
MPI Rank 2:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu
MPI Rank 2: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 2: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../..
MPI Rank 2: DeviceId=0
MPI Rank 2: numCPUThreads=3
MPI Rank 2: precision=double
MPI Rank 2: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 2: stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: configparameters: SimpleMultiGPU.config:command=SimpleMultiGPU
MPI Rank 2: configparameters: SimpleMultiGPU.config:ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../..
MPI Rank 2: configparameters: SimpleMultiGPU.config:currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 2: configparameters: SimpleMultiGPU.config:DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 2: configparameters: SimpleMultiGPU.config:deviceId=0
MPI Rank 2: configparameters: SimpleMultiGPU.config:numCPUThreads=3
MPI Rank 2: configparameters: SimpleMultiGPU.config:parallelTrain=true
MPI Rank 2: configparameters: SimpleMultiGPU.config:precision=double
MPI Rank 2: configparameters: SimpleMultiGPU.config:RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu
MPI Rank 2: configparameters: SimpleMultiGPU.config:SimpleMultiGPU=[
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/models/Simple.dnn"
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 2:50*2:2
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 0 
MPI Rank 2:         minibatchSize = 25
MPI Rank 2:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 2:         momentumPerMB = 0.9
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 4
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 1
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "UCIFastReader"
MPI Rank 2:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "none"
MPI Rank 2:         verbosity = 1   
MPI Rank 2:         features = [
MPI Rank 2: dim = 2      
MPI Rank 2: start = 0    
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2: start = 2      
MPI Rank 2: dim = 1        
MPI Rank 2: labelDim = 2   
MPI Rank 2:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 2: 
MPI Rank 2: configparameters: SimpleMultiGPU.config:stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: command: SimpleMultiGPU 
MPI Rank 2: precision = double
MPI Rank 2: Using 3 CPU threads
MPI Rank 2: CNTKModelPath: /tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/models/Simple.dnn
MPI Rank 2: CNTKCommandTrainInfo: SimpleMultiGPU : 4
MPI Rank 2: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 2: CNTKCommandTrainBegin: SimpleMultiGPU
MPI Rank 2: SimpleNetworkBuilder Using GPU 0
MPI Rank 2: Reading UCI file /home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt
MPI Rank 2: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 2: 
MPI Rank 2: Post-processing network...
MPI Rank 2: 
MPI Rank 2: 7 roots:
MPI Rank 2: 	MeanOfFeatures = Mean
MPI Rank 2: 	InvStdOfFeatures = InvStdDev
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 	Prior = Mean
MPI Rank 2: 	ScaledLogLikelihood = Minus
MPI Rank 2: 	PosteriorProb = Softmax
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node Prior, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node Prior, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 2: 
MPI Rank 2: Post-processing network complete.
MPI Rank 2: 
MPI Rank 2: SGD using GPU 0.
MPI Rank 2: 
MPI Rank 2: Training criterion node(s):
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 
MPI Rank 2: Evaluation criterion node(s):
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Allocating matrices for gradient computing
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 2: 
MPI Rank 2: Precomputing --> 3 PreCompute nodes found.
MPI Rank 2: 
MPI Rank 2: 	NodeName: InvStdOfFeatures
MPI Rank 2: 	NodeName: MeanOfFeatures
MPI Rank 2: 	NodeName: Prior
MPI Rank 2: starting at epoch 0 counting lines to determine record count
MPI Rank 2: 
MPI Rank 2:  10000 records found
MPI Rank 2: starting epoch 0 at record count 0, and file position 0
MPI Rank 2: already there from last epoch
MPI Rank 2: 
MPI Rank 2: Precomputing --> Completed.
MPI Rank 2: 
MPI Rank 2: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 2: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 2: starting epoch 0 at record count 0, and file position 0
MPI Rank 2: already there from last epoch
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 4, NumGradientBits = 64).
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[   1-  10]: SamplesSeen = 250; TrainLossPerSample =  0.70050728; EvalErr[0]PerSample = 0.52400000; TotalTime = 0.0785s; SamplesPerSecond = 3185.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  11-  20]: SamplesSeen = 250; TrainLossPerSample =  0.71587568; EvalErr[0]PerSample = 0.52000000; TotalTime = 0.0746s; SamplesPerSecond = 3349.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  21-  30]: SamplesSeen = 250; TrainLossPerSample =  0.73013536; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  31-  40]: SamplesSeen = 250; TrainLossPerSample =  0.70130824; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0747s; SamplesPerSecond = 3348.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  41-  50]: SamplesSeen = 250; TrainLossPerSample =  0.70631806; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0747s; SamplesPerSecond = 3347.0
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  51-  60]: SamplesSeen = 250; TrainLossPerSample =  0.71556514; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0745s; SamplesPerSecond = 3353.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  61-  70]: SamplesSeen = 250; TrainLossPerSample =  0.72085867; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  71-  80]: SamplesSeen = 250; TrainLossPerSample =  0.79821406; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  81-  90]: SamplesSeen = 250; TrainLossPerSample =  0.69720437; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0746s; SamplesPerSecond = 3350.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  91- 100]: SamplesSeen = 250; TrainLossPerSample =  0.70729402; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.1
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 101- 110]: SamplesSeen = 250; TrainLossPerSample =  0.71394348; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 111- 120]: SamplesSeen = 250; TrainLossPerSample =  0.69528096; EvalErr[0]PerSample = 0.43600000; TotalTime = 0.0747s; SamplesPerSecond = 3346.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 121- 130]: SamplesSeen = 250; TrainLossPerSample =  0.70043910; EvalErr[0]PerSample = 0.44000000; TotalTime = 0.0746s; SamplesPerSecond = 3350.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 131- 140]: SamplesSeen = 250; TrainLossPerSample =  0.71843195; EvalErr[0]PerSample = 0.54800000; TotalTime = 0.0745s; SamplesPerSecond = 3356.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 141- 150]: SamplesSeen = 250; TrainLossPerSample =  0.72169305; EvalErr[0]PerSample = 0.48800000; TotalTime = 0.0746s; SamplesPerSecond = 3350.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 151- 160]: SamplesSeen = 250; TrainLossPerSample =  0.71791483; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0748s; SamplesPerSecond = 3344.0
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 161- 170]: SamplesSeen = 250; TrainLossPerSample =  0.74232732; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0748s; SamplesPerSecond = 3342.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 171- 180]: SamplesSeen = 250; TrainLossPerSample =  0.71922548; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0746s; SamplesPerSecond = 3352.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 181- 190]: SamplesSeen = 250; TrainLossPerSample =  0.71566133; EvalErr[0]PerSample = 0.48400000; TotalTime = 0.0746s; SamplesPerSecond = 3351.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 191- 200]: SamplesSeen = 250; TrainLossPerSample =  0.71749815; EvalErr[0]PerSample = 0.53200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 201- 210]: SamplesSeen = 250; TrainLossPerSample =  0.71930114; EvalErr[0]PerSample = 0.55600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 211- 220]: SamplesSeen = 250; TrainLossPerSample =  0.72170810; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 221- 230]: SamplesSeen = 250; TrainLossPerSample =  0.72065714; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0745s; SamplesPerSecond = 3357.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 231- 240]: SamplesSeen = 250; TrainLossPerSample =  0.71330342; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 241- 250]: SamplesSeen = 250; TrainLossPerSample =  0.69712330; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0747s; SamplesPerSecond = 3347.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 251- 260]: SamplesSeen = 250; TrainLossPerSample =  0.70211803; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0746s; SamplesPerSecond = 3351.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 261- 270]: SamplesSeen = 250; TrainLossPerSample =  0.70857019; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 271- 280]: SamplesSeen = 250; TrainLossPerSample =  0.69865626; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0746s; SamplesPerSecond = 3349.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 281- 290]: SamplesSeen = 250; TrainLossPerSample =  0.69417033; EvalErr[0]PerSample = 0.44800000; TotalTime = 0.0746s; SamplesPerSecond = 3351.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 291- 300]: SamplesSeen = 250; TrainLossPerSample =  0.69547586; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0747s; SamplesPerSecond = 3346.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 301- 310]: SamplesSeen = 250; TrainLossPerSample =  0.69495782; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0745s; SamplesPerSecond = 3353.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 311- 320]: SamplesSeen = 250; TrainLossPerSample =  0.68965743; EvalErr[0]PerSample = 0.42000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 321- 330]: SamplesSeen = 250; TrainLossPerSample =  0.69562855; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0747s; SamplesPerSecond = 3347.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 331- 340]: SamplesSeen = 250; TrainLossPerSample =  0.70809375; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0747s; SamplesPerSecond = 3347.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 341- 350]: SamplesSeen = 250; TrainLossPerSample =  0.69852997; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0747s; SamplesPerSecond = 3345.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 351- 360]: SamplesSeen = 250; TrainLossPerSample =  0.68448769; EvalErr[0]PerSample = 0.46000000; TotalTime = 0.0747s; SamplesPerSecond = 3345.0
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 361- 370]: SamplesSeen = 250; TrainLossPerSample =  0.68159609; EvalErr[0]PerSample = 0.46400000; TotalTime = 0.0747s; SamplesPerSecond = 3347.1
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 371- 380]: SamplesSeen = 250; TrainLossPerSample =  0.66837272; EvalErr[0]PerSample = 0.45600000; TotalTime = 0.0747s; SamplesPerSecond = 3347.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 381- 390]: SamplesSeen = 250; TrainLossPerSample =  0.66480500; EvalErr[0]PerSample = 0.33200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 391- 400]: SamplesSeen = 250; TrainLossPerSample =  0.64793720; EvalErr[0]PerSample = 0.39600000; TotalTime = 0.0747s; SamplesPerSecond = 3344.8
MPI Rank 2: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 0.70652116; EvalErrPerSample = 0.4934; AvgLearningRatePerSample = 0.02; EpochTime=2.9904
MPI Rank 2: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 2: starting epoch 1 at record count 10000, and file position 0
MPI Rank 2: already there from last epoch
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 4, NumGradientBits = 64).
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[   1-  10, 2.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.66297271; EvalErr[0]PerSample = 0.49200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.1
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  11-  20, 5.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.60421433; EvalErr[0]PerSample = 0.15600000; TotalTime = 0.0745s; SamplesPerSecond = 3355.0
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  21-  30, 7.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.57776098; EvalErr[0]PerSample = 0.20400000; TotalTime = 0.0744s; SamplesPerSecond = 3359.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  31-  40, 10.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.57075313; EvalErr[0]PerSample = 0.19200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  41-  50, 12.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.53857250; EvalErr[0]PerSample = 0.16000000; TotalTime = 0.0746s; SamplesPerSecond = 3351.7
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  51-  60, 15.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.51575308; EvalErr[0]PerSample = 0.16000000; TotalTime = 0.0747s; SamplesPerSecond = 3345.8
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  61-  70, 17.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.46360007; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0748s; SamplesPerSecond = 3340.5
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  71-  80, 20.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.43939162; EvalErr[0]PerSample = 0.14000000; TotalTime = 0.0748s; SamplesPerSecond = 3343.0
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  81-  90, 22.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.38285670; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0748s; SamplesPerSecond = 3343.9
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  91- 100, 25.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.33783250; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0746s; SamplesPerSecond = 3353.0
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 101- 110, 27.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.30060340; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0744s; SamplesPerSecond = 3358.1
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 111- 120, 30.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.27074543; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0748s; SamplesPerSecond = 3344.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 121- 130, 32.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.22579667; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0748s; SamplesPerSecond = 3341.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 131- 140, 35.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.23038277; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0744s; SamplesPerSecond = 3358.3
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 141- 150, 37.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20249742; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0745s; SamplesPerSecond = 3354.2
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 151- 160, 40.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.23196002; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0746s; SamplesPerSecond = 3349.1
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 161- 170, 42.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19926723; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.0
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 171- 180, 45.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17553205; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.5
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 181- 190, 47.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20627378; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0746s; SamplesPerSecond = 3353.1
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 191- 200, 50.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.22915289; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0747s; SamplesPerSecond = 3348.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 201- 210, 52.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19774548; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3352.2
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 211- 220, 55.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19459308; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0745s; SamplesPerSecond = 3354.2
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 221- 230, 57.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15793758; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0746s; SamplesPerSecond = 3349.2
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 231- 240, 60.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16358363; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0746s; SamplesPerSecond = 3351.3
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 241- 250, 62.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20081019; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0746s; SamplesPerSecond = 3353.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 251- 260, 65.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14635403; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0745s; SamplesPerSecond = 3356.6
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 261- 270, 67.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19047122; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0746s; SamplesPerSecond = 3349.7
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 271- 280, 70.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19571785; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3357.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 281- 290, 72.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17891536; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0746s; SamplesPerSecond = 3353.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 291- 300, 75.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13980267; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0746s; SamplesPerSecond = 3349.7
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 301- 310, 77.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17881647; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0746s; SamplesPerSecond = 3352.6
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 311- 320, 80.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13208886; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0747s; SamplesPerSecond = 3345.5
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 321- 330, 82.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15493189; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0745s; SamplesPerSecond = 3355.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 331- 340, 85.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19823895; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 341- 350, 87.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.13146498; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0746s; SamplesPerSecond = 3351.6
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 351- 360, 90.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14052468; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3352.0
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 361- 370, 92.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12801816; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3353.6
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 371- 380, 95.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16700006; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 381- 390, 97.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20335808; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0745s; SamplesPerSecond = 3353.5
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 391- 400, 100.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14631413; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3352.4
MPI Rank 2: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 0.26781517; EvalErrPerSample = 0.1014; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.98568
MPI Rank 2: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 2: starting epoch 2 at record count 20000, and file position 0
MPI Rank 2: already there from last epoch
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 4, NumGradientBits = 64).
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[   1-  10, 2.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12781997; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0744s; SamplesPerSecond = 3359.8
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  11-  20, 5.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17668945; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0748s; SamplesPerSecond = 3343.2
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  21-  30, 7.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14515421; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  31-  40, 10.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.15912577; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0747s; SamplesPerSecond = 3348.4
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  41-  50, 12.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17005286; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0747s; SamplesPerSecond = 3348.9
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  51-  60, 15.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18343662; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.8
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  61-  70, 17.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14768688; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0747s; SamplesPerSecond = 3348.6
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  71-  80, 20.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18051867; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.3
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  81-  90, 22.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15846717; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0745s; SamplesPerSecond = 3354.9
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  91- 100, 25.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14530734; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0745s; SamplesPerSecond = 3354.2
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 101- 110, 27.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.13585330; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0744s; SamplesPerSecond = 3359.4
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 111- 120, 30.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13773835; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3352.5
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 121- 130, 32.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.11677767; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0744s; SamplesPerSecond = 3358.9
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 131- 140, 35.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16726846; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0745s; SamplesPerSecond = 3357.4
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 141- 150, 37.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12883820; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0744s; SamplesPerSecond = 3358.4
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 151- 160, 40.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17338728; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3353.6
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 161- 170, 42.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17523944; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3360.4
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 171- 180, 45.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14131285; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 181- 190, 47.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19189513; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0747s; SamplesPerSecond = 3346.5
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 191- 200, 50.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.20920764; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.4
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 201- 210, 52.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18434781; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3357.0
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 211- 220, 55.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18185125; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0745s; SamplesPerSecond = 3355.7
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 221- 230, 57.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14112907; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0744s; SamplesPerSecond = 3361.7
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 231- 240, 60.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14945583; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.0
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 241- 250, 62.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20227807; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.7
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 251- 260, 65.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12877544; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0744s; SamplesPerSecond = 3361.6
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 261- 270, 67.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18699253; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.5
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 271- 280, 70.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19561703; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0745s; SamplesPerSecond = 3354.8
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 281- 290, 72.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.16792520; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0745s; SamplesPerSecond = 3355.8
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 291- 300, 75.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12582208; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0745s; SamplesPerSecond = 3358.0
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 301- 310, 77.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17426202; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0743s; SamplesPerSecond = 3365.6
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 311- 320, 80.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12310390; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.7
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 321- 330, 82.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14804962; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.2
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 331- 340, 85.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19809667; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0744s; SamplesPerSecond = 3361.2
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 341- 350, 87.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12615132; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0744s; SamplesPerSecond = 3359.1
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 351- 360, 90.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13788489; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3357.4
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 361- 370, 92.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12806131; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3355.5
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 371- 380, 95.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16644406; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3359.4
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 381- 390, 97.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20590809; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3353.6
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 391- 400, 100.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14598417; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3353.4
MPI Rank 2: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 0.15974794; EvalErrPerSample = 0.0768; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.98184
MPI Rank 2: Starting Epoch 4: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 2: starting epoch 3 at record count 30000, and file position 0
MPI Rank 2: already there from last epoch
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 4, NumGradientBits = 64).
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[   1-  10, 2.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12359632; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.3
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  11-  20, 5.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18056814; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3351.9
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  21-  30, 7.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14218540; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.9
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  31-  40, 10.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.15627835; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3355.1
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  41-  50, 12.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.16903217; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3353.0
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  51-  60, 15.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18249928; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3353.2
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  61-  70, 17.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14477886; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.3
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  71-  80, 20.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18037574; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3352.9
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  81-  90, 22.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15857982; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0745s; SamplesPerSecond = 3356.7
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  91- 100, 25.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14475601; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0745s; SamplesPerSecond = 3354.6
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 101- 110, 27.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.13409513; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.4
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 111- 120, 30.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13725062; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3352.8
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 121- 130, 32.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.11563837; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0744s; SamplesPerSecond = 3360.2
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 131- 140, 35.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16874556; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0744s; SamplesPerSecond = 3359.5
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 141- 150, 37.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12774890; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0745s; SamplesPerSecond = 3356.4
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 151- 160, 40.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17148842; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0745s; SamplesPerSecond = 3357.6
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 161- 170, 42.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17599447; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3358.6
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 171- 180, 45.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14112030; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0744s; SamplesPerSecond = 3361.1
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 181- 190, 47.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19336367; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0746s; SamplesPerSecond = 3349.2
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 191- 200, 50.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.20887975; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0745s; SamplesPerSecond = 3356.0
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 201- 210, 52.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18484689; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3353.9
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 211- 220, 55.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18172436; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3352.0
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 221- 230, 57.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14079120; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0744s; SamplesPerSecond = 3358.2
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 231- 240, 60.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14940547; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0744s; SamplesPerSecond = 3358.2
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 241- 250, 62.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20327788; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0744s; SamplesPerSecond = 3358.2
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 251- 260, 65.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12800091; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0748s; SamplesPerSecond = 3344.0
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 261- 270, 67.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18736454; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.1
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 271- 280, 70.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19576131; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0743s; SamplesPerSecond = 3364.9
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 281- 290, 72.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.16579028; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0743s; SamplesPerSecond = 3362.9
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 291- 300, 75.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12479314; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0747s; SamplesPerSecond = 3348.6
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 301- 310, 77.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17331117; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3356.7
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 311- 320, 80.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12259767; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3355.1
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 321- 330, 82.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14755686; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0745s; SamplesPerSecond = 3354.7
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 331- 340, 85.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19815974; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0745s; SamplesPerSecond = 3355.8
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 341- 350, 87.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12586333; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3357.2
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 351- 360, 90.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13777500; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0746s; SamplesPerSecond = 3352.7
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 361- 370, 92.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12817677; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3354.9
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 371- 380, 95.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16645141; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3358.9
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 381- 390, 97.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20630344; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.0
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 391- 400, 100.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14607667; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0745s; SamplesPerSecond = 3355.4
MPI Rank 2: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 0.15927508; EvalErrPerSample = 0.0768; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.98178
MPI Rank 2: CNTKCommandTrainEnd: SimpleMultiGPU
MPI Rank 2: COMPLETED
MPI Rank 2: ~MPIWrapper
MPI Rank 3: -------------------------------------------------------------------
MPI Rank 3: Build info: 
MPI Rank 3: 
MPI Rank 3: 		Built time: Dec 10 2015 14:48:57
MPI Rank 3: 		Last modified date: Tue Dec  8 10:08:43 2015
MPI Rank 3: 		Build type: release
MPI Rank 3: 		Math lib: acml
MPI Rank 3: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 3: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 3: 		Build Branch: master
MPI Rank 3: 		Build SHA1: 5e0017ac9c55c23d53cb524c8acb7d6d9bfd0269
MPI Rank 3: -------------------------------------------------------------------
MPI Rank 3: running on localhost at 2015/12/10 16:10:56
MPI Rank 3: command line: 
MPI Rank 3: /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../../SimpleMultiGPU.config currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../.. DeviceId=0 numCPUThreads=3 precision=double SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr 
MPI Rank 3: 
MPI Rank 3: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 3: deviceId = $DeviceId$
MPI Rank 3: command = SimpleMultiGPU
MPI Rank 3: precision = "float"
MPI Rank 3: parallelTrain = true
MPI Rank 3: SimpleMultiGPU = [
MPI Rank 3:     action = "train"
MPI Rank 3:     modelPath = "$RunDir$/models/Simple.dnn"
MPI Rank 3:     traceLevel = 1
MPI Rank 3:     SimpleNetworkBuilder = [
MPI Rank 3:         layerSizes = 2:50*2:2
MPI Rank 3:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 3:         evalCriterion = "ErrorPrediction"
MPI Rank 3:         layerTypes = "Sigmoid"
MPI Rank 3:         initValueScale = 1.0
MPI Rank 3:         applyMeanVarNorm = true
MPI Rank 3:         uniformInit = true
MPI Rank 3:         needPrior = true
MPI Rank 3:     ]
MPI Rank 3:     SGD = [
MPI Rank 3:         epochSize = 0 
MPI Rank 3:         minibatchSize = 25
MPI Rank 3:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 3:         momentumPerMB = 0.9
MPI Rank 3:         dropoutRate = 0.0
MPI Rank 3:         maxEpochs = 4
MPI Rank 3:         ParallelTrain = [
MPI Rank 3:             parallelizationMethod = "DataParallelSGD"
MPI Rank 3:             DataParallelSGD = [
MPI Rank 3:                 gradientBits = 1
MPI Rank 3:             ]
MPI Rank 3:         ]
MPI Rank 3:     ]
MPI Rank 3:     reader = [
MPI Rank 3:         readerType = "UCIFastReader"
MPI Rank 3:         file = "$DataDir$/SimpleDataTrain.txt"
MPI Rank 3:         miniBatchMode = "partial"
MPI Rank 3:         randomize = "none"
MPI Rank 3:         verbosity = 1   
MPI Rank 3:         features = [
MPI Rank 3: dim = 2      
MPI Rank 3: start = 0    
MPI Rank 3:         ]
MPI Rank 3:         labels = [
MPI Rank 3: start = 2      
MPI Rank 3: dim = 1        
MPI Rank 3: labelDim = 2   
MPI Rank 3:             labelMappingFile = "$DataDir$/SimpleMapping.txt"
MPI Rank 3:         ]
MPI Rank 3:     ]
MPI Rank 3: ]
MPI Rank 3: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 3: RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu
MPI Rank 3: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 3: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../..
MPI Rank 3: DeviceId=0
MPI Rank 3: numCPUThreads=3
MPI Rank 3: precision=double
MPI Rank 3: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 3: stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr
MPI Rank 3: 
MPI Rank 3: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 3: 
MPI Rank 3: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 3: deviceId = 0
MPI Rank 3: command = SimpleMultiGPU
MPI Rank 3: precision = "float"
MPI Rank 3: parallelTrain = true
MPI Rank 3: SimpleMultiGPU = [
MPI Rank 3:     action = "train"
MPI Rank 3:     modelPath = "/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/models/Simple.dnn"
MPI Rank 3:     traceLevel = 1
MPI Rank 3:     SimpleNetworkBuilder = [
MPI Rank 3:         layerSizes = 2:50*2:2
MPI Rank 3:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 3:         evalCriterion = "ErrorPrediction"
MPI Rank 3:         layerTypes = "Sigmoid"
MPI Rank 3:         initValueScale = 1.0
MPI Rank 3:         applyMeanVarNorm = true
MPI Rank 3:         uniformInit = true
MPI Rank 3:         needPrior = true
MPI Rank 3:     ]
MPI Rank 3:     SGD = [
MPI Rank 3:         epochSize = 0 
MPI Rank 3:         minibatchSize = 25
MPI Rank 3:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 3:         momentumPerMB = 0.9
MPI Rank 3:         dropoutRate = 0.0
MPI Rank 3:         maxEpochs = 4
MPI Rank 3:         ParallelTrain = [
MPI Rank 3:             parallelizationMethod = "DataParallelSGD"
MPI Rank 3:             DataParallelSGD = [
MPI Rank 3:                 gradientBits = 1
MPI Rank 3:             ]
MPI Rank 3:         ]
MPI Rank 3:     ]
MPI Rank 3:     reader = [
MPI Rank 3:         readerType = "UCIFastReader"
MPI Rank 3:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 3:         miniBatchMode = "partial"
MPI Rank 3:         randomize = "none"
MPI Rank 3:         verbosity = 1   
MPI Rank 3:         features = [
MPI Rank 3: dim = 2      
MPI Rank 3: start = 0    
MPI Rank 3:         ]
MPI Rank 3:         labels = [
MPI Rank 3: start = 2      
MPI Rank 3: dim = 1        
MPI Rank 3: labelDim = 2   
MPI Rank 3:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 3:         ]
MPI Rank 3:     ]
MPI Rank 3: ]
MPI Rank 3: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 3: RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu
MPI Rank 3: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 3: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../..
MPI Rank 3: DeviceId=0
MPI Rank 3: numCPUThreads=3
MPI Rank 3: precision=double
MPI Rank 3: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 3: stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr
MPI Rank 3: 
MPI Rank 3: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 3: 
MPI Rank 3: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 3: configparameters: SimpleMultiGPU.config:command=SimpleMultiGPU
MPI Rank 3: configparameters: SimpleMultiGPU.config:ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/DoublePrecision/../..
MPI Rank 3: configparameters: SimpleMultiGPU.config:currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 3: configparameters: SimpleMultiGPU.config:DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 3: configparameters: SimpleMultiGPU.config:deviceId=0
MPI Rank 3: configparameters: SimpleMultiGPU.config:numCPUThreads=3
MPI Rank 3: configparameters: SimpleMultiGPU.config:parallelTrain=true
MPI Rank 3: configparameters: SimpleMultiGPU.config:precision=double
MPI Rank 3: configparameters: SimpleMultiGPU.config:RunDir=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu
MPI Rank 3: configparameters: SimpleMultiGPU.config:SimpleMultiGPU=[
MPI Rank 3:     action = "train"
MPI Rank 3:     modelPath = "/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/models/Simple.dnn"
MPI Rank 3:     traceLevel = 1
MPI Rank 3:     SimpleNetworkBuilder = [
MPI Rank 3:         layerSizes = 2:50*2:2
MPI Rank 3:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 3:         evalCriterion = "ErrorPrediction"
MPI Rank 3:         layerTypes = "Sigmoid"
MPI Rank 3:         initValueScale = 1.0
MPI Rank 3:         applyMeanVarNorm = true
MPI Rank 3:         uniformInit = true
MPI Rank 3:         needPrior = true
MPI Rank 3:     ]
MPI Rank 3:     SGD = [
MPI Rank 3:         epochSize = 0 
MPI Rank 3:         minibatchSize = 25
MPI Rank 3:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 3:         momentumPerMB = 0.9
MPI Rank 3:         dropoutRate = 0.0
MPI Rank 3:         maxEpochs = 4
MPI Rank 3:         ParallelTrain = [
MPI Rank 3:             parallelizationMethod = "DataParallelSGD"
MPI Rank 3:             DataParallelSGD = [
MPI Rank 3:                 gradientBits = 1
MPI Rank 3:             ]
MPI Rank 3:         ]
MPI Rank 3:     ]
MPI Rank 3:     reader = [
MPI Rank 3:         readerType = "UCIFastReader"
MPI Rank 3:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 3:         miniBatchMode = "partial"
MPI Rank 3:         randomize = "none"
MPI Rank 3:         verbosity = 1   
MPI Rank 3:         features = [
MPI Rank 3: dim = 2      
MPI Rank 3: start = 0    
MPI Rank 3:         ]
MPI Rank 3:         labels = [
MPI Rank 3: start = 2      
MPI Rank 3: dim = 1        
MPI Rank 3: labelDim = 2   
MPI Rank 3:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 3:         ]
MPI Rank 3:     ]
MPI Rank 3: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 3: 
MPI Rank 3: configparameters: SimpleMultiGPU.config:stderr=/tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/stderr
MPI Rank 3: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 3: command: SimpleMultiGPU 
MPI Rank 3: precision = double
MPI Rank 3: Using 3 CPU threads
MPI Rank 3: CNTKModelPath: /tmp/cntk-test-20151210155756.754205/ParallelTraining/NoQuantization_DoublePrecision@release_gpu/models/Simple.dnn
MPI Rank 3: CNTKCommandTrainInfo: SimpleMultiGPU : 4
MPI Rank 3: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 3: CNTKCommandTrainBegin: SimpleMultiGPU
MPI Rank 3: SimpleNetworkBuilder Using GPU 0
MPI Rank 3: Reading UCI file /home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt
MPI Rank 3: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 3: 
MPI Rank 3: Post-processing network...
MPI Rank 3: 
MPI Rank 3: 7 roots:
MPI Rank 3: 	MeanOfFeatures = Mean
MPI Rank 3: 	InvStdOfFeatures = InvStdDev
MPI Rank 3: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 3: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 3: 	Prior = Mean
MPI Rank 3: 	ScaledLogLikelihood = Minus
MPI Rank 3: 	PosteriorProb = Softmax
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node MeanOfFeatures, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node MeanOfFeatures, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node InvStdOfFeatures, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node InvStdOfFeatures, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node CrossEntropyWithSoftmax. 9 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node EvalErrorPrediction, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node EvalErrorPrediction, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node Prior, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node Prior, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 3: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 3: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 3: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 3: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: Validating for node ScaledLogLikelihood. 9 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 3: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 3: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: Validating for node PosteriorProb, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: Validating for node PosteriorProb, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 3: 
MPI Rank 3: Post-processing network complete.
MPI Rank 3: 
MPI Rank 3: SGD using GPU 0.
MPI Rank 3: 
MPI Rank 3: Training criterion node(s):
MPI Rank 3: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 3: 
MPI Rank 3: Evaluation criterion node(s):
MPI Rank 3: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Allocating matrices for gradient computing
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 3: 
MPI Rank 3: Precomputing --> 3 PreCompute nodes found.
MPI Rank 3: 
MPI Rank 3: 	NodeName: InvStdOfFeatures
MPI Rank 3: 	NodeName: MeanOfFeatures
MPI Rank 3: 	NodeName: Prior
MPI Rank 3: starting at epoch 0 counting lines to determine record count
MPI Rank 3: 
MPI Rank 3:  10000 records found
MPI Rank 3: starting epoch 0 at record count 0, and file position 0
MPI Rank 3: already there from last epoch
MPI Rank 3: 
MPI Rank 3: Precomputing --> Completed.
MPI Rank 3: 
MPI Rank 3: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 3: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 3: starting epoch 0 at record count 0, and file position 0
MPI Rank 3: already there from last epoch
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, DataParallelSGD training (MyRank = 3, NumNodes = 4, NumGradientBits = 64).
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[   1-  10]: SamplesSeen = 250; TrainLossPerSample =  0.70050728; EvalErr[0]PerSample = 0.52400000; TotalTime = 0.0785s; SamplesPerSecond = 3184.2
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  11-  20]: SamplesSeen = 250; TrainLossPerSample =  0.71587568; EvalErr[0]PerSample = 0.52000000; TotalTime = 0.0746s; SamplesPerSecond = 3349.8
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  21-  30]: SamplesSeen = 250; TrainLossPerSample =  0.73013536; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.8
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  31-  40]: SamplesSeen = 250; TrainLossPerSample =  0.70130824; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0747s; SamplesPerSecond = 3348.6
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  41-  50]: SamplesSeen = 250; TrainLossPerSample =  0.70631806; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0747s; SamplesPerSecond = 3347.3
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  51-  60]: SamplesSeen = 250; TrainLossPerSample =  0.71556514; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.7
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  61-  70]: SamplesSeen = 250; TrainLossPerSample =  0.72085867; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0746s; SamplesPerSecond = 3351.2
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  71-  80]: SamplesSeen = 250; TrainLossPerSample =  0.79821406; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  81-  90]: SamplesSeen = 250; TrainLossPerSample =  0.69720437; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0746s; SamplesPerSecond = 3350.9
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  91- 100]: SamplesSeen = 250; TrainLossPerSample =  0.70729402; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.1
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 101- 110]: SamplesSeen = 250; TrainLossPerSample =  0.71394348; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.7
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 111- 120]: SamplesSeen = 250; TrainLossPerSample =  0.69528096; EvalErr[0]PerSample = 0.43600000; TotalTime = 0.0747s; SamplesPerSecond = 3346.5
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 121- 130]: SamplesSeen = 250; TrainLossPerSample =  0.70043910; EvalErr[0]PerSample = 0.44000000; TotalTime = 0.0746s; SamplesPerSecond = 3350.8
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 131- 140]: SamplesSeen = 250; TrainLossPerSample =  0.71843195; EvalErr[0]PerSample = 0.54800000; TotalTime = 0.0745s; SamplesPerSecond = 3356.1
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 141- 150]: SamplesSeen = 250; TrainLossPerSample =  0.72169305; EvalErr[0]PerSample = 0.48800000; TotalTime = 0.0746s; SamplesPerSecond = 3350.3
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 151- 160]: SamplesSeen = 250; TrainLossPerSample =  0.71791483; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0748s; SamplesPerSecond = 3343.9
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 161- 170]: SamplesSeen = 250; TrainLossPerSample =  0.74232732; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0748s; SamplesPerSecond = 3342.5
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 171- 180]: SamplesSeen = 250; TrainLossPerSample =  0.71922548; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0746s; SamplesPerSecond = 3352.2
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 181- 190]: SamplesSeen = 250; TrainLossPerSample =  0.71566133; EvalErr[0]PerSample = 0.48400000; TotalTime = 0.0746s; SamplesPerSecond = 3351.3
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 191- 200]: SamplesSeen = 250; TrainLossPerSample =  0.71749815; EvalErr[0]PerSample = 0.53200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.5
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 201- 210]: SamplesSeen = 250; TrainLossPerSample =  0.71930114; EvalErr[0]PerSample = 0.55600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.4
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 211- 220]: SamplesSeen = 250; TrainLossPerSample =  0.72170810; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 221- 230]: SamplesSeen = 250; TrainLossPerSample =  0.72065714; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0745s; SamplesPerSecond = 3357.5
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 231- 240]: SamplesSeen = 250; TrainLossPerSample =  0.71330342; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.2
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 241- 250]: SamplesSeen = 250; TrainLossPerSample =  0.69712330; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0747s; SamplesPerSecond = 3347.3
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 251- 260]: SamplesSeen = 250; TrainLossPerSample =  0.70211803; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0746s; SamplesPerSecond = 3351.8
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 261- 270]: SamplesSeen = 250; TrainLossPerSample =  0.70857019; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 271- 280]: SamplesSeen = 250; TrainLossPerSample =  0.69865626; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0746s; SamplesPerSecond = 3349.1
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 281- 290]: SamplesSeen = 250; TrainLossPerSample =  0.69417033; EvalErr[0]PerSample = 0.44800000; TotalTime = 0.0746s; SamplesPerSecond = 3351.2
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 291- 300]: SamplesSeen = 250; TrainLossPerSample =  0.69547586; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0747s; SamplesPerSecond = 3347.0
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 301- 310]: SamplesSeen = 250; TrainLossPerSample =  0.69495782; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0745s; SamplesPerSecond = 3353.7
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 311- 320]: SamplesSeen = 250; TrainLossPerSample =  0.68965743; EvalErr[0]PerSample = 0.42000000; TotalTime = 0.0746s; SamplesPerSecond = 3351.3
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 321- 330]: SamplesSeen = 250; TrainLossPerSample =  0.69562855; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0747s; SamplesPerSecond = 3348.6
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 331- 340]: SamplesSeen = 250; TrainLossPerSample =  0.70809375; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0747s; SamplesPerSecond = 3347.2
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 341- 350]: SamplesSeen = 250; TrainLossPerSample =  0.69852997; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0747s; SamplesPerSecond = 3345.4
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 351- 360]: SamplesSeen = 250; TrainLossPerSample =  0.68448769; EvalErr[0]PerSample = 0.46000000; TotalTime = 0.0747s; SamplesPerSecond = 3344.8
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 361- 370]: SamplesSeen = 250; TrainLossPerSample =  0.68159609; EvalErr[0]PerSample = 0.46400000; TotalTime = 0.0747s; SamplesPerSecond = 3346.9
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 371- 380]: SamplesSeen = 250; TrainLossPerSample =  0.66837272; EvalErr[0]PerSample = 0.45600000; TotalTime = 0.0747s; SamplesPerSecond = 3347.6
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 381- 390]: SamplesSeen = 250; TrainLossPerSample =  0.66480500; EvalErr[0]PerSample = 0.33200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.1
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 391- 400]: SamplesSeen = 250; TrainLossPerSample =  0.64793720; EvalErr[0]PerSample = 0.39600000; TotalTime = 0.0747s; SamplesPerSecond = 3344.8
MPI Rank 3: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 0.70652116; EvalErrPerSample = 0.4934; AvgLearningRatePerSample = 0.02; EpochTime=2.9902
MPI Rank 3: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 3: starting epoch 1 at record count 10000, and file position 0
MPI Rank 3: already there from last epoch
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, DataParallelSGD training (MyRank = 3, NumNodes = 4, NumGradientBits = 64).
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[   1-  10, 2.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.66297271; EvalErr[0]PerSample = 0.49200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.9
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  11-  20, 5.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.60421433; EvalErr[0]PerSample = 0.15600000; TotalTime = 0.0745s; SamplesPerSecond = 3355.1
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  21-  30, 7.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.57776098; EvalErr[0]PerSample = 0.20400000; TotalTime = 0.0744s; SamplesPerSecond = 3359.4
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  31-  40, 10.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.57075313; EvalErr[0]PerSample = 0.19200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.3
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  41-  50, 12.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.53857250; EvalErr[0]PerSample = 0.16000000; TotalTime = 0.0746s; SamplesPerSecond = 3351.8
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  51-  60, 15.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.51575308; EvalErr[0]PerSample = 0.16000000; TotalTime = 0.0747s; SamplesPerSecond = 3345.7
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  61-  70, 17.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.46360007; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0748s; SamplesPerSecond = 3340.5
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  71-  80, 20.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.43939162; EvalErr[0]PerSample = 0.14000000; TotalTime = 0.0748s; SamplesPerSecond = 3342.9
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  81-  90, 22.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.38285670; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0748s; SamplesPerSecond = 3343.6
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  91- 100, 25.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.33783250; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0746s; SamplesPerSecond = 3351.8
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 101- 110, 27.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.30060340; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0744s; SamplesPerSecond = 3359.3
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 111- 120, 30.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.27074543; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0747s; SamplesPerSecond = 3344.5
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 121- 130, 32.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.22579667; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0748s; SamplesPerSecond = 3341.5
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 131- 140, 35.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.23038277; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0744s; SamplesPerSecond = 3358.2
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 141- 150, 37.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20249742; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0745s; SamplesPerSecond = 3354.2
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 151- 160, 40.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.23196002; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0746s; SamplesPerSecond = 3349.1
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 161- 170, 42.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19926723; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.8
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 171- 180, 45.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17553205; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.5
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 181- 190, 47.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20627378; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0746s; SamplesPerSecond = 3353.1
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 191- 200, 50.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.22915289; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0747s; SamplesPerSecond = 3348.4
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 201- 210, 52.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19774548; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3352.2
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 211- 220, 55.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19459308; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0745s; SamplesPerSecond = 3354.2
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 221- 230, 57.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15793758; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0746s; SamplesPerSecond = 3349.2
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 231- 240, 60.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16358363; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0746s; SamplesPerSecond = 3351.2
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 241- 250, 62.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20081019; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0745s; SamplesPerSecond = 3353.5
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 251- 260, 65.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14635403; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0745s; SamplesPerSecond = 3356.5
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 261- 270, 67.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19047122; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0746s; SamplesPerSecond = 3349.8
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 271- 280, 70.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19571785; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3357.2
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 281- 290, 72.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17891536; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0745s; SamplesPerSecond = 3353.5
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 291- 300, 75.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13980267; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0746s; SamplesPerSecond = 3349.6
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 301- 310, 77.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17881647; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0745s; SamplesPerSecond = 3353.5
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 311- 320, 80.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13208886; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0748s; SamplesPerSecond = 3344.4
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 321- 330, 82.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15493189; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0745s; SamplesPerSecond = 3355.3
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 331- 340, 85.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19823895; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.6
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 341- 350, 87.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.13146498; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0746s; SamplesPerSecond = 3351.6
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 351- 360, 90.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14052468; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3351.9
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 361- 370, 92.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12801816; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3353.5
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 371- 380, 95.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16700006; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 381- 390, 97.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20335808; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0745s; SamplesPerSecond = 3353.5
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 391- 400, 100.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14631413; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3352.5
MPI Rank 3: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 0.26781517; EvalErrPerSample = 0.1014; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.98548
MPI Rank 3: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 3: starting epoch 2 at record count 20000, and file position 0
MPI Rank 3: already there from last epoch
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, DataParallelSGD training (MyRank = 3, NumNodes = 4, NumGradientBits = 64).
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[   1-  10, 2.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12781997; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0744s; SamplesPerSecond = 3359.7
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  11-  20, 5.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17668945; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0748s; SamplesPerSecond = 3343.3
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  21-  30, 7.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14515421; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.5
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  31-  40, 10.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.15912577; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0747s; SamplesPerSecond = 3348.5
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  41-  50, 12.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17005286; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0747s; SamplesPerSecond = 3348.7
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  51-  60, 15.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18343662; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.9
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  61-  70, 17.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14768688; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0747s; SamplesPerSecond = 3348.7
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  71-  80, 20.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18051867; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.2
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  81-  90, 22.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15846717; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.0
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  91- 100, 25.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14530734; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0746s; SamplesPerSecond = 3353.1
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 101- 110, 27.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.13585330; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0744s; SamplesPerSecond = 3359.3
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 111- 120, 30.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13773835; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3352.4
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 121- 130, 32.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.11677767; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0744s; SamplesPerSecond = 3359.0
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 131- 140, 35.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16726846; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0745s; SamplesPerSecond = 3357.3
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 141- 150, 37.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12883820; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0744s; SamplesPerSecond = 3358.5
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 151- 160, 40.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17338728; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3353.5
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 161- 170, 42.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17523944; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3360.4
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 171- 180, 45.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14131285; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0746s; SamplesPerSecond = 3350.4
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 181- 190, 47.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19189513; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0747s; SamplesPerSecond = 3346.6
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 191- 200, 50.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.20920764; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.7
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 201- 210, 52.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18434781; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3356.8
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 211- 220, 55.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18185125; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0745s; SamplesPerSecond = 3355.8
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 221- 230, 57.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14112907; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0744s; SamplesPerSecond = 3361.6
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 231- 240, 60.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14945583; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.2
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 241- 250, 62.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20227807; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0746s; SamplesPerSecond = 3349.7
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 251- 260, 65.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12877544; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0744s; SamplesPerSecond = 3361.6
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 261- 270, 67.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18699253; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.4
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 271- 280, 70.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19561703; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0745s; SamplesPerSecond = 3354.8
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 281- 290, 72.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.16792520; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0745s; SamplesPerSecond = 3355.7
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 291- 300, 75.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12582208; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0745s; SamplesPerSecond = 3357.9
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 301- 310, 77.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17426202; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0743s; SamplesPerSecond = 3365.5
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 311- 320, 80.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12310390; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.7
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 321- 330, 82.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14804962; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0746s; SamplesPerSecond = 3352.1
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 331- 340, 85.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19809667; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0744s; SamplesPerSecond = 3361.2
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 341- 350, 87.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12615132; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0744s; SamplesPerSecond = 3358.0
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 351- 360, 90.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13788489; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0744s; SamplesPerSecond = 3358.5
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 361- 370, 92.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12806131; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3355.6
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 371- 380, 95.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16644406; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3359.4
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 381- 390, 97.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20590809; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3353.7
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 391- 400, 100.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14598417; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3353.3
MPI Rank 3: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 0.15974794; EvalErrPerSample = 0.0768; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.98215
MPI Rank 3: Starting Epoch 4: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 3: starting epoch 3 at record count 30000, and file position 0
MPI Rank 3: already there from last epoch
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, DataParallelSGD training (MyRank = 3, NumNodes = 4, NumGradientBits = 64).
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[   1-  10, 2.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12359632; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0746s; SamplesPerSecond = 3350.1
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  11-  20, 5.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18056814; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3351.9
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  21-  30, 7.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14218540; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0745s; SamplesPerSecond = 3354.8
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  31-  40, 10.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.15627835; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3355.0
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  41-  50, 12.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.16903217; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3352.8
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  51-  60, 15.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18249928; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3353.3
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  61-  70, 17.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14477886; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0746s; SamplesPerSecond = 3350.3
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  71-  80, 20.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18037574; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0746s; SamplesPerSecond = 3353.0
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  81-  90, 22.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.15857982; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0745s; SamplesPerSecond = 3356.7
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  91- 100, 25.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14475601; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0745s; SamplesPerSecond = 3354.7
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 101- 110, 27.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.13409513; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.2
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 111- 120, 30.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13725062; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0746s; SamplesPerSecond = 3352.8
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 121- 130, 32.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.11563837; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0744s; SamplesPerSecond = 3359.1
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 131- 140, 35.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16874556; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0744s; SamplesPerSecond = 3360.7
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 141- 150, 37.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12774890; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0745s; SamplesPerSecond = 3356.4
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 151- 160, 40.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.17148842; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0745s; SamplesPerSecond = 3357.5
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 161- 170, 42.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17599447; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3358.7
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 171- 180, 45.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14112030; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0744s; SamplesPerSecond = 3361.3
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 181- 190, 47.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.19336367; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0746s; SamplesPerSecond = 3349.1
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 191- 200, 50.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.20887975; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0745s; SamplesPerSecond = 3356.1
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 201- 210, 52.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18484689; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3353.9
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 211- 220, 55.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.18172436; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0746s; SamplesPerSecond = 3351.7
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 221- 230, 57.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14079120; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0744s; SamplesPerSecond = 3358.1
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 231- 240, 60.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14940547; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0744s; SamplesPerSecond = 3358.3
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 241- 250, 62.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20327788; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0744s; SamplesPerSecond = 3358.1
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 251- 260, 65.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12800091; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0748s; SamplesPerSecond = 3343.9
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 261- 270, 67.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.18736454; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.3
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 271- 280, 70.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19576131; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0743s; SamplesPerSecond = 3364.8
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 281- 290, 72.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.16579028; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0743s; SamplesPerSecond = 3362.9
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 291- 300, 75.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12479314; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0747s; SamplesPerSecond = 3348.5
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 301- 310, 77.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.17331117; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0745s; SamplesPerSecond = 3356.7
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 311- 320, 80.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.12259767; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3355.0
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 321- 330, 82.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.14755686; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0745s; SamplesPerSecond = 3354.5
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 331- 340, 85.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.19815974; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0745s; SamplesPerSecond = 3357.1
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 341- 350, 87.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12586333; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0745s; SamplesPerSecond = 3356.2
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 351- 360, 90.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.13777500; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0746s; SamplesPerSecond = 3352.8
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 361- 370, 92.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.12817677; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0745s; SamplesPerSecond = 3354.8
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 371- 380, 95.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.16645141; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0744s; SamplesPerSecond = 3358.9
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 381- 390, 97.5000%]: SamplesSeen = 250; TrainLossPerSample =  0.20630344; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0745s; SamplesPerSecond = 3357.1
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 391- 400, 100.0000%]: SamplesSeen = 250; TrainLossPerSample =  0.14607667; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0745s; SamplesPerSecond = 3355.3
MPI Rank 3: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 0.15927508; EvalErrPerSample = 0.0768; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.98158
MPI Rank 3: CNTKCommandTrainEnd: SimpleMultiGPU
MPI Rank 3: COMPLETED
MPI Rank 3: ~MPIWrapper