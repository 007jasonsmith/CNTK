=== Running mpiexec -n 4 /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../../SimpleMultiGPU.config currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../.. DeviceId=0 numCPUThreads=3 precision=float SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]] stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: all 4 nodes responded
requestnodes [MPIWrapper]: using 4 out of 4 MPI nodes (4 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (after change)]: all 4 nodes responded
mpihelper: we are cog 0 in a gearbox of 4
ping [requestnodes (before change)]: all 4 nodes responded
requestnodes [MPIWrapper]: using 4 out of 4 MPI nodes (4 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (after change)]: all 4 nodes responded
mpihelper: we are cog 1 in a gearbox of 4
ping [mpihelper]: 4 nodes pinging each other
ping [requestnodes (before change)]: all 4 nodes responded
requestnodes [MPIWrapper]: using 4 out of 4 MPI nodes (4 requested); we (2) are in (participating)
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (after change)]: all 4 nodes responded
mpihelper: we are cog 2 in a gearbox of 4
ping [mpihelper]: 4 nodes pinging each other
ping [requestnodes (before change)]: all 4 nodes responded
requestnodes [MPIWrapper]: using 4 out of 4 MPI nodes (4 requested); we (3) are in (participating)
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (after change)]: all 4 nodes responded
mpihelper: we are cog 3 in a gearbox of 4
ping [mpihelper]: 4 nodes pinging each other
ping [mpihelper]: all 4 nodes responded
ping [mpihelper]: 4 nodes pinging each other
ping [mpihelper]: all 4 nodes responded
ping [mpihelper]: all 4 nodes responded
ping [mpihelper]: all 4 nodes responded
Redirecting stderr to file /tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr_SimpleMultiGPU.logrank0
Redirecting stderr to file /tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr_SimpleMultiGPU.logrank1
Redirecting stderr to file /tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr_SimpleMultiGPU.logrank2
Redirecting stderr to file /tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr_SimpleMultiGPU.logrank3
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: Build info: 
MPI Rank 0: 
MPI Rank 0: 		Built time: Dec 15 2015 16:32:52
MPI Rank 0: 		Last modified date: Tue Dec 15 16:31:42 2015
MPI Rank 0: 		Build type: release
MPI Rank 0: 		Math lib: acml
MPI Rank 0: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 0: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 		Build Branch: master
MPI Rank 0: 		Build SHA1: 5e0017ac9c55c23d53cb524c8acb7d6d9bfd0269
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: running on localhost at 2015/12/15 16:38:54
MPI Rank 0: command line: 
MPI Rank 0: /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../../SimpleMultiGPU.config currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../.. DeviceId=0 numCPUThreads=3 precision=float SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]] stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr 
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: command = SimpleMultiGPU
MPI Rank 0: precision = "float"
MPI Rank 0: parallelTrain = true
MPI Rank 0: SimpleMultiGPU = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/Simple.dnn"
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 2:50*2:2
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 0 
MPI Rank 0:         minibatchSize = 25
MPI Rank 0:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 4
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 1
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "UCIFastReader"
MPI Rank 0:         file = "$DataDir$/SimpleDataTrain.txt"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "none"
MPI Rank 0:         verbosity = 1   
MPI Rank 0:         features = [
MPI Rank 0: dim = 2      
MPI Rank 0: start = 0    
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0: start = 2      
MPI Rank 0: dim = 1        
MPI Rank 0: labelDim = 2   
MPI Rank 0:             labelMappingFile = "$DataDir$/SimpleMapping.txt"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu
MPI Rank 0: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 0: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../..
MPI Rank 0: DeviceId=0
MPI Rank 0: numCPUThreads=3
MPI Rank 0: precision=float
MPI Rank 0: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]]
MPI Rank 0: stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: deviceId = 0
MPI Rank 0: command = SimpleMultiGPU
MPI Rank 0: precision = "float"
MPI Rank 0: parallelTrain = true
MPI Rank 0: SimpleMultiGPU = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/models/Simple.dnn"
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 2:50*2:2
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 0 
MPI Rank 0:         minibatchSize = 25
MPI Rank 0:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 4
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 1
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "UCIFastReader"
MPI Rank 0:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "none"
MPI Rank 0:         verbosity = 1   
MPI Rank 0:         features = [
MPI Rank 0: dim = 2      
MPI Rank 0: start = 0    
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0: start = 2      
MPI Rank 0: dim = 1        
MPI Rank 0: labelDim = 2   
MPI Rank 0:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu
MPI Rank 0: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 0: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../..
MPI Rank 0: DeviceId=0
MPI Rank 0: numCPUThreads=3
MPI Rank 0: precision=float
MPI Rank 0: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]]
MPI Rank 0: stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: SimpleMultiGPU.config:command=SimpleMultiGPU
MPI Rank 0: configparameters: SimpleMultiGPU.config:ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../..
MPI Rank 0: configparameters: SimpleMultiGPU.config:currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 0: configparameters: SimpleMultiGPU.config:DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 0: configparameters: SimpleMultiGPU.config:deviceId=0
MPI Rank 0: configparameters: SimpleMultiGPU.config:numCPUThreads=3
MPI Rank 0: configparameters: SimpleMultiGPU.config:parallelTrain=true
MPI Rank 0: configparameters: SimpleMultiGPU.config:precision=float
MPI Rank 0: configparameters: SimpleMultiGPU.config:RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu
MPI Rank 0: configparameters: SimpleMultiGPU.config:SimpleMultiGPU=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/models/Simple.dnn"
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 2:50*2:2
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 0 
MPI Rank 0:         minibatchSize = 25
MPI Rank 0:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 4
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 1
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "UCIFastReader"
MPI Rank 0:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "none"
MPI Rank 0:         verbosity = 1   
MPI Rank 0:         features = [
MPI Rank 0: dim = 2      
MPI Rank 0: start = 0    
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0: start = 2      
MPI Rank 0: dim = 1        
MPI Rank 0: labelDim = 2   
MPI Rank 0:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]]
MPI Rank 0: 
MPI Rank 0: configparameters: SimpleMultiGPU.config:stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: command: SimpleMultiGPU 
MPI Rank 0: precision = float
MPI Rank 0: Using 3 CPU threads
MPI Rank 0: CNTKModelPath: /tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/models/Simple.dnn
MPI Rank 0: CNTKCommandTrainInfo: SimpleMultiGPU : 4
MPI Rank 0: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 0: CNTKCommandTrainBegin: SimpleMultiGPU
MPI Rank 0: SimpleNetworkBuilder Using GPU 0
MPI Rank 0: Reading UCI file /home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt
MPI Rank 0: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 7 roots:
MPI Rank 0: 	InvStdOfFeatures = InvStdDev
MPI Rank 0: 	MeanOfFeatures = Mean
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 	Prior = Mean
MPI Rank 0: 	ScaledLogLikelihood = Minus
MPI Rank 0: 	PosteriorProb = Softmax
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 0: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 0: 
MPI Rank 0: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: SGD using GPU 0.
MPI Rank 0: 
MPI Rank 0: Training criterion node(s):
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: Evaluation criterion node(s):
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 	NodeName: InvStdOfFeatures
MPI Rank 0: 	NodeName: MeanOfFeatures
MPI Rank 0: 	NodeName: Prior
MPI Rank 0: starting at epoch 0 counting lines to determine record count
MPI Rank 0: 
MPI Rank 0:  10000 records found
MPI Rank 0: starting epoch 0 at record count 0, and file position 0
MPI Rank 0: already there from last epoch
MPI Rank 0: 
MPI Rank 0: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 0: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 0: starting epoch 0 at record count 0, and file position 0
MPI Rank 0: already there from last epoch
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 4, NumGradientBits = 32).
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[   1-  10]: SamplesSeen = 250; TrainLossPerSample =  0.69990410; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0950s; SamplesPerSecond = 2630.8
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  11-  20]: SamplesSeen = 250; TrainLossPerSample =  0.71488043; EvalErr[0]PerSample = 0.52000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.8
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  21-  30]: SamplesSeen = 250; TrainLossPerSample =  0.72921485; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0664s; SamplesPerSecond = 3762.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  31-  40]: SamplesSeen = 250; TrainLossPerSample =  0.70138618; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0659s; SamplesPerSecond = 3791.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  41-  50]: SamplesSeen = 250; TrainLossPerSample =  0.70634928; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0662s; SamplesPerSecond = 3773.9
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  51-  60]: SamplesSeen = 250; TrainLossPerSample =  0.71536466; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0663s; SamplesPerSecond = 3771.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  61-  70]: SamplesSeen = 250; TrainLossPerSample =  0.72050624; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0664s; SamplesPerSecond = 3763.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  71-  80]: SamplesSeen = 250; TrainLossPerSample =  0.79790369; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.3
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  81-  90]: SamplesSeen = 250; TrainLossPerSample =  0.69728621; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0664s; SamplesPerSecond = 3762.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  91- 100]: SamplesSeen = 250; TrainLossPerSample =  0.70723679; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0663s; SamplesPerSecond = 3770.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 101- 110]: SamplesSeen = 250; TrainLossPerSample =  0.71377596; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 111- 120]: SamplesSeen = 250; TrainLossPerSample =  0.69515217; EvalErr[0]PerSample = 0.43600000; TotalTime = 0.0665s; SamplesPerSecond = 3760.8
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 121- 130]: SamplesSeen = 250; TrainLossPerSample =  0.70017192; EvalErr[0]PerSample = 0.44000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 131- 140]: SamplesSeen = 250; TrainLossPerSample =  0.71812634; EvalErr[0]PerSample = 0.54800000; TotalTime = 0.0664s; SamplesPerSecond = 3766.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 141- 150]: SamplesSeen = 250; TrainLossPerSample =  0.72183238; EvalErr[0]PerSample = 0.48800000; TotalTime = 0.0662s; SamplesPerSecond = 3775.3
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 151- 160]: SamplesSeen = 250; TrainLossPerSample =  0.71768942; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0663s; SamplesPerSecond = 3773.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 161- 170]: SamplesSeen = 250; TrainLossPerSample =  0.74219448; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0667s; SamplesPerSecond = 3746.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 171- 180]: SamplesSeen = 250; TrainLossPerSample =  0.71921228; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 181- 190]: SamplesSeen = 250; TrainLossPerSample =  0.71526043; EvalErr[0]PerSample = 0.48400000; TotalTime = 0.0664s; SamplesPerSecond = 3766.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 191- 200]: SamplesSeen = 250; TrainLossPerSample =  0.71713067; EvalErr[0]PerSample = 0.53200000; TotalTime = 0.0662s; SamplesPerSecond = 3775.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 201- 210]: SamplesSeen = 250; TrainLossPerSample =  0.72000984; EvalErr[0]PerSample = 0.55600000; TotalTime = 0.0664s; SamplesPerSecond = 3767.9
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 211- 220]: SamplesSeen = 250; TrainLossPerSample =  0.72196297; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0662s; SamplesPerSecond = 3776.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 221- 230]: SamplesSeen = 250; TrainLossPerSample =  0.72045326; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0663s; SamplesPerSecond = 3773.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 231- 240]: SamplesSeen = 250; TrainLossPerSample =  0.71310286; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0663s; SamplesPerSecond = 3770.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 241- 250]: SamplesSeen = 250; TrainLossPerSample =  0.69643367; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0662s; SamplesPerSecond = 3778.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 251- 260]: SamplesSeen = 250; TrainLossPerSample =  0.70128137; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0664s; SamplesPerSecond = 3762.3
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 261- 270]: SamplesSeen = 250; TrainLossPerSample =  0.70787562; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0664s; SamplesPerSecond = 3765.3
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 271- 280]: SamplesSeen = 250; TrainLossPerSample =  0.69735067; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0663s; SamplesPerSecond = 3769.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 281- 290]: SamplesSeen = 250; TrainLossPerSample =  0.69218608; EvalErr[0]PerSample = 0.44800000; TotalTime = 0.0662s; SamplesPerSecond = 3773.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 291- 300]: SamplesSeen = 250; TrainLossPerSample =  0.69306465; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0662s; SamplesPerSecond = 3777.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 301- 310]: SamplesSeen = 250; TrainLossPerSample =  0.69221741; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0666s; SamplesPerSecond = 3754.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 311- 320]: SamplesSeen = 250; TrainLossPerSample =  0.68586373; EvalErr[0]PerSample = 0.35200000; TotalTime = 0.0664s; SamplesPerSecond = 3764.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 321- 330]: SamplesSeen = 250; TrainLossPerSample =  0.68989053; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0663s; SamplesPerSecond = 3770.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 331- 340]: SamplesSeen = 250; TrainLossPerSample =  0.70011236; EvalErr[0]PerSample = 0.45600000; TotalTime = 0.0663s; SamplesPerSecond = 3772.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 341- 350]: SamplesSeen = 250; TrainLossPerSample =  0.68763980; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0664s; SamplesPerSecond = 3762.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 351- 360]: SamplesSeen = 250; TrainLossPerSample =  0.66526014; EvalErr[0]PerSample = 0.38000000; TotalTime = 0.0661s; SamplesPerSecond = 3779.9
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 361- 370]: SamplesSeen = 250; TrainLossPerSample =  0.64982790; EvalErr[0]PerSample = 0.33200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 371- 380]: SamplesSeen = 250; TrainLossPerSample =  0.62656535; EvalErr[0]PerSample = 0.31600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 381- 390]: SamplesSeen = 250; TrainLossPerSample =  0.59063371; EvalErr[0]PerSample = 0.16000000; TotalTime = 0.0663s; SamplesPerSecond = 3771.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 391- 400]: SamplesSeen = 250; TrainLossPerSample =  0.51651080; EvalErr[0]PerSample = 0.12400000; TotalTime = 0.0664s; SamplesPerSecond = 3766.1
MPI Rank 0: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 0.69797053; EvalErrPerSample = 0.469; AvgLearningRatePerSample = 0.02; EpochTime=2.68297
MPI Rank 0: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 0: starting epoch 1 at record count 10000, and file position 0
MPI Rank 0: already there from last epoch
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 4, NumGradientBits = 32).
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.45857213; EvalErr[0]PerSample = 0.16800000; TotalTime = 0.0662s; SamplesPerSecond = 3774.3
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.38900969; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.8
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.32906155; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.6
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.30663502; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0662s; SamplesPerSecond = 3775.0
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.28205237; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.3
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.27714721; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0663s; SamplesPerSecond = 3768.6
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.23965650; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0664s; SamplesPerSecond = 3765.2
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.24140518; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3767.7
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20532407; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3765.1
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18672128; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0663s; SamplesPerSecond = 3768.5
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17728579; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0663s; SamplesPerSecond = 3768.7
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16924448; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0662s; SamplesPerSecond = 3776.0
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14452140; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0664s; SamplesPerSecond = 3763.1
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17856563; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0662s; SamplesPerSecond = 3777.6
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15153398; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0664s; SamplesPerSecond = 3765.3
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19202554; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3768.2
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18093141; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.6
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15229770; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3770.8
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19359720; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.5
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.21573393; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.2
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18802690; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0663s; SamplesPerSecond = 3773.1
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18568859; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0664s; SamplesPerSecond = 3766.9
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14676801; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0672s; SamplesPerSecond = 3721.6
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15257285; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0665s; SamplesPerSecond = 3758.6
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20065971; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.4
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13787786; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3775.8
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18601035; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0664s; SamplesPerSecond = 3765.2
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19517023; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3766.5
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17064151; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0663s; SamplesPerSecond = 3772.7
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13271005; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0663s; SamplesPerSecond = 3768.1
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17610734; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.9
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12815333; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0664s; SamplesPerSecond = 3764.0
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15138964; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3773.2
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19741338; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0665s; SamplesPerSecond = 3761.7
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12943972; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0661s; SamplesPerSecond = 3780.7
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13905275; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0662s; SamplesPerSecond = 3773.6
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12924392; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3771.4
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16747521; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.0
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20602978; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.5
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14621659; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3772.8
MPI Rank 0: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 0.19844924; EvalErrPerSample = 0.0795; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.6548
MPI Rank 0: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 0: starting epoch 2 at record count 20000, and file position 0
MPI Rank 0: already there from last epoch
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 4, NumGradientBits = 32).
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12721747; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3770.7
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17851233; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.1
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14537194; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0664s; SamplesPerSecond = 3766.6
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15840058; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0664s; SamplesPerSecond = 3763.4
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17108382; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0662s; SamplesPerSecond = 3775.8
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18186958; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.1
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14706615; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3773.6
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18052202; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3769.0
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15874881; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3771.3
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14583211; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0664s; SamplesPerSecond = 3762.5
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13455210; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.6
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13767960; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0665s; SamplesPerSecond = 3761.9
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.11707045; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0661s; SamplesPerSecond = 3781.2
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16912625; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0663s; SamplesPerSecond = 3773.1
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12827269; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0664s; SamplesPerSecond = 3765.7
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17180625; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.1
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17776409; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3769.0
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14174023; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0664s; SamplesPerSecond = 3766.4
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19369546; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0662s; SamplesPerSecond = 3776.1
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.20895111; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0667s; SamplesPerSecond = 3750.0
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18550487; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0662s; SamplesPerSecond = 3778.5
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18194220; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3769.3
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14062162; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0662s; SamplesPerSecond = 3773.8
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14818587; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0666s; SamplesPerSecond = 3756.1
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20432586; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0661s; SamplesPerSecond = 3780.8
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12925324; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.3
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18652427; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0662s; SamplesPerSecond = 3774.2
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19628880; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0663s; SamplesPerSecond = 3768.5
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16433160; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0664s; SamplesPerSecond = 3762.6
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12527682; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0663s; SamplesPerSecond = 3769.5
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17346738; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3764.4
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12324096; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3773.8
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14761144; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.2
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19828322; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0665s; SamplesPerSecond = 3761.0
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12637506; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0663s; SamplesPerSecond = 3773.5
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13768269; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0664s; SamplesPerSecond = 3765.1
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12944564; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.2
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16747367; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.2
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20816994; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.6
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14627797; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0666s; SamplesPerSecond = 3753.9
MPI Rank 0: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 0.15988915; EvalErrPerSample = 0.0767; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.65454
MPI Rank 0: Starting Epoch 4: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 0: starting epoch 3 at record count 30000, and file position 0
MPI Rank 0: already there from last epoch
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 4, NumGradientBits = 32).
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12473635; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0661s; SamplesPerSecond = 3779.9
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18150685; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.3
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14304177; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.6
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15654808; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3771.6
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17014027; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.2
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18164997; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3771.9
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14524681; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0664s; SamplesPerSecond = 3767.6
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18032099; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3771.5
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15867751; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.6
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14552112; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.3
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13346058; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.4
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13747921; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0664s; SamplesPerSecond = 3763.2
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.11608246; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.1
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17007660; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3766.9
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12757206; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0663s; SamplesPerSecond = 3770.1
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17046533; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0667s; SamplesPerSecond = 3750.3
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17760493; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0662s; SamplesPerSecond = 3775.6
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14147774; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3772.9
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19448587; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3769.4
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.20854011; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0662s; SamplesPerSecond = 3775.2
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18549754; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3771.6
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18142769; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0662s; SamplesPerSecond = 3773.9
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14047566; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0664s; SamplesPerSecond = 3767.3
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14859656; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.0
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20425905; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.6
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12876353; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0668s; SamplesPerSecond = 3743.2
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18669332; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0663s; SamplesPerSecond = 3767.9
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19566223; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0664s; SamplesPerSecond = 3767.0
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16285280; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0663s; SamplesPerSecond = 3769.7
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12486536; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0664s; SamplesPerSecond = 3765.7
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17248408; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0662s; SamplesPerSecond = 3776.0
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12294296; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3776.5
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14736346; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3768.2
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19809746; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.4
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12613310; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0664s; SamplesPerSecond = 3766.4
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13766444; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.7
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12913032; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0664s; SamplesPerSecond = 3764.9
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16719444; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0662s; SamplesPerSecond = 3774.0
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20767038; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.4
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14627363; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0664s; SamplesPerSecond = 3766.0
MPI Rank 0: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 0.15946706; EvalErrPerSample = 0.0767; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.65428
MPI Rank 0: CNTKCommandTrainEnd: SimpleMultiGPU
MPI Rank 0: COMPLETED
MPI Rank 0: ~MPIWrapper
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: Build info: 
MPI Rank 1: 
MPI Rank 1: 		Built time: Dec 15 2015 16:32:52
MPI Rank 1: 		Last modified date: Tue Dec 15 16:31:42 2015
MPI Rank 1: 		Build type: release
MPI Rank 1: 		Math lib: acml
MPI Rank 1: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 1: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 		Build Branch: master
MPI Rank 1: 		Build SHA1: 5e0017ac9c55c23d53cb524c8acb7d6d9bfd0269
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: running on localhost at 2015/12/15 16:38:54
MPI Rank 1: command line: 
MPI Rank 1: /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../../SimpleMultiGPU.config currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../.. DeviceId=0 numCPUThreads=3 precision=float SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]] stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr 
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: command = SimpleMultiGPU
MPI Rank 1: precision = "float"
MPI Rank 1: parallelTrain = true
MPI Rank 1: SimpleMultiGPU = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/Simple.dnn"
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 2:50*2:2
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 0 
MPI Rank 1:         minibatchSize = 25
MPI Rank 1:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 4
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 1
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "UCIFastReader"
MPI Rank 1:         file = "$DataDir$/SimpleDataTrain.txt"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "none"
MPI Rank 1:         verbosity = 1   
MPI Rank 1:         features = [
MPI Rank 1: dim = 2      
MPI Rank 1: start = 0    
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1: start = 2      
MPI Rank 1: dim = 1        
MPI Rank 1: labelDim = 2   
MPI Rank 1:             labelMappingFile = "$DataDir$/SimpleMapping.txt"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu
MPI Rank 1: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 1: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../..
MPI Rank 1: DeviceId=0
MPI Rank 1: numCPUThreads=3
MPI Rank 1: precision=float
MPI Rank 1: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]]
MPI Rank 1: stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: deviceId = 0
MPI Rank 1: command = SimpleMultiGPU
MPI Rank 1: precision = "float"
MPI Rank 1: parallelTrain = true
MPI Rank 1: SimpleMultiGPU = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/models/Simple.dnn"
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 2:50*2:2
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 0 
MPI Rank 1:         minibatchSize = 25
MPI Rank 1:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 4
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 1
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "UCIFastReader"
MPI Rank 1:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "none"
MPI Rank 1:         verbosity = 1   
MPI Rank 1:         features = [
MPI Rank 1: dim = 2      
MPI Rank 1: start = 0    
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1: start = 2      
MPI Rank 1: dim = 1        
MPI Rank 1: labelDim = 2   
MPI Rank 1:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu
MPI Rank 1: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 1: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../..
MPI Rank 1: DeviceId=0
MPI Rank 1: numCPUThreads=3
MPI Rank 1: precision=float
MPI Rank 1: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]]
MPI Rank 1: stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: SimpleMultiGPU.config:command=SimpleMultiGPU
MPI Rank 1: configparameters: SimpleMultiGPU.config:ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../..
MPI Rank 1: configparameters: SimpleMultiGPU.config:currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 1: configparameters: SimpleMultiGPU.config:DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 1: configparameters: SimpleMultiGPU.config:deviceId=0
MPI Rank 1: configparameters: SimpleMultiGPU.config:numCPUThreads=3
MPI Rank 1: configparameters: SimpleMultiGPU.config:parallelTrain=true
MPI Rank 1: configparameters: SimpleMultiGPU.config:precision=float
MPI Rank 1: configparameters: SimpleMultiGPU.config:RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu
MPI Rank 1: configparameters: SimpleMultiGPU.config:SimpleMultiGPU=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/models/Simple.dnn"
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 2:50*2:2
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 0 
MPI Rank 1:         minibatchSize = 25
MPI Rank 1:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 4
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 1
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "UCIFastReader"
MPI Rank 1:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "none"
MPI Rank 1:         verbosity = 1   
MPI Rank 1:         features = [
MPI Rank 1: dim = 2      
MPI Rank 1: start = 0    
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1: start = 2      
MPI Rank 1: dim = 1        
MPI Rank 1: labelDim = 2   
MPI Rank 1:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]]
MPI Rank 1: 
MPI Rank 1: configparameters: SimpleMultiGPU.config:stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: command: SimpleMultiGPU 
MPI Rank 1: precision = float
MPI Rank 1: Using 3 CPU threads
MPI Rank 1: CNTKModelPath: /tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/models/Simple.dnn
MPI Rank 1: CNTKCommandTrainInfo: SimpleMultiGPU : 4
MPI Rank 1: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 1: CNTKCommandTrainBegin: SimpleMultiGPU
MPI Rank 1: SimpleNetworkBuilder Using GPU 0
MPI Rank 1: Reading UCI file /home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt
MPI Rank 1: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 7 roots:
MPI Rank 1: 	MeanOfFeatures = Mean
MPI Rank 1: 	InvStdOfFeatures = InvStdDev
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 	Prior = Mean
MPI Rank 1: 	ScaledLogLikelihood = Minus
MPI Rank 1: 	PosteriorProb = Softmax
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node Prior, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 1: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 1: 
MPI Rank 1: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: SGD using GPU 0.
MPI Rank 1: 
MPI Rank 1: Training criterion node(s):
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: Evaluation criterion node(s):
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 	NodeName: InvStdOfFeatures
MPI Rank 1: 	NodeName: MeanOfFeatures
MPI Rank 1: 	NodeName: Prior
MPI Rank 1: starting at epoch 0 counting lines to determine record count
MPI Rank 1: 
MPI Rank 1:  10000 records found
MPI Rank 1: starting epoch 0 at record count 0, and file position 0
MPI Rank 1: already there from last epoch
MPI Rank 1: 
MPI Rank 1: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 1: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 1: starting epoch 0 at record count 0, and file position 0
MPI Rank 1: already there from last epoch
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 4, NumGradientBits = 32).
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[   1-  10]: SamplesSeen = 250; TrainLossPerSample =  0.69990410; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0951s; SamplesPerSecond = 2627.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  11-  20]: SamplesSeen = 250; TrainLossPerSample =  0.71488043; EvalErr[0]PerSample = 0.52000000; TotalTime = 0.0662s; SamplesPerSecond = 3773.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  21-  30]: SamplesSeen = 250; TrainLossPerSample =  0.72921485; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  31-  40]: SamplesSeen = 250; TrainLossPerSample =  0.70138618; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0659s; SamplesPerSecond = 3791.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  41-  50]: SamplesSeen = 250; TrainLossPerSample =  0.70634928; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.0
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  51-  60]: SamplesSeen = 250; TrainLossPerSample =  0.71536466; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0663s; SamplesPerSecond = 3771.0
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  61-  70]: SamplesSeen = 250; TrainLossPerSample =  0.72050624; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0665s; SamplesPerSecond = 3759.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  71-  80]: SamplesSeen = 250; TrainLossPerSample =  0.79790369; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  81-  90]: SamplesSeen = 250; TrainLossPerSample =  0.69728621; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0664s; SamplesPerSecond = 3767.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  91- 100]: SamplesSeen = 250; TrainLossPerSample =  0.70723679; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0664s; SamplesPerSecond = 3764.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 101- 110]: SamplesSeen = 250; TrainLossPerSample =  0.71377596; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 111- 120]: SamplesSeen = 250; TrainLossPerSample =  0.69515217; EvalErr[0]PerSample = 0.43600000; TotalTime = 0.0664s; SamplesPerSecond = 3765.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 121- 130]: SamplesSeen = 250; TrainLossPerSample =  0.70017192; EvalErr[0]PerSample = 0.44000000; TotalTime = 0.0663s; SamplesPerSecond = 3769.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 131- 140]: SamplesSeen = 250; TrainLossPerSample =  0.71812634; EvalErr[0]PerSample = 0.54800000; TotalTime = 0.0664s; SamplesPerSecond = 3766.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 141- 150]: SamplesSeen = 250; TrainLossPerSample =  0.72183238; EvalErr[0]PerSample = 0.48800000; TotalTime = 0.0662s; SamplesPerSecond = 3775.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 151- 160]: SamplesSeen = 250; TrainLossPerSample =  0.71768942; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0662s; SamplesPerSecond = 3773.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 161- 170]: SamplesSeen = 250; TrainLossPerSample =  0.74219448; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0667s; SamplesPerSecond = 3746.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 171- 180]: SamplesSeen = 250; TrainLossPerSample =  0.71921228; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 181- 190]: SamplesSeen = 250; TrainLossPerSample =  0.71526043; EvalErr[0]PerSample = 0.48400000; TotalTime = 0.0664s; SamplesPerSecond = 3765.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 191- 200]: SamplesSeen = 250; TrainLossPerSample =  0.71713067; EvalErr[0]PerSample = 0.53200000; TotalTime = 0.0662s; SamplesPerSecond = 3778.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 201- 210]: SamplesSeen = 250; TrainLossPerSample =  0.72000984; EvalErr[0]PerSample = 0.55600000; TotalTime = 0.0664s; SamplesPerSecond = 3767.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 211- 220]: SamplesSeen = 250; TrainLossPerSample =  0.72196297; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 221- 230]: SamplesSeen = 250; TrainLossPerSample =  0.72045326; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0662s; SamplesPerSecond = 3774.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 231- 240]: SamplesSeen = 250; TrainLossPerSample =  0.71310286; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0663s; SamplesPerSecond = 3768.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 241- 250]: SamplesSeen = 250; TrainLossPerSample =  0.69643367; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0662s; SamplesPerSecond = 3778.1
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 251- 260]: SamplesSeen = 250; TrainLossPerSample =  0.70128137; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0664s; SamplesPerSecond = 3762.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 261- 270]: SamplesSeen = 250; TrainLossPerSample =  0.70787562; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0664s; SamplesPerSecond = 3764.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 271- 280]: SamplesSeen = 250; TrainLossPerSample =  0.69735067; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0663s; SamplesPerSecond = 3769.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 281- 290]: SamplesSeen = 250; TrainLossPerSample =  0.69218608; EvalErr[0]PerSample = 0.44800000; TotalTime = 0.0663s; SamplesPerSecond = 3773.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 291- 300]: SamplesSeen = 250; TrainLossPerSample =  0.69306465; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0662s; SamplesPerSecond = 3777.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 301- 310]: SamplesSeen = 250; TrainLossPerSample =  0.69221741; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0665s; SamplesPerSecond = 3756.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 311- 320]: SamplesSeen = 250; TrainLossPerSample =  0.68586373; EvalErr[0]PerSample = 0.35200000; TotalTime = 0.0663s; SamplesPerSecond = 3768.0
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 321- 330]: SamplesSeen = 250; TrainLossPerSample =  0.68989053; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0664s; SamplesPerSecond = 3764.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 331- 340]: SamplesSeen = 250; TrainLossPerSample =  0.70011236; EvalErr[0]PerSample = 0.45600000; TotalTime = 0.0663s; SamplesPerSecond = 3772.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 341- 350]: SamplesSeen = 250; TrainLossPerSample =  0.68763980; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0663s; SamplesPerSecond = 3768.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 351- 360]: SamplesSeen = 250; TrainLossPerSample =  0.66526014; EvalErr[0]PerSample = 0.38000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 361- 370]: SamplesSeen = 250; TrainLossPerSample =  0.64982790; EvalErr[0]PerSample = 0.33200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 371- 380]: SamplesSeen = 250; TrainLossPerSample =  0.62656535; EvalErr[0]PerSample = 0.31600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.1
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 381- 390]: SamplesSeen = 250; TrainLossPerSample =  0.59063371; EvalErr[0]PerSample = 0.16000000; TotalTime = 0.0663s; SamplesPerSecond = 3771.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 391- 400]: SamplesSeen = 250; TrainLossPerSample =  0.51651080; EvalErr[0]PerSample = 0.12400000; TotalTime = 0.0664s; SamplesPerSecond = 3766.0
MPI Rank 1: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 0.69797053; EvalErrPerSample = 0.469; AvgLearningRatePerSample = 0.02; EpochTime=2.68316
MPI Rank 1: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 1: starting epoch 1 at record count 10000, and file position 0
MPI Rank 1: already there from last epoch
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 4, NumGradientBits = 32).
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.45857213; EvalErr[0]PerSample = 0.16800000; TotalTime = 0.0664s; SamplesPerSecond = 3766.5
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.38900969; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.6
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.32906155; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.8
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.30663502; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0662s; SamplesPerSecond = 3775.2
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.28205237; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.0
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.27714721; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0663s; SamplesPerSecond = 3768.9
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.23965650; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0663s; SamplesPerSecond = 3770.7
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.24140518; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3767.8
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20532407; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0665s; SamplesPerSecond = 3759.7
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18672128; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0663s; SamplesPerSecond = 3768.5
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17728579; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0663s; SamplesPerSecond = 3770.7
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16924448; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0662s; SamplesPerSecond = 3773.9
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14452140; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0663s; SamplesPerSecond = 3771.0
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17856563; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0663s; SamplesPerSecond = 3769.4
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15153398; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0663s; SamplesPerSecond = 3769.1
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19202554; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0664s; SamplesPerSecond = 3764.2
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18093141; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.4
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15229770; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3771.1
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19359720; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0662s; SamplesPerSecond = 3773.9
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.21573393; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.2
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18802690; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0663s; SamplesPerSecond = 3773.2
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18568859; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3770.9
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14676801; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0672s; SamplesPerSecond = 3719.4
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15257285; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3775.9
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20065971; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0666s; SamplesPerSecond = 3756.2
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13787786; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3775.8
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18601035; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.1
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19517023; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0665s; SamplesPerSecond = 3760.7
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17064151; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0663s; SamplesPerSecond = 3772.8
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13271005; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0664s; SamplesPerSecond = 3767.9
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17610734; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3773.0
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12815333; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0664s; SamplesPerSecond = 3764.1
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15138964; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3773.1
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19741338; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0664s; SamplesPerSecond = 3767.4
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12943972; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3775.0
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13905275; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3773.5
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12924392; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3771.3
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16747521; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.2
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20602978; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.3
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14621659; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3772.7
MPI Rank 1: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 0.19844924; EvalErrPerSample = 0.0795; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.655
MPI Rank 1: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 1: starting epoch 2 at record count 20000, and file position 0
MPI Rank 1: already there from last epoch
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 4, NumGradientBits = 32).
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12721747; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0664s; SamplesPerSecond = 3762.9
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17851233; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.4
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14537194; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0664s; SamplesPerSecond = 3766.8
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15840058; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0662s; SamplesPerSecond = 3775.2
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17108382; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3769.5
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18186958; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3768.0
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14706615; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0663s; SamplesPerSecond = 3773.5
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18052202; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.9
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15874881; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3771.3
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14583211; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0664s; SamplesPerSecond = 3762.6
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13455210; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.3
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13767960; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3768.1
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.11707045; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.4
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16912625; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0663s; SamplesPerSecond = 3772.5
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12827269; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0664s; SamplesPerSecond = 3766.4
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17180625; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.2
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17776409; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3768.7
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14174023; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3772.2
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19369546; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3770.6
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.20895111; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0666s; SamplesPerSecond = 3755.4
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18550487; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3773.0
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18194220; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3769.2
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14062162; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0662s; SamplesPerSecond = 3773.6
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14818587; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0665s; SamplesPerSecond = 3761.7
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20432586; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.2
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12925324; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0663s; SamplesPerSecond = 3773.2
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18652427; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0663s; SamplesPerSecond = 3772.3
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19628880; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0663s; SamplesPerSecond = 3768.3
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16433160; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0664s; SamplesPerSecond = 3766.2
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12527682; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0664s; SamplesPerSecond = 3765.8
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17346738; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3764.3
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12324096; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.0
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14761144; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.0
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19828322; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0665s; SamplesPerSecond = 3761.1
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12637506; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3773.7
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13768269; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0664s; SamplesPerSecond = 3767.6
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12944564; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.0
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16747367; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3772.7
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20816994; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.5
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14627797; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0665s; SamplesPerSecond = 3759.6
MPI Rank 1: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 0.15988915; EvalErrPerSample = 0.0767; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.65464
MPI Rank 1: Starting Epoch 4: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 1: starting epoch 3 at record count 30000, and file position 0
MPI Rank 1: already there from last epoch
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 4, NumGradientBits = 32).
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12473635; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.0
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18150685; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.2
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14304177; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.1
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15654808; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3771.6
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17014027; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.2
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18164997; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.0
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14524681; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0664s; SamplesPerSecond = 3767.3
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18032099; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3771.8
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15867751; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.4
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14552112; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.6
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13346058; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.5
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13747921; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0664s; SamplesPerSecond = 3763.2
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.11608246; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.1
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17007660; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3766.9
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12757206; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0662s; SamplesPerSecond = 3775.7
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17046533; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0667s; SamplesPerSecond = 3746.4
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17760493; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.0
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14147774; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3772.6
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19448587; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3769.5
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.20854011; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0662s; SamplesPerSecond = 3775.1
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18549754; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3771.3
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18142769; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0662s; SamplesPerSecond = 3774.3
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14047566; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0664s; SamplesPerSecond = 3767.4
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14859656; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.0
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20425905; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.4
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12876353; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0667s; SamplesPerSecond = 3749.0
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18669332; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0665s; SamplesPerSecond = 3762.2
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19566223; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0664s; SamplesPerSecond = 3767.4
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16285280; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0663s; SamplesPerSecond = 3769.6
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12486536; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0662s; SamplesPerSecond = 3773.8
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17248408; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0664s; SamplesPerSecond = 3767.7
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12294296; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3776.3
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14736346; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3768.4
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19809746; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.5
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12613310; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0664s; SamplesPerSecond = 3766.4
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13766444; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.2
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12913032; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0664s; SamplesPerSecond = 3767.0
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16719444; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3772.2
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20767038; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0662s; SamplesPerSecond = 3773.8
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14627363; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0664s; SamplesPerSecond = 3765.9
MPI Rank 1: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 0.15946706; EvalErrPerSample = 0.0767; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.65448
MPI Rank 1: CNTKCommandTrainEnd: SimpleMultiGPU
MPI Rank 1: COMPLETED
MPI Rank 1: ~MPIWrapper
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: Build info: 
MPI Rank 2: 
MPI Rank 2: 		Built time: Dec 15 2015 16:32:52
MPI Rank 2: 		Last modified date: Tue Dec 15 16:31:42 2015
MPI Rank 2: 		Build type: release
MPI Rank 2: 		Math lib: acml
MPI Rank 2: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 2: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 2: 		Build Branch: master
MPI Rank 2: 		Build SHA1: 5e0017ac9c55c23d53cb524c8acb7d6d9bfd0269
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: running on localhost at 2015/12/15 16:38:55
MPI Rank 2: command line: 
MPI Rank 2: /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../../SimpleMultiGPU.config currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../.. DeviceId=0 numCPUThreads=3 precision=float SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]] stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr 
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: deviceId = $DeviceId$
MPI Rank 2: command = SimpleMultiGPU
MPI Rank 2: precision = "float"
MPI Rank 2: parallelTrain = true
MPI Rank 2: SimpleMultiGPU = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "$RunDir$/models/Simple.dnn"
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 2:50*2:2
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 0 
MPI Rank 2:         minibatchSize = 25
MPI Rank 2:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 2:         momentumPerMB = 0.9
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 4
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 1
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "UCIFastReader"
MPI Rank 2:         file = "$DataDir$/SimpleDataTrain.txt"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "none"
MPI Rank 2:         verbosity = 1   
MPI Rank 2:         features = [
MPI Rank 2: dim = 2      
MPI Rank 2: start = 0    
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2: start = 2      
MPI Rank 2: dim = 1        
MPI Rank 2: labelDim = 2   
MPI Rank 2:             labelMappingFile = "$DataDir$/SimpleMapping.txt"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu
MPI Rank 2: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 2: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../..
MPI Rank 2: DeviceId=0
MPI Rank 2: numCPUThreads=3
MPI Rank 2: precision=float
MPI Rank 2: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]]
MPI Rank 2: stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: deviceId = 0
MPI Rank 2: command = SimpleMultiGPU
MPI Rank 2: precision = "float"
MPI Rank 2: parallelTrain = true
MPI Rank 2: SimpleMultiGPU = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/models/Simple.dnn"
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 2:50*2:2
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 0 
MPI Rank 2:         minibatchSize = 25
MPI Rank 2:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 2:         momentumPerMB = 0.9
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 4
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 1
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "UCIFastReader"
MPI Rank 2:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "none"
MPI Rank 2:         verbosity = 1   
MPI Rank 2:         features = [
MPI Rank 2: dim = 2      
MPI Rank 2: start = 0    
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2: start = 2      
MPI Rank 2: dim = 1        
MPI Rank 2: labelDim = 2   
MPI Rank 2:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu
MPI Rank 2: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 2: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../..
MPI Rank 2: DeviceId=0
MPI Rank 2: numCPUThreads=3
MPI Rank 2: precision=float
MPI Rank 2: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]]
MPI Rank 2: stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: configparameters: SimpleMultiGPU.config:command=SimpleMultiGPU
MPI Rank 2: configparameters: SimpleMultiGPU.config:ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../..
MPI Rank 2: configparameters: SimpleMultiGPU.config:currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 2: configparameters: SimpleMultiGPU.config:DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 2: configparameters: SimpleMultiGPU.config:deviceId=0
MPI Rank 2: configparameters: SimpleMultiGPU.config:numCPUThreads=3
MPI Rank 2: configparameters: SimpleMultiGPU.config:parallelTrain=true
MPI Rank 2: configparameters: SimpleMultiGPU.config:precision=float
MPI Rank 2: configparameters: SimpleMultiGPU.config:RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu
MPI Rank 2: configparameters: SimpleMultiGPU.config:SimpleMultiGPU=[
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/models/Simple.dnn"
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 2:50*2:2
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 0 
MPI Rank 2:         minibatchSize = 25
MPI Rank 2:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 2:         momentumPerMB = 0.9
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 4
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 1
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "UCIFastReader"
MPI Rank 2:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "none"
MPI Rank 2:         verbosity = 1   
MPI Rank 2:         features = [
MPI Rank 2: dim = 2      
MPI Rank 2: start = 0    
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2: start = 2      
MPI Rank 2: dim = 1        
MPI Rank 2: labelDim = 2   
MPI Rank 2:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]]
MPI Rank 2: 
MPI Rank 2: configparameters: SimpleMultiGPU.config:stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: command: SimpleMultiGPU 
MPI Rank 2: precision = float
MPI Rank 2: Using 3 CPU threads
MPI Rank 2: CNTKModelPath: /tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/models/Simple.dnn
MPI Rank 2: CNTKCommandTrainInfo: SimpleMultiGPU : 4
MPI Rank 2: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 2: CNTKCommandTrainBegin: SimpleMultiGPU
MPI Rank 2: SimpleNetworkBuilder Using GPU 0
MPI Rank 2: Reading UCI file /home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt
MPI Rank 2: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
MPI Rank 2: 
MPI Rank 2: Post-processing network...
MPI Rank 2: 
MPI Rank 2: 7 roots:
MPI Rank 2: 	MeanOfFeatures = Mean
MPI Rank 2: 	InvStdOfFeatures = InvStdDev
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 	Prior = Mean
MPI Rank 2: 	ScaledLogLikelihood = Minus
MPI Rank 2: 	PosteriorProb = Softmax
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node Prior, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 2: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 2: 
MPI Rank 2: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: Post-processing network complete.
MPI Rank 2: 
MPI Rank 2: SGD using GPU 0.
MPI Rank 2: 
MPI Rank 2: Training criterion node(s):
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 
MPI Rank 2: Evaluation criterion node(s):
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Allocating matrices for forward and/or backward propagation.
MPI Rank 2: 
MPI Rank 2: Precomputing --> 3 PreCompute nodes found.
MPI Rank 2: 
MPI Rank 2: 	NodeName: InvStdOfFeatures
MPI Rank 2: 	NodeName: MeanOfFeatures
MPI Rank 2: 	NodeName: Prior
MPI Rank 2: starting at epoch 0 counting lines to determine record count
MPI Rank 2: 
MPI Rank 2:  10000 records found
MPI Rank 2: starting epoch 0 at record count 0, and file position 0
MPI Rank 2: already there from last epoch
MPI Rank 2: 
MPI Rank 2: Precomputing --> Completed.
MPI Rank 2: 
MPI Rank 2: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 2: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 2: starting epoch 0 at record count 0, and file position 0
MPI Rank 2: already there from last epoch
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 4, NumGradientBits = 32).
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[   1-  10]: SamplesSeen = 250; TrainLossPerSample =  0.69990410; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0952s; SamplesPerSecond = 2625.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  11-  20]: SamplesSeen = 250; TrainLossPerSample =  0.71488043; EvalErr[0]PerSample = 0.52000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.0
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  21-  30]: SamplesSeen = 250; TrainLossPerSample =  0.72921485; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0662s; SamplesPerSecond = 3778.0
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  31-  40]: SamplesSeen = 250; TrainLossPerSample =  0.70138618; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0662s; SamplesPerSecond = 3773.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  41-  50]: SamplesSeen = 250; TrainLossPerSample =  0.70634928; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0661s; SamplesPerSecond = 3780.1
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  51-  60]: SamplesSeen = 250; TrainLossPerSample =  0.71536466; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0663s; SamplesPerSecond = 3771.0
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  61-  70]: SamplesSeen = 250; TrainLossPerSample =  0.72050624; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0665s; SamplesPerSecond = 3759.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  71-  80]: SamplesSeen = 250; TrainLossPerSample =  0.79790369; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  81-  90]: SamplesSeen = 250; TrainLossPerSample =  0.69728621; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0663s; SamplesPerSecond = 3769.1
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  91- 100]: SamplesSeen = 250; TrainLossPerSample =  0.70723679; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0664s; SamplesPerSecond = 3763.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 101- 110]: SamplesSeen = 250; TrainLossPerSample =  0.71377596; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 111- 120]: SamplesSeen = 250; TrainLossPerSample =  0.69515217; EvalErr[0]PerSample = 0.43600000; TotalTime = 0.0665s; SamplesPerSecond = 3758.0
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 121- 130]: SamplesSeen = 250; TrainLossPerSample =  0.70017192; EvalErr[0]PerSample = 0.44000000; TotalTime = 0.0662s; SamplesPerSecond = 3777.1
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 131- 140]: SamplesSeen = 250; TrainLossPerSample =  0.71812634; EvalErr[0]PerSample = 0.54800000; TotalTime = 0.0664s; SamplesPerSecond = 3766.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 141- 150]: SamplesSeen = 250; TrainLossPerSample =  0.72183238; EvalErr[0]PerSample = 0.48800000; TotalTime = 0.0662s; SamplesPerSecond = 3775.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 151- 160]: SamplesSeen = 250; TrainLossPerSample =  0.71768942; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0662s; SamplesPerSecond = 3773.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 161- 170]: SamplesSeen = 250; TrainLossPerSample =  0.74219448; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0667s; SamplesPerSecond = 3746.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 171- 180]: SamplesSeen = 250; TrainLossPerSample =  0.71921228; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 181- 190]: SamplesSeen = 250; TrainLossPerSample =  0.71526043; EvalErr[0]PerSample = 0.48400000; TotalTime = 0.0664s; SamplesPerSecond = 3763.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 191- 200]: SamplesSeen = 250; TrainLossPerSample =  0.71713067; EvalErr[0]PerSample = 0.53200000; TotalTime = 0.0661s; SamplesPerSecond = 3780.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 201- 210]: SamplesSeen = 250; TrainLossPerSample =  0.72000984; EvalErr[0]PerSample = 0.55600000; TotalTime = 0.0664s; SamplesPerSecond = 3767.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 211- 220]: SamplesSeen = 250; TrainLossPerSample =  0.72196297; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 221- 230]: SamplesSeen = 250; TrainLossPerSample =  0.72045326; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0662s; SamplesPerSecond = 3774.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 231- 240]: SamplesSeen = 250; TrainLossPerSample =  0.71310286; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0663s; SamplesPerSecond = 3768.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 241- 250]: SamplesSeen = 250; TrainLossPerSample =  0.69643367; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0662s; SamplesPerSecond = 3778.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 251- 260]: SamplesSeen = 250; TrainLossPerSample =  0.70128137; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0664s; SamplesPerSecond = 3762.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 261- 270]: SamplesSeen = 250; TrainLossPerSample =  0.70787562; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0664s; SamplesPerSecond = 3764.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 271- 280]: SamplesSeen = 250; TrainLossPerSample =  0.69735067; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0663s; SamplesPerSecond = 3769.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 281- 290]: SamplesSeen = 250; TrainLossPerSample =  0.69218608; EvalErr[0]PerSample = 0.44800000; TotalTime = 0.0663s; SamplesPerSecond = 3773.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 291- 300]: SamplesSeen = 250; TrainLossPerSample =  0.69306465; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0662s; SamplesPerSecond = 3778.0
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 301- 310]: SamplesSeen = 250; TrainLossPerSample =  0.69221741; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0664s; SamplesPerSecond = 3764.0
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 311- 320]: SamplesSeen = 250; TrainLossPerSample =  0.68586373; EvalErr[0]PerSample = 0.35200000; TotalTime = 0.0666s; SamplesPerSecond = 3752.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 321- 330]: SamplesSeen = 250; TrainLossPerSample =  0.68989053; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0663s; SamplesPerSecond = 3773.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 331- 340]: SamplesSeen = 250; TrainLossPerSample =  0.70011236; EvalErr[0]PerSample = 0.45600000; TotalTime = 0.0663s; SamplesPerSecond = 3770.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 341- 350]: SamplesSeen = 250; TrainLossPerSample =  0.68763980; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0663s; SamplesPerSecond = 3770.1
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 351- 360]: SamplesSeen = 250; TrainLossPerSample =  0.66526014; EvalErr[0]PerSample = 0.38000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.1
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 361- 370]: SamplesSeen = 250; TrainLossPerSample =  0.64982790; EvalErr[0]PerSample = 0.33200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 371- 380]: SamplesSeen = 250; TrainLossPerSample =  0.62656535; EvalErr[0]PerSample = 0.31600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.1
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 381- 390]: SamplesSeen = 250; TrainLossPerSample =  0.59063371; EvalErr[0]PerSample = 0.16000000; TotalTime = 0.0663s; SamplesPerSecond = 3771.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 391- 400]: SamplesSeen = 250; TrainLossPerSample =  0.51651080; EvalErr[0]PerSample = 0.12400000; TotalTime = 0.0664s; SamplesPerSecond = 3766.0
MPI Rank 2: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 0.69797053; EvalErrPerSample = 0.469; AvgLearningRatePerSample = 0.02; EpochTime=2.68327
MPI Rank 2: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 2: starting epoch 1 at record count 10000, and file position 0
MPI Rank 2: already there from last epoch
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 4, NumGradientBits = 32).
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.45857213; EvalErr[0]PerSample = 0.16800000; TotalTime = 0.0664s; SamplesPerSecond = 3762.7
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.38900969; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.3
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.32906155; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3775.0
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.30663502; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0662s; SamplesPerSecond = 3775.1
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.28205237; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.2
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.27714721; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0663s; SamplesPerSecond = 3768.9
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.23965650; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0662s; SamplesPerSecond = 3778.5
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.24140518; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3767.6
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20532407; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0666s; SamplesPerSecond = 3752.3
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18672128; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0663s; SamplesPerSecond = 3768.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17728579; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0663s; SamplesPerSecond = 3770.5
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16924448; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0662s; SamplesPerSecond = 3774.0
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14452140; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0664s; SamplesPerSecond = 3763.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17856563; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0661s; SamplesPerSecond = 3784.2
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15153398; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19202554; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0666s; SamplesPerSecond = 3754.8
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18093141; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.2
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15229770; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3771.3
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19359720; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.6
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.21573393; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.2
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18802690; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0663s; SamplesPerSecond = 3773.2
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18568859; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0661s; SamplesPerSecond = 3784.0
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14676801; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0674s; SamplesPerSecond = 3706.8
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15257285; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3775.5
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20065971; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0666s; SamplesPerSecond = 3756.5
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13787786; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3775.5
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18601035; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.3
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19517023; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0665s; SamplesPerSecond = 3759.5
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17064151; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0663s; SamplesPerSecond = 3772.8
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13271005; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0664s; SamplesPerSecond = 3767.8
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17610734; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3773.0
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12815333; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0664s; SamplesPerSecond = 3764.0
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15138964; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3773.1
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19741338; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0664s; SamplesPerSecond = 3767.6
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12943972; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3775.0
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13905275; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3773.5
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12924392; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3771.4
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16747521; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0662s; SamplesPerSecond = 3774.9
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20602978; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.6
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14621659; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3772.7
MPI Rank 2: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 0.19844924; EvalErrPerSample = 0.0795; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.65509
MPI Rank 2: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 2: starting epoch 2 at record count 20000, and file position 0
MPI Rank 2: already there from last epoch
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 4, NumGradientBits = 32).
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12721747; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0665s; SamplesPerSecond = 3759.1
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17851233; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.0
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14537194; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0664s; SamplesPerSecond = 3766.9
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15840058; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3773.2
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17108382; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0664s; SamplesPerSecond = 3764.1
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18186958; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0662s; SamplesPerSecond = 3775.4
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14706615; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0663s; SamplesPerSecond = 3773.6
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18052202; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.8
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15874881; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3771.2
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14583211; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0664s; SamplesPerSecond = 3762.6
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13455210; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.2
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13767960; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3768.1
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.11707045; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.6
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16912625; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0663s; SamplesPerSecond = 3772.4
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12827269; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0664s; SamplesPerSecond = 3766.3
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17180625; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.0
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17776409; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3769.0
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14174023; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3772.1
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19369546; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3770.5
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.20895111; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0666s; SamplesPerSecond = 3755.4
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18550487; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.9
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18194220; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0664s; SamplesPerSecond = 3766.6
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14062162; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0662s; SamplesPerSecond = 3776.3
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14818587; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0665s; SamplesPerSecond = 3761.8
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20432586; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.0
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12925324; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0663s; SamplesPerSecond = 3773.2
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18652427; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0663s; SamplesPerSecond = 3772.3
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19628880; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0662s; SamplesPerSecond = 3775.9
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16433160; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0663s; SamplesPerSecond = 3768.2
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12527682; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0666s; SamplesPerSecond = 3756.3
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17346738; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3764.3
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12324096; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3773.9
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14761144; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0662s; SamplesPerSecond = 3773.9
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19828322; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0665s; SamplesPerSecond = 3761.2
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12637506; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3773.6
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13768269; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0664s; SamplesPerSecond = 3767.7
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12944564; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0662s; SamplesPerSecond = 3773.8
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16747367; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0661s; SamplesPerSecond = 3780.1
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20816994; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.6
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14627797; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0666s; SamplesPerSecond = 3753.7
MPI Rank 2: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 0.15988915; EvalErrPerSample = 0.0767; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.65474
MPI Rank 2: Starting Epoch 4: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 2: starting epoch 3 at record count 30000, and file position 0
MPI Rank 2: already there from last epoch
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 4, NumGradientBits = 32).
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12473635; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3770.3
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18150685; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.2
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14304177; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.1
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15654808; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3771.5
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17014027; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.2
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18164997; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.0
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14524681; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0664s; SamplesPerSecond = 3767.3
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18032099; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3771.6
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15867751; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.3
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14552112; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.5
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13346058; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.4
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13747921; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0664s; SamplesPerSecond = 3763.2
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.11608246; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.0
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17007660; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3766.9
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12757206; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0662s; SamplesPerSecond = 3777.0
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17046533; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0668s; SamplesPerSecond = 3745.2
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17760493; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.0
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14147774; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3772.7
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19448587; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3769.5
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.20854011; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0662s; SamplesPerSecond = 3775.2
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18549754; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3771.4
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18142769; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0662s; SamplesPerSecond = 3774.0
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14047566; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0664s; SamplesPerSecond = 3767.6
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14859656; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.0
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20425905; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.2
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12876353; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0665s; SamplesPerSecond = 3756.9
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18669332; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0666s; SamplesPerSecond = 3754.5
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19566223; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0664s; SamplesPerSecond = 3767.4
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16285280; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0663s; SamplesPerSecond = 3769.7
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12486536; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0662s; SamplesPerSecond = 3775.1
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17248408; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0664s; SamplesPerSecond = 3766.1
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12294296; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3776.8
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14736346; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3768.4
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19809746; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.4
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12613310; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0664s; SamplesPerSecond = 3766.3
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13766444; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.3
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12913032; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0664s; SamplesPerSecond = 3767.0
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16719444; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3772.1
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20767038; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0662s; SamplesPerSecond = 3773.8
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14627363; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0664s; SamplesPerSecond = 3765.9
MPI Rank 2: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 0.15946706; EvalErrPerSample = 0.0767; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.65458
MPI Rank 2: CNTKCommandTrainEnd: SimpleMultiGPU
MPI Rank 2: COMPLETED
MPI Rank 2: ~MPIWrapper
MPI Rank 3: -------------------------------------------------------------------
MPI Rank 3: Build info: 
MPI Rank 3: 
MPI Rank 3: 		Built time: Dec 15 2015 16:32:52
MPI Rank 3: 		Last modified date: Tue Dec 15 16:31:42 2015
MPI Rank 3: 		Build type: release
MPI Rank 3: 		Math lib: acml
MPI Rank 3: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 3: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 3: 		Build Branch: master
MPI Rank 3: 		Build SHA1: 5e0017ac9c55c23d53cb524c8acb7d6d9bfd0269
MPI Rank 3: -------------------------------------------------------------------
MPI Rank 3: running on localhost at 2015/12/15 16:38:55
MPI Rank 3: command line: 
MPI Rank 3: /home/alrezni/src/cntk/build/release/bin/cntk configFile=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../../SimpleMultiGPU.config currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../.. DeviceId=0 numCPUThreads=3 precision=float SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]] stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr 
MPI Rank 3: 
MPI Rank 3: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 3: deviceId = $DeviceId$
MPI Rank 3: command = SimpleMultiGPU
MPI Rank 3: precision = "float"
MPI Rank 3: parallelTrain = true
MPI Rank 3: SimpleMultiGPU = [
MPI Rank 3:     action = "train"
MPI Rank 3:     modelPath = "$RunDir$/models/Simple.dnn"
MPI Rank 3:     traceLevel = 1
MPI Rank 3:     SimpleNetworkBuilder = [
MPI Rank 3:         layerSizes = 2:50*2:2
MPI Rank 3:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 3:         evalCriterion = "ErrorPrediction"
MPI Rank 3:         layerTypes = "Sigmoid"
MPI Rank 3:         initValueScale = 1.0
MPI Rank 3:         applyMeanVarNorm = true
MPI Rank 3:         uniformInit = true
MPI Rank 3:         needPrior = true
MPI Rank 3:     ]
MPI Rank 3:     SGD = [
MPI Rank 3:         epochSize = 0 
MPI Rank 3:         minibatchSize = 25
MPI Rank 3:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 3:         momentumPerMB = 0.9
MPI Rank 3:         dropoutRate = 0.0
MPI Rank 3:         maxEpochs = 4
MPI Rank 3:         ParallelTrain = [
MPI Rank 3:             parallelizationMethod = "DataParallelSGD"
MPI Rank 3:             DataParallelSGD = [
MPI Rank 3:                 gradientBits = 1
MPI Rank 3:             ]
MPI Rank 3:         ]
MPI Rank 3:     ]
MPI Rank 3:     reader = [
MPI Rank 3:         readerType = "UCIFastReader"
MPI Rank 3:         file = "$DataDir$/SimpleDataTrain.txt"
MPI Rank 3:         miniBatchMode = "partial"
MPI Rank 3:         randomize = "none"
MPI Rank 3:         verbosity = 1   
MPI Rank 3:         features = [
MPI Rank 3: dim = 2      
MPI Rank 3: start = 0    
MPI Rank 3:         ]
MPI Rank 3:         labels = [
MPI Rank 3: start = 2      
MPI Rank 3: dim = 1        
MPI Rank 3: labelDim = 2   
MPI Rank 3:             labelMappingFile = "$DataDir$/SimpleMapping.txt"
MPI Rank 3:         ]
MPI Rank 3:     ]
MPI Rank 3: ]
MPI Rank 3: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 3: RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu
MPI Rank 3: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 3: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../..
MPI Rank 3: DeviceId=0
MPI Rank 3: numCPUThreads=3
MPI Rank 3: precision=float
MPI Rank 3: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]]
MPI Rank 3: stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr
MPI Rank 3: 
MPI Rank 3: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 3: 
MPI Rank 3: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 3: deviceId = 0
MPI Rank 3: command = SimpleMultiGPU
MPI Rank 3: precision = "float"
MPI Rank 3: parallelTrain = true
MPI Rank 3: SimpleMultiGPU = [
MPI Rank 3:     action = "train"
MPI Rank 3:     modelPath = "/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/models/Simple.dnn"
MPI Rank 3:     traceLevel = 1
MPI Rank 3:     SimpleNetworkBuilder = [
MPI Rank 3:         layerSizes = 2:50*2:2
MPI Rank 3:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 3:         evalCriterion = "ErrorPrediction"
MPI Rank 3:         layerTypes = "Sigmoid"
MPI Rank 3:         initValueScale = 1.0
MPI Rank 3:         applyMeanVarNorm = true
MPI Rank 3:         uniformInit = true
MPI Rank 3:         needPrior = true
MPI Rank 3:     ]
MPI Rank 3:     SGD = [
MPI Rank 3:         epochSize = 0 
MPI Rank 3:         minibatchSize = 25
MPI Rank 3:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 3:         momentumPerMB = 0.9
MPI Rank 3:         dropoutRate = 0.0
MPI Rank 3:         maxEpochs = 4
MPI Rank 3:         ParallelTrain = [
MPI Rank 3:             parallelizationMethod = "DataParallelSGD"
MPI Rank 3:             DataParallelSGD = [
MPI Rank 3:                 gradientBits = 1
MPI Rank 3:             ]
MPI Rank 3:         ]
MPI Rank 3:     ]
MPI Rank 3:     reader = [
MPI Rank 3:         readerType = "UCIFastReader"
MPI Rank 3:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 3:         miniBatchMode = "partial"
MPI Rank 3:         randomize = "none"
MPI Rank 3:         verbosity = 1   
MPI Rank 3:         features = [
MPI Rank 3: dim = 2      
MPI Rank 3: start = 0    
MPI Rank 3:         ]
MPI Rank 3:         labels = [
MPI Rank 3: start = 2      
MPI Rank 3: dim = 1        
MPI Rank 3: labelDim = 2   
MPI Rank 3:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 3:         ]
MPI Rank 3:     ]
MPI Rank 3: ]
MPI Rank 3: currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 3: RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu
MPI Rank 3: DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 3: ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../..
MPI Rank 3: DeviceId=0
MPI Rank 3: numCPUThreads=3
MPI Rank 3: precision=float
MPI Rank 3: SimpleMultiGPU=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]]
MPI Rank 3: stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr
MPI Rank 3: 
MPI Rank 3: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 3: 
MPI Rank 3: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 3: configparameters: SimpleMultiGPU.config:command=SimpleMultiGPU
MPI Rank 3: configparameters: SimpleMultiGPU.config:ConfigDir=/home/alrezni/src/cntk/Tests/ParallelTraining/NoQuantization/SinglePrecision/../..
MPI Rank 3: configparameters: SimpleMultiGPU.config:currentDirectory=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 3: configparameters: SimpleMultiGPU.config:DataDir=/home/alrezni/src/cntk/Tests/ParallelTraining/Data
MPI Rank 3: configparameters: SimpleMultiGPU.config:deviceId=0
MPI Rank 3: configparameters: SimpleMultiGPU.config:numCPUThreads=3
MPI Rank 3: configparameters: SimpleMultiGPU.config:parallelTrain=true
MPI Rank 3: configparameters: SimpleMultiGPU.config:precision=float
MPI Rank 3: configparameters: SimpleMultiGPU.config:RunDir=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu
MPI Rank 3: configparameters: SimpleMultiGPU.config:SimpleMultiGPU=[
MPI Rank 3:     action = "train"
MPI Rank 3:     modelPath = "/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/models/Simple.dnn"
MPI Rank 3:     traceLevel = 1
MPI Rank 3:     SimpleNetworkBuilder = [
MPI Rank 3:         layerSizes = 2:50*2:2
MPI Rank 3:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 3:         evalCriterion = "ErrorPrediction"
MPI Rank 3:         layerTypes = "Sigmoid"
MPI Rank 3:         initValueScale = 1.0
MPI Rank 3:         applyMeanVarNorm = true
MPI Rank 3:         uniformInit = true
MPI Rank 3:         needPrior = true
MPI Rank 3:     ]
MPI Rank 3:     SGD = [
MPI Rank 3:         epochSize = 0 
MPI Rank 3:         minibatchSize = 25
MPI Rank 3:         learningRatesPerMB = 0.5:0.2*20:0.1
MPI Rank 3:         momentumPerMB = 0.9
MPI Rank 3:         dropoutRate = 0.0
MPI Rank 3:         maxEpochs = 4
MPI Rank 3:         ParallelTrain = [
MPI Rank 3:             parallelizationMethod = "DataParallelSGD"
MPI Rank 3:             DataParallelSGD = [
MPI Rank 3:                 gradientBits = 1
MPI Rank 3:             ]
MPI Rank 3:         ]
MPI Rank 3:     ]
MPI Rank 3:     reader = [
MPI Rank 3:         readerType = "UCIFastReader"
MPI Rank 3:         file = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt"
MPI Rank 3:         miniBatchMode = "partial"
MPI Rank 3:         randomize = "none"
MPI Rank 3:         verbosity = 1   
MPI Rank 3:         features = [
MPI Rank 3: dim = 2      
MPI Rank 3: start = 0    
MPI Rank 3:         ]
MPI Rank 3:         labels = [
MPI Rank 3: start = 2      
MPI Rank 3: dim = 1        
MPI Rank 3: labelDim = 2   
MPI Rank 3:             labelMappingFile = "/home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleMapping.txt"
MPI Rank 3:         ]
MPI Rank 3:     ]
MPI Rank 3: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=32]]]]
MPI Rank 3: 
MPI Rank 3: configparameters: SimpleMultiGPU.config:stderr=/tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/stderr
MPI Rank 3: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 3: command: SimpleMultiGPU 
MPI Rank 3: precision = float
MPI Rank 3: Using 3 CPU threads
MPI Rank 3: CNTKModelPath: /tmp/cntk-test-20151215163714.581330/ParallelTraining/NoQuantization_SinglePrecision@release_gpu/models/Simple.dnn
MPI Rank 3: CNTKCommandTrainInfo: SimpleMultiGPU : 4
MPI Rank 3: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 3: CNTKCommandTrainBegin: SimpleMultiGPU
MPI Rank 3: SimpleNetworkBuilder Using GPU 0
MPI Rank 3: Reading UCI file /home/alrezni/src/cntk/Tests/ParallelTraining/Data/SimpleDataTrain.txt
MPI Rank 3: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
MPI Rank 3: 
MPI Rank 3: Post-processing network...
MPI Rank 3: 
MPI Rank 3: 7 roots:
MPI Rank 3: 	MeanOfFeatures = Mean
MPI Rank 3: 	InvStdOfFeatures = InvStdDev
MPI Rank 3: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 3: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 3: 	Prior = Mean
MPI Rank 3: 	ScaledLogLikelihood = Minus
MPI Rank 3: 	PosteriorProb = Softmax
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 3: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node MeanOfFeatures, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node InvStdOfFeatures, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node EvalErrorPrediction, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> EvalErrorPrediction = ErrorPrediction(labels[2, MBSize 3], HLast[2, MBSize 0]) -> [1, 1]
MPI Rank 3: 
MPI Rank 3: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: Validating for node Prior, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: 
MPI Rank 3: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 3: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 3: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> labels = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> Prior = Mean(labels[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> LogOfPrior = Log(Prior[2, 1]) -> [2, 1]
MPI Rank 3: Validating --> ScaledLogLikelihood = Minus(HLast[2, MBSize 0], LogOfPrior[2, 1]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: Validating for node PosteriorProb, final verification.
MPI Rank 3: 
MPI Rank 3: Validating --> W2 = LearnableParameter -> [2, 50]
MPI Rank 3: Validating --> W1 = LearnableParameter -> [50, 50]
MPI Rank 3: Validating --> W0 = LearnableParameter -> [50, 2]
MPI Rank 3: Validating --> features = InputValue -> [2, MBSize 3]
MPI Rank 3: Validating --> MeanOfFeatures = Mean(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> InvStdOfFeatures = InvStdDev(features[2, MBSize 3]) -> [2, 1]
MPI Rank 3: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[2, MBSize 3], MeanOfFeatures[2, 1], InvStdOfFeatures[2, 1]) -> [2, MBSize 3]
MPI Rank 3: Validating --> W0*features = Times(W0[50, 2], MVNormalizedFeatures[2, MBSize 3]) -> [50, MBSize 3]
MPI Rank 3: Validating --> B0 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W0*features+B0 = Plus(W0*features[50, MBSize 3], B0[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H1 = Sigmoid(W0*features+B0[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W1*H1 = Times(W1[50, 50], H1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> B1 = LearnableParameter -> [50, 1]
MPI Rank 3: Validating --> W1*H1+B1 = Plus(W1*H1[50, MBSize 0], B1[50, 1]) -> [50, MBSize 0]
MPI Rank 3: Validating --> H2 = Sigmoid(W1*H1+B1[50, MBSize 0]) -> [50, MBSize 0]
MPI Rank 3: Validating --> W2*H1 = Times(W2[2, 50], H2[50, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: Validating --> B2 = LearnableParameter -> [2, 1]
MPI Rank 3: Validating --> HLast = Plus(W2*H1[2, MBSize 0], B2[2, 1]) -> [2, MBSize 0]
MPI Rank 3: Validating --> PosteriorProb = Softmax(HLast[2, MBSize 0]) -> [2, MBSize 0]
MPI Rank 3: 
MPI Rank 3: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 3: 
MPI Rank 3: Post-processing network complete.
MPI Rank 3: 
MPI Rank 3: SGD using GPU 0.
MPI Rank 3: 
MPI Rank 3: Training criterion node(s):
MPI Rank 3: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 3: 
MPI Rank 3: Evaluation criterion node(s):
MPI Rank 3: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Allocating matrices for forward and/or backward propagation.
MPI Rank 3: 
MPI Rank 3: Precomputing --> 3 PreCompute nodes found.
MPI Rank 3: 
MPI Rank 3: 	NodeName: InvStdOfFeatures
MPI Rank 3: 	NodeName: MeanOfFeatures
MPI Rank 3: 	NodeName: Prior
MPI Rank 3: starting at epoch 0 counting lines to determine record count
MPI Rank 3: 
MPI Rank 3:  10000 records found
MPI Rank 3: starting epoch 0 at record count 0, and file position 0
MPI Rank 3: already there from last epoch
MPI Rank 3: 
MPI Rank 3: Precomputing --> Completed.
MPI Rank 3: 
MPI Rank 3: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 3: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 3: starting epoch 0 at record count 0, and file position 0
MPI Rank 3: already there from last epoch
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, DataParallelSGD training (MyRank = 3, NumNodes = 4, NumGradientBits = 32).
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[   1-  10]: SamplesSeen = 250; TrainLossPerSample =  0.69990410; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0951s; SamplesPerSecond = 2629.1
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  11-  20]: SamplesSeen = 250; TrainLossPerSample =  0.71488043; EvalErr[0]PerSample = 0.52000000; TotalTime = 0.0662s; SamplesPerSecond = 3773.9
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  21-  30]: SamplesSeen = 250; TrainLossPerSample =  0.72921485; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0662s; SamplesPerSecond = 3774.4
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  31-  40]: SamplesSeen = 250; TrainLossPerSample =  0.70138618; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0662s; SamplesPerSecond = 3777.9
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  41-  50]: SamplesSeen = 250; TrainLossPerSample =  0.70634928; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0663s; SamplesPerSecond = 3768.0
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  51-  60]: SamplesSeen = 250; TrainLossPerSample =  0.71536466; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0663s; SamplesPerSecond = 3771.1
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  61-  70]: SamplesSeen = 250; TrainLossPerSample =  0.72050624; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0663s; SamplesPerSecond = 3770.3
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  71-  80]: SamplesSeen = 250; TrainLossPerSample =  0.79790369; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.5
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  81-  90]: SamplesSeen = 250; TrainLossPerSample =  0.69728621; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0665s; SamplesPerSecond = 3757.8
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[  91- 100]: SamplesSeen = 250; TrainLossPerSample =  0.70723679; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0662s; SamplesPerSecond = 3774.4
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 101- 110]: SamplesSeen = 250; TrainLossPerSample =  0.71377596; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.5
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 111- 120]: SamplesSeen = 250; TrainLossPerSample =  0.69515217; EvalErr[0]PerSample = 0.43600000; TotalTime = 0.0665s; SamplesPerSecond = 3758.6
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 121- 130]: SamplesSeen = 250; TrainLossPerSample =  0.70017192; EvalErr[0]PerSample = 0.44000000; TotalTime = 0.0662s; SamplesPerSecond = 3776.7
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 131- 140]: SamplesSeen = 250; TrainLossPerSample =  0.71812634; EvalErr[0]PerSample = 0.54800000; TotalTime = 0.0664s; SamplesPerSecond = 3766.5
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 141- 150]: SamplesSeen = 250; TrainLossPerSample =  0.72183238; EvalErr[0]PerSample = 0.48800000; TotalTime = 0.0662s; SamplesPerSecond = 3775.3
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 151- 160]: SamplesSeen = 250; TrainLossPerSample =  0.71768942; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0663s; SamplesPerSecond = 3773.5
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 161- 170]: SamplesSeen = 250; TrainLossPerSample =  0.74219448; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0667s; SamplesPerSecond = 3746.3
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 171- 180]: SamplesSeen = 250; TrainLossPerSample =  0.71921228; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.6
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 181- 190]: SamplesSeen = 250; TrainLossPerSample =  0.71526043; EvalErr[0]PerSample = 0.48400000; TotalTime = 0.0664s; SamplesPerSecond = 3766.1
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 191- 200]: SamplesSeen = 250; TrainLossPerSample =  0.71713067; EvalErr[0]PerSample = 0.53200000; TotalTime = 0.0662s; SamplesPerSecond = 3778.1
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 201- 210]: SamplesSeen = 250; TrainLossPerSample =  0.72000984; EvalErr[0]PerSample = 0.55600000; TotalTime = 0.0664s; SamplesPerSecond = 3765.5
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 211- 220]: SamplesSeen = 250; TrainLossPerSample =  0.72196297; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0662s; SamplesPerSecond = 3776.6
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 221- 230]: SamplesSeen = 250; TrainLossPerSample =  0.72045326; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0663s; SamplesPerSecond = 3772.7
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 231- 240]: SamplesSeen = 250; TrainLossPerSample =  0.71310286; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0663s; SamplesPerSecond = 3770.1
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 241- 250]: SamplesSeen = 250; TrainLossPerSample =  0.69643367; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0662s; SamplesPerSecond = 3778.3
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 251- 260]: SamplesSeen = 250; TrainLossPerSample =  0.70128137; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0664s; SamplesPerSecond = 3762.6
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 261- 270]: SamplesSeen = 250; TrainLossPerSample =  0.70787562; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0664s; SamplesPerSecond = 3765.1
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 271- 280]: SamplesSeen = 250; TrainLossPerSample =  0.69735067; EvalErr[0]PerSample = 0.52800000; TotalTime = 0.0663s; SamplesPerSecond = 3769.4
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 281- 290]: SamplesSeen = 250; TrainLossPerSample =  0.69218608; EvalErr[0]PerSample = 0.44800000; TotalTime = 0.0662s; SamplesPerSecond = 3773.7
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 291- 300]: SamplesSeen = 250; TrainLossPerSample =  0.69306465; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0662s; SamplesPerSecond = 3777.6
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 301- 310]: SamplesSeen = 250; TrainLossPerSample =  0.69221741; EvalErr[0]PerSample = 0.54000000; TotalTime = 0.0666s; SamplesPerSecond = 3751.2
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 311- 320]: SamplesSeen = 250; TrainLossPerSample =  0.68586373; EvalErr[0]PerSample = 0.35200000; TotalTime = 0.0664s; SamplesPerSecond = 3766.0
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 321- 330]: SamplesSeen = 250; TrainLossPerSample =  0.68989053; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0663s; SamplesPerSecond = 3772.4
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 331- 340]: SamplesSeen = 250; TrainLossPerSample =  0.70011236; EvalErr[0]PerSample = 0.45600000; TotalTime = 0.0663s; SamplesPerSecond = 3772.0
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 341- 350]: SamplesSeen = 250; TrainLossPerSample =  0.68763980; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0663s; SamplesPerSecond = 3768.3
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 351- 360]: SamplesSeen = 250; TrainLossPerSample =  0.66526014; EvalErr[0]PerSample = 0.38000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.1
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 361- 370]: SamplesSeen = 250; TrainLossPerSample =  0.64982790; EvalErr[0]PerSample = 0.33200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.4
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 371- 380]: SamplesSeen = 250; TrainLossPerSample =  0.62656535; EvalErr[0]PerSample = 0.31600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.1
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 381- 390]: SamplesSeen = 250; TrainLossPerSample =  0.59063371; EvalErr[0]PerSample = 0.16000000; TotalTime = 0.0663s; SamplesPerSecond = 3771.6
MPI Rank 3:  Epoch[ 1 of 4]-Minibatch[ 391- 400]: SamplesSeen = 250; TrainLossPerSample =  0.51651080; EvalErr[0]PerSample = 0.12400000; TotalTime = 0.0664s; SamplesPerSecond = 3766.0
MPI Rank 3: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 0.69797053; EvalErrPerSample = 0.469; AvgLearningRatePerSample = 0.02; EpochTime=2.68307
MPI Rank 3: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 3: starting epoch 1 at record count 10000, and file position 0
MPI Rank 3: already there from last epoch
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, DataParallelSGD training (MyRank = 3, NumNodes = 4, NumGradientBits = 32).
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.45857213; EvalErr[0]PerSample = 0.16800000; TotalTime = 0.0663s; SamplesPerSecond = 3770.3
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.38900969; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.6
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.32906155; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.4
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.30663502; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0662s; SamplesPerSecond = 3775.1
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.28205237; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.1
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.27714721; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0663s; SamplesPerSecond = 3769.0
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.23965650; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0664s; SamplesPerSecond = 3763.4
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.24140518; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3767.8
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20532407; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3767.1
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18672128; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0663s; SamplesPerSecond = 3768.5
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17728579; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0663s; SamplesPerSecond = 3768.6
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16924448; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0662s; SamplesPerSecond = 3776.0
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14452140; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0664s; SamplesPerSecond = 3763.5
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17856563; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0663s; SamplesPerSecond = 3769.3
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15153398; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0664s; SamplesPerSecond = 3763.3
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19202554; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0662s; SamplesPerSecond = 3777.3
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18093141; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.3
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15229770; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3771.2
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19359720; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0662s; SamplesPerSecond = 3773.7
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.21573393; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.1
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18802690; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0663s; SamplesPerSecond = 3773.4
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18568859; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3772.2
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14676801; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0673s; SamplesPerSecond = 3713.9
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15257285; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0663s; SamplesPerSecond = 3768.8
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20065971; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0664s; SamplesPerSecond = 3767.7
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13787786; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3775.6
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18601035; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0665s; SamplesPerSecond = 3760.7
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19517023; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0663s; SamplesPerSecond = 3770.9
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17064151; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0663s; SamplesPerSecond = 3772.8
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13271005; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0664s; SamplesPerSecond = 3767.7
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17610734; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3773.0
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12815333; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0664s; SamplesPerSecond = 3764.0
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15138964; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3773.1
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19741338; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0664s; SamplesPerSecond = 3767.5
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12943972; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3775.1
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13905275; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3773.6
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12924392; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3771.4
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16747521; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.1
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20602978; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.6
MPI Rank 3:  Epoch[ 2 of 4]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14621659; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3772.6
MPI Rank 3: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 0.19844924; EvalErrPerSample = 0.0795; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.6549
MPI Rank 3: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 3: starting epoch 2 at record count 20000, and file position 0
MPI Rank 3: already there from last epoch
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, DataParallelSGD training (MyRank = 3, NumNodes = 4, NumGradientBits = 32).
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12721747; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0664s; SamplesPerSecond = 3764.2
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17851233; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3773.4
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14537194; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0664s; SamplesPerSecond = 3766.6
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15840058; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0662s; SamplesPerSecond = 3775.2
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17108382; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0665s; SamplesPerSecond = 3761.8
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18186958; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0662s; SamplesPerSecond = 3776.0
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14706615; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0663s; SamplesPerSecond = 3773.6
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18052202; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.8
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15874881; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3771.3
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14583211; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0664s; SamplesPerSecond = 3762.6
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13455210; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.3
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13767960; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3768.0
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.11707045; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.6
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16912625; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0663s; SamplesPerSecond = 3772.9
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12827269; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0664s; SamplesPerSecond = 3766.0
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17180625; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.2
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17776409; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3769.0
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14174023; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0662s; SamplesPerSecond = 3774.3
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19369546; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3768.5
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.20895111; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0666s; SamplesPerSecond = 3755.2
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18550487; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.9
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18194220; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3769.2
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14062162; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.5
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14818587; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0665s; SamplesPerSecond = 3762.1
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20432586; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.0
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12925324; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.3
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18652427; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0662s; SamplesPerSecond = 3774.2
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19628880; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0665s; SamplesPerSecond = 3760.8
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16433160; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0665s; SamplesPerSecond = 3760.9
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12527682; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0662s; SamplesPerSecond = 3778.6
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17346738; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3764.3
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12324096; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3773.9
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14761144; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.1
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19828322; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0665s; SamplesPerSecond = 3761.1
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12637506; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0663s; SamplesPerSecond = 3773.5
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13768269; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0664s; SamplesPerSecond = 3767.6
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12944564; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.2
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16747367; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0664s; SamplesPerSecond = 3765.2
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20816994; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.5
MPI Rank 3:  Epoch[ 3 of 4]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14627797; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0665s; SamplesPerSecond = 3757.5
MPI Rank 3: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 0.15988915; EvalErrPerSample = 0.0767; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.65483
MPI Rank 3: Starting Epoch 4: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
MPI Rank 3: starting epoch 3 at record count 30000, and file position 0
MPI Rank 3: already there from last epoch
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, DataParallelSGD training (MyRank = 3, NumNodes = 4, NumGradientBits = 32).
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12473635; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0662s; SamplesPerSecond = 3775.7
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18150685; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.1
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14304177; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3773.1
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15654808; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3771.6
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17014027; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.3
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18164997; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3772.0
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14524681; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0664s; SamplesPerSecond = 3767.4
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18032099; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0663s; SamplesPerSecond = 3771.6
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15867751; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0663s; SamplesPerSecond = 3768.4
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14552112; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0662s; SamplesPerSecond = 3774.6
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13346058; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.3
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13747921; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0664s; SamplesPerSecond = 3763.3
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.11608246; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0663s; SamplesPerSecond = 3772.7
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17007660; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0664s; SamplesPerSecond = 3767.2
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12757206; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0664s; SamplesPerSecond = 3765.5
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17046533; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0666s; SamplesPerSecond = 3754.7
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17760493; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0662s; SamplesPerSecond = 3775.8
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14147774; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0663s; SamplesPerSecond = 3772.5
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19448587; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0663s; SamplesPerSecond = 3769.5
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.20854011; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0662s; SamplesPerSecond = 3775.1
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18549754; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0663s; SamplesPerSecond = 3771.2
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18142769; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0662s; SamplesPerSecond = 3774.2
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14047566; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0664s; SamplesPerSecond = 3767.5
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14859656; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0662s; SamplesPerSecond = 3775.0
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20425905; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0663s; SamplesPerSecond = 3771.5
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12876353; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0669s; SamplesPerSecond = 3739.2
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18669332; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0663s; SamplesPerSecond = 3771.9
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19566223; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0664s; SamplesPerSecond = 3767.2
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16285280; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0663s; SamplesPerSecond = 3769.7
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12486536; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0665s; SamplesPerSecond = 3758.7
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17248408; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0661s; SamplesPerSecond = 3783.2
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12294296; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0662s; SamplesPerSecond = 3776.3
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14736346; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0663s; SamplesPerSecond = 3768.5
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19809746; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0663s; SamplesPerSecond = 3772.4
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12613310; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0664s; SamplesPerSecond = 3766.3
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13766444; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0662s; SamplesPerSecond = 3774.2
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12913032; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0664s; SamplesPerSecond = 3765.0
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16719444; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0662s; SamplesPerSecond = 3774.0
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20767038; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0662s; SamplesPerSecond = 3773.9
MPI Rank 3:  Epoch[ 4 of 4]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14627363; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0664s; SamplesPerSecond = 3765.9
MPI Rank 3: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 0.15946706; EvalErrPerSample = 0.0767; AvgLearningRatePerSample = 0.0080000004; EpochTime=2.65438
MPI Rank 3: CNTKCommandTrainEnd: SimpleMultiGPU
MPI Rank 3: COMPLETED
MPI Rank 3: ~MPIWrapper