# configFile=$(SolutionDir)Examples/Text/PennTreebank/Config/S2SAutoEncoder.cntk  RunDir=$(SolutionDir)Examples/Text/PennTreebank/_run  RootDir=$(SolutionDir)Examples/Text/PennTreebank/_run  DataDir=$(SolutionDir)Examples/Text/PennTreebank/Data  ConfigDir=$(SolutionDir)Examples/Text/PennTreebank/Config  stderr=$(SolutionDir)Examples/Text/PennTreebank/_run/S2SAutoEncoder.log  DeviceId=-1  makeMode=false
####################
# WORK IN PROGRESS #
# WORK IN PROGRESS #
# WORK IN PROGRESS #
####################

# Command line to run in debugger:
# configFile=$(SolutionDir)Examples/Text/PennTreebank/Config/S2SAutoEncoder.cntk  RunDir=$(SolutionDir)Examples/Text/PennTreebank/_run  RootDir=$(SolutionDir)Examples/Text/PennTreebank/_run  DataDir=$(SolutionDir)Examples/Text/PennTreebank/Data  ConfigDir=$(SolutionDir)Examples/Text/PennTreebank/Config  stderr=$(SolutionDir)Examples/Text/PennTreebank/_run/S2SAutoEncoder.log  train=[SGD=[maxEpochs=1]]  confVocabSize=1000  DeviceId=-1  makeMode=false
# Append this for small set:
# train=[epochSize=2048]]  trainFile=ptb.small.train.txt  validFile=ptb.small.valid.txt testFile=ptb.small.test.txt

# It implements a sequence-to-sequence based auto-encoder.
# It encodes an entire sentence into a flat vector, and tries to regenerate it.
# Meant to be useful mainly understanding how to do sequence-to-sequence in CNTK.

# Parameters can be overwritten on the command line
# for example: cntk configFile=myConfigFile RootDir=../.. 
# For running from Visual Studio add
# currentDirectory=$(SolutionDir)/<path to corresponding data folder> 
RootDir = ".."

ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
CacheDir  = "$RootDir$/Data/cache"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"

# deviceId=-1 for CPU, >=0 for GPU devices, "auto" chooses the best GPU, or CPU if no usable GPU is available
deviceId = "auto"

command = writeWordAndClassInfo:train:test:write
#command = write

precision  = "float"
traceLevel = 1
modelPath  = "$ModelDir$/S2SAutoEncoder.dnn"

# uncomment the following line to write logs to a file
#stderr=$OutputDir$/rnnOutput

#numCPUThreads = 1

confVocabSize = 10000
confClassSize = 50
useStabilizer = true

trainFile = "ptb.train.txt"
#trainFile = "ptb.small.train.txt"
validFile = "ptb.valid.txt"
#validFile = "ptb.small.valid.txt"
testFile  = "ptb.test.txt"

#######################################
#  network definition                 #
#######################################

BrainScriptNetworkBuilder = (new ComputationNetwork [

    # import general config options from outside config values
    vocabDim = $confVocabSize$
    nbrClass = $confClassSize$

    useStabilizer = $useStabilizer$
    useEncoder = true                 // if false, this becomes a regular RNN

    # import some namespaces
    Parameters = BS.Parameters
    Constants  = BS.Constants
    Sequences  = BS.Sequences
    Loop       = BS.Loop
    Boolean    = BS.Boolean
    RecurrentLSTMP = BS.RNNs.RecurrentLSTMP

    embeddingDim = 300
    hiddenDim    = 200

    encoderDims[i:0..0] = hiddenDim # this defines the number of hidden layers in each
    decoderDims[i:0..0] = hiddenDim # both are one LSTM layer only for now

    # inputs
    #input = SparseInput(vocabDim, tag='feature');  # BUGBUG: Slice() not working for sparse, need to extend TensorView
    input = Input(vocabDim, tag='feature');

    # for an auto-encoder, both are the same
    labels = input

    # strip separators
    CastAs (type, data) = Sequences.Scatter (Constants.OnesLike (type), data)

    inputSequence =                        Slice (0, -1, input,  axis=-1)  # e.g. <s> A   B   C
    labelSequence = CastAs (inputSequence, Slice (1,  0, labels, axis=-1)) # e.g. A   B   C   </s>

    # embeddings
    # Note: Embeddings are linear, so better stabilize. We really should use BatchNorm.

    Einput = Parameters.Stabilize (Parameters.WeightParam (vocabDim, embeddingDim), enabled=useStabilizer) # note: this is assumed to be applied transposed, hence the swapped dimensions
    Elabel = Einput

    Embed (E, x) = TransposeTimes (E, x)

    inputEmbedded  = Embed (Einput, inputSequence)
    labelsEmbedded = Embed (Elabel, labelSequence)

    # encoder (processes user input)
    encoderOutputLayer = Length (encoderDims)-1
    encoder[i:0..encoderOutputLayer] =
        RecurrentLSTMP(if i == 0 then embeddingDim else encoderDims[i-1],
                       encoderDims[i], encoderDims[i],
                       if i == 0 then inputEmbedded else encoder[i-1],
                       enableSelfStabilization=useStabilizer)
    encoderOutput = encoder[encoderOutputLayer]

    # that last frame should be fed as an additional input to every decoder step
    # (This is the NYU model, not the Google model where the thought vector is only the initial state.)

    thoughtVector =
    [
        x = encoderOutput
        result = Boolean.If (Loop.IsLast (x),      // if last entry
                 /*then*/ x,                       // then copy that
                 /*else*/ FutureValue (0, result)) // else just propagate to the front  --TODO: Use Scatter() once input and labels are no longer the same.
    ].result
    thoughtVectorDim = encoderDims[encoderOutputLayer]

    # decoder
    # The decoder starts with hidden state 0
    # and takes as input [thoughtVector; previous word].

    isTraining = EnvironmentInput ('isTraining', tag='evaluation')
    #decoderFeedback = Boolean.If (isTraining, labelsEmbedded, decoderOutputEmbedded)
    decoderFeedback = labelsEmbedded
    delayedDecoderFeedback = Boolean.If (Loop.IsFirst (decoderFeedback), inputEmbedded, Loop.Previous (decoderFeedback))
    # ^^ inputEmbedded is used to get </s>. Must make this a constant once we separate input and output.

    decoderInputDim = if useEncoder then           thoughtVectorDim        + embeddingDim  else           embeddingDim
    decoderInput    = if useEncoder then RowStack (thoughtVector : delayedDecoderFeedback) else delayedDecoderFeedback
    decoderOutputLayer = Length (decoderDims)-1
    decoder[i:0..decoderOutputLayer] =
        if i == 0
        then RecurrentLSTMP (decoderInputDim, decoderDims[i], decoderDims[i],
                             decoderInput,
                             enableSelfStabilization=useStabilizer)
        else RecurrentLSTMP (decoderDims[i-1], decoderDims[i], decoderDims[i],
                             decoder[i-1],
                             enableSelfStabilization=useStabilizer)
    decoderDim = decoderDims[decoderOutputLayer]
    decoderOutput = decoder[decoderOutputLayer]

    # and add a softmax layer on top

    W(x) = Parameters.WeightParam (vocabDim, decoderDim) * Parameters.Stabilize (x, enabled=useStabilizer)
    B = Parameters.BiasParam (vocabDim)

    z = W(decoderOutput) + B;  // top-level input to Softmax

    decoderOutputEmbedded = Embed (Elabel, Hardmax (z))

    # training criteria
    ce  = CrossEntropyWithSoftmax(labelSequence, z, tag='criterion')   // this is the training objective
    wer = ErrorPrediction        (labelSequence, z, tag='evaluation')  // this also gets tracked

    #indexTestVals = Plus (decoderOutput, BS.Constants.Zero, tag='evaluation')
    #indexTest = Slice (0, 1, indexTestVals)
    #index = Where (RectifiedLinear (indexTest), tag='evaluation'); // for testing: this thresholds all negative numbers to 0=false, keeping positive as !=0=true
    #packedIndex = PackedIndex (indexTest, index, tag='evaluation')
    #filtered = GatherPacked (packedIndex, indexTestVals, tag='evaluation')
    #unfiltered = ScatterPacked (indexTest, packedIndex, filtered, tag='evaluation')

    //# define an LSTM with a per-sequence initialization value
    //# TODO: Not currently used. Move to BS library once tested.
    //RecurrentLSTMPWithInitValue (inputDim, outputDim, cellDim, x, initValue, enableSelfStabilization=false) =
    //[
    //    prevState =  // Loop.Previous (lstmState). BS can't apply Previous() to dictionaries, so expand it manually
    //    [
    //        h = Loop.Previous (lstmState.h);                     // hidden state(t-1)
    //        c = Loop.Previous (lstmState.c);                     // cell(t-1)
    //    ]
    //    # resettable LSTM function
    //    lstmState =
    //    [
    //        // apply the LSTM function to the input state; for first frame, we will ignore the output
    //        enableSelfStabilization1 = enableSelfStabilization // TODO: BS syntax needs to allow to say ^.enableSelfStabilization
    //        lstmState1 = LSTMP (inputDim, outputDim, cellDim, x, prevState, enableSelfStabilization=enableSelfStabilization1)
    //
    //        // the actual LSTM state (incl. its output) gets overwritten in the first frame by the initValue
    //        isFirst = Loop.IsFirst (x)
    //        h = Boolean.If (isFirst, initValue, lstmState1.h); // hidden state(t-1)
    //        c = Boolean.If (isFirst, initValue, lstmState1.c); // cell(t-1)
    //    ]
    //].lstmState.h // that's the value we return
])

#######################################
# shared reader definition            #
#######################################

reader = [
    file = "$DataDir$/$trainFile$"
    #randomize = "auto" # gets ignored

    readerType = LMSequenceReader
    mode = "softmax"
    nbruttsineachrecurrentiter = 0      # 0 means auto-fill given minibatch size
    cacheBlockSize = 100000000          # read block size. This value is large enough to load entire corpus at once

    # word class info
    wordclass = "$ModelDir$/vocab.txt"

    #### write definition
    # if writerType is set, we will cache to a binary file
    # if the binary file exists, we will use it instead of parsing this file
    #writerType = BinaryReader
    wfile = $CacheDir$\sequenceSentence.bin
    # if calculated size would be bigger, that is used instead
    wsize = 256
    #wrecords - number of records we should allocate space for in the file
    # files cannot be expanded, so this should be large enough. If known modify this element in config before creating file
    wrecords = 1000
    #windowSize - number of records we should include in BinaryWriter window
    windowSize = 10000

    # additional features sections
    # For input labels, we need both 'features' and the first labels section (called 'inputLabelsDef' below)
    input = [
        dim = 0     # no (explicit) labels   ...labelDim correct??
        ### write definition
        sectionType = "data"
    ]
    # labels sections
    # TODO: seems we must specify two labels (in and out), but labelType = "none" is allowed
    # labels sections  --this is required, but our labels are extracted from the inLabels
    inputLabelsDef = [ # BUGBUG: Make sure that this section name comes before the dummy output labels alphabetically
        dim = 1

        # vocabulary size
        labelType = "category"
        labelDim = "$confVocabSize$"
        labelMappingFile = "$ModelDir$/vocab.wl"
        beginSequence = "</s>"
        endSequence   = "</s>"

        #### Write definition ####
        # sizeof(unsigned) which is the label index type
        elementSize=4
        sectionType=labels
        mapping = [
          #redefine number of records for this section, since we don't need to save it for each data record
          wrecords=11
          #variable size so use an average string size
          elementSize=10
          sectionType=labelMapping
        ]
        category = [
          dim=11
          #elementSize=sizeof(ElemType) is default
          sectionType=categoryLabels
        ]
    ]
    outputDummy = [
        labelType = "none"
    ]
]

cvReader = [
    file = "$DataDir$/$validFile$"
    #randomize = "none" # gets ignored

    # everything below here is duplicated from 'reader'
    readerType = LMSequenceReader
    mode = "softmax"
    nbruttsineachrecurrentiter = 0      # 0 means auto-fill given minibatch size
    cacheBlockSize = 100000000          # read block size. This value is large enough to load entire corpus at once

    # word class info
    wordclass = "$ModelDir$/vocab.txt"

    #### write definition
    # if writerType is set, we will cache to a binary file
    # if the binary file exists, we will use it instead of parsing this file
    #writerType = BinaryReader
    wfile = $CacheDir$\sequenceSentence.bin
    # if calculated size would be bigger, that is used instead
    wsize = 256
    #wrecords - number of records we should allocate space for in the file
    # files cannot be expanded, so this should be large enough. If known modify this element in config before creating file
    wrecords = 1000
    #windowSize - number of records we should include in BinaryWriter window
    windowSize = 10000

    # additional features sections
    # For input labels, we need both 'features' and the first labels section (called 'inputLabelsDef' below)
    input = [
        dim = 0     # no (explicit) labels   ...labelDim correct??
        ### write definition
        sectionType = "data"
    ]
    # labels sections
    # TODO: seems we must specify two labels (in and out), but labelType = "none" is allowed
    # labels sections  --this is required, but our labels are extracted from the inLabels
    inputLabelsDef = [ # BUGBUG: Make sure that this section name comes before the dummy output labels alphabetically
        dim = 1

        # vocabulary size
        labelType = "category"
        labelDim = "$confVocabSize$"
        labelMappingFile = "$ModelDir$/vocab.wl"
        beginSequence = "</s>"
        endSequence   = "</s>"

        #### Write definition ####
        # sizeof(unsigned) which is the label index type
        elementSize=4
        sectionType=labels
        mapping = [
          #redefine number of records for this section, since we don't need to save it for each data record
          wrecords=11
          #variable size so use an average string size
          elementSize=10
          sectionType=labelMapping
        ]
        category = [
          dim=11
          #elementSize=sizeof(ElemType) is default
          sectionType=categoryLabels
        ]
    ]
    outputDummy = [
        labelType = "none"
    ]
]

#######################################
#  PREPARATION CONFIG                 #
#######################################

writeWordAndClassInfo = [
    action = "writeWordAndClass"
    inputFile = "$DataDir$/$trainFile$"
    beginSequence = "</s>"
    endSequence   = "</s>"
    outputMappingFile = "$ModelDir$/vocab.wl"
    outputVocabFile = "$ModelDir$/vocab.txt"
    outputWord2Cls  = "$ModelDir$/word2cls.txt"
    outputCls2Index = "$ModelDir$/cls2idx.txt"
    vocabSize = "$confVocabSize$"
    nbrClass = "$confClassSize$"
    cutoff = 0
    printValues = true
]

#######################################
#  TRAINING CONFIG                    #
#######################################

train = [
    action = "train"
    traceLevel = 1
    epochSize = 0               # (for quick tests, this can be overridden with something small)

    #BrainScriptNetworkBuilder is defined in outer scope

    SGD = [
        minibatchSize = 128*2:256:512
        learningRatesPerSample = 0.01
        momentumAsTimeConstant = 2500
        gradientClippingWithTruncation = true   # TODO: clip and truncate? What is the difference?
        clippingThresholdPerSample = 15.0
        maxEpochs = 16
        numMBsToShowResult = 100
        gradUpdateType = "none" # FSAdaGrad?
        loadBestModel = true

        # tracing (enable these for debugging)
        #traceNodeNamesReal = labelsEmbedded:decoderInput:"decoder[0].lstmState._privateInnards.ht":z.Plus_left.Times_right.result:z:ce
        #traceNodeNamesReal = labelsEmbedded:decoderInput:z:ce
        #traceNodeNamesReal = thoughtVector.result:zMask:z:ce:wer:indexTestVals:index:packedIndex:filtered:unfiltered:isTraining
        #traceNodeNamesCategory = inputSequence.out:labelSequence

        dropoutRate = 0.0

        # settings for Auto Adjust Learning Rate
        AutoAdjust = [
            autoAdjustLR = "adjustAfterEpoch"
            reduceLearnRateIfImproveLessThan = 0.001
            continueReduce = false
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            numMiniBatch4LRSearch = 100
            numPrevLearnRates = 5
            numBestSearchEpoch = 1
        ]
    ]
]

#######################################
#  TEST CONFIG                        #
#######################################

test = [
    action = "eval"

    # correspond to the number of words/characteres to train in a minibatch
    minibatchSize = 8192                # choose as large as memory allows for maximum GPU concurrency
    # need to be small since models are updated for each minibatch
    traceLevel = 1
    epochSize = 0

    reader = [
        file = "$DataDir$/$testFile$"
        #randomize = "none" # gets ignored
    
        # everything below here is duplicated from 'reader'
        readerType = LMSequenceReader
        mode = "softmax"
        nbruttsineachrecurrentiter = 0      # 0 means auto-fill given minibatch size
        cacheBlockSize = 100000000          # read block size. This value is large enough to load entire corpus at once
    
        # word class info
        wordclass = "$ModelDir$/vocab.txt"
    
        #### write definition
        # if writerType is set, we will cache to a binary file
        # if the binary file exists, we will use it instead of parsing this file
        #writerType = BinaryReader
        wfile = $CacheDir$\sequenceSentence.bin
        # if calculated size would be bigger, that is used instead
        wsize = 256
        #wrecords - number of records we should allocate space for in the file
        # files cannot be expanded, so this should be large enough. If known modify this element in config before creating file
        wrecords = 1000
        #windowSize - number of records we should include in BinaryWriter window
        windowSize = 10000
    
        # additional features sections
        # For input labels, we need both 'features' and the first labels section (called 'inputLabelsDef' below)
        input = [
            dim = 0     # no (explicit) labels   ...labelDim correct??
            ### write definition
            sectionType = "data"
        ]
        # labels sections
        # TODO: seems we must specify two labels (in and out), but labelType = "none" is allowed
        # labels sections  --this is required, but our labels are extracted from the inLabels
        inputLabelsDef = [ # BUGBUG: Make sure that this section name comes before the dummy output labels alphabetically
            dim = 1
    
            # vocabulary size
            labelType = "category"
            labelDim = "$confVocabSize$"
            labelMappingFile = "$ModelDir$/vocab.wl"
            beginSequence = "</s>"
            endSequence   = "</s>"
    
            #### Write definition ####
            # sizeof(unsigned) which is the label index type
            elementSize=4
            sectionType=labels
            mapping = [
              #redefine number of records for this section, since we don't need to save it for each data record
              wrecords=11
              #variable size so use an average string size
              elementSize=10
              sectionType=labelMapping
            ]
            category = [
              dim=11
              #elementSize=sizeof(ElemType) is default
              sectionType=categoryLabels
            ]
        ]
        outputDummy = [
            labelType = "none"
        ]
    ]
]

#######################################
#  WRITE CONFIG                       #
#######################################

# This will write out the log sentence probabilities
#   log P(W) = sum_i P(w_n | w_1..w_n-1)
# of all test sentences in the form log P(W)=<value>, one line per test
# sentence.
#
# This is accomplished by writing out the value of the CE criterion, which
# is an aggregate over all words in a minibatch. By presenting each sentence
# as a separate minibatch, the CE criterion is equal to the log sentence prob.
#
# This can be used for N-best rescoring if you prepare your N-best hypotheses
# as an input file with one line of text per hypothesis, where the output is
# the corresponding log probabilities, one value per line, in the same order.

write = [
    action = "write"

    # last trained model
    # We need to make a change:
    BrainScriptNetworkBuilder = ([

        # import some names
        Previous = BS.Loop.Previous
        IsFirst = BS.Loop.IsFirst

        # macro that extracts top D hypotheses from a 2D tensor
        # input: scores[w,n]    w = word index, d = hyp index in beam (d=0 is the best one)
        # output: [w,n1,n2]     n1 = input hyp index (prev top N); n2 = output hyp index (new top N)
        # e.g. 4 words, beam 3; view this as 3 [4x3] planes "drawn" 3-dimensionally, with depth being the 3rd tensor index
        GetTopNTensor (D, scores) = [
            # recurse over up to D elements
            # In each recursion:
            #  - pick the best over (w,n)
            #  - subtract it out from scores
            recursion[n:0..D-1] =
            [
                curBestScores = if n == 0                            # scores excluding paths better than rank n
                                then scores                          # top: just the path scores
                                else recursion[n - 1].nextBestScores # next: path scores after removing all we already got
                best = Hardmax (curBestScores)                       # best = one-hot over (w,n)
                nextBestScores = curBestScores + Constant (-1e30) .* best     # set the ones we've already got to -INF
                # TODO: use proper -INF; e.g. -1/0 in BS. Needs to be tested thoroughly.
            ]
            # splice them together into a single tensor
            asArray[n:0..D-1] = recursion[n].best  # this is a BS array consisting only of the 'best' field    ('from r in recursion select r.best')
            spliced = Splice (axis = 3, asArray)   # convert BS array index n to tensor index n1
        ].spliced

        beamDepth = 2 // 0=predict; 1=greedy; >1=beam

        oldModel = BS.Network.Load ("$modelPath$")

        predictingModel(model) = new ComputationNetwork [
            # compute top-N from output
            z = model.z

            top = Hardmax(z)

            topN = 10
            tokenSet = GetTopNTensor (topN, z) # [V x 1] -> [V x 1 x topN]
            tokenSetScores = tokenSet .* z   # [V x 1 x topN]
            # reduce back to a single column
            topHyps = tokenSetScores * ConstantTensor (1, (1 : topN))

            # our outputs
            labels1 = model.labels1
            top1     = BS.Sequences.Skip (1, top)
            topHyps1 = BS.Sequences.Skip (1, topHyps)
        ]

        # replace old decoderFeedback node by newDecoderFeedback
        decoderInput1 = oldModel.decoderInput.RowStackArgs[1]
        sentenceStart = oldModel.labelsEmbedded
        newDecoderInput1 = BS.Loop.Previous (BS.Boolean.If (IsFirst (oldModel.decoderOutputEmbedded), oldModel.labelsEmbedded, oldModel.decoderOutputEmbedded))
        # need a way to find a node by name, then this is easy
        # or a way to rename a node as an edit? finding and assigning is renaming
        # or a way to force-name nodes--Pass(, name='')? Can we explicitly name them?
        greedyDecodingModel = BS.Network.Edit (oldModel, BS.Network.Editing.ReplaceLinksToNode (decoderInput1, newDecoderInput1))

        # beam search of width 'beamDepth'
        beamDecodingModel = [
            # turning a regular LSTM to a top-N beam-search decoder:
            #  - add a depth axis of dimension N to all nodes inside the decoder loop
            #     - only needs the init signal for PastValue to be that
            #  - h and c must be shuffled versions of their PastValue
            #     - since what are the top N in one time step is not the top N in the next
            #     - reshufling and adding depth to the init signal can be done at the same place
            #  - decoder output must determine the top N and a reshuffling matrix for h and c
            #     - the current Hardmax needs to be replaced by something that outputs these (output depth N)
            #     - we get a N^2 depth: [V x (input set) x (top N output hypos)]
            #     - reshuffling matrix is reduction over V (multiply with row of V ones) plus possibly a transposition
            #  - we need an accumulated path score
            #     - start value constructed by stacking a 0 and N-1 -INF
            #  - for testing, we can output the current best in each step
            #     - that's a Slice()
            #  - traceback is a right-to-left recurrence
            #     - output best hypo conditioned on the path (it is already known)

            m1 = oldModel

            # this comes out of m1:
            #  decoder[0].prevState.h = PastValue (decoder[0].lstmState._privateInnards.ht) : [200 x 1 {1,200} x *] -> [200 x 1 {1,200} x *]
            #  decoder[0].prevState.c = PastValue (decoder[0].lstmState._privateInnards.ct) : [200 x 1 {1,200} x *] -> [200 x 1 {1,200} x *]
            #  decoderInput.inputs[1] = PastValue (labelsEmbedded) : [300 x 1 {1,300} x *] -> [300 x 1 {1,300} x *]

            hiddenDim    = m1.delayedDecoderFeedback.dim
            embeddingDim = m1.decoderOutputEmbedded.dim
            vocabSize    = m1.z.dim

            SkipFirst (x) = BS.Sequences.Skip (1, x)

            # replace every reference of these by PropagateTopN(of these)
            EditToPropagateTopN (name) = (node => if node.name == name then /*PropagateTopN*/ (node) else node)
            propagationEdits[i:0..3] = // TODO: implement and use { } syntax
                if      i == 0 then EditToPropagateTopN ('decoder[0].prevState.h')
                else if i == 1 then EditToPropagateTopN ('decoder[0].prevState.c')
                else if i == 2 then BS.Network.Editing.ReplaceLinksToNamedNode ('z1.out', z1)
                else                BS.Network.Editing.ReplaceLinksToNode (m1.decoderInput.RowStackArgs[1], PastValue ((embeddingDim : beamDepth), m1.decoderOutputEmbedded))
                # note: The RowStack operation should broadcast the thoughtVector automatically

            z1 = SkipFirst (decode)

            m2 = BS.Network.Edit (m1, propagationEdits)

            # propagate LSTM state to the right top-N rank given where that rank came from in the previous time step
            PropagateTopN (h /* or c*/) = Previous (Times (h.PastValueArgs[0], backPointers))
            # backPointers: [Dprev, Dnew]
            #   v--------- best came from input hyp[1]
            #     v------- second best came from input hyp[0]
            #       v----- third best came from input hyp[2]
            #   0 1 0
            #   1 0 0
            #   0 0 1
            # backPointers[:,n] one-hot encodes the best predecessor at top-N rank n
            # each column is a one-hot vector
            # multiplying with such a column from the right will select the column represented by the one-hot value

            # get decoder log likelihoods
            logLLs = m1.z    # [V x D] un-normalized log P(w|hist) + const
            #logLLs = logLLs1 + IsFirst (logLLs1) .* m1.input .* Constant (5000)   # give a boost to sentence start to enforce it to be output

            # decoder start token: 0 for first hyp, -INF for the others
            LOGZERO = -1e30
            initialPathScores = FirstAndOther (0, LOGZERO, beamDepth, axis = 2)  # row vector: [ 0, -INF, -INF, -INF, ... ]

            expandedPathScores = logLLs + PreviousOrDefault (pathScores, initialPathScores)        # [V x Dprev] un-normalized log (P(w|hist) * P(hist)) for all top D hypotheses
            # ^^ path expansion, [V x 1] + [1 x D] -> [V x D]

            tokenSet = GetTopNTensor (beamDepth, expandedPathScores) # [V x Dprev] -> [V x Dprev x Dnew]
            #   +-----+
            #   |0 0 0|
            #   |0 0 0|-+
            #   |0 1 0|0|     means word[2] in input hyp[1] was the best
            #   |0 0 0|0|-+
            #   +-----+0|0|
            #     |1 0 0|0|   means word[3] in input hyp[0] was the second best
            #     +-----+1|   means word[2] in input hyp[2] was the third best
            #       |0 0 0|
            #       +-----+

            backPointers = Times (ConstantTensor (1, vocabSize), tokenSet, outputRank = 0) # this is a tensor Times operation that reduces over the first dimension
            # before dropping the first dimension: [V x Dprev x Dnew]
            #   +-----+
            #   |0 1 0|       means input hyp[1] gave rise to the best    
            #   +-----+-+  
            #     |1 0 0|     means input hyp[0] gave rise to second best
            #     +-----+-+
            #       |0 0 1|   means input hyp[2] gave rise to third best
            #       +-----+
            # after: [Dprev,Dnew]        e.g. "0 1 0" goes into first column, vertically
            #   v--------- best came from input hyp[1]
            #     v------- second best came from input hyp[0]
            #       v----- third best came from input hyp[2]
            #   0 1 0
            #   1 0 0
            #   0 0 1
            # backPointers[:,n] one-hot encodes the best predecessor at top-N rank n

            tokenSetScores = tokenSet .* expandedPathScores   # [V x Dprev x Dnew]
            #   +-----+
            #   |0 0 0|
            #   |0 0 0|-+
            #   |0 x 0|0|     x denotes the accumulated path score max_w P(w|hyp[1])
            #   |0 0 0|0|-+
            #   +-----+0|0|
            #     |y 0 0|0|   y denotes the accumulated path score max_w P(w|hyp[0])
            #     +-----+z|   z denotes the accumulated path score max_w P(w|hyp[2])
            #       |0 0 0|
            #       +-----+
            pathScores = ConstantTensor (1, (1/*output dim*/ : /*reduction dims: */vocabSize : beamDepth/*Dprev*/)) * tokenSetScores  # [1 x Dnew]

            # traceback
            # last state: take Hardmax over pathScores
            # previous states: multiply wth respective backPointers matrix
            # -> hyp index for every time step
            # then finally use that to select the actual output   TODO: That's a sample-wise matrix product between two sequences!!!
            traceback = NextOrDefault (backPointers * traceback, finalHyp)    # [D] one-hot, multiplying backPointers from the left will select another one-hot row of backPointers
            finalHyp = FirstAndOther (1, 0, beamDepth, axis = 1)              # the final token is the top-scoring hypothesis, that is, hyp[0]

            # and the actual decoding output
            # This is the one to output.
            decode = [
                hyp = Times (tokenSet, traceback, outputRank = 2)   # [V x Dprev] 2D one-hot
                out = hyp * ConstantTensor (1, beamDepth)           # reduces over Dprev -> 1D one-hot
            ].out
            # traceback : [Dnew]
            # tokenSet : [V x Dprev x Dnew]
            #   +-----+
            #   |0 0 0|
            #   |0 0 0|-+
            #   |0 1 0|0|     means word[2] in input hyp[1] was the best
            #   |0 0 0|0|-+
            #   +-----+0|0|
            #     |1 0 0|0|   means word[3] in input hyp[0] was the second best
            #     +-----+1|   means word[2] in input hyp[2] was the third best
            #       |0 0 0|
            #       +-----+

            z = decode;

            # helper macros  --> move to BS.core.bs

            FirstAndOther (firstVal, otherVals, N, axis = 1) = [
                axis1 = axis  # TODO: Is this really necessary? Why? Then we need the syntax   axis = ^.axis or ^axis
                out = if axis == 1
                      then RowStack (ConstantTensor (firstVal, 1) : ConstantTensor (otherVals, N -1))   # col vector: [ 1; 0; 0; 0 ... ]
                      else Splice (Constant (firstVal) : ConstantTensor (otherVals, (1 : N -1)), axis = axis1 /*, axis*/)   # row vector: [ 0, -INF, -INF, -INF, ... ]
            ].out

            PreviousOrDefault (x, initialValue) =   # a delay node with initial value
                BS.Boolean.If (BS.Loop.IsFirst (x),
                /*then*/ initialValue,
                /*else*/ BS.Loop.Previous (x))
                #if BS.Loop.IsFirst (x)
                #then initialValue
                #else BS.Loop.Previous (x)

            NextOrDefault (x, initialValue) =   # a delay node with initial value
                BS.Boolean.If (BS.Loop.IsLast (x),
                /*then*/ initialValue,
                /*else*/ BS.Loop.Next (x))
                #if BS.Loop.IsLast (x)
                #then initialValue
                #else BS.Loop.Next (x)
        ].m2

        model = if beamDepth == 0 then predictingModel(oldModel)
           else if beamDepth == 1 then predictingModel(greedyDecodingModel)
           else                        beamDecodingModel

    ].model)

    #outputPath = "$OutputDir$/Write"
    outputPath = "-"                    # "-" will write to stdout; useful for debugging
    #outputNodeNames = z1.out:labels1 # when processing one sentence per minibatch, this is the sentence posterior
    #outputNodeNames = network.beamDecodingModel.z1.out:labels1 # when processing one sentence per minibatch, this is the sentence posterior

    # predicting model:
    #outputNodeNames = topHyps:top:labels1 # when processing one sentence per minibatch, this is the sentence posterior

    # greedy model:
    #outputNodeNames = topHyps:top:labels1 # when processing one sentence per minibatch, this is the sentence posterior

    outputNodeNames = labels1:network.beamDecodingModel.decode.out
    #outputNodeNames = labels1:network.beamDecodingModel.expandedPathScores
    #outputNodeNames = network.beamDecodingModel.pathScores:network.beamDecodingModel.traceback
    #   network.beamDecodingModel.tokenSetScores
    #   network.beamDecodingModel.pathScores
    #   network.beamDecodingModel.traceback
    #   network.beamDecodingModel.expandedPathScores

    format = [
        type = "sparse"
        transpose = false
        labelMappingFile = "$ModelDir$/vocab.wl"
        sequenceEpilogue = "\t// %s\n"
    ]

    #traceNodeNamesReal = network.beamDecodingModel.pathScores:network.beamDecodingModel.tokenSetScores:network.beamDecodingModel.expandedPathScores:network.beamDecodingModel.backPointers
    #traceNodeNamesCategory = network.beamDecodingModel.tokenSetScores
    traceNodeNamesSparse = network.beamDecodingModel.tokenSetScores:network.beamDecodingModel.backPointers:decoderOutputEmbedded.x

    minibatchSize = 8192                # choose this to be big enough for the longest sentence
    # need to be small since models are updated for each minibatch
    traceLevel = 1
    epochSize = 0

    reader = [
        file = "$DataDir$/$testFile$"
        #randomize = "none" # gets ignored
    
        # everything below here is duplicated from 'reader'
        readerType = LMSequenceReader
        mode = "softmax"
        nbruttsineachrecurrentiter = 1      # 1 means one per minibatch
        cacheBlockSize = 100000000          # read block size. This value is large enough to load entire corpus at once

        # word class info
        wordclass = "$ModelDir$/vocab.txt"

        #### write definition
        # if writerType is set, we will cache to a binary file
        # if the binary file exists, we will use it instead of parsing this file
        #writerType = BinaryReader
        wfile = $CacheDir$\sequenceSentence.bin
        # if calculated size would be bigger, that is used instead
        wsize = 256
        #wrecords - number of records we should allocate space for in the file
        # files cannot be expanded, so this should be large enough. If known modify this element in config before creating file
        wrecords = 1000
        #windowSize - number of records we should include in BinaryWriter window
        windowSize = 10000
    
        # additional features sections
        # For input labels, we need both 'features' and the first labels section (called 'inputLabelsDef' below)
        input = [
            dim = 0     # no (explicit) labels   ...labelDim correct??
            ### write definition
            sectionType = "data"
        ]
        # labels sections
        # TODO: seems we must specify two labels (in and out), but labelType = "none" is allowed
        # labels sections  --this is required, but our labels are extracted from the inLabels
        inputLabelsDef = [ # BUGBUG: Make sure that this section name comes before the dummy output labels alphabetically
            dim = 1

            # vocabulary size
            labelType = "category"
            labelDim = "$confVocabSize$"
            labelMappingFile = "$ModelDir$/vocab.wl"
            beginSequence = "</s>"
            endSequence   = "</s>"

            #### Write definition ####
            # sizeof(unsigned) which is the label index type
            elementSize=4
            sectionType=labels
            mapping = [
              #redefine number of records for this section, since we don't need to save it for each data record
              wrecords=11
              #variable size so use an average string size
              elementSize=10
              sectionType=labelMapping
            ]
            category = [
              dim=11
              #elementSize=sizeof(ElemType) is default
              sectionType=categoryLabels
            ]
        ]
        outputDummy = [
            labelType = "none"
        ]
    ]
]
