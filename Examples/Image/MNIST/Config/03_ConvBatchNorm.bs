#### Parameters ####

# Number of pixels
imageW = 28
imageH = 28

# Number of distinct labels
labelDim = 10

# Setup input dimension
features = ImageInput (imageW, imageH, 1)

# Setup classification labels
labels = Input (labelDim)

model(features) = [

    # Compute per pixel mean
    featMean = Mean(features)

    # Substract this mean to input
    featScaled = (features - featMean) .* Constant(1/256)


    # Convolution Filter Parameters (All the Convolution Layers use the same shape)
    kW      = 5  
    kH      = 5
    strideH = 1
    strideV = 1

    # Pooling Parameters (All the Pooling Layers use the same shape)
    poolW = 2
    poolH = 2
    poolHStride = 2
    poolVStride = 2

    # Hidden Layer Dimensions
    h1Dim = 128

    # Batch Normalization Constants
    scValue = 1
    bnTimeConst = 1024


    #### Neural Network Topology Description ####

    cMap1 = 16     # First convolution (5 * 5) Convolution Kernel, with 16 filters
    conv1 = ConvBNReLULayer (featScaled, kW, kH, 1, cMap1, strideH, strideV, 1, scValue, bnTimeConst)

    pool1 = MaxPooling(conv1, poolW, poolH, poolHStride, poolVStride)   # Output : [14 x 14 x 16]

    cMap2 = 32     # Second convolution, (5 * 5) Convolution Kernel, with 32 filters
    conv2 = ConvBNReLULayer(pool1, kW, kH, cMap1, cMap2, strideH, strideV, 1, scValue, bnTimeConst)

    pool2 = MaxPooling(conv2, poolW, poolH, poolHStride, poolVStride)   # Ouput [7 x 7 x 32]

    # Hidden Layer
    h1 = DNNBNReLULayer((7:7:cMap2), h1Dim, pool2, 1, scValue, bnTimeConst)

    # Linear Output Layer (without non linearity function)
    ol = DNNLayer(h1Dim, labelDim, h1, 1)

].ol

ol = model(features)

#### Usefull additional nodes ####

# Softmax convert the ol output ([-Inf, +Inf]) to [0, 1] which can be interpreted as probabilities
p = Softmax(ol)

#### Mandatory nodes ####

# Objective function to optimize by Gradient Descent
ce = CrossEntropyWithSoftmax(labels, ol)

# Error indicator
errs = ErrorPrediction(labels, ol)

# Special Nodes
featureNodes    = (features)
labelNodes      = (labels)
criterionNodes  = (ce)
evaluationNodes = (errs)
outputNodes     = (ol:p)