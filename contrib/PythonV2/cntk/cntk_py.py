# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cntk_py')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cntk_py')
    _cntk_py = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cntk_py', [dirname(__file__)])
        except ImportError:
            import _cntk_py
            return _cntk_py
        if fp is not None:
            try:
                _mod = imp.load_module('_cntk_py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cntk_py = swig_import_helper()
    del swig_import_helper
else:
    import _cntk_py
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cntk_py.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _cntk_py.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cntk_py.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cntk_py.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cntk_py.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cntk_py.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cntk_py.SwigPyIterator_copy(self)

    def next(self):
        return _cntk_py.SwigPyIterator_next(self)

    def __next__(self):
        return _cntk_py.SwigPyIterator___next__(self)

    def previous(self):
        return _cntk_py.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cntk_py.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cntk_py.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cntk_py.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cntk_py.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cntk_py.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cntk_py.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cntk_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _cntk_py.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _cntk_py.SHARED_PTR_DISOWN
InferredDimension = _cntk_py.InferredDimension
DataType_Unknown = _cntk_py.DataType_Unknown
DataType_Float = _cntk_py.DataType_Float
DataType_Double = _cntk_py.DataType_Double
StorageFormat_Dense = _cntk_py.StorageFormat_Dense
StorageFormat_SparseCSC = _cntk_py.StorageFormat_SparseCSC
StorageFormat_SparseBlockCol = _cntk_py.StorageFormat_SparseBlockCol

def IsSparseStorageFormat(storageFormat):
    return _cntk_py.IsSparseStorageFormat(storageFormat)
IsSparseStorageFormat = _cntk_py.IsSparseStorageFormat
DeviceKind_CPU = _cntk_py.DeviceKind_CPU
DeviceKind_GPU = _cntk_py.DeviceKind_GPU
class DeviceDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceDescriptor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Id(self):
        return _cntk_py.DeviceDescriptor_Id(self)

    def Type(self):
        return _cntk_py.DeviceDescriptor_Type(self)
    if _newclass:
        CPUDevice = staticmethod(_cntk_py.DeviceDescriptor_CPUDevice)
    else:
        CPUDevice = _cntk_py.DeviceDescriptor_CPUDevice
    if _newclass:
        GPUDevice = staticmethod(_cntk_py.DeviceDescriptor_GPUDevice)
    else:
        GPUDevice = _cntk_py.DeviceDescriptor_GPUDevice
    if _newclass:
        DefaultDevice = staticmethod(_cntk_py.DeviceDescriptor_DefaultDevice)
    else:
        DefaultDevice = _cntk_py.DeviceDescriptor_DefaultDevice
    __swig_destroy__ = _cntk_py.delete_DeviceDescriptor
    __del__ = lambda self: None
DeviceDescriptor_swigregister = _cntk_py.DeviceDescriptor_swigregister
DeviceDescriptor_swigregister(DeviceDescriptor)

def DeviceDescriptor_CPUDevice():
    return _cntk_py.DeviceDescriptor_CPUDevice()
DeviceDescriptor_CPUDevice = _cntk_py.DeviceDescriptor_CPUDevice

def DeviceDescriptor_GPUDevice(deviceId):
    return _cntk_py.DeviceDescriptor_GPUDevice(deviceId)
DeviceDescriptor_GPUDevice = _cntk_py.DeviceDescriptor_GPUDevice

def DeviceDescriptor_DefaultDevice():
    return _cntk_py.DeviceDescriptor_DefaultDevice()
DeviceDescriptor_DefaultDevice = _cntk_py.DeviceDescriptor_DefaultDevice

class NDShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NDShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NDShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cntk_py.new_NDShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dimensions(self):
        return _cntk_py.NDShape_Dimensions(self)

    def NumAxes(self):
        return _cntk_py.NDShape_NumAxes(self)

    def SubShape(self, *args):
        return _cntk_py.NDShape_SubShape(self, *args)

    def HasInferredDimension(self):
        return _cntk_py.NDShape_HasInferredDimension(self)

    def TotalSize(self):
        return _cntk_py.NDShape_TotalSize(self)

    def AsString(self):
        return _cntk_py.NDShape_AsString(self)

    def __getitem__(self, i):
        return _cntk_py.NDShape___getitem__(self, i)
    __swig_destroy__ = _cntk_py.delete_NDShape
    __del__ = lambda self: None
NDShape_swigregister = _cntk_py.NDShape_swigregister
NDShape_swigregister(NDShape)

class NDArrayView(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NDArrayView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NDArrayView, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cntk_py.delete_NDArrayView
    __del__ = lambda self: None

    def Device(self):
        return _cntk_py.NDArrayView_Device(self)

    def GetDataType(self):
        return _cntk_py.NDArrayView_GetDataType(self)

    def GetStorageFormat(self):
        return _cntk_py.NDArrayView_GetStorageFormat(self)

    def Shape(self):
        return _cntk_py.NDArrayView_Shape(self)

    def IsSparse(self):
        return _cntk_py.NDArrayView_IsSparse(self)

    def IsReadOnly(self):
        return _cntk_py.NDArrayView_IsReadOnly(self)

    def DeepClone(self, readOnly=False):
        return _cntk_py.NDArrayView_DeepClone(self, readOnly)

    def Alias(self, readOnly=False):
        return _cntk_py.NDArrayView_Alias(self, readOnly)

    def CopyFrom(self, source):
        return _cntk_py.NDArrayView_CopyFrom(self, source)

    def __init__(self, *args):
        this = _cntk_py.new_NDArrayView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ToNumPy(self):
        return _cntk_py.NDArrayView_ToNumPy(self)
    if _newclass:
        RandomUniformFloat = staticmethod(_cntk_py.NDArrayView_RandomUniformFloat)
    else:
        RandomUniformFloat = _cntk_py.NDArrayView_RandomUniformFloat
    if _newclass:
        RandomUniformDouble = staticmethod(_cntk_py.NDArrayView_RandomUniformDouble)
    else:
        RandomUniformDouble = _cntk_py.NDArrayView_RandomUniformDouble
NDArrayView_swigregister = _cntk_py.NDArrayView_swigregister
NDArrayView_swigregister(NDArrayView)

def NDArrayViewFloat(*args):
    val = _cntk_py.new_NDArrayViewFloat(*args)
    return val

def NDArrayViewDouble(*args):
    val = _cntk_py.new_NDArrayViewDouble(*args)
    return val

def NDArrayView_RandomUniformFloat(*args):
    return _cntk_py.NDArrayView_RandomUniformFloat(*args)
NDArrayView_RandomUniformFloat = _cntk_py.NDArrayView_RandomUniformFloat

def NDArrayView_RandomUniformDouble(*args):
    return _cntk_py.NDArrayView_RandomUniformDouble(*args)
NDArrayView_RandomUniformDouble = _cntk_py.NDArrayView_RandomUniformDouble

class NDMask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NDMask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NDMask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cntk_py.new_NDMask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cntk_py.delete_NDMask
    __del__ = lambda self: None

    def MaskSection(self, sectionOffset, sectionShape):
        return _cntk_py.NDMask_MaskSection(self, sectionOffset, sectionShape)

    def Clear(self):
        return _cntk_py.NDMask_Clear(self)

    def Device(self):
        return _cntk_py.NDMask_Device(self)

    def Shape(self):
        return _cntk_py.NDMask_Shape(self)

    def DeepClone(self):
        return _cntk_py.NDMask_DeepClone(self)

    def Alias(self):
        return _cntk_py.NDMask_Alias(self)

    def CopyFrom(self, source):
        return _cntk_py.NDMask_CopyFrom(self, source)
NDMask_swigregister = _cntk_py.NDMask_swigregister
NDMask_swigregister(NDMask)

class Value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Value, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cntk_py.new_Value(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cntk_py.delete_Value
    __del__ = lambda self: None

    def Data(self):
        return _cntk_py.Value_Data(self)

    def Mask(self):
        return _cntk_py.Value_Mask(self)

    def DeepClone(self, readOnly=False):
        return _cntk_py.Value_DeepClone(self, readOnly)

    def Alias(self, readOnly=False):
        return _cntk_py.Value_Alias(self, readOnly)

    def CopyFrom(self, source):
        return _cntk_py.Value_CopyFrom(self, source)
Value_swigregister = _cntk_py.Value_swigregister
Value_swigregister(Value)

class Axis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Axis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Axis, name)
    __repr__ = _swig_repr

    def IsStaticAxis(self):
        return _cntk_py.Axis_IsStaticAxis(self)

    def StaticAxisIndex(self):
        return _cntk_py.Axis_StaticAxisIndex(self)
    if _newclass:
        DefaultDynamicAxis = staticmethod(_cntk_py.Axis_DefaultDynamicAxis)
    else:
        DefaultDynamicAxis = _cntk_py.Axis_DefaultDynamicAxis
    if _newclass:
        BatchAxis = staticmethod(_cntk_py.Axis_BatchAxis)
    else:
        BatchAxis = _cntk_py.Axis_BatchAxis
    if _newclass:
        AllAxes = staticmethod(_cntk_py.Axis_AllAxes)
    else:
        AllAxes = _cntk_py.Axis_AllAxes

    def Name(self):
        return _cntk_py.Axis_Name(self)

    def __init__(self, *args):
        this = _cntk_py.new_Axis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cntk_py.delete_Axis
    __del__ = lambda self: None
Axis_swigregister = _cntk_py.Axis_swigregister
Axis_swigregister(Axis)

def Axis_DefaultDynamicAxis():
    return _cntk_py.Axis_DefaultDynamicAxis()
Axis_DefaultDynamicAxis = _cntk_py.Axis_DefaultDynamicAxis

def Axis_BatchAxis():
    return _cntk_py.Axis_BatchAxis()
Axis_BatchAxis = _cntk_py.Axis_BatchAxis

def Axis_AllAxes():
    return _cntk_py.Axis_AllAxes()
Axis_AllAxes = _cntk_py.Axis_AllAxes


def __ne__(*args):
    return _cntk_py.__ne__(*args)
__ne__ = _cntk_py.__ne__
VariableKind_Input = _cntk_py.VariableKind_Input
VariableKind_Output = _cntk_py.VariableKind_Output
VariableKind_Parameter = _cntk_py.VariableKind_Parameter
VariableKind_Constant = _cntk_py.VariableKind_Constant
VariableKind_Placeholder = _cntk_py.VariableKind_Placeholder
class Variable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Variable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cntk_py.new_Variable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Shape(self):
        return _cntk_py.Variable_Shape(self)

    def DynamicAxes(self):
        return _cntk_py.Variable_DynamicAxes(self)

    def Kind(self):
        return _cntk_py.Variable_Kind(self)

    def IsSparse(self):
        return _cntk_py.Variable_IsSparse(self)

    def IsInput(self):
        return _cntk_py.Variable_IsInput(self)

    def IsOutput(self):
        return _cntk_py.Variable_IsOutput(self)

    def IsParameter(self):
        return _cntk_py.Variable_IsParameter(self)

    def IsConstant(self):
        return _cntk_py.Variable_IsConstant(self)

    def IsPlaceholder(self):
        return _cntk_py.Variable_IsPlaceholder(self)

    def Name(self):
        return _cntk_py.Variable_Name(self)

    def Owner(self):
        return _cntk_py.Variable_Owner(self)

    def GetDataType(self):
        return _cntk_py.Variable_GetDataType(self)

    def NeedsGradient(self):
        return _cntk_py.Variable_NeedsGradient(self)

    def __hash__(self):
        return _cntk_py.Variable___hash__(self)
    __swig_destroy__ = _cntk_py.delete_Variable
    __del__ = lambda self: None
Variable_swigregister = _cntk_py.Variable_swigregister
Variable_swigregister(Variable)

def Variable_eq(first, second):
    return _cntk_py.Variable_eq(first, second)
Variable_eq = _cntk_py.Variable_eq


def __eq__(*args):
    return _cntk_py.__eq__(*args)
__eq__ = _cntk_py.__eq__
class Parameter(Variable):
    __swig_setmethods__ = {}
    for _s in [Variable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameter, name, value)
    __swig_getmethods__ = {}
    for _s in [Variable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Parameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cntk_py.new_Parameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self):
        return _cntk_py.Parameter_Value(self)

    def __hash__(self):
        return _cntk_py.Parameter___hash__(self)
    __swig_destroy__ = _cntk_py.delete_Parameter
    __del__ = lambda self: None
Parameter_swigregister = _cntk_py.Parameter_swigregister
Parameter_swigregister(Parameter)

class Constant(Variable):
    __swig_setmethods__ = {}
    for _s in [Variable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constant, name, value)
    __swig_getmethods__ = {}
    for _s in [Variable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Constant, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cntk_py.new_Constant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self):
        return _cntk_py.Constant_Value(self)

    def __hash__(self):
        return _cntk_py.Constant___hash__(self)
    __swig_destroy__ = _cntk_py.delete_Constant
    __del__ = lambda self: None
Constant_swigregister = _cntk_py.Constant_swigregister
Constant_swigregister(Constant)

def ConstantFloat(*args):
    val = _cntk_py.new_ConstantFloat(*args)
    return val

def ConstantDouble(*args):
    val = _cntk_py.new_ConstantDouble(*args)
    return val

class Placeholder(Variable):
    __swig_setmethods__ = {}
    for _s in [Variable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Placeholder, name, value)
    __swig_getmethods__ = {}
    for _s in [Variable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Placeholder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cntk_py.new_Placeholder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __hash__(self):
        return _cntk_py.Placeholder___hash__(self)
    __swig_destroy__ = _cntk_py.delete_Placeholder
    __del__ = lambda self: None
Placeholder_swigregister = _cntk_py.Placeholder_swigregister
Placeholder_swigregister(Placeholder)

class BackPropState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackPropState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackPropState, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Function(self):
        return _cntk_py.BackPropState_Function(self)
    __swig_destroy__ = _cntk_py.delete_BackPropState
    __del__ = lambda self: None
BackPropState_swigregister = _cntk_py.BackPropState_swigregister
BackPropState_swigregister(BackPropState)

class Function(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Function, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Function, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Forward(self, *args):
        return _cntk_py.Function_Forward(self, *args)

    def Backward(self, state, rootGradientValues, backPropagatedGradientValuesForInputs):
        return _cntk_py.Function_Backward(self, state, rootGradientValues, backPropagatedGradientValuesForInputs)
    __swig_destroy__ = _cntk_py.delete_Function
    __del__ = lambda self: None

    def Name(self):
        return _cntk_py.Function_Name(self)

    def RootFunction(self):
        return _cntk_py.Function_RootFunction(self)

    def Inputs(self):
        return _cntk_py.Function_Inputs(self)

    def Output(self):
        return _cntk_py.Function_Output(self)

    def Outputs(self):
        return _cntk_py.Function_Outputs(self)

    def Arguments(self):
        return _cntk_py.Function_Arguments(self)

    def Parameters(self):
        return _cntk_py.Function_Parameters(self)

    def Constants(self):
        return _cntk_py.Function_Constants(self)

    def Placeholders(self):
        return _cntk_py.Function_Placeholders(self)

    def ReplacePlaceholders(self, placeholderReplacements):
        return _cntk_py.Function_ReplacePlaceholders(self, placeholderReplacements)
Function_swigregister = _cntk_py.Function_swigregister
Function_swigregister(Function)


def Times(*args):
    return _cntk_py.Times(*args)
Times = _cntk_py.Times

def Plus(*args):
    return _cntk_py.Plus(*args)
Plus = _cntk_py.Plus

def Sigmoid(*args):
    return _cntk_py.Sigmoid(*args)
Sigmoid = _cntk_py.Sigmoid

def Tanh(*args):
    return _cntk_py.Tanh(*args)
Tanh = _cntk_py.Tanh

def CrossEntropyWithSoftmax(*args):
    return _cntk_py.CrossEntropyWithSoftmax(*args)
CrossEntropyWithSoftmax = _cntk_py.CrossEntropyWithSoftmax

def ClassificationError(*args):
    return _cntk_py.ClassificationError(*args)
ClassificationError = _cntk_py.ClassificationError

def Exp(*args):
    return _cntk_py.Exp(*args)
Exp = _cntk_py.Exp

def PastValue(*args):
    return _cntk_py.PastValue(*args)
PastValue = _cntk_py.PastValue

def FutureValue(*args):
    return _cntk_py.FutureValue(*args)
FutureValue = _cntk_py.FutureValue

def ElementTimes(*args):
    return _cntk_py.ElementTimes(*args)
ElementTimes = _cntk_py.ElementTimes

def ReduceSum(*args):
    return _cntk_py.ReduceSum(*args)
ReduceSum = _cntk_py.ReduceSum

def Combine(*args):
    return _cntk_py.Combine(*args)
Combine = _cntk_py.Combine
class DictionaryValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DictionaryValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DictionaryValue, name)
    __repr__ = _swig_repr
    Type__None = _cntk_py.DictionaryValue_Type__None
    Type_Bool = _cntk_py.DictionaryValue_Type_Bool
    Type_SizeT = _cntk_py.DictionaryValue_Type_SizeT
    Type_Float = _cntk_py.DictionaryValue_Type_Float
    Type_Double = _cntk_py.DictionaryValue_Type_Double
    Type_NDShape = _cntk_py.DictionaryValue_Type_NDShape
    Type_Vector = _cntk_py.DictionaryValue_Type_Vector
    if _newclass:
        TypeName = staticmethod(_cntk_py.DictionaryValue_TypeName)
    else:
        TypeName = _cntk_py.DictionaryValue_TypeName

    def __init__(self, *args):
        this = _cntk_py.new_DictionaryValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cntk_py.delete_DictionaryValue
    __del__ = lambda self: None

    def HasValue(self):
        return _cntk_py.DictionaryValue_HasValue(self)

    def ValueType(self):
        return _cntk_py.DictionaryValue_ValueType(self)
DictionaryValue_swigregister = _cntk_py.DictionaryValue_swigregister
DictionaryValue_swigregister(DictionaryValue)

def DictionaryValue_TypeName(type):
    return _cntk_py.DictionaryValue_TypeName(type)
DictionaryValue_TypeName = _cntk_py.DictionaryValue_TypeName

class Dictionary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dictionary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dictionary, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cntk_py.delete_Dictionary
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _cntk_py.new_Dictionary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Contains(self, *args):
        return _cntk_py.Dictionary_Contains(self, *args)
Dictionary_swigregister = _cntk_py.Dictionary_swigregister
Dictionary_swigregister(Dictionary)

class Learner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Learner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Learner, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Update(self, parameterValues, gradientValues, trainingSampleCount):
        return _cntk_py.Learner_Update(self, parameterValues, gradientValues, trainingSampleCount)

    def Parameters(self):
        return _cntk_py.Learner_Parameters(self)

    def GetCheckpointState(self):
        return _cntk_py.Learner_GetCheckpointState(self)

    def RestoreFromCheckpoint(self, checkpoint):
        return _cntk_py.Learner_RestoreFromCheckpoint(self, checkpoint)
    __swig_destroy__ = _cntk_py.delete_Learner
    __del__ = lambda self: None
Learner_swigregister = _cntk_py.Learner_swigregister
Learner_swigregister(Learner)


def SGDLearner(*args):
    return _cntk_py.SGDLearner(*args)
SGDLearner = _cntk_py.SGDLearner

def MomentumSGDLearner(*args):
    return _cntk_py.MomentumSGDLearner(*args)
MomentumSGDLearner = _cntk_py.MomentumSGDLearner

def NesterovLearner(*args):
    return _cntk_py.NesterovLearner(*args)
NesterovLearner = _cntk_py.NesterovLearner

def AdaGradLearner(*args):
    return _cntk_py.AdaGradLearner(*args)
AdaGradLearner = _cntk_py.AdaGradLearner

def FSAdaGradLearner(*args):
    return _cntk_py.FSAdaGradLearner(*args)
FSAdaGradLearner = _cntk_py.FSAdaGradLearner

def RMSPropLearner(*args):
    return _cntk_py.RMSPropLearner(*args)
RMSPropLearner = _cntk_py.RMSPropLearner
class Callback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Callback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Callback, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cntk_py.delete_Callback
    __del__ = lambda self: None

    def forward(self):
        return _cntk_py.Callback_forward(self)

    def backward(self):
        return _cntk_py.Callback_backward(self)

    def __init__(self):
        if self.__class__ == Callback:
            _self = None
        else:
            _self = self
        this = _cntk_py.new_Callback(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _cntk_py.disown_Callback(self)
        return weakref_proxy(self)
Callback_swigregister = _cntk_py.Callback_swigregister
Callback_swigregister(Callback)

class FunctionInCNTK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionInCNTK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionInCNTK, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _cntk_py.new_FunctionInCNTK()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cntk_py.delete_FunctionInCNTK
    __del__ = lambda self: None

    def delCallback(self):
        return _cntk_py.FunctionInCNTK_delCallback(self)

    def setCallback(self, cb):
        return _cntk_py.FunctionInCNTK_setCallback(self, cb)

    def forward(self):
        return _cntk_py.FunctionInCNTK_forward(self)

    def backward(self):
        return _cntk_py.FunctionInCNTK_backward(self)
FunctionInCNTK_swigregister = _cntk_py.FunctionInCNTK_swigregister
FunctionInCNTK_swigregister(FunctionInCNTK)


Variable.__eq__ = lambda a,b: Variable_eq(a,b)


Constant.__eq__ = lambda a,b: Variable_eq(a,b)


Placeholder.__eq__ = lambda a,b: Variable_eq(a,b)


Parameter.__eq__ = lambda a,b: Variable_eq(a,b)

# This file is compatible with both classic and new-style classes.


