# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cntk_py')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cntk_py')
    _cntk_py = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cntk_py', [dirname(__file__)])
        except ImportError:
            import _cntk_py
            return _cntk_py
        if fp is not None:
            try:
                _mod = imp.load_module('_cntk_py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cntk_py = swig_import_helper()
    del swig_import_helper
else:
    import _cntk_py
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cntk_py.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _cntk_py.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cntk_py.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cntk_py.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cntk_py.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cntk_py.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cntk_py.SwigPyIterator_copy(self)

    def next(self):
        return _cntk_py.SwigPyIterator_next(self)

    def __next__(self):
        return _cntk_py.SwigPyIterator___next__(self)

    def previous(self):
        return _cntk_py.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cntk_py.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cntk_py.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cntk_py.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cntk_py.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cntk_py.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cntk_py.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cntk_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _cntk_py.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _cntk_py.SHARED_PTR_DISOWN
inferred_dimension = _cntk_py.inferred_dimension
data_type_unknown = _cntk_py.data_type_unknown
data_type_float = _cntk_py.data_type_float
data_type_double = _cntk_py.data_type_double
storage_format_dense = _cntk_py.storage_format_dense
storage_format_sparse_csc = _cntk_py.storage_format_sparse_csc
storage_format_sparse_block_col = _cntk_py.storage_format_sparse_block_col

def is_sparse_storage_format(storageFormat):
    return _cntk_py.is_sparse_storage_format(storageFormat)
is_sparse_storage_format = _cntk_py.is_sparse_storage_format
device_kind_cpu = _cntk_py.device_kind_cpu
device_kind_gpu = _cntk_py.device_kind_gpu
class device_descriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, device_descriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, device_descriptor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def id(self):
        return _cntk_py.device_descriptor_id(self)

    def type(self):
        return _cntk_py.device_descriptor_type(self)
    if _newclass:
        cpudevice = staticmethod(_cntk_py.device_descriptor_cpudevice)
    else:
        cpudevice = _cntk_py.device_descriptor_cpudevice
    if _newclass:
        gpudevice = staticmethod(_cntk_py.device_descriptor_gpudevice)
    else:
        gpudevice = _cntk_py.device_descriptor_gpudevice
    if _newclass:
        default_device = staticmethod(_cntk_py.device_descriptor_default_device)
    else:
        default_device = _cntk_py.device_descriptor_default_device
    __swig_destroy__ = _cntk_py.delete_device_descriptor
    __del__ = lambda self: None
device_descriptor_swigregister = _cntk_py.device_descriptor_swigregister
device_descriptor_swigregister(device_descriptor)

def device_descriptor_cpudevice():
    return _cntk_py.device_descriptor_cpudevice()
device_descriptor_cpudevice = _cntk_py.device_descriptor_cpudevice

def device_descriptor_gpudevice(deviceId):
    return _cntk_py.device_descriptor_gpudevice(deviceId)
device_descriptor_gpudevice = _cntk_py.device_descriptor_gpudevice

def device_descriptor_default_device():
    return _cntk_py.device_descriptor_default_device()
device_descriptor_default_device = _cntk_py.device_descriptor_default_device

class ndshape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ndshape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ndshape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cntk_py.new_ndshape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dimensions(self):
        return _cntk_py.ndshape_dimensions(self)

    def num_axes(self):
        return _cntk_py.ndshape_num_axes(self)

    def sub_shape(self, *args):
        return _cntk_py.ndshape_sub_shape(self, *args)

    def has_inferred_dimension(self):
        return _cntk_py.ndshape_has_inferred_dimension(self)

    def total_size(self):
        return _cntk_py.ndshape_total_size(self)

    def as_string(self):
        return _cntk_py.ndshape_as_string(self)

    def __getitem__(self, i):
        return _cntk_py.ndshape___getitem__(self, i)
    __swig_destroy__ = _cntk_py.delete_ndshape
    __del__ = lambda self: None
ndshape_swigregister = _cntk_py.ndshape_swigregister
ndshape_swigregister(ndshape)

class ndarray_view(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ndarray_view, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ndarray_view, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cntk_py.delete_ndarray_view
    __del__ = lambda self: None

    def device(self):
        return _cntk_py.ndarray_view_device(self)

    def get_data_type(self):
        return _cntk_py.ndarray_view_get_data_type(self)

    def get_storage_format(self):
        return _cntk_py.ndarray_view_get_storage_format(self)

    def shape(self):
        return _cntk_py.ndarray_view_shape(self)

    def is_sparse(self):
        return _cntk_py.ndarray_view_is_sparse(self)

    def is_read_only(self):
        return _cntk_py.ndarray_view_is_read_only(self)

    def set_value(self, *args):
        return _cntk_py.ndarray_view_set_value(self, *args)

    def deep_clone(self, readOnly=False):
        return _cntk_py.ndarray_view_deep_clone(self, readOnly)

    def alias(self, readOnly=False):
        return _cntk_py.ndarray_view_alias(self, readOnly)

    def copy_from(self, source):
        return _cntk_py.ndarray_view_copy_from(self, source)

    def to_num_py(self):
        return _cntk_py.ndarray_view_to_num_py(self)

    def __init__(self, *args):
        this = _cntk_py.new_ndarray_view(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ndarray_view_swigregister = _cntk_py.ndarray_view_swigregister
ndarray_view_swigregister(ndarray_view)

class ndmask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ndmask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ndmask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cntk_py.new_ndmask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cntk_py.delete_ndmask
    __del__ = lambda self: None

    def mask_section(self, sectionOffset, sectionShape):
        return _cntk_py.ndmask_mask_section(self, sectionOffset, sectionShape)

    def clear(self):
        return _cntk_py.ndmask_clear(self)

    def masked_count(self):
        return _cntk_py.ndmask_masked_count(self)

    def device(self):
        return _cntk_py.ndmask_device(self)

    def shape(self):
        return _cntk_py.ndmask_shape(self)

    def data_buffer(self):
        return _cntk_py.ndmask_data_buffer(self)

    def deep_clone(self):
        return _cntk_py.ndmask_deep_clone(self)

    def alias(self):
        return _cntk_py.ndmask_alias(self)

    def copy_from(self, source):
        return _cntk_py.ndmask_copy_from(self, source)

    def to_num_py(self):
        return _cntk_py.ndmask_to_num_py(self)
ndmask_swigregister = _cntk_py.ndmask_swigregister
ndmask_swigregister(ndmask)

class value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, value, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cntk_py.new_value(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cntk_py.delete_value
    __del__ = lambda self: None

    def data(self):
        return _cntk_py.value_data(self)

    def mask(self):
        return _cntk_py.value_mask(self)

    def deep_clone(self, readOnly=False):
        return _cntk_py.value_deep_clone(self, readOnly)

    def alias(self, readOnly=False):
        return _cntk_py.value_alias(self, readOnly)

    def copy_from(self, source):
        return _cntk_py.value_copy_from(self, source)
value_swigregister = _cntk_py.value_swigregister
value_swigregister(value)

class axis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, axis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, axis, name)
    __repr__ = _swig_repr

    def is_static_axis(self):
        return _cntk_py.axis_is_static_axis(self)

    def static_axis_index(self):
        return _cntk_py.axis_static_axis_index(self)
    if _newclass:
        default_dynamic_axis = staticmethod(_cntk_py.axis_default_dynamic_axis)
    else:
        default_dynamic_axis = _cntk_py.axis_default_dynamic_axis
    if _newclass:
        batch_axis = staticmethod(_cntk_py.axis_batch_axis)
    else:
        batch_axis = _cntk_py.axis_batch_axis
    if _newclass:
        all_axes = staticmethod(_cntk_py.axis_all_axes)
    else:
        all_axes = _cntk_py.axis_all_axes

    def name(self):
        return _cntk_py.axis_name(self)

    def __init__(self, *args):
        this = _cntk_py.new_axis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cntk_py.delete_axis
    __del__ = lambda self: None
axis_swigregister = _cntk_py.axis_swigregister
axis_swigregister(axis)

def axis_default_dynamic_axis():
    return _cntk_py.axis_default_dynamic_axis()
axis_default_dynamic_axis = _cntk_py.axis_default_dynamic_axis

def axis_batch_axis():
    return _cntk_py.axis_batch_axis()
axis_batch_axis = _cntk_py.axis_batch_axis

def axis_all_axes():
    return _cntk_py.axis_all_axes()
axis_all_axes = _cntk_py.axis_all_axes

variable_kind_input = _cntk_py.variable_kind_input
variable_kind_output = _cntk_py.variable_kind_output
variable_kind_parameter = _cntk_py.variable_kind_parameter
variable_kind_constant = _cntk_py.variable_kind_constant
variable_kind_placeholder = _cntk_py.variable_kind_placeholder
class variable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, variable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, variable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cntk_py.new_variable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def shape(self):
        return _cntk_py.variable_shape(self)

    def dynamic_axes(self):
        return _cntk_py.variable_dynamic_axes(self)

    def kind(self):
        return _cntk_py.variable_kind(self)

    def is_sparse(self):
        return _cntk_py.variable_is_sparse(self)

    def is_input(self):
        return _cntk_py.variable_is_input(self)

    def is_output(self):
        return _cntk_py.variable_is_output(self)

    def is_parameter(self):
        return _cntk_py.variable_is_parameter(self)

    def is_constant(self):
        return _cntk_py.variable_is_constant(self)

    def is_placeholder(self):
        return _cntk_py.variable_is_placeholder(self)

    def name(self):
        return _cntk_py.variable_name(self)

    def owner(self):
        return _cntk_py.variable_owner(self)

    def get_data_type(self):
        return _cntk_py.variable_get_data_type(self)

    def needs_gradient(self):
        return _cntk_py.variable_needs_gradient(self)

    def __hash__(self):
        return _cntk_py.variable___hash__(self)
    __swig_destroy__ = _cntk_py.delete_variable
    __del__ = lambda self: None
variable_swigregister = _cntk_py.variable_swigregister
variable_swigregister(variable)

def Variable_eq(first, second):
    return _cntk_py.Variable_eq(first, second)
Variable_eq = _cntk_py.Variable_eq


def __ne__(*args):
    return _cntk_py.__ne__(*args)
__ne__ = _cntk_py.__ne__
class parameter(variable):
    __swig_setmethods__ = {}
    for _s in [variable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, parameter, name, value)
    __swig_getmethods__ = {}
    for _s in [variable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, parameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cntk_py.new_parameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def value(self):
        return _cntk_py.parameter_value(self)

    def __hash__(self):
        return _cntk_py.parameter___hash__(self)
    __swig_destroy__ = _cntk_py.delete_parameter
    __del__ = lambda self: None
parameter_swigregister = _cntk_py.parameter_swigregister
parameter_swigregister(parameter)

class constant(variable):
    __swig_setmethods__ = {}
    for _s in [variable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, constant, name, value)
    __swig_getmethods__ = {}
    for _s in [variable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, constant, name)
    __repr__ = _swig_repr

    def value(self):
        return _cntk_py.constant_value(self)

    def __init__(self, *args):
        this = _cntk_py.new_constant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __hash__(self):
        return _cntk_py.constant___hash__(self)
    __swig_destroy__ = _cntk_py.delete_constant
    __del__ = lambda self: None
constant_swigregister = _cntk_py.constant_swigregister
constant_swigregister(constant)

class placeholder(variable):
    __swig_setmethods__ = {}
    for _s in [variable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, placeholder, name, value)
    __swig_getmethods__ = {}
    for _s in [variable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, placeholder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cntk_py.new_placeholder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __hash__(self):
        return _cntk_py.placeholder___hash__(self)
    __swig_destroy__ = _cntk_py.delete_placeholder
    __del__ = lambda self: None
placeholder_swigregister = _cntk_py.placeholder_swigregister
placeholder_swigregister(placeholder)

class back_prop_state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, back_prop_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, back_prop_state, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def function(self):
        return _cntk_py.back_prop_state_function(self)
    __swig_destroy__ = _cntk_py.delete_back_prop_state
    __del__ = lambda self: None
back_prop_state_swigregister = _cntk_py.back_prop_state_swigregister
back_prop_state_swigregister(back_prop_state)

class function(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, function, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, function, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def forward(self, *args):
        return _cntk_py.function_forward(self, *args)

    def backward(self, state, rootGradientValues, backPropagatedGradientValuesForInputs):
        return _cntk_py.function_backward(self, state, rootGradientValues, backPropagatedGradientValuesForInputs)
    __swig_destroy__ = _cntk_py.delete_function
    __del__ = lambda self: None

    def name(self):
        return _cntk_py.function_name(self)

    def root_function(self):
        return _cntk_py.function_root_function(self)

    def inputs(self):
        return _cntk_py.function_inputs(self)

    def output(self):
        return _cntk_py.function_output(self)

    def outputs(self):
        return _cntk_py.function_outputs(self)

    def arguments(self):
        return _cntk_py.function_arguments(self)

    def parameters(self):
        return _cntk_py.function_parameters(self)

    def constants(self):
        return _cntk_py.function_constants(self)

    def placeholders(self):
        return _cntk_py.function_placeholders(self)

    def replace_placeholders(self, placeholderReplacements):
        return _cntk_py.function_replace_placeholders(self, placeholderReplacements)
function_swigregister = _cntk_py.function_swigregister
function_swigregister(function)


def negate(*args):
    return _cntk_py.negate(*args)
negate = _cntk_py.negate

def sigmoid(*args):
    return _cntk_py.sigmoid(*args)
sigmoid = _cntk_py.sigmoid

def tanh(*args):
    return _cntk_py.tanh(*args)
tanh = _cntk_py.tanh

def re_lu(*args):
    return _cntk_py.re_lu(*args)
re_lu = _cntk_py.re_lu

def exp(*args):
    return _cntk_py.exp(*args)
exp = _cntk_py.exp

def log(*args):
    return _cntk_py.log(*args)
log = _cntk_py.log

def square(*args):
    return _cntk_py.square(*args)
square = _cntk_py.square

def sqrt(*args):
    return _cntk_py.sqrt(*args)
sqrt = _cntk_py.sqrt

def round(*args):
    return _cntk_py.round(*args)
round = _cntk_py.round

def floor(*args):
    return _cntk_py.floor(*args)
floor = _cntk_py.floor

def ceil(*args):
    return _cntk_py.ceil(*args)
ceil = _cntk_py.ceil

def abs(*args):
    return _cntk_py.abs(*args)
abs = _cntk_py.abs

def reciprocal(*args):
    return _cntk_py.reciprocal(*args)
reciprocal = _cntk_py.reciprocal

def softmax(*args):
    return _cntk_py.softmax(*args)
softmax = _cntk_py.softmax

def plus(*args):
    return _cntk_py.plus(*args)
plus = _cntk_py.plus

def minus(*args):
    return _cntk_py.minus(*args)
minus = _cntk_py.minus

def element_times(*args):
    return _cntk_py.element_times(*args)
element_times = _cntk_py.element_times

def element_divide(*args):
    return _cntk_py.element_divide(*args)
element_divide = _cntk_py.element_divide

def equal(*args):
    return _cntk_py.equal(*args)
equal = _cntk_py.equal

def not_equal(*args):
    return _cntk_py.not_equal(*args)
not_equal = _cntk_py.not_equal

def less(*args):
    return _cntk_py.less(*args)
less = _cntk_py.less

def less_equal(*args):
    return _cntk_py.less_equal(*args)
less_equal = _cntk_py.less_equal

def greater(*args):
    return _cntk_py.greater(*args)
greater = _cntk_py.greater

def greater_equal(*args):
    return _cntk_py.greater_equal(*args)
greater_equal = _cntk_py.greater_equal

def times(*args):
    return _cntk_py.times(*args)
times = _cntk_py.times

def squared_error(*args):
    return _cntk_py.squared_error(*args)
squared_error = _cntk_py.squared_error

def cross_entropy_with_softmax(*args):
    return _cntk_py.cross_entropy_with_softmax(*args)
cross_entropy_with_softmax = _cntk_py.cross_entropy_with_softmax

def classification_error(*args):
    return _cntk_py.classification_error(*args)
classification_error = _cntk_py.classification_error

def past_value(*args):
    return _cntk_py.past_value(*args)
past_value = _cntk_py.past_value

def future_value(*args):
    return _cntk_py.future_value(*args)
future_value = _cntk_py.future_value

def reduce_sum(*args):
    return _cntk_py.reduce_sum(*args)
reduce_sum = _cntk_py.reduce_sum

def combine(*args):
    return _cntk_py.combine(*args)
combine = _cntk_py.combine
class dictionary_value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dictionary_value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dictionary_value, name)
    __repr__ = _swig_repr
    type_none = _cntk_py.dictionary_value_type_none
    type_bool = _cntk_py.dictionary_value_type_bool
    type_size_t = _cntk_py.dictionary_value_type_size_t
    type_float = _cntk_py.dictionary_value_type_float
    type_double = _cntk_py.dictionary_value_type_double
    type_string = _cntk_py.dictionary_value_type_string
    type_ndshape = _cntk_py.dictionary_value_type_ndshape
    type_vector = _cntk_py.dictionary_value_type_vector
    type_dictionary = _cntk_py.dictionary_value_type_dictionary
    if _newclass:
        type_name = staticmethod(_cntk_py.dictionary_value_type_name)
    else:
        type_name = _cntk_py.dictionary_value_type_name

    def __init__(self, *args):
        this = _cntk_py.new_dictionary_value(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cntk_py.delete_dictionary_value
    __del__ = lambda self: None

    def has_value(self):
        return _cntk_py.dictionary_value_has_value(self)

    def value_type(self):
        return _cntk_py.dictionary_value_value_type(self)
dictionary_value_swigregister = _cntk_py.dictionary_value_swigregister
dictionary_value_swigregister(dictionary_value)

def dictionary_value_type_name(type):
    return _cntk_py.dictionary_value_type_name(type)
dictionary_value_type_name = _cntk_py.dictionary_value_type_name

class dictionary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dictionary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dictionary, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cntk_py.delete_dictionary
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _cntk_py.new_dictionary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def contains(self, *args):
        return _cntk_py.dictionary_contains(self, *args)
dictionary_swigregister = _cntk_py.dictionary_swigregister
dictionary_swigregister(dictionary)

class learner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, learner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, learner, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def update(self, gradientValues, trainingSampleCount):
        return _cntk_py.learner_update(self, gradientValues, trainingSampleCount)

    def parameters(self):
        return _cntk_py.learner_parameters(self)

    def get_checkpoint_state(self):
        return _cntk_py.learner_get_checkpoint_state(self)

    def restore_from_checkpoint(self, arg2):
        return _cntk_py.learner_restore_from_checkpoint(self, arg2)
    __swig_destroy__ = _cntk_py.delete_learner
    __del__ = lambda self: None
learner_swigregister = _cntk_py.learner_swigregister
learner_swigregister(learner)


def sgdlearner(parameters, learningRatePerSample):
    return _cntk_py.sgdlearner(parameters, learningRatePerSample)
sgdlearner = _cntk_py.sgdlearner

def momentum_sgdlearner(parameters):
    return _cntk_py.momentum_sgdlearner(parameters)
momentum_sgdlearner = _cntk_py.momentum_sgdlearner

def nesterov_learner(parameters):
    return _cntk_py.nesterov_learner(parameters)
nesterov_learner = _cntk_py.nesterov_learner

def ada_grad_learner(parameters, needAveMultiplier=True):
    return _cntk_py.ada_grad_learner(parameters, needAveMultiplier)
ada_grad_learner = _cntk_py.ada_grad_learner

def fsada_grad_learner(parameters):
    return _cntk_py.fsada_grad_learner(parameters)
fsada_grad_learner = _cntk_py.fsada_grad_learner

def rmsprop_learner(parameters, gamma, inc, dec, max, min, needAveMultiplier=True):
    return _cntk_py.rmsprop_learner(parameters, gamma, inc, dec, max, min, needAveMultiplier)
rmsprop_learner = _cntk_py.rmsprop_learner
class trainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, trainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, trainer, name)
    __repr__ = _swig_repr

    def __init__(self, model, trainingLoss, parameterLearners):
        this = _cntk_py.new_trainer(model, trainingLoss, parameterLearners)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def train_minibatch(self, *args):
        return _cntk_py.trainer_train_minibatch(self, *args)

    def model(self):
        return _cntk_py.trainer_model(self)

    def training_loss_variable(self):
        return _cntk_py.trainer_training_loss_variable(self)

    def previous_minibatch_training_loss_value(self):
        return _cntk_py.trainer_previous_minibatch_training_loss_value(self)

    def parameter_learners(self):
        return _cntk_py.trainer_parameter_learners(self)
    __swig_destroy__ = _cntk_py.delete_trainer
    __del__ = lambda self: None
trainer_swigregister = _cntk_py.trainer_swigregister
trainer_swigregister(trainer)

class stream_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stream_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stream_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_name"] = _cntk_py.stream_info_m_name_set
    __swig_getmethods__["m_name"] = _cntk_py.stream_info_m_name_get
    if _newclass:
        m_name = _swig_property(_cntk_py.stream_info_m_name_get, _cntk_py.stream_info_m_name_set)
    __swig_setmethods__["m_id"] = _cntk_py.stream_info_m_id_set
    __swig_getmethods__["m_id"] = _cntk_py.stream_info_m_id_get
    if _newclass:
        m_id = _swig_property(_cntk_py.stream_info_m_id_get, _cntk_py.stream_info_m_id_set)
    __swig_setmethods__["m_storage_format"] = _cntk_py.stream_info_m_storage_format_set
    __swig_getmethods__["m_storage_format"] = _cntk_py.stream_info_m_storage_format_get
    if _newclass:
        m_storage_format = _swig_property(_cntk_py.stream_info_m_storage_format_get, _cntk_py.stream_info_m_storage_format_set)
    __swig_setmethods__["m_element_type"] = _cntk_py.stream_info_m_element_type_set
    __swig_getmethods__["m_element_type"] = _cntk_py.stream_info_m_element_type_get
    if _newclass:
        m_element_type = _swig_property(_cntk_py.stream_info_m_element_type_get, _cntk_py.stream_info_m_element_type_set)
    __swig_setmethods__["m_sample_layout"] = _cntk_py.stream_info_m_sample_layout_set
    __swig_getmethods__["m_sample_layout"] = _cntk_py.stream_info_m_sample_layout_get
    if _newclass:
        m_sample_layout = _swig_property(_cntk_py.stream_info_m_sample_layout_get, _cntk_py.stream_info_m_sample_layout_set)

    def __init__(self):
        this = _cntk_py.new_stream_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cntk_py.delete_stream_info
    __del__ = lambda self: None
stream_info_swigregister = _cntk_py.stream_info_swigregister
stream_info_swigregister(stream_info)


def __eq__(*args):
    return _cntk_py.__eq__(*args)
__eq__ = _cntk_py.__eq__
class minibatch_source(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, minibatch_source, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, minibatch_source, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def stream_infos(self):
        return _cntk_py.minibatch_source_stream_infos(self)

    def get_next_minibatch(self, minibatchData):
        return _cntk_py.minibatch_source_get_next_minibatch(self, minibatchData)
    __swig_destroy__ = _cntk_py.delete_minibatch_source
    __del__ = lambda self: None
minibatch_source_swigregister = _cntk_py.minibatch_source_swigregister
minibatch_source_swigregister(minibatch_source)


def create_composite_minibatch_source(configuration):
    return _cntk_py.create_composite_minibatch_source(configuration)
create_composite_minibatch_source = _cntk_py.create_composite_minibatch_source
class callback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, callback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, callback, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cntk_py.delete_callback
    __del__ = lambda self: None

    def forward(self):
        return _cntk_py.callback_forward(self)

    def backward(self):
        return _cntk_py.callback_backward(self)

    def __init__(self):
        if self.__class__ == callback:
            _self = None
        else:
            _self = self
        this = _cntk_py.new_callback(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _cntk_py.disown_callback(self)
        return weakref_proxy(self)
callback_swigregister = _cntk_py.callback_swigregister
callback_swigregister(callback)

class function_in_cntk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, function_in_cntk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, function_in_cntk, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _cntk_py.new_function_in_cntk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cntk_py.delete_function_in_cntk
    __del__ = lambda self: None

    def del_callback(self):
        return _cntk_py.function_in_cntk_del_callback(self)

    def set_callback(self, cb):
        return _cntk_py.function_in_cntk_set_callback(self, cb)

    def forward(self):
        return _cntk_py.function_in_cntk_forward(self)

    def backward(self):
        return _cntk_py.function_in_cntk_backward(self)
function_in_cntk_swigregister = _cntk_py.function_in_cntk_swigregister
function_in_cntk_swigregister(function_in_cntk)


Variable.__eq__ = lambda a,b: Variable_eq(a,b)


Constant.__eq__ = lambda a,b: Variable_eq(a,b)


Placeholder.__eq__ = lambda a,b: Variable_eq(a,b)


Parameter.__eq__ = lambda a,b: Variable_eq(a,b)

# This file is compatible with both classic and new-style classes.


