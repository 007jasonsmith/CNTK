# This file is auto-generated by _fetch_ops.py.

from cntk.graph import ComputationNode

class Print(ComputationNode):
    def __init__(self, value, format='', name='Print', ctx=None):
        self.value = value
        self.format = format
        super(Print, self).__init__(params=['value', 'format'], name=name, ctx=ctx)

class Debug(ComputationNode):
    def __init__(self, value, say='', enabled=True, name='Debug', ctx=None):
        self.value = value
        self.say = say
        self.enabled = enabled
        super(Debug, self).__init__(params=['value', 'say', 'enabled'], name=name, ctx=ctx)

class Format(ComputationNode):
    def __init__(self, value, format, name='Format', ctx=None):
        self.value = value
        self.format = format
        super(Format, self).__init__(params=['value', 'format'], name=name, ctx=ctx)

class Replace(ComputationNode):
    def __init__(self, s, from_, to, name='Replace', ctx=None):
        self.s = s
        self.from_ = from_
        self.to = to
        super(Replace, self).__init__(params=['s', 'from_', 'to'], name=name, ctx=ctx)

class Substr(ComputationNode):
    def __init__(self, s, begin, num, name='Substr', ctx=None):
        self.s = s
        self.begin = begin
        self.num = num
        super(Substr, self).__init__(params=['s', 'begin', 'num'], name=name, ctx=ctx)

class Chr(ComputationNode):
    def __init__(self, c, name='Chr', ctx=None):
        self.c = c
        super(Chr, self).__init__(params=['c'], name=name, ctx=ctx)

class Length(ComputationNode):
    def __init__(self, x, name='Length', ctx=None):
        self.x = x
        super(Length, self).__init__(params=['x'], name=name, ctx=ctx)

class Ceil(ComputationNode):
    def __init__(self, x, name='Ceil', ctx=None):
        self.x = x
        super(Ceil, self).__init__(params=['x'], name=name, ctx=ctx)

class Round(ComputationNode):
    def __init__(self, x, name='Round', ctx=None):
        self.x = x
        super(Round, self).__init__(params=['x'], name=name, ctx=ctx)

class Abs(ComputationNode):
    def __init__(self, x, name='Abs', ctx=None):
        self.x = x
        super(Abs, self).__init__(params=['x'], name=name, ctx=ctx)

class Sign(ComputationNode):
    def __init__(self, x, name='Sign', ctx=None):
        self.x = x
        super(Sign, self).__init__(params=['x'], name=name, ctx=ctx)

class Min(ComputationNode):
    def __init__(self, a, b, name='Min', ctx=None):
        self.a = a
        self.b = b
        super(Min, self).__init__(params=['a', 'b'], name=name, ctx=ctx)

class Max(ComputationNode):
    def __init__(self, a, b, name='Max', ctx=None):
        self.a = a
        self.b = b
        super(Max, self).__init__(params=['a', 'b'], name=name, ctx=ctx)

class Fac(ComputationNode):
    def __init__(self, n, name='Fac', ctx=None):
        self.n = n
        super(Fac, self).__init__(params=['n'], name=name, ctx=ctx)

class LearnableParameter(ComputationNode):
    def __init__(self, rows, cols, learningRateMultiplier=1.0, init='uniform', initValueScale=1, value=0, initFromFilePath='', initOnCPUOnly=True, randomSeed=-1, name='LearnableParameter', ctx=None):
        self.rows = rows
        self.cols = cols
        self.learningRateMultiplier = learningRateMultiplier
        self.init = init
        self.initValueScale = initValueScale
        self.value = value
        self.initFromFilePath = initFromFilePath
        self.initOnCPUOnly = initOnCPUOnly
        self.randomSeed = randomSeed
        super(LearnableParameter, self).__init__(params=['rows', 'cols', 'learningRateMultiplier', 'init', 'initValueScale', 'value', 'initFromFilePath', 'initOnCPUOnly', 'randomSeed'], name=name, ctx=ctx)

class ParameterTensor(ComputationNode):
    def __init__(self, dims, learningRateMultiplier=1.0, init='uniform', initValueScale=1, value=0, initFromFilePath='', initOnCPUOnly=True, randomSeed=-1, name='ParameterTensor', ctx=None):
        self.dims = dims
        self.learningRateMultiplier = learningRateMultiplier
        self.init = init
        self.initValueScale = initValueScale
        self.value = value
        self.initFromFilePath = initFromFilePath
        self.initOnCPUOnly = initOnCPUOnly
        self.randomSeed = randomSeed
        super(ParameterTensor, self).__init__(params=['dims', 'learningRateMultiplier', 'init', 'initValueScale', 'value', 'initFromFilePath', 'initOnCPUOnly', 'randomSeed'], name=name, ctx=ctx)

class Input(ComputationNode):
    def __init__(self, dims, tag='feature', name='Input', ctx=None):
        self.dims = dims
        self.tag = tag
        super(Input, self).__init__(params=['dims', 'tag'], name=name, ctx=ctx)

class SparseInput(ComputationNode):
    def __init__(self, dims, tag='feature', name='SparseInput', ctx=None):
        self.dims = dims
        self.tag = tag
        super(SparseInput, self).__init__(params=['dims', 'tag'], name=name, ctx=ctx)

class ImageInput(ComputationNode):
    def __init__(self, imageWidth, imageHeight, imageChannels, imageLayout='CHW', tag='feature', name='ImageInput', ctx=None):
        self.imageWidth = imageWidth
        self.imageHeight = imageHeight
        self.imageChannels = imageChannels
        self.imageLayout = imageLayout
        self.tag = tag
        super(ImageInput, self).__init__(params=['imageWidth', 'imageHeight', 'imageChannels', 'imageLayout', 'tag'], name=name, ctx=ctx)

class SparseImageInput(ComputationNode):
    def __init__(self, imageWidth, imageHeight, imageChannels, imageLayout='CHW', tag='feature', name='SparseImageInput', ctx=None):
        self.imageWidth = imageWidth
        self.imageHeight = imageHeight
        self.imageChannels = imageChannels
        self.imageLayout = imageLayout
        self.tag = tag
        super(SparseImageInput, self).__init__(params=['imageWidth', 'imageHeight', 'imageChannels', 'imageLayout', 'tag'], name=name, ctx=ctx)

class PastValue(ComputationNode):
    def __init__(self, dims, input, timeStep=1, defaultHiddenActivation=0.1, name='PastValue', ctx=None):
        self.dims = dims
        self.input = input
        self.timeStep = timeStep
        self.defaultHiddenActivation = defaultHiddenActivation
        super(PastValue, self).__init__(params=['dims', 'input', 'timeStep', 'defaultHiddenActivation'], name=name, ctx=ctx)

class FutureValue(ComputationNode):
    def __init__(self, dims, input, timeStep=1, defaultHiddenActivation=0.1, name='FutureValue', ctx=None):
        self.dims = dims
        self.input = input
        self.timeStep = timeStep
        self.defaultHiddenActivation = defaultHiddenActivation
        super(FutureValue, self).__init__(params=['dims', 'input', 'timeStep', 'defaultHiddenActivation'], name=name, ctx=ctx)

class Shift(ComputationNode):
    def __init__(self, input, fromOffset, boundaryValue, boundaryMode=-1, dim=-1, name='Shift', ctx=None):
        self.input = input
        self.fromOffset = fromOffset
        self.boundaryValue = boundaryValue
        self.boundaryMode = boundaryMode
        self.dim = dim
        super(Shift, self).__init__(params=['input', 'fromOffset', 'boundaryValue', 'boundaryMode', 'dim'], name=name, ctx=ctx)

class RowSlice(ComputationNode):
    def __init__(self, startIndex, numRows, input, name='RowSlice', ctx=None):
        self.startIndex = startIndex
        self.numRows = numRows
        self.input = input
        super(RowSlice, self).__init__(params=['startIndex', 'numRows', 'input'], name=name, ctx=ctx)

class RowRepeat(ComputationNode):
    def __init__(self, input, numRepeats, name='RowRepeat', ctx=None):
        self.input = input
        self.numRepeats = numRepeats
        super(RowRepeat, self).__init__(params=['input', 'numRepeats'], name=name, ctx=ctx)

class RowStack(ComputationNode):
    def __init__(self, inputs, name='RowStack', ctx=None):
        self.inputs = inputs
        super(RowStack, self).__init__(params=['inputs'], name=name, ctx=ctx)

class Reshape(ComputationNode):
    def __init__(self, input, numRows, imageWidth=0, imageHeight=0, imageChannels=0, name='Reshape', ctx=None):
        self.input = input
        self.numRows = numRows
        self.imageWidth = imageWidth
        self.imageHeight = imageHeight
        self.imageChannels = imageChannels
        super(Reshape, self).__init__(params=['input', 'numRows', 'imageWidth', 'imageHeight', 'imageChannels'], name=name, ctx=ctx)

class NewReshape(ComputationNode):
    def __init__(self, input, dims, beginDim=0, endDim=0, name='NewReshape', ctx=None):
        self.input = input
        self.dims = dims
        self.beginDim = beginDim
        self.endDim = endDim
        super(NewReshape, self).__init__(params=['input', 'dims', 'beginDim', 'endDim'], name=name, ctx=ctx)

class TransposeDimensions(ComputationNode):
    def __init__(self, input, dim1, dim2, name='TransposeDimensions', ctx=None):
        self.input = input
        self.dim1 = dim1
        self.dim2 = dim2
        super(TransposeDimensions, self).__init__(params=['input', 'dim1', 'dim2'], name=name, ctx=ctx)

class Times(ComputationNode):
    def __init__(self, A, B, outputRank=1, name='Times', ctx=None):
        self.A = A
        self.B = B
        self.outputRank = outputRank
        super(Times, self).__init__(params=['A', 'B', 'outputRank'], name=name, ctx=ctx)

class Logistic(ComputationNode):
    def __init__(self, label, probability, name='Logistic', ctx=None):
        self.label = label
        self.probability = probability
        super(Logistic, self).__init__(params=['label', 'probability'], name=name, ctx=ctx)

class WeightedLogistic(ComputationNode):
    def __init__(self, label, probability, instanceWeight, name='WeightedLogistic', ctx=None):
        self.label = label
        self.probability = probability
        self.instanceWeight = instanceWeight
        super(WeightedLogistic, self).__init__(params=['label', 'probability', 'instanceWeight'], name=name, ctx=ctx)

class ReconcileMBLayout(ComputationNode):
    def __init__(self, dataInput, layoutInput, name='ReconcileMBLayout', ctx=None):
        self.dataInput = dataInput
        self.layoutInput = layoutInput
        super(ReconcileMBLayout, self).__init__(params=['dataInput', 'layoutInput'], name=name, ctx=ctx)

class Convolution(ComputationNode):
    def __init__(self, weightNode, inputValueNode, kernelWidth, kernelHeight, outputChannels, horizontalSubsample, verticalSubsample, zeroPadding=False, maxTempMemSizeInSamples=0, imageLayout='CHW', name='Convolution', ctx=None):
        self.weightNode = weightNode
        self.inputValueNode = inputValueNode
        self.kernelWidth = kernelWidth
        self.kernelHeight = kernelHeight
        self.outputChannels = outputChannels
        self.horizontalSubsample = horizontalSubsample
        self.verticalSubsample = verticalSubsample
        self.zeroPadding = zeroPadding
        self.maxTempMemSizeInSamples = maxTempMemSizeInSamples
        self.imageLayout = imageLayout
        super(Convolution, self).__init__(params=['weightNode', 'inputValueNode', 'kernelWidth', 'kernelHeight', 'outputChannels', 'horizontalSubsample', 'verticalSubsample', 'zeroPadding', 'maxTempMemSizeInSamples', 'imageLayout'], name=name, ctx=ctx)

class MaxPooling(ComputationNode):
    def __init__(self, input, windowWidth, windowHeight, horizontalSubsample, verticalSubsample, imageLayout='CHW', name='MaxPooling', ctx=None):
        self.input = input
        self.windowWidth = windowWidth
        self.windowHeight = windowHeight
        self.horizontalSubsample = horizontalSubsample
        self.verticalSubsample = verticalSubsample
        self.imageLayout = imageLayout
        super(MaxPooling, self).__init__(params=['input', 'windowWidth', 'windowHeight', 'horizontalSubsample', 'verticalSubsample', 'imageLayout'], name=name, ctx=ctx)

class AveragePooling(ComputationNode):
    def __init__(self, input, windowWidth, windowHeight, horizontalSubsample, verticalSubsample, imageLayout='CHW', name='AveragePooling', ctx=None):
        self.input = input
        self.windowWidth = windowWidth
        self.windowHeight = windowHeight
        self.horizontalSubsample = horizontalSubsample
        self.verticalSubsample = verticalSubsample
        self.imageLayout = imageLayout
        super(AveragePooling, self).__init__(params=['input', 'windowWidth', 'windowHeight', 'horizontalSubsample', 'verticalSubsample', 'imageLayout'], name=name, ctx=ctx)

class BatchNormalization(ComputationNode):
    def __init__(self, input, scale, bias, runMean, runInvStdDev, eval, spatial, normalizationTimeConstant=0, epsilon=1e-05, useCntkEngine=True, imageLayout='CHW', name='BatchNormalization', ctx=None):
        self.input = input
        self.scale = scale
        self.bias = bias
        self.runMean = runMean
        self.runInvStdDev = runInvStdDev
        self.eval = eval
        self.spatial = spatial
        self.normalizationTimeConstant = normalizationTimeConstant
        self.epsilon = epsilon
        self.useCntkEngine = useCntkEngine
        self.imageLayout = imageLayout
        super(BatchNormalization, self).__init__(params=['input', 'scale', 'bias', 'runMean', 'runInvStdDev', 'eval', 'spatial', 'normalizationTimeConstant', 'epsilon', 'useCntkEngine', 'imageLayout'], name=name, ctx=ctx)

class ClassBasedCrossEntropyWithSoftmax(ComputationNode):
    def __init__(self, labelClassDescriptorVectorSequence, mainInputInfo, mainWeight, classLogProbsBeforeSoftmax, name='ClassBasedCrossEntropyWithSoftmax', ctx=None):
        self.labelClassDescriptorVectorSequence = labelClassDescriptorVectorSequence
        self.mainInputInfo = mainInputInfo
        self.mainWeight = mainWeight
        self.classLogProbsBeforeSoftmax = classLogProbsBeforeSoftmax
        super(ClassBasedCrossEntropyWithSoftmax, self).__init__(params=['labelClassDescriptorVectorSequence', 'mainInputInfo', 'mainWeight', 'classLogProbsBeforeSoftmax'], name=name, ctx=ctx)

class ColumnElementTimes(ComputationNode):
    def __init__(self, aVectorSequence, anotherVectorSequence, name='ColumnElementTimes', ctx=None):
        self.aVectorSequence = aVectorSequence
        self.anotherVectorSequence = anotherVectorSequence
        super(ColumnElementTimes, self).__init__(params=['aVectorSequence', 'anotherVectorSequence'], name=name, ctx=ctx)

class CosDistance(ComputationNode):
    def __init__(self, aVectorSequence, anotherVectorSequence, name='CosDistance', ctx=None):
        self.aVectorSequence = aVectorSequence
        self.anotherVectorSequence = anotherVectorSequence
        super(CosDistance, self).__init__(params=['aVectorSequence', 'anotherVectorSequence'], name=name, ctx=ctx)

class CosDistanceWithNegativeSamples(ComputationNode):
    def __init__(self, aVectorSequence, anotherVectorSequence, numShifts, numNegSamples, name='CosDistanceWithNegativeSamples', ctx=None):
        self.aVectorSequence = aVectorSequence
        self.anotherVectorSequence = anotherVectorSequence
        self.numShifts = numShifts
        self.numNegSamples = numNegSamples
        super(CosDistanceWithNegativeSamples, self).__init__(params=['aVectorSequence', 'anotherVectorSequence', 'numShifts', 'numNegSamples'], name=name, ctx=ctx)

class Cosine(ComputationNode):
    def __init__(self, x, name='Cosine', ctx=None):
        self.x = x
        super(Cosine, self).__init__(params=['x'], name=name, ctx=ctx)

class CrossEntropy(ComputationNode):
    def __init__(self, refProbVectorSequence, outProbVectorSequence, name='CrossEntropy', ctx=None):
        self.refProbVectorSequence = refProbVectorSequence
        self.outProbVectorSequence = outProbVectorSequence
        super(CrossEntropy, self).__init__(params=['refProbVectorSequence', 'outProbVectorSequence'], name=name, ctx=ctx)

class CrossEntropyWithSoftmax(ComputationNode):
    def __init__(self, labelVectorSequence, outProbVectorSequence, name='CrossEntropyWithSoftmax', ctx=None):
        self.labelVectorSequence = labelVectorSequence
        self.outProbVectorSequence = outProbVectorSequence
        super(CrossEntropyWithSoftmax, self).__init__(params=['labelVectorSequence', 'outProbVectorSequence'], name=name, ctx=ctx)

class DiagTimes(ComputationNode):
    def __init__(self, diagonalMatrixAsColumnVector, matrix, name='DiagTimes', ctx=None):
        self.diagonalMatrixAsColumnVector = diagonalMatrixAsColumnVector
        self.matrix = matrix
        super(DiagTimes, self).__init__(params=['diagonalMatrixAsColumnVector', 'matrix'], name=name, ctx=ctx)

class Dropout(ComputationNode):
    def __init__(self, activationVectorSequence, name='Dropout', ctx=None):
        self.activationVectorSequence = activationVectorSequence
        super(Dropout, self).__init__(params=['activationVectorSequence'], name=name, ctx=ctx)

class ElementTimes(ComputationNode):
    def __init__(self, aMatrix, anotherMatrix, name='ElementTimes', ctx=None):
        self.aMatrix = aMatrix
        self.anotherMatrix = anotherMatrix
        super(ElementTimes, self).__init__(params=['aMatrix', 'anotherMatrix'], name=name, ctx=ctx)

class ErrorPrediction(ComputationNode):
    def __init__(self, labelVectorSequence, outVectorSequence, name='ErrorPrediction', ctx=None):
        self.labelVectorSequence = labelVectorSequence
        self.outVectorSequence = outVectorSequence
        super(ErrorPrediction, self).__init__(params=['labelVectorSequence', 'outVectorSequence'], name=name, ctx=ctx)

class Exp(ComputationNode):
    def __init__(self, x, name='Exp', ctx=None):
        self.x = x
        super(Exp, self).__init__(params=['x'], name=name, ctx=ctx)

class GMMLogLikelihood(ComputationNode):
    def __init__(self, unnormalizedPriorVector, meansAsRows, logStdDevAsRows, dataVectorSequence, name='GMMLogLikelihood', ctx=None):
        self.unnormalizedPriorVector = unnormalizedPriorVector
        self.meansAsRows = meansAsRows
        self.logStdDevAsRows = logStdDevAsRows
        self.dataVectorSequence = dataVectorSequence
        super(GMMLogLikelihood, self).__init__(params=['unnormalizedPriorVector', 'meansAsRows', 'logStdDevAsRows', 'dataVectorSequence'], name=name, ctx=ctx)

class InvStdDev(ComputationNode):
    def __init__(self, dataVectorSequence, name='InvStdDev', ctx=None):
        self.dataVectorSequence = dataVectorSequence
        super(InvStdDev, self).__init__(params=['dataVectorSequence'], name=name, ctx=ctx)

class KhatriRaoProduct(ComputationNode):
    def __init__(self, leftMatrix, rightMatrix, name='KhatriRaoProduct', ctx=None):
        self.leftMatrix = leftMatrix
        self.rightMatrix = rightMatrix
        super(KhatriRaoProduct, self).__init__(params=['leftMatrix', 'rightMatrix'], name=name, ctx=ctx)

class Log(ComputationNode):
    def __init__(self, x, name='Log', ctx=None):
        self.x = x
        super(Log, self).__init__(params=['x'], name=name, ctx=ctx)

class LogSoftmax(ComputationNode):
    def __init__(self, z, name='LogSoftmax', ctx=None):
        self.z = z
        super(LogSoftmax, self).__init__(params=['z'], name=name, ctx=ctx)

class MatrixL1Reg(ComputationNode):
    def __init__(self, matrix, name='MatrixL1Reg', ctx=None):
        self.matrix = matrix
        super(MatrixL1Reg, self).__init__(params=['matrix'], name=name, ctx=ctx)

class MatrixL2Reg(ComputationNode):
    def __init__(self, matrix, name='MatrixL2Reg', ctx=None):
        self.matrix = matrix
        super(MatrixL2Reg, self).__init__(params=['matrix'], name=name, ctx=ctx)

class Mean(ComputationNode):
    def __init__(self, dataVectorSequence, name='Mean', ctx=None):
        self.dataVectorSequence = dataVectorSequence
        super(Mean, self).__init__(params=['dataVectorSequence'], name=name, ctx=ctx)

class Minus(ComputationNode):
    def __init__(self, leftMatrix, rightMatrix, name='Minus', ctx=None):
        self.leftMatrix = leftMatrix
        self.rightMatrix = rightMatrix
        super(Minus, self).__init__(params=['leftMatrix', 'rightMatrix'], name=name, ctx=ctx)

class Negate(ComputationNode):
    def __init__(self, input, name='Negate', ctx=None):
        self.input = input
        super(Negate, self).__init__(params=['input'], name=name, ctx=ctx)

class PerDimMeanVarDeNormalization(ComputationNode):
    def __init__(self, dataVectorSequence, meanVector, invStdDevVector, name='PerDimMeanVarDeNormalization', ctx=None):
        self.dataVectorSequence = dataVectorSequence
        self.meanVector = meanVector
        self.invStdDevVector = invStdDevVector
        super(PerDimMeanVarDeNormalization, self).__init__(params=['dataVectorSequence', 'meanVector', 'invStdDevVector'], name=name, ctx=ctx)

class PerDimMeanVarNormalization(ComputationNode):
    def __init__(self, dataVectorSequence, meanVector, invStdDevVector, name='PerDimMeanVarNormalization', ctx=None):
        self.dataVectorSequence = dataVectorSequence
        self.meanVector = meanVector
        self.invStdDevVector = invStdDevVector
        super(PerDimMeanVarNormalization, self).__init__(params=['dataVectorSequence', 'meanVector', 'invStdDevVector'], name=name, ctx=ctx)

class Plus(ComputationNode):
    def __init__(self, leftMatrix, rightMatrix, name='Plus', ctx=None):
        self.leftMatrix = leftMatrix
        self.rightMatrix = rightMatrix
        super(Plus, self).__init__(params=['leftMatrix', 'rightMatrix'], name=name, ctx=ctx)

class RectifiedLinear(ComputationNode):
    def __init__(self, z, name='RectifiedLinear', ctx=None):
        self.z = z
        super(RectifiedLinear, self).__init__(params=['z'], name=name, ctx=ctx)

class Scale(ComputationNode):
    def __init__(self, scalarScalingFactor, matrix, name='Scale', ctx=None):
        self.scalarScalingFactor = scalarScalingFactor
        self.matrix = matrix
        super(Scale, self).__init__(params=['scalarScalingFactor', 'matrix'], name=name, ctx=ctx)

class Sigmoid(ComputationNode):
    def __init__(self, z, name='Sigmoid', ctx=None):
        self.z = z
        super(Sigmoid, self).__init__(params=['z'], name=name, ctx=ctx)

class Softmax(ComputationNode):
    def __init__(self, z, name='Softmax', ctx=None):
        self.z = z
        super(Softmax, self).__init__(params=['z'], name=name, ctx=ctx)

class Hardmax(ComputationNode):
    def __init__(self, z, name='Hardmax', ctx=None):
        self.z = z
        super(Hardmax, self).__init__(params=['z'], name=name, ctx=ctx)

class SquareError(ComputationNode):
    def __init__(self, aMatrix, anotherMatrix, name='SquareError', ctx=None):
        self.aMatrix = aMatrix
        self.anotherMatrix = anotherMatrix
        super(SquareError, self).__init__(params=['aMatrix', 'anotherMatrix'], name=name, ctx=ctx)

class SumColumnElements(ComputationNode):
    def __init__(self, z, name='SumColumnElements', ctx=None):
        self.z = z
        super(SumColumnElements, self).__init__(params=['z'], name=name, ctx=ctx)

class SumElements(ComputationNode):
    def __init__(self, matrix, name='SumElements', ctx=None):
        self.matrix = matrix
        super(SumElements, self).__init__(params=['matrix'], name=name, ctx=ctx)

class Tanh(ComputationNode):
    def __init__(self, z, name='Tanh', ctx=None):
        self.z = z
        super(Tanh, self).__init__(params=['z'], name=name, ctx=ctx)

class TimeReverse(ComputationNode):
    def __init__(self, vectorSequence, name='TimeReverse', ctx=None):
        self.vectorSequence = vectorSequence
        super(TimeReverse, self).__init__(params=['vectorSequence'], name=name, ctx=ctx)

class TransposeTimes(ComputationNode):
    def __init__(self, leftMatrix, rightMatrix, name='TransposeTimes', ctx=None):
        self.leftMatrix = leftMatrix
        self.rightMatrix = rightMatrix
        super(TransposeTimes, self).__init__(params=['leftMatrix', 'rightMatrix'], name=name, ctx=ctx)

Parameter = LearnableParameter
ColumnwiseCrossProduct = KhatriRaoProduct
ClassificationError = ErrorPrediction
Delay = PastValue
class Constant(Parameter):
    def __init__(self, value, rows=1, cols=1, name='Constant', ctx=None):
        super(Constant, self).__init__(rows, cols, learningRateMultiplier=0, init='fixedValue', value=value, name=name, ctx=ctx)
        self.params=['value', 'rows', 'cols']

class ReshapeDimension(NewReshape):
    def __init__(self, x, dim, tensorShape, name='ReshapeDimension', ctx=None):
        super(ReshapeDimension, self).__init__(x, tensorShape, beginDim=dim, endDim=dim + 1, name=name, ctx=ctx)
        self.params=['x', 'dim', 'tensorShape']

class FlattenDimensions(NewReshape):
    def __init__(self, x, dim, num, name='FlattenDimensions', ctx=None):
        super(FlattenDimensions, self).__init__(x, 0, beginDim=dim, endDim=dim + num, name=name, ctx=ctx)
        self.params=['x', 'dim', 'num']

class SplitDimension(ReshapeDimension):
    def __init__(self, x, dim, N, name='SplitDimension', ctx=None):
        super(SplitDimension, self).__init__(x, dim, '<not yet supported>', name=name, ctx=ctx)
        self.params=['x', 'dim', 'N']

class Transpose(TransposeDimensions):
    def __init__(self, x, name='Transpose', ctx=None):
        super(Transpose, self).__init__(x, 1, 2, name=name, ctx=ctx)
        self.params=['x']

